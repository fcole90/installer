"""
Stub file for Gtk. Autogenerated with gi-stubgen.
"""

import typing as _T  # noqa
from enum import Enum

from gi.repository import GLib, GObject, Atk, GModule, Gio, GdkPixbuf, HarfBuzz, cairo, Pango, Gdk, xlib

BINARY_AGE = 2433
"""
Like gtk_get_binary_age(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

INPUT_ERROR = -1
"""
Constant to return from a signal handler for the #GtkSpinButton::input
signal in case of conversion failure.
"""

INTERFACE_AGE = 29
"""
Like gtk_get_interface_age(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

LEVEL_BAR_OFFSET_FULL = "full"
"""
The name used for the stock full offset included by #GtkLevelBar.
"""

LEVEL_BAR_OFFSET_HIGH = "high"
"""
The name used for the stock high offset included by #GtkLevelBar.
"""

LEVEL_BAR_OFFSET_LOW = "low"
"""
The name used for the stock low offset included by #GtkLevelBar.
"""

MAJOR_VERSION = 3
"""
Like gtk_get_major_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

MAX_COMPOSE_LEN = 7
"""
The maximum length of sequences in compose tables.
"""

MICRO_VERSION = 33
"""
Like gtk_get_micro_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

MINOR_VERSION = 24
"""
Like gtk_get_minor_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

PAPER_NAME_A3 = "iso_a3"
"""
Name for the A3 paper size.
"""

PAPER_NAME_A4 = "iso_a4"
"""
Name for the A4 paper size.
"""

PAPER_NAME_A5 = "iso_a5"
"""
Name for the A5 paper size.
"""

PAPER_NAME_B5 = "iso_b5"
"""
Name for the B5 paper size.
"""

PAPER_NAME_EXECUTIVE = "na_executive"
"""
Name for the Executive paper size.
"""

PAPER_NAME_LEGAL = "na_legal"
"""
Name for the Legal paper size.
"""

PAPER_NAME_LETTER = "na_letter"
"""
Name for the Letter paper size.
"""

PATH_PRIO_MASK = 15

PRINT_SETTINGS_COLLATE = "collate"

PRINT_SETTINGS_DEFAULT_SOURCE = "default-source"

PRINT_SETTINGS_DITHER = "dither"

PRINT_SETTINGS_DUPLEX = "duplex"

PRINT_SETTINGS_FINISHINGS = "finishings"

PRINT_SETTINGS_MEDIA_TYPE = "media-type"

PRINT_SETTINGS_NUMBER_UP = "number-up"

PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout"

PRINT_SETTINGS_N_COPIES = "n-copies"

PRINT_SETTINGS_ORIENTATION = "orientation"

PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename"
"""
The key used by the “Print to file” printer to store the file
name of the output without the path to the directory and the
file extension.
"""

PRINT_SETTINGS_OUTPUT_BIN = "output-bin"

PRINT_SETTINGS_OUTPUT_DIR = "output-dir"
"""
The key used by the “Print to file” printer to store the
directory to which the output should be written.
"""

PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format"
"""
The key used by the “Print to file” printer to store the format
of the output. The supported values are “PS” and “PDF”.
"""

PRINT_SETTINGS_OUTPUT_URI = "output-uri"
"""
The key used by the “Print to file” printer to store the URI
to which the output should be written. GTK+ itself supports
only “file://” URIs.
"""

PRINT_SETTINGS_PAGE_RANGES = "page-ranges"

PRINT_SETTINGS_PAGE_SET = "page-set"

PRINT_SETTINGS_PAPER_FORMAT = "paper-format"

PRINT_SETTINGS_PAPER_HEIGHT = "paper-height"

PRINT_SETTINGS_PAPER_WIDTH = "paper-width"

PRINT_SETTINGS_PRINTER = "printer"

PRINT_SETTINGS_PRINTER_LPI = "printer-lpi"

PRINT_SETTINGS_PRINT_PAGES = "print-pages"

PRINT_SETTINGS_QUALITY = "quality"

PRINT_SETTINGS_RESOLUTION = "resolution"

PRINT_SETTINGS_RESOLUTION_X = "resolution-x"

PRINT_SETTINGS_RESOLUTION_Y = "resolution-y"

PRINT_SETTINGS_REVERSE = "reverse"

PRINT_SETTINGS_SCALE = "scale"

PRINT_SETTINGS_USE_COLOR = "use-color"

PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra"

PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version"

PRIORITY_RESIZE = 110
"""
Use this priority for functionality related to size allocation.

It is used internally by GTK+ to compute the sizes of widgets.
This priority is higher than %GDK_PRIORITY_REDRAW to avoid
resizing a widget which was just redrawn.
"""

STOCK_ABOUT = "gtk-about"
"""
The “About” item.
![](help-about.png)
"""

STOCK_ADD = "gtk-add"
"""
The “Add” item and icon.
"""

STOCK_APPLY = "gtk-apply"
"""
The “Apply” item and icon.
"""

STOCK_BOLD = "gtk-bold"
"""
The “Bold” item and icon.
"""

STOCK_CANCEL = "gtk-cancel"
"""
The “Cancel” item and icon.
"""

STOCK_CAPS_LOCK_WARNING = "gtk-caps-lock-warning"
"""
The “Caps Lock Warning” icon.
"""

STOCK_CDROM = "gtk-cdrom"
"""
The “CD-Rom” item and icon.
"""

STOCK_CLEAR = "gtk-clear"
"""
The “Clear” item and icon.
"""

STOCK_CLOSE = "gtk-close"
"""
The “Close” item and icon.
"""

STOCK_COLOR_PICKER = "gtk-color-picker"
"""
The “Color Picker” item and icon.
"""

STOCK_CONNECT = "gtk-connect"
"""
The “Connect” icon.
"""

STOCK_CONVERT = "gtk-convert"
"""
The “Convert” item and icon.
"""

STOCK_COPY = "gtk-copy"
"""
The “Copy” item and icon.
"""

STOCK_CUT = "gtk-cut"
"""
The “Cut” item and icon.
"""

STOCK_DELETE = "gtk-delete"
"""
The “Delete” item and icon.
"""

STOCK_DIALOG_AUTHENTICATION = "gtk-dialog-authentication"
"""
The “Authentication” item and icon.
"""

STOCK_DIALOG_ERROR = "gtk-dialog-error"
"""
The “Error” item and icon.
"""

STOCK_DIALOG_INFO = "gtk-dialog-info"
"""
The “Information” item and icon.
"""

STOCK_DIALOG_QUESTION = "gtk-dialog-question"
"""
The “Question” item and icon.
"""

STOCK_DIALOG_WARNING = "gtk-dialog-warning"
"""
The “Warning” item and icon.
"""

STOCK_DIRECTORY = "gtk-directory"
"""
The “Directory” icon.
"""

STOCK_DISCARD = "gtk-discard"
"""
The “Discard” item.
"""

STOCK_DISCONNECT = "gtk-disconnect"
"""
The “Disconnect” icon.
"""

STOCK_DND = "gtk-dnd"
"""
The “Drag-And-Drop” icon.
"""

STOCK_DND_MULTIPLE = "gtk-dnd-multiple"
"""
The “Drag-And-Drop multiple” icon.
"""

STOCK_EDIT = "gtk-edit"
"""
The “Edit” item and icon.
"""

STOCK_EXECUTE = "gtk-execute"
"""
The “Execute” item and icon.
"""

STOCK_FILE = "gtk-file"
"""
The “File” item and icon.

Since 3.0, this item has a label, before it only had an icon.
"""

STOCK_FIND = "gtk-find"
"""
The “Find” item and icon.
"""

STOCK_FIND_AND_REPLACE = "gtk-find-and-replace"
"""
The “Find and Replace” item and icon.
"""

STOCK_FLOPPY = "gtk-floppy"
"""
The “Floppy” item and icon.
"""

STOCK_FULLSCREEN = "gtk-fullscreen"
"""
The “Fullscreen” item and icon.
"""

STOCK_GOTO_BOTTOM = "gtk-goto-bottom"
"""
The “Bottom” item and icon.
"""

STOCK_GOTO_FIRST = "gtk-goto-first"
"""
The “First” item and icon. The icon has an RTL variant.
"""

STOCK_GOTO_LAST = "gtk-goto-last"
"""
The “Last” item and icon. The icon has an RTL variant.
"""

STOCK_GOTO_TOP = "gtk-goto-top"
"""
The “Top” item and icon.
"""

STOCK_GO_BACK = "gtk-go-back"
"""
The “Back” item and icon. The icon has an RTL variant.
"""

STOCK_GO_DOWN = "gtk-go-down"
"""
The “Down” item and icon.
"""

STOCK_GO_FORWARD = "gtk-go-forward"
"""
The “Forward” item and icon. The icon has an RTL variant.
"""

STOCK_GO_UP = "gtk-go-up"
"""
The “Up” item and icon.
"""

STOCK_HARDDISK = "gtk-harddisk"
"""
The “Harddisk” item and icon.
"""

STOCK_HELP = "gtk-help"
"""
The “Help” item and icon.
"""

STOCK_HOME = "gtk-home"
"""
The “Home” item and icon.
"""

STOCK_INDENT = "gtk-indent"
"""
The “Indent” item and icon. The icon has an RTL variant.
"""

STOCK_INDEX = "gtk-index"
"""
The “Index” item and icon.
"""

STOCK_INFO = "gtk-info"
"""
The “Info” item and icon.
"""

STOCK_ITALIC = "gtk-italic"
"""
The “Italic” item and icon.
"""

STOCK_JUMP_TO = "gtk-jump-to"
"""
The “Jump to” item and icon. The icon has an RTL variant.
"""

STOCK_JUSTIFY_CENTER = "gtk-justify-center"
"""
The “Center” item and icon.
"""

STOCK_JUSTIFY_FILL = "gtk-justify-fill"
"""
The “Fill” item and icon.
"""

STOCK_JUSTIFY_LEFT = "gtk-justify-left"
"""
The “Left” item and icon.
"""

STOCK_JUSTIFY_RIGHT = "gtk-justify-right"
"""
The “Right” item and icon.
"""

STOCK_LEAVE_FULLSCREEN = "gtk-leave-fullscreen"
"""
The “Leave Fullscreen” item and icon.
"""

STOCK_MEDIA_FORWARD = "gtk-media-forward"
"""
The “Media Forward” item and icon. The icon has an RTL variant.
"""

STOCK_MEDIA_NEXT = "gtk-media-next"
"""
The “Media Next” item and icon. The icon has an RTL variant.
"""

STOCK_MEDIA_PAUSE = "gtk-media-pause"
"""
The “Media Pause” item and icon.
"""

STOCK_MEDIA_PLAY = "gtk-media-play"
"""
The “Media Play” item and icon. The icon has an RTL variant.
"""

STOCK_MEDIA_PREVIOUS = "gtk-media-previous"
"""
The “Media Previous” item and icon. The icon has an RTL variant.
"""

STOCK_MEDIA_RECORD = "gtk-media-record"
"""
The “Media Record” item and icon.
"""

STOCK_MEDIA_REWIND = "gtk-media-rewind"
"""
The “Media Rewind” item and icon. The icon has an RTL variant.
"""

STOCK_MEDIA_STOP = "gtk-media-stop"
"""
The “Media Stop” item and icon.
"""

STOCK_MISSING_IMAGE = "gtk-missing-image"
"""
The “Missing image” icon.
"""

STOCK_NETWORK = "gtk-network"
"""
The “Network” item and icon.
"""

STOCK_NEW = "gtk-new"
"""
The “New” item and icon.
"""

STOCK_NO = "gtk-no"
"""
The “No” item and icon.
"""

STOCK_OK = "gtk-ok"
"""
The “OK” item and icon.
"""

STOCK_OPEN = "gtk-open"
"""
The “Open” item and icon.
"""

STOCK_ORIENTATION_LANDSCAPE = "gtk-orientation-landscape"
"""
The “Landscape Orientation” item and icon.
"""

STOCK_ORIENTATION_PORTRAIT = "gtk-orientation-portrait"
"""
The “Portrait Orientation” item and icon.
"""

STOCK_ORIENTATION_REVERSE_LANDSCAPE = "gtk-orientation-reverse-landscape"
"""
The “Reverse Landscape Orientation” item and icon.
"""

STOCK_ORIENTATION_REVERSE_PORTRAIT = "gtk-orientation-reverse-portrait"
"""
The “Reverse Portrait Orientation” item and icon.
"""

STOCK_PAGE_SETUP = "gtk-page-setup"
"""
The “Page Setup” item and icon.
"""

STOCK_PASTE = "gtk-paste"
"""
The “Paste” item and icon.
"""

STOCK_PREFERENCES = "gtk-preferences"
"""
The “Preferences” item and icon.
"""

STOCK_PRINT = "gtk-print"
"""
The “Print” item and icon.
"""

STOCK_PRINT_ERROR = "gtk-print-error"
"""
The “Print Error” icon.
"""

STOCK_PRINT_PAUSED = "gtk-print-paused"
"""
The “Print Paused” icon.
"""

STOCK_PRINT_PREVIEW = "gtk-print-preview"
"""
The “Print Preview” item and icon.
"""

STOCK_PRINT_REPORT = "gtk-print-report"
"""
The “Print Report” icon.
"""

STOCK_PRINT_WARNING = "gtk-print-warning"
"""
The “Print Warning” icon.
"""

STOCK_PROPERTIES = "gtk-properties"
"""
The “Properties” item and icon.
"""

STOCK_QUIT = "gtk-quit"
"""
The “Quit” item and icon.
"""

STOCK_REDO = "gtk-redo"
"""
The “Redo” item and icon. The icon has an RTL variant.
"""

STOCK_REFRESH = "gtk-refresh"
"""
The “Refresh” item and icon.
"""

STOCK_REMOVE = "gtk-remove"
"""
The “Remove” item and icon.
"""

STOCK_REVERT_TO_SAVED = "gtk-revert-to-saved"
"""
The “Revert” item and icon. The icon has an RTL variant.
"""

STOCK_SAVE = "gtk-save"
"""
The “Save” item and icon.
"""

STOCK_SAVE_AS = "gtk-save-as"
"""
The “Save As” item and icon.
"""

STOCK_SELECT_ALL = "gtk-select-all"
"""
The “Select All” item and icon.
"""

STOCK_SELECT_COLOR = "gtk-select-color"
"""
The “Color” item and icon.
"""

STOCK_SELECT_FONT = "gtk-select-font"
"""
The “Font” item and icon.
"""

STOCK_SORT_ASCENDING = "gtk-sort-ascending"
"""
The “Ascending” item and icon.
"""

STOCK_SORT_DESCENDING = "gtk-sort-descending"
"""
The “Descending” item and icon.
"""

STOCK_SPELL_CHECK = "gtk-spell-check"
"""
The “Spell Check” item and icon.
"""

STOCK_STOP = "gtk-stop"
"""
The “Stop” item and icon.
"""

STOCK_STRIKETHROUGH = "gtk-strikethrough"
"""
The “Strikethrough” item and icon.
"""

STOCK_UNDELETE = "gtk-undelete"
"""
The “Undelete” item and icon. The icon has an RTL variant.
"""

STOCK_UNDERLINE = "gtk-underline"
"""
The “Underline” item and icon.
"""

STOCK_UNDO = "gtk-undo"
"""
The “Undo” item and icon. The icon has an RTL variant.
"""

STOCK_UNINDENT = "gtk-unindent"
"""
The “Unindent” item and icon. The icon has an RTL variant.
"""

STOCK_YES = "gtk-yes"
"""
The “Yes” item and icon.
"""

STOCK_ZOOM_100 = "gtk-zoom-100"
"""
The “Zoom 100%” item and icon.
"""

STOCK_ZOOM_FIT = "gtk-zoom-fit"
"""
The “Zoom to Fit” item and icon.
"""

STOCK_ZOOM_IN = "gtk-zoom-in"
"""
The “Zoom In” item and icon.
"""

STOCK_ZOOM_OUT = "gtk-zoom-out"
"""
The “Zoom Out” item and icon.
"""

STYLE_CLASS_ACCELERATOR = "accelerator"
"""
A CSS class to match an accelerator.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_ARROW = "arrow"
"""
A CSS class used when rendering an arrow element.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_BACKGROUND = "background"
"""
A CSS class to match the window background.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_BOTTOM = "bottom"
"""
A CSS class to indicate an area at the bottom of a widget.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_BUTTON = "button"
"""
A CSS class to match buttons.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_CALENDAR = "calendar"
"""
A CSS class to match calendars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_CELL = "cell"
"""
A CSS class to match content rendered in cell views.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_CHECK = "check"
"""
A CSS class to match check boxes.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_COMBOBOX_ENTRY = "combobox-entry"
"""
A CSS class to match combobox entries.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_CONTEXT_MENU = "context-menu"
"""
A CSS class to match context menus.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_CSD = "csd"
"""
A CSS class that gets added to windows which have client-side decorations.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_CURSOR_HANDLE = "cursor-handle"
"""
A CSS class used when rendering a drag handle for
text selection.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_DEFAULT = "default"
"""
A CSS class to match the default widget.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_DESTRUCTIVE_ACTION = "destructive-action"
"""
A CSS class used when an action (usually a button) is
one that is expected to remove or destroy something visible
to the user.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_DIM_LABEL = "dim-label"
"""
A CSS class to match dimmed labels.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_DND = "dnd"
"""
A CSS class for a drag-and-drop indicator.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_DOCK = "dock"
"""
A CSS class defining a dock area.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_ENTRY = "entry"
"""
A CSS class to match text entries.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_ERROR = "error"
"""
A CSS class for an area displaying an error message,
such as those in infobars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_EXPANDER = "expander"
"""
A CSS class defining an expander, such as those in treeviews.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_FLAT = "flat"
"""
A CSS class that is added when widgets that usually have
a frame or border (like buttons or entries) should appear
without it.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_FRAME = "frame"
"""
A CSS class defining a frame delimiting content, such as
#GtkFrame or the scrolled window frame around the
scrollable area.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_GRIP = "grip"
"""
A CSS class defining a resize grip.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_HEADER = "header"
"""
A CSS class to match a header element.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_HIGHLIGHT = "highlight"
"""
A CSS class defining a highlighted area, such as headings in
assistants and calendars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_HORIZONTAL = "horizontal"
"""
A CSS class for horizontally layered widgets.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_IMAGE = "image"
"""
A CSS class defining an image, such as the icon in an entry.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_INFO = "info"
"""
A CSS class for an area displaying an informational message,
such as those in infobars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_INLINE_TOOLBAR = "inline-toolbar"
"""
A CSS class to match inline toolbars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_INSERTION_CURSOR = "insertion-cursor"
"""
A CSS class used when rendering a drag handle for
the insertion cursor position.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_LABEL = "label"
"""
A CSS class to match labels.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_LEFT = "left"
"""
A CSS class to indicate an area at the left of a widget.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_LEVEL_BAR = "level-bar"
"""
A CSS class used when rendering a level indicator, such
as a battery charge level, or a password strength.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_LINKED = "linked"
"""
A CSS class to match a linked area, such as a box containing buttons
belonging to the same control.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_LIST = "list"
"""
A CSS class to match lists.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_LIST_ROW = "list-row"
"""
A CSS class to match list rows.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_MARK = "mark"
"""
A CSS class defining marks in a widget, such as in scales.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_MENU = "menu"
"""
A CSS class to match menus.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_MENUBAR = "menubar"
"""
A CSS class to menubars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_MENUITEM = "menuitem"
"""
A CSS class to match menu items.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_MESSAGE_DIALOG = "message-dialog"
"""
A CSS class that is added to message dialogs.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_MONOSPACE = "monospace"
"""
A CSS class that is added to text view that should use
a monospace font.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_NEEDS_ATTENTION = "needs-attention"
"""
A CSS class used when an element needs the user attention,
for instance a button in a stack switcher corresponding to
a hidden page that changed state.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_NOTEBOOK = "notebook"
"""
A CSS class defining a notebook.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_OSD = "osd"
"""
A CSS class used when rendering an OSD (On Screen Display) element,
on top of another container.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_OVERSHOOT = "overshoot"
"""
A CSS class that is added on the visual hints that happen
when scrolling is attempted past the limits of a scrollable
area.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_PANE_SEPARATOR = "pane-separator"
"""
A CSS class for a pane separator, such as those in #GtkPaned.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_PAPER = "paper"
"""
A CSS class that is added to areas that should look like paper.

This is used in print previews and themes are encouraged to
style it as black text on white background.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_POPOVER = "popover"
"""
A CSS class that matches popovers.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_POPUP = "popup"
"""
A CSS class that is added to the toplevel windows used for menus.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_PRIMARY_TOOLBAR = "primary-toolbar"
"""
A CSS class to match primary toolbars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_PROGRESSBAR = "progressbar"
"""
A CSS class to use when rendering activity as a progressbar.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_PULSE = "pulse"
"""
A CSS class to use when rendering a pulse in an indeterminate progress bar.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_QUESTION = "question"
"""
A CSS class for an area displaying a question to the user,
such as those in infobars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_RADIO = "radio"
"""
A CSS class to match radio buttons.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_RAISED = "raised"
"""
A CSS class to match a raised control, such as a raised
button on a toolbar.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_READ_ONLY = "read-only"
"""
A CSS class used to indicate a read-only state.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_RIGHT = "right"
"""
A CSS class to indicate an area at the right of a widget.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_RUBBERBAND = "rubberband"
"""
A CSS class to match the rubberband selection rectangle.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SCALE = "scale"
"""
A CSS class to match scale widgets.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = "scale-has-marks-above"
"""
A CSS class to match scale widgets with marks attached,
all the marks are above for horizontal #GtkScale.
left for vertical #GtkScale.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SCALE_HAS_MARKS_BELOW = "scale-has-marks-below"
"""
A CSS class to match scale widgets with marks attached,
all the marks are below for horizontal #GtkScale,
right for vertical #GtkScale.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SCROLLBAR = "scrollbar"
"""
A CSS class to match scrollbars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SCROLLBARS_JUNCTION = "scrollbars-junction"
"""
A CSS class to match the junction area between an horizontal
and vertical scrollbar, when they’re both shown.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SEPARATOR = "separator"
"""
A CSS class for a separator.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SIDEBAR = "sidebar"
"""
A CSS class defining a sidebar, such as the left side in
a file chooser.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SLIDER = "slider"
"""
A CSS class to match sliders.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SPINBUTTON = "spinbutton"
"""
A CSS class defining an spinbutton.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SPINNER = "spinner"
"""
A CSS class to use when rendering activity as a “spinner”.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_STATUSBAR = "statusbar"
"""
A CSS class to match statusbars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SUBTITLE = "subtitle"
"""
A CSS class used for the subtitle label in a titlebar in
a toplevel window.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_SUGGESTED_ACTION = "suggested-action"
"""
A CSS class used when an action (usually a button) is the
primary suggested action in a specific context.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_TITLE = "title"
"""
A CSS class used for the title label in a titlebar in
a toplevel window.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_TITLEBAR = "titlebar"
"""
A CSS class used when rendering a titlebar in a toplevel window.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_TOOLBAR = "toolbar"
"""
A CSS class to match toolbars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_TOOLTIP = "tooltip"
"""
A CSS class to match tooltip windows.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_TOP = "top"
"""
A CSS class to indicate an area at the top of a widget.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_TOUCH_SELECTION = "touch-selection"
"""
A CSS class for touch selection popups on entries
and text views.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_TROUGH = "trough"
"""
A CSS class to match troughs, as in scrollbars and progressbars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_UNDERSHOOT = "undershoot"
"""
A CSS class that is added on the visual hints that happen
where content is 'scrolled off' and can be made visible
by scrolling.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_VERTICAL = "vertical"
"""
A CSS class for vertically layered widgets.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_VIEW = "view"
"""
A CSS class defining a view, such as iconviews or treeviews.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_WARNING = "warning"
"""
A CSS class for an area displaying a warning message,
such as those in infobars.

Refer to individual widget documentation for used style classes.
"""

STYLE_CLASS_WIDE = "wide"
"""
A CSS class to indicate that a UI element should be 'wide'.
Used by #GtkPaned.

Refer to individual widget documentation for used style classes.
"""

STYLE_PROPERTY_BACKGROUND_COLOR = "background-color"
"""
A property holding the background color of rendered elements as a #GdkRGBA.
"""

STYLE_PROPERTY_BACKGROUND_IMAGE = "background-image"
"""
A property holding the element’s background as a #cairo_pattern_t.
"""

STYLE_PROPERTY_BORDER_COLOR = "border-color"
"""
A property holding the element’s border color as a #GdkRGBA.
"""

STYLE_PROPERTY_BORDER_RADIUS = "border-radius"
"""
A property holding the rendered element’s border radius in pixels as a #gint.
"""

STYLE_PROPERTY_BORDER_STYLE = "border-style"
"""
A property holding the element’s border style as a #GtkBorderStyle.
"""

STYLE_PROPERTY_BORDER_WIDTH = "border-width"
"""
A property holding the rendered element’s border width in pixels as
a #GtkBorder. The border is the intermediary spacing property of the
padding/border/margin series.

gtk_render_frame() uses this property to find out the frame line width,
so #GtkWidgets rendering frames may need to add up this padding when
requesting size
"""

STYLE_PROPERTY_COLOR = "color"
"""
A property holding the foreground color of rendered elements as a #GdkRGBA.
"""

STYLE_PROPERTY_FONT = "font"
"""
A property holding the font properties used when rendering text
as a #PangoFontDescription.
"""

STYLE_PROPERTY_MARGIN = "margin"
"""
A property holding the rendered element’s margin as a #GtkBorder. The
margin is defined as the spacing between the border of the element
and its surrounding elements. It is external to #GtkWidget's
size allocations, and the most external spacing property of the
padding/border/margin series.
"""

STYLE_PROPERTY_PADDING = "padding"
"""
A property holding the rendered element’s padding as a #GtkBorder. The
padding is defined as the spacing between the inner part of the element border
and its child. It’s the innermost spacing property of the padding/border/margin
series.
"""

STYLE_PROVIDER_PRIORITY_APPLICATION = 600
"""
A priority that can be used when adding a #GtkStyleProvider
for application-specific style information.
"""

STYLE_PROVIDER_PRIORITY_FALLBACK = 1
"""
The priority used for default style information
that is used in the absence of themes.

Note that this is not very useful for providing default
styling for custom style classes - themes are likely to
override styling provided at this priority with
catch-all `* {...}` rules.
"""

STYLE_PROVIDER_PRIORITY_SETTINGS = 400
"""
The priority used for style information provided
via #GtkSettings.

This priority is higher than #GTK_STYLE_PROVIDER_PRIORITY_THEME
to let settings override themes.
"""

STYLE_PROVIDER_PRIORITY_THEME = 200
"""
The priority used for style information provided
by themes.
"""

STYLE_PROVIDER_PRIORITY_USER = 800
"""
The priority used for the style information from
`XDG_CONFIG_HOME/gtk-3.0/gtk.css`.

You should not use priorities higher than this, to
give the user the last word.
"""

STYLE_REGION_COLUMN = "column"
"""
A widget region name to define a treeview column.
"""

STYLE_REGION_COLUMN_HEADER = "column-header"
"""
A widget region name to define a treeview column header.
"""

STYLE_REGION_ROW = "row"
"""
A widget region name to define a treeview row.
"""

STYLE_REGION_TAB = "tab"
"""
A widget region name to define a notebook tab.
"""

TEXT_VIEW_PRIORITY_VALIDATE = 125
"""
The priority at which the text view validates onscreen lines
in an idle job in the background.
"""

TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1
"""
The GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID can be used to make a
#GtkTreeSortable use the default sort function.

See also gtk_tree_sortable_set_sort_column_id()
"""

TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2
"""
The GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID can be used to make a
#GtkTreeSortable use no sorting.

See also gtk_tree_sortable_set_sort_column_id()
"""


class Align(Enum):
    """
    Controls how a widget deals with extra space in a single (x or y)
    dimension.

    Alignment only matters if the widget receives a “too large” allocation,
    for example if you packed the widget with the #GtkWidget:expand
    flag inside a #GtkBox, then the widget might get extra space.  If
    you have for example a 16x16 icon inside a 32x32 space, the icon
    could be scaled and stretched, it could be centered, or it could be
    positioned to one side of the space.

    Note that in horizontal context @GTK_ALIGN_START and @GTK_ALIGN_END
    are interpreted relative to text direction.

    GTK_ALIGN_BASELINE support for it is optional for containers and widgets, and
    it is only supported for vertical alignment.  When its not supported by
    a child or a container it is treated as @GTK_ALIGN_FILL.
    """
    FILL = 0
    START = 1
    END = 2
    CENTER = 3
    BASELINE = 4

class ArrowPlacement(Enum):
    """
    Used to specify the placement of scroll arrows in scrolling menus.
    """
    BOTH = 0
    START = 1
    END = 2

class ArrowType(Enum):
    """
    Used to indicate the direction in which an arrow should point.
    """
    UP = 0
    DOWN = 1
    LEFT = 2
    RIGHT = 3
    NONE = 4

class AssistantPageType(Enum):
    """
    An enum for determining the page role inside the #GtkAssistant. It's
    used to handle buttons sensitivity and visibility.

    Note that an assistant needs to end its page flow with a page of type
    %GTK_ASSISTANT_PAGE_CONFIRM, %GTK_ASSISTANT_PAGE_SUMMARY or
    %GTK_ASSISTANT_PAGE_PROGRESS to be correct.

    The Cancel button will only be shown if the page isn’t “committed”.
    See gtk_assistant_commit() for details.
    """
    CONTENT = 0
    INTRO = 1
    CONFIRM = 2
    SUMMARY = 3
    PROGRESS = 4
    CUSTOM = 5

class BaselinePosition(Enum):
    """
    Whenever a container has some form of natural row it may align
    children in that row along a common typographical baseline. If
    the amount of verical space in the row is taller than the total
    requested height of the baseline-aligned children then it can use a
    #GtkBaselinePosition to select where to put the baseline inside the
    extra availible space.
    """
    TOP = 0
    CENTER = 1
    BOTTOM = 2

class BorderStyle(Enum):
    """
    Describes how the border of a UI element should be rendered.
    """
    NONE = 0
    SOLID = 1
    INSET = 2
    OUTSET = 3
    HIDDEN = 4
    DOTTED = 5
    DASHED = 6
    DOUBLE = 7
    GROOVE = 8
    RIDGE = 9

class ButtonBoxStyle(Enum):
    """
    Used to dictate the style that a #GtkButtonBox uses to layout the buttons it
    contains.
    """
    SPREAD = 1
    EDGE = 2
    START = 3
    END = 4
    CENTER = 5
    EXPAND = 6

class ButtonRole(Enum):
    """
    The role specifies the desired appearance of a #GtkModelButton.
    """
    NORMAL = 0
    CHECK = 1
    RADIO = 2

class ButtonsType(Enum):
    """
    Prebuilt sets of buttons for the dialog. If
    none of these choices are appropriate, simply use %GTK_BUTTONS_NONE
    then call gtk_dialog_add_buttons().

    > Please note that %GTK_BUTTONS_OK, %GTK_BUTTONS_YES_NO
    > and %GTK_BUTTONS_OK_CANCEL are discouraged by the
    > [GNOME Human Interface Guidelines](http://library.gnome.org/devel/hig-book/stable/).
    """
    NONE = 0
    OK = 1
    CLOSE = 2
    CANCEL = 3
    YES_NO = 4
    OK_CANCEL = 5

class CellRendererAccelMode(Enum):
    """
    Determines if the edited accelerators are GTK+ accelerators. If
    they are, consumed modifiers are suppressed, only accelerators
    accepted by GTK+ are allowed, and the accelerators are rendered
    in the same way as they are in menus.
    """
    GTK = 0
    OTHER = 1
    MODIFIER_TAP = 2

class CellRendererMode(Enum):
    """
    Identifies how the user can interact with a particular cell.
    """
    INERT = 0
    ACTIVATABLE = 1
    EDITABLE = 2

class CornerType(Enum):
    """
    Specifies which corner a child widget should be placed in when packed into
    a #GtkScrolledWindow. This is effectively the opposite of where the scroll
    bars are placed.
    """
    TOP_LEFT = 0
    BOTTOM_LEFT = 1
    TOP_RIGHT = 2
    BOTTOM_RIGHT = 3

class CssSectionType(Enum):
    """
    The different types of sections indicate parts of a CSS document as
    parsed by GTK’s CSS parser. They are oriented towards the
    [CSS Grammar](http://www.w3.org/TR/CSS21/grammar.html),
    but may contain extensions.

    More types might be added in the future as the parser incorporates
    more features.
    """
    DOCUMENT = 0
    IMPORT = 1
    COLOR_DEFINITION = 2
    BINDING_SET = 3
    RULESET = 4
    SELECTOR = 5
    DECLARATION = 6
    VALUE = 7
    KEYFRAMES = 8

class DeleteType(Enum):
    """
    See also: #GtkEntry::delete-from-cursor.
    """
    CHARS = 0
    WORD_ENDS = 1
    WORDS = 2
    DISPLAY_LINES = 3
    DISPLAY_LINE_ENDS = 4
    PARAGRAPH_ENDS = 5
    PARAGRAPHS = 6
    WHITESPACE = 7

class DirectionType(Enum):
    """
    Focus movement types.
    """
    TAB_FORWARD = 0
    TAB_BACKWARD = 1
    UP = 2
    DOWN = 3
    LEFT = 4
    RIGHT = 5

class DragResult(Enum):
    """
    Gives an indication why a drag operation failed.
    The value can by obtained by connecting to the
    #GtkWidget::drag-failed signal.
    """
    SUCCESS = 0
    NO_TARGET = 1
    USER_CANCELLED = 2
    TIMEOUT_EXPIRED = 3
    GRAB_BROKEN = 4
    ERROR = 5

class EntryIconPosition(Enum):
    """
    Specifies the side of the entry at which an icon is placed.
    """
    PRIMARY = 0
    SECONDARY = 1

class EventSequenceState(Enum):
    """
    Describes the state of a #GdkEventSequence in a #GtkGesture.
    """
    NONE = 0
    CLAIMED = 1
    DENIED = 2

class ExpanderStyle(Enum):
    """
    Used to specify the style of the expanders drawn by a #GtkTreeView.
    """
    COLLAPSED = 0
    SEMI_COLLAPSED = 1
    SEMI_EXPANDED = 2
    EXPANDED = 3

class FileChooserAction(Enum):
    """
    Describes whether a #GtkFileChooser is being used to open existing files
    or to save to a possibly new file.
    """
    OPEN = 0
    SAVE = 1
    SELECT_FOLDER = 2
    CREATE_FOLDER = 3

class FileChooserConfirmation(Enum):
    """
    Used as a return value of handlers for the
    #GtkFileChooser::confirm-overwrite signal of a #GtkFileChooser. This
    value determines whether the file chooser will present the stock
    confirmation dialog, accept the user’s choice of a filename, or
    let the user choose another filename.
    """
    CONFIRM = 0
    ACCEPT_FILENAME = 1
    SELECT_AGAIN = 2

class IMPreeditStyle(Enum):
    """
    Style for input method preedit. See also
    #GtkSettings:gtk-im-preedit-style
    """
    NOTHING = 0
    CALLBACK = 1
    NONE = 2

class IMStatusStyle(Enum):
    """
    Style for input method status. See also
    #GtkSettings:gtk-im-status-style
    """
    NOTHING = 0
    CALLBACK = 1
    NONE = 2

class IconSize(Enum):
    """
    Built-in stock icon sizes.
    """
    INVALID = 0
    MENU = 1
    SMALL_TOOLBAR = 2
    LARGE_TOOLBAR = 3
    BUTTON = 4
    DND = 5
    DIALOG = 6

class IconViewDropPosition(Enum):
    """
    An enum for determining where a dropped item goes.
    """
    NO_DROP = 0
    DROP_INTO = 1
    DROP_LEFT = 2
    DROP_RIGHT = 3
    DROP_ABOVE = 4
    DROP_BELOW = 5

class ImageType(Enum):
    """
    Describes the image data representation used by a #GtkImage. If you
    want to get the image from the widget, you can only get the
    currently-stored representation. e.g.  if the
    gtk_image_get_storage_type() returns #GTK_IMAGE_PIXBUF, then you can
    call gtk_image_get_pixbuf() but not gtk_image_get_stock().  For empty
    images, you can request any storage type (call any of the "get"
    functions), but they will all return %NULL values.
    """
    EMPTY = 0
    PIXBUF = 1
    STOCK = 2
    ICON_SET = 3
    ANIMATION = 4
    ICON_NAME = 5
    GICON = 6
    SURFACE = 7

class InputPurpose(Enum):
    """
    Describes primary purpose of the input widget. This information is
    useful for on-screen keyboards and similar input methods to decide
    which keys should be presented to the user.

    Note that the purpose is not meant to impose a totally strict rule
    about allowed characters, and does not replace input validation.
    It is fine for an on-screen keyboard to let the user override the
    character set restriction that is expressed by the purpose. The
    application is expected to validate the entry contents, even if
    it specified a purpose.

    The difference between @GTK_INPUT_PURPOSE_DIGITS and
    @GTK_INPUT_PURPOSE_NUMBER is that the former accepts only digits
    while the latter also some punctuation (like commas or points, plus,
    minus) and “e” or “E” as in 3.14E+000.

    This enumeration may be extended in the future; input methods should
    interpret unknown values as “free form”.
    """
    FREE_FORM = 0
    ALPHA = 1
    DIGITS = 2
    NUMBER = 3
    PHONE = 4
    URL = 5
    EMAIL = 6
    NAME = 7
    PASSWORD = 8
    PIN = 9
    TERMINAL = 10

class Justification(Enum):
    """
    Used for justifying the text inside a #GtkLabel widget. (See also
    #GtkAlignment).
    """
    LEFT = 0
    RIGHT = 1
    CENTER = 2
    FILL = 3

class LevelBarMode(Enum):
    """
    Describes how #GtkLevelBar contents should be rendered.
    Note that this enumeration could be extended with additional modes
    in the future.
    """
    CONTINUOUS = 0
    DISCRETE = 1

class License(Enum):
    """
    The type of license for an application.

    This enumeration can be expanded at later date.
    """
    UNKNOWN = 0
    CUSTOM = 1
    GPL_2_0 = 2
    GPL_3_0 = 3
    LGPL_2_1 = 4
    LGPL_3_0 = 5
    BSD = 6
    MIT_X11 = 7
    ARTISTIC = 8
    GPL_2_0_ONLY = 9
    GPL_3_0_ONLY = 10
    LGPL_2_1_ONLY = 11
    LGPL_3_0_ONLY = 12
    AGPL_3_0 = 13
    AGPL_3_0_ONLY = 14
    BSD_3 = 15
    APACHE_2_0 = 16
    MPL_2_0 = 17

class MenuDirectionType(Enum):
    """
    An enumeration representing directional movements within a menu.
    """
    PARENT = 0
    CHILD = 1
    NEXT = 2
    PREV = 3

class MessageType(Enum):
    """
    The type of message being displayed in the dialog.
    """
    INFO = 0
    WARNING = 1
    QUESTION = 2
    ERROR = 3
    OTHER = 4

class MovementStep(Enum):
    LOGICAL_POSITIONS = 0
    VISUAL_POSITIONS = 1
    WORDS = 2
    DISPLAY_LINES = 3
    DISPLAY_LINE_ENDS = 4
    PARAGRAPHS = 5
    PARAGRAPH_ENDS = 6
    PAGES = 7
    BUFFER_ENDS = 8
    HORIZONTAL_PAGES = 9

class NotebookTab(Enum):
    FIRST = 0
    LAST = 1

class NumberUpLayout(Enum):
    """
    Used to determine the layout of pages on a sheet when printing
    multiple pages per sheet.
    """
    LRTB = 0
    LRBT = 1
    RLTB = 2
    RLBT = 3
    TBLR = 4
    TBRL = 5
    BTLR = 6
    BTRL = 7

class Orientation(Enum):
    """
    Represents the orientation of widgets and other objects which can be switched
    between horizontal and vertical orientation on the fly, like #GtkToolbar or
    #GtkGesturePan.
    """
    HORIZONTAL = 0
    VERTICAL = 1

class PackDirection(Enum):
    """
    Determines how widgets should be packed inside menubars
    and menuitems contained in menubars.
    """
    LTR = 0
    RTL = 1
    TTB = 2
    BTT = 3

class PackType(Enum):
    """
    Represents the packing location #GtkBox children. (See: #GtkVBox,
    #GtkHBox, and #GtkButtonBox).
    """
    START = 0
    END = 1

class PadActionType(Enum):
    """
    The type of a pad action.
    """
    BUTTON = 0
    RING = 1
    STRIP = 2

class PageOrientation(Enum):
    """
    See also gtk_print_settings_set_orientation().
    """
    PORTRAIT = 0
    LANDSCAPE = 1
    REVERSE_PORTRAIT = 2
    REVERSE_LANDSCAPE = 3

class PageSet(Enum):
    """
    See also gtk_print_job_set_page_set().
    """
    ALL = 0
    EVEN = 1
    ODD = 2

class PanDirection(Enum):
    """
    Describes the panning direction of a #GtkGesturePan
    """
    LEFT = 0
    RIGHT = 1
    UP = 2
    DOWN = 3

class PathPriorityType(Enum):
    """
    Priorities for path lookups.
    See also gtk_binding_set_add_path().
    """
    LOWEST = 0
    GTK = 4
    APPLICATION = 8
    THEME = 10
    RC = 12
    HIGHEST = 15

class PathType(Enum):
    """
    Widget path types.
    See also gtk_binding_set_add_path().
    """
    WIDGET = 0
    WIDGET_CLASS = 1
    CLASS = 2

class PolicyType(Enum):
    """
    Determines how the size should be computed to achieve the one of the
    visibility mode for the scrollbars.
    """
    ALWAYS = 0
    AUTOMATIC = 1
    NEVER = 2
    EXTERNAL = 3

class PopoverConstraint(Enum):
    """
    Describes constraints to positioning of popovers. More values
    may be added to this enumeration in the future.
    """
    NONE = 0
    WINDOW = 1

class PositionType(Enum):
    """
    Describes which edge of a widget a certain feature is positioned at, e.g. the
    tabs of a #GtkNotebook, the handle of a #GtkHandleBox or the label of a
    #GtkScale.
    """
    LEFT = 0
    RIGHT = 1
    TOP = 2
    BOTTOM = 3

class PrintDuplex(Enum):
    """
    See also gtk_print_settings_set_duplex().
    """
    SIMPLEX = 0
    HORIZONTAL = 1
    VERTICAL = 2

class PrintOperationAction(Enum):
    """
    The @action parameter to gtk_print_operation_run()
    determines what action the print operation should perform.
    """
    PRINT_DIALOG = 0
    PRINT = 1
    PREVIEW = 2
    EXPORT = 3

class PrintOperationResult(Enum):
    """
    A value of this type is returned by gtk_print_operation_run().
    """
    ERROR = 0
    APPLY = 1
    CANCEL = 2
    IN_PROGRESS = 3

class PrintPages(Enum):
    """
    See also gtk_print_job_set_pages()
    """
    ALL = 0
    CURRENT = 1
    RANGES = 2
    SELECTION = 3

class PrintQuality(Enum):
    """
    See also gtk_print_settings_set_quality().
    """
    LOW = 0
    NORMAL = 1
    HIGH = 2
    DRAFT = 3

class PrintStatus(Enum):
    """
    The status gives a rough indication of the completion of a running
    print operation.
    """
    INITIAL = 0
    PREPARING = 1
    GENERATING_DATA = 2
    SENDING_DATA = 3
    PENDING = 4
    PENDING_ISSUE = 5
    PRINTING = 6
    FINISHED = 7
    FINISHED_ABORTED = 8

class PropagationPhase(Enum):
    """
    Describes the stage at which events are fed into a #GtkEventController.
    """
    NONE = 0
    CAPTURE = 1
    BUBBLE = 2
    TARGET = 3

class RcTokenType(Enum):
    """
    The #GtkRcTokenType enumeration represents the tokens
    in the RC file. It is exposed so that theme engines
    can reuse these tokens when parsing the theme-engine
    specific portions of a RC file.
    """
    INVALID = 270
    INCLUDE = 271
    NORMAL = 272
    ACTIVE = 273
    PRELIGHT = 274
    SELECTED = 275
    INSENSITIVE = 276
    FG = 277
    BG = 278
    TEXT = 279
    BASE = 280
    XTHICKNESS = 281
    YTHICKNESS = 282
    FONT = 283
    FONTSET = 284
    FONT_NAME = 285
    BG_PIXMAP = 286
    PIXMAP_PATH = 287
    STYLE = 288
    BINDING = 289
    BIND = 290
    WIDGET = 291
    WIDGET_CLASS = 292
    CLASS = 293
    LOWEST = 294
    GTK = 295
    APPLICATION = 296
    THEME = 297
    RC = 298
    HIGHEST = 299
    ENGINE = 300
    MODULE_PATH = 301
    IM_MODULE_PATH = 302
    IM_MODULE_FILE = 303
    STOCK = 304
    LTR = 305
    RTL = 306
    COLOR = 307
    UNBIND = 308
    LAST = 309

class RecentSortType(Enum):
    """
    Used to specify the sorting method to be applyed to the recently
    used resource list.
    """
    NONE = 0
    MRU = 1
    LRU = 2
    CUSTOM = 3

class ReliefStyle(Enum):
    """
    Indicated the relief to be drawn around a #GtkButton.
    """
    NORMAL = 0
    HALF = 1
    NONE = 2

class ResizeMode(Enum):
    PARENT = 0
    QUEUE = 1
    IMMEDIATE = 2

class ResponseType(Enum):
    """
    Predefined values for use as response ids in gtk_dialog_add_button().
    All predefined values are negative; GTK+ leaves values of 0 or greater for
    application-defined response ids.
    """
    NONE = -1
    REJECT = -2
    ACCEPT = -3
    DELETE_EVENT = -4
    OK = -5
    CANCEL = -6
    CLOSE = -7
    YES = -8
    NO = -9
    APPLY = -10
    HELP = -11

class RevealerTransitionType(Enum):
    """
    These enumeration values describe the possible transitions
    when the child of a #GtkRevealer widget is shown or hidden.
    """
    NONE = 0
    CROSSFADE = 1
    SLIDE_RIGHT = 2
    SLIDE_LEFT = 3
    SLIDE_UP = 4
    SLIDE_DOWN = 5

class ScrollStep(Enum):
    STEPS = 0
    PAGES = 1
    ENDS = 2
    HORIZONTAL_STEPS = 3
    HORIZONTAL_PAGES = 4
    HORIZONTAL_ENDS = 5

class ScrollType(Enum):
    """
    Scrolling types.
    """
    NONE = 0
    JUMP = 1
    STEP_BACKWARD = 2
    STEP_FORWARD = 3
    PAGE_BACKWARD = 4
    PAGE_FORWARD = 5
    STEP_UP = 6
    STEP_DOWN = 7
    PAGE_UP = 8
    PAGE_DOWN = 9
    STEP_LEFT = 10
    STEP_RIGHT = 11
    PAGE_LEFT = 12
    PAGE_RIGHT = 13
    START = 14
    END = 15

class ScrollablePolicy(Enum):
    """
    Defines the policy to be used in a scrollable widget when updating
    the scrolled window adjustments in a given orientation.
    """
    MINIMUM = 0
    NATURAL = 1

class SelectionMode(Enum):
    """
    Used to control what selections users are allowed to make.
    """
    NONE = 0
    SINGLE = 1
    BROWSE = 2
    MULTIPLE = 3

class SensitivityType(Enum):
    """
    Determines how GTK+ handles the sensitivity of stepper arrows
    at the end of range widgets.
    """
    AUTO = 0
    ON = 1
    OFF = 2

class ShadowType(Enum):
    """
    Used to change the appearance of an outline typically provided by a #GtkFrame.

    Note that many themes do not differentiate the appearance of the
    various shadow types: Either their is no visible shadow (@GTK_SHADOW_NONE),
    or there is (any other value).
    """
    NONE = 0
    IN = 1
    OUT = 2
    ETCHED_IN = 3
    ETCHED_OUT = 4

class ShortcutType(Enum):
    """
    GtkShortcutType specifies the kind of shortcut that is being described.
    More values may be added to this enumeration over time.
    """
    ACCELERATOR = 0
    GESTURE_PINCH = 1
    GESTURE_STRETCH = 2
    GESTURE_ROTATE_CLOCKWISE = 3
    GESTURE_ROTATE_COUNTERCLOCKWISE = 4
    GESTURE_TWO_FINGER_SWIPE_LEFT = 5
    GESTURE_TWO_FINGER_SWIPE_RIGHT = 6
    GESTURE = 7

class SizeGroupMode(Enum):
    """
    The mode of the size group determines the directions in which the size
    group affects the requested sizes of its component widgets.
    """
    NONE = 0
    HORIZONTAL = 1
    VERTICAL = 2
    BOTH = 3

class SizeRequestMode(Enum):
    """
    Specifies a preference for height-for-width or
    width-for-height geometry management.
    """
    HEIGHT_FOR_WIDTH = 0
    WIDTH_FOR_HEIGHT = 1
    CONSTANT_SIZE = 2

class SortType(Enum):
    """
    Determines the direction of a sort.
    """
    ASCENDING = 0
    DESCENDING = 1

class SpinButtonUpdatePolicy(Enum):
    """
    The spin button update policy determines whether the spin button displays
    values even if they are outside the bounds of its adjustment.
    See gtk_spin_button_set_update_policy().
    """
    ALWAYS = 0
    IF_VALID = 1

class SpinType(Enum):
    """
    The values of the GtkSpinType enumeration are used to specify the
    change to make in gtk_spin_button_spin().
    """
    STEP_FORWARD = 0
    STEP_BACKWARD = 1
    PAGE_FORWARD = 2
    PAGE_BACKWARD = 3
    HOME = 4
    END = 5
    USER_DEFINED = 6

class StackTransitionType(Enum):
    """
    These enumeration values describe the possible transitions
    between pages in a #GtkStack widget.

    New values may be added to this enumeration over time.
    """
    NONE = 0
    CROSSFADE = 1
    SLIDE_RIGHT = 2
    SLIDE_LEFT = 3
    SLIDE_UP = 4
    SLIDE_DOWN = 5
    SLIDE_LEFT_RIGHT = 6
    SLIDE_UP_DOWN = 7
    OVER_UP = 8
    OVER_DOWN = 9
    OVER_LEFT = 10
    OVER_RIGHT = 11
    UNDER_UP = 12
    UNDER_DOWN = 13
    UNDER_LEFT = 14
    UNDER_RIGHT = 15
    OVER_UP_DOWN = 16
    OVER_DOWN_UP = 17
    OVER_LEFT_RIGHT = 18
    OVER_RIGHT_LEFT = 19

class StateType(Enum):
    """
    This type indicates the current state of a widget; the state determines how
    the widget is drawn. The #GtkStateType enumeration is also used to
    identify different colors in a #GtkStyle for drawing, so states can be
    used for subparts of a widget as well as entire widgets.
    """
    NORMAL = 0
    ACTIVE = 1
    PRELIGHT = 2
    SELECTED = 3
    INSENSITIVE = 4
    INCONSISTENT = 5
    FOCUSED = 6

class TextBufferTargetInfo(Enum):
    """
    These values are used as “info” for the targets contained in the
    lists returned by gtk_text_buffer_get_copy_target_list() and
    gtk_text_buffer_get_paste_target_list().

    The values counts down from `-1` to avoid clashes
    with application added drag destinations which usually start at 0.
    """
    BUFFER_CONTENTS = -1
    RICH_TEXT = -2
    TEXT = -3

class TextDirection(Enum):
    """
    Reading directions for text.
    """
    NONE = 0
    LTR = 1
    RTL = 2

class TextExtendSelection(Enum):
    """
    Granularity types that extend the text selection. Use the
    #GtkTextView::extend-selection signal to customize the selection.
    """
    WORD = 0
    LINE = 1

class TextViewLayer(Enum):
    """
    Used to reference the layers of #GtkTextView for the purpose of customized
    drawing with the ::draw_layer vfunc.
    """
    BELOW = 0
    ABOVE = 1
    BELOW_TEXT = 2
    ABOVE_TEXT = 3

class TextWindowType(Enum):
    """
    Used to reference the parts of #GtkTextView.
    """
    PRIVATE = 0
    WIDGET = 1
    TEXT = 2
    LEFT = 3
    RIGHT = 4
    TOP = 5
    BOTTOM = 6

class ToolbarSpaceStyle(Enum):
    """
    Whether spacers are vertical lines or just blank.
    """
    EMPTY = 0
    LINE = 1

class ToolbarStyle(Enum):
    """
    Used to customize the appearance of a #GtkToolbar. Note that
    setting the toolbar style overrides the user’s preferences
    for the default toolbar style.  Note that if the button has only
    a label set and GTK_TOOLBAR_ICONS is used, the label will be
    visible, and vice versa.
    """
    ICONS = 0
    TEXT = 1
    BOTH = 2
    BOTH_HORIZ = 3

class TreeViewColumnSizing(Enum):
    """
    The sizing method the column uses to determine its width.  Please note
    that @GTK_TREE_VIEW_COLUMN_AUTOSIZE are inefficient for large views, and
    can make columns appear choppy.
    """
    GROW_ONLY = 0
    AUTOSIZE = 1
    FIXED = 2

class TreeViewDropPosition(Enum):
    """
    An enum for determining where a dropped row goes.
    """
    BEFORE = 0
    AFTER = 1
    INTO_OR_BEFORE = 2
    INTO_OR_AFTER = 3

class TreeViewGridLines(Enum):
    """
    Used to indicate which grid lines to draw in a tree view.
    """
    NONE = 0
    HORIZONTAL = 1
    VERTICAL = 2
    BOTH = 3

class Unit(Enum):
    """
    See also gtk_print_settings_set_paper_width().
    """
    NONE = 0
    POINTS = 1
    INCH = 2
    MM = 3

class WidgetHelpType(Enum):
    """
    Kinds of widget-specific help. Used by the ::show-help signal.
    """
    TOOLTIP = 0
    WHATS_THIS = 1

class WindowPosition(Enum):
    """
    Window placement can be influenced using this enumeration. Note that
    using #GTK_WIN_POS_CENTER_ALWAYS is almost always a bad idea.
    It won’t necessarily work well with all window managers or on all windowing systems.
    """
    NONE = 0
    CENTER = 1
    MOUSE = 2
    CENTER_ALWAYS = 3
    CENTER_ON_PARENT = 4

class WindowType(Enum):
    """
    A #GtkWindow can be one of these types. Most things you’d consider a
    “window” should have type #GTK_WINDOW_TOPLEVEL; windows with this type
    are managed by the window manager and have a frame by default (call
    gtk_window_set_decorated() to toggle the frame).  Windows with type
    #GTK_WINDOW_POPUP are ignored by the window manager; window manager
    keybindings won’t work on them, the window manager won’t decorate the
    window with a frame, many GTK+ features that rely on the window
    manager will not work (e.g. resize grips and
    maximization/minimization). #GTK_WINDOW_POPUP is used to implement
    widgets such as #GtkMenu or tooltips that you normally don’t think of
    as windows per se. Nearly all windows should be #GTK_WINDOW_TOPLEVEL.
    In particular, do not use #GTK_WINDOW_POPUP just to turn off
    the window borders; use gtk_window_set_decorated() for that.
    """
    TOPLEVEL = 0
    POPUP = 1

class WrapMode(Enum):
    """
    Describes a type of line wrapping.
    """
    NONE = 0
    CHAR = 1
    WORD = 2
    WORD_CHAR = 3

class AccelFlags(Enum):
    """
    Accelerator flags used with gtk_accel_group_connect().
    """
    VISIBLE = 1
    LOCKED = 2
    MASK = 7

class ApplicationInhibitFlags(Enum):
    """
    Types of user actions that may be blocked by gtk_application_inhibit().
    """
    LOGOUT = 1
    SWITCH = 2
    SUSPEND = 4
    IDLE = 8

class AttachOptions(Enum):
    """
    Denotes the expansion properties that a widget will have when it (or its
    parent) is resized.
    """
    EXPAND = 1
    SHRINK = 2
    FILL = 4

class CalendarDisplayOptions(Enum):
    """
    These options can be used to influence the display and behaviour of a #GtkCalendar.
    """
    SHOW_HEADING = 1
    SHOW_DAY_NAMES = 2
    NO_MONTH_CHANGE = 4
    SHOW_WEEK_NUMBERS = 8
    SHOW_DETAILS = 32

class CellRendererState(Enum):
    """
    Tells how a cell is to be rendered.
    """
    SELECTED = 1
    PRELIT = 2
    INSENSITIVE = 4
    SORTED = 8
    FOCUSED = 16
    EXPANDABLE = 32
    EXPANDED = 64

class DebugFlag(Enum):
    MISC = 1
    PLUGSOCKET = 2
    TEXT = 4
    TREE = 8
    UPDATES = 16
    KEYBINDINGS = 32
    MULTIHEAD = 64
    MODULES = 128
    GEOMETRY = 256
    ICONTHEME = 512
    PRINTING = 1024
    BUILDER = 2048
    SIZE_REQUEST = 4096
    NO_CSS_CACHE = 8192
    BASELINES = 16384
    PIXEL_CACHE = 32768
    NO_PIXEL_CACHE = 65536
    INTERACTIVE = 131072
    TOUCHSCREEN = 262144
    ACTIONS = 524288
    RESIZE = 1048576
    LAYOUT = 2097152

class DestDefaults(Enum):
    """
    The #GtkDestDefaults enumeration specifies the various
    types of action that will be taken on behalf
    of the user for a drag destination site.
    """
    MOTION = 1
    HIGHLIGHT = 2
    DROP = 4
    ALL = 7

class DialogFlags(Enum):
    """
    Flags used to influence dialog construction.
    """
    MODAL = 1
    DESTROY_WITH_PARENT = 2
    USE_HEADER_BAR = 4

class EventControllerScrollFlags(Enum):
    """
    Describes the behavior of a #GtkEventControllerScroll.
    """
    NONE = 0
    VERTICAL = 1
    HORIZONTAL = 2
    DISCRETE = 4
    KINETIC = 8
    BOTH_AXES = 3

class FileFilterFlags(Enum):
    """
    These flags indicate what parts of a #GtkFileFilterInfo struct
    are filled or need to be filled.
    """
    FILENAME = 1
    URI = 2
    DISPLAY_NAME = 4
    MIME_TYPE = 8

class FontChooserLevel(Enum):
    """
    This enumeration specifies the granularity of font selection
    that is desired in a font chooser.

    This enumeration may be extended in the future; applications should
    ignore unknown values.
    """
    FAMILY = 0
    STYLE = 1
    SIZE = 2
    VARIATIONS = 4
    FEATURES = 8

class IconLookupFlags(Enum):
    """
    Used to specify options for gtk_icon_theme_lookup_icon()
    """
    NO_SVG = 1
    FORCE_SVG = 2
    USE_BUILTIN = 4
    GENERIC_FALLBACK = 8
    FORCE_SIZE = 16
    FORCE_REGULAR = 32
    FORCE_SYMBOLIC = 64
    DIR_LTR = 128
    DIR_RTL = 256

class InputHints(Enum):
    """
    Describes hints that might be taken into account by input methods
    or applications. Note that input methods may already tailor their
    behaviour according to the #GtkInputPurpose of the entry.

    Some common sense is expected when using these flags - mixing
    @GTK_INPUT_HINT_LOWERCASE with any of the uppercase hints makes no sense.

    This enumeration may be extended in the future; input methods should
    ignore unknown values.
    """
    NONE = 0
    SPELLCHECK = 1
    NO_SPELLCHECK = 2
    WORD_COMPLETION = 4
    LOWERCASE = 8
    UPPERCASE_CHARS = 16
    UPPERCASE_WORDS = 32
    UPPERCASE_SENTENCES = 64
    INHIBIT_OSK = 128
    VERTICAL_WRITING = 256
    EMOJI = 512
    NO_EMOJI = 1024

class JunctionSides(Enum):
    """
    Describes how a rendered element connects to adjacent elements.
    """
    NONE = 0
    CORNER_TOPLEFT = 1
    CORNER_TOPRIGHT = 2
    CORNER_BOTTOMLEFT = 4
    CORNER_BOTTOMRIGHT = 8
    TOP = 3
    BOTTOM = 12
    LEFT = 5
    RIGHT = 10

class PlacesOpenFlags(Enum):
    """
    These flags serve two purposes.  First, the application can call gtk_places_sidebar_set_open_flags()
    using these flags as a bitmask.  This tells the sidebar that the application is able to open
    folders selected from the sidebar in various ways, for example, in new tabs or in new windows in
    addition to the normal mode.

    Second, when one of these values gets passed back to the application in the
    #GtkPlacesSidebar::open-location signal, it means that the application should
    open the selected location in the normal way, in a new tab, or in a new
    window.  The sidebar takes care of determining the desired way to open the location,
    based on the modifier keys that the user is pressing at the time the selection is made.

    If the application never calls gtk_places_sidebar_set_open_flags(), then the sidebar will only
    use #GTK_PLACES_OPEN_NORMAL in the #GtkPlacesSidebar::open-location signal.  This is the
    default mode of operation.
    """
    NORMAL = 1
    NEW_TAB = 2
    NEW_WINDOW = 4

class RcFlags(Enum):
    """
    Deprecated
    """
    FG = 1
    BG = 2
    TEXT = 4
    BASE = 8

class RecentFilterFlags(Enum):
    """
    These flags indicate what parts of a #GtkRecentFilterInfo struct
    are filled or need to be filled.
    """
    URI = 1
    DISPLAY_NAME = 2
    MIME_TYPE = 4
    APPLICATION = 8
    GROUP = 16
    AGE = 32

class RegionFlags(Enum):
    """
    Describes a region within a widget.
    """
    EVEN = 1
    ODD = 2
    FIRST = 4
    LAST = 8
    ONLY = 16
    SORTED = 32

class StateFlags(Enum):
    """
    Describes a widget state. Widget states are used to match the widget
    against CSS pseudo-classes. Note that GTK extends the regular CSS
    classes and sometimes uses different names.
    """
    NORMAL = 0
    ACTIVE = 1
    PRELIGHT = 2
    SELECTED = 4
    INSENSITIVE = 8
    INCONSISTENT = 16
    FOCUSED = 32
    BACKDROP = 64
    DIR_LTR = 128
    DIR_RTL = 256
    LINK = 512
    VISITED = 1024
    CHECKED = 2048
    DROP_ACTIVE = 4096

class StyleContextPrintFlags(Enum):
    """
    Flags that modify the behavior of gtk_style_context_to_string().
    New values may be added to this enumeration.
    """
    NONE = 0
    RECURSE = 1
    SHOW_STYLE = 2

class TargetFlags(Enum):
    """
    The #GtkTargetFlags enumeration is used to specify
    constraints on a #GtkTargetEntry.
    """
    SAME_APP = 1
    SAME_WIDGET = 2
    OTHER_APP = 4
    OTHER_WIDGET = 8

class TextSearchFlags(Enum):
    """
    Flags affecting how a search is done.

    If neither #GTK_TEXT_SEARCH_VISIBLE_ONLY nor #GTK_TEXT_SEARCH_TEXT_ONLY are
    enabled, the match must be exact; the special 0xFFFC character will match
    embedded pixbufs or child widgets.
    """
    VISIBLE_ONLY = 1
    TEXT_ONLY = 2
    CASE_INSENSITIVE = 4

class ToolPaletteDragTargets(Enum):
    """
    Flags used to specify the supported drag targets.
    """
    ITEMS = 1
    GROUPS = 2

class TreeModelFlags(Enum):
    """
    These flags indicate various properties of a #GtkTreeModel.

    They are returned by gtk_tree_model_get_flags(), and must be
    static for the lifetime of the object. A more complete description
    of #GTK_TREE_MODEL_ITERS_PERSIST can be found in the overview of
    this section.
    """
    ITERS_PERSIST = 1
    LIST_ONLY = 2

class UIManagerItemType(Enum):
    """
    These enumeration values are used by gtk_ui_manager_add_ui() to determine
    what UI element to create.
    """
    AUTO = 0
    MENUBAR = 1
    MENU = 2
    TOOLBAR = 4
    PLACEHOLDER = 8
    POPUP = 16
    MENUITEM = 32
    TOOLITEM = 64
    SEPARATOR = 128
    ACCELERATOR = 256
    POPUP_WITH_ACCELS = 512


def accel_groups_activate(object: GObject.Object, accel_key: int, accel_mods: Gdk.ModifierType) -> bool:
    """
    Finds the first accelerator in any #GtkAccelGroup attached
    to @object that matches @accel_key and @accel_mods, and
    activates that accelerator.
    """
    ...

def accel_groups_from_object(object: GObject.Object) -> GLib.SList:
    """
    Gets a list of all accel groups which are attached to @object.
    """
    ...

def accelerator_get_default_mod_mask() -> Gdk.ModifierType:
    """
    Gets the modifier mask.

    The modifier mask determines which modifiers are considered significant
    for keyboard accelerators. See gtk_accelerator_set_default_mod_mask().
    """
    ...

def accelerator_get_label(accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> str:
    """
    Converts an accelerator keyval and modifier mask into a string
    which can be used to represent the accelerator to the user.
    """
    ...

def accelerator_get_label_with_keycode(display: _T.Optional[Gdk.Display], accelerator_key: int, keycode: int, accelerator_mods: Gdk.ModifierType) -> str:
    """
    Converts an accelerator keyval and modifier mask
    into a (possibly translated) string that can be displayed to
    a user, similarly to gtk_accelerator_get_label(), but handling
    keycodes.

    This is only useful for system-level components, applications
    should use gtk_accelerator_parse() instead.
    """
    ...

def accelerator_name(accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> str:
    """
    Converts an accelerator keyval and modifier mask into a string
    parseable by gtk_accelerator_parse(). For example, if you pass in
    #GDK_KEY_q and #GDK_CONTROL_MASK, this function returns “<Control>q”.

    If you need to display accelerators in the user interface,
    see gtk_accelerator_get_label().
    """
    ...

def accelerator_name_with_keycode(display: _T.Optional[Gdk.Display], accelerator_key: int, keycode: int, accelerator_mods: Gdk.ModifierType) -> str:
    """
    Converts an accelerator keyval and modifier mask
    into a string parseable by gtk_accelerator_parse_with_keycode(),
    similarly to gtk_accelerator_name() but handling keycodes.
    This is only useful for system-level components, applications
    should use gtk_accelerator_parse() instead.
    """
    ...

def accelerator_parse(accelerator: str, accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> object:
    """
    Parses a string representing an accelerator. The format looks like
    “<Control>a” or “<Shift><Alt>F1” or “<Release>z” (the last one is
    for key release).

    The parser is fairly liberal and allows lower or upper case, and also
    abbreviations such as “<Ctl>” and “<Ctrl>”. Key names are parsed using
    gdk_keyval_from_name(). For character keys the name is not the symbol,
    but the lowercase name, e.g. one would use “<Ctrl>minus” instead of
    “<Ctrl>-”.

    If the parse fails, @accelerator_key and @accelerator_mods will
    be set to 0 (zero).
    """
    ...

def accelerator_parse_with_keycode(accelerator: str, accelerator_key: int, accelerator_codes: object, accelerator_mods: Gdk.ModifierType) -> object:
    """
    Parses a string representing an accelerator, similarly to
    gtk_accelerator_parse() but handles keycodes as well. This is only
    useful for system-level components, applications should use
    gtk_accelerator_parse() instead.

    If @accelerator_codes is given and the result stored in it is non-%NULL,
    the result must be freed with g_free().

    If a keycode is present in the accelerator and no @accelerator_codes
    is given, the parse will fail.

    If the parse fails, @accelerator_key, @accelerator_mods and
    @accelerator_codes will be set to 0 (zero).
    """
    ...

def accelerator_set_default_mod_mask(default_mod_mask: Gdk.ModifierType) -> object:
    """
    Sets the modifiers that will be considered significant for keyboard
    accelerators. The default mod mask depends on the GDK backend in use,
    but will typically include #GDK_CONTROL_MASK | #GDK_SHIFT_MASK |
    #GDK_MOD1_MASK | #GDK_SUPER_MASK | #GDK_HYPER_MASK | #GDK_META_MASK.
    In other words, Control, Shift, Alt, Super, Hyper and Meta. Other
    modifiers will by default be ignored by #GtkAccelGroup.

    You must include at least the three modifiers Control, Shift
    and Alt in any value you pass to this function.

    The default mod mask should be changed on application startup,
    before using any accelerator groups.
    """
    ...

def accelerator_valid(keyval: int, modifiers: Gdk.ModifierType) -> bool:
    """
    Determines whether a given keyval and modifier mask constitute
    a valid keyboard accelerator. For example, the #GDK_KEY_a keyval
    plus #GDK_CONTROL_MASK is valid - this is a “Ctrl+a” accelerator.
    But, you can't, for instance, use the #GDK_KEY_Control_L keyval
    as an accelerator.
    """
    ...

def alternative_dialog_button_order(screen: _T.Optional[Gdk.Screen]) -> bool:
    """
    Returns %TRUE if dialogs are expected to use an alternative
    button order on the screen @screen. See
    gtk_dialog_set_alternative_button_order() for more details
    about alternative button order.

    If you need to use this function, you should probably connect
    to the ::notify:gtk-alternative-button-order signal on the
    #GtkSettings object associated to @screen, in order to be
    notified if the button order setting changes.
    """
    ...

def bindings_activate(object: GObject.Object, keyval: int, modifiers: Gdk.ModifierType) -> bool:
    """
    Find a key binding matching @keyval and @modifiers and activate the
    binding on @object.
    """
    ...

def bindings_activate_event(object: GObject.Object, event: Gdk.EventKey) -> bool:
    """
    Looks up key bindings for @object to find one matching
    @event, and if one was found, activate it.
    """
    ...

def cairo_should_draw_window(cr: cairo.Context, window: Gdk.Window) -> bool:
    """
    This function is supposed to be called in #GtkWidget::draw
    implementations for widgets that support multiple windows.
    @cr must be untransformed from invoking of the draw function.
    This function will return %TRUE if the contents of the given
    @window are supposed to be drawn and %FALSE otherwise. Note
    that when the drawing was not initiated by the windowing
    system this function will return %TRUE for all windows, so
    you need to draw the bottommost window first. Also, do not
    use “else if” statements to check which window should be drawn.
    """
    ...

def cairo_transform_to_window(cr: cairo.Context, widget: Widget, window: Gdk.Window) -> object:
    """
    Transforms the given cairo context @cr that from @widget-relative
    coordinates to @window-relative coordinates.
    If the @widget’s window is not an ancestor of @window, no
    modification will be applied.

    This is the inverse to the transformation GTK applies when
    preparing an expose event to be emitted with the #GtkWidget::draw
    signal. It is intended to help porting multiwindow widgets from
    GTK+ 2 to the rendering architecture of GTK+ 3.
    """
    ...

def check_version(required_major: int, required_minor: int, required_micro: int) -> str:
    """
    Checks that the GTK+ library in use is compatible with the
    given version. Generally you would pass in the constants
    #GTK_MAJOR_VERSION, #GTK_MINOR_VERSION, #GTK_MICRO_VERSION
    as the three arguments to this function; that produces
    a check that the library in use is compatible with
    the version of GTK+ the application or module was compiled
    against.

    Compatibility is defined by two things: first the version
    of the running library is newer than the version
    @required_major.required_minor.@required_micro. Second
    the running library must be binary compatible with the
    version @required_major.required_minor.@required_micro
    (same major version.)

    This function is primarily for GTK+ modules; the module
    can call this function to check that it wasn’t loaded
    into an incompatible version of GTK+. However, such a
    check isn’t completely reliable, since the module may be
    linked against an old version of GTK+ and calling the
    old version of gtk_check_version(), but still get loaded
    into an application using a newer version of GTK+.
    """
    ...

def device_grab_add(widget: Widget, device: Gdk.Device, block_others: bool) -> object:
    """
    Adds a GTK+ grab on @device, so all the events on @device and its
    associated pointer or keyboard (if any) are delivered to @widget.
    If the @block_others parameter is %TRUE, any other devices will be
    unable to interact with @widget during the grab.
    """
    ...

def device_grab_remove(widget: Widget, device: Gdk.Device) -> object:
    """
    Removes a device grab from the given widget.

    You have to pair calls to gtk_device_grab_add() and
    gtk_device_grab_remove().
    """
    ...

def disable_setlocale() -> object:
    """
    Prevents gtk_init(), gtk_init_check(), gtk_init_with_args() and
    gtk_parse_args() from automatically
    calling `setlocale (LC_ALL, "")`. You would
    want to use this function if you wanted to set the locale for
    your program to something other than the user’s locale, or if
    you wanted to set different values for different locale categories.

    Most programs should not need to call this function.
    """
    ...

def distribute_natural_allocation(extra_space: int, n_requested_sizes: int, sizes: RequestedSize) -> int:
    """
    Distributes @extra_space to child @sizes by bringing smaller
    children up to natural size first.

    The remaining space will be added to the @minimum_size member of the
    GtkRequestedSize struct. If all sizes reach their natural size then
    the remaining space is returned.
    """
    ...

def drag_cancel(context: Gdk.DragContext) -> object:
    """
    Cancels an ongoing drag operation on the source side.

    If you want to be able to cancel a drag operation in this way,
    you need to keep a pointer to the drag context, either from an
    explicit call to gtk_drag_begin_with_coordinates(), or by
    connecting to #GtkWidget::drag-begin.

    If @context does not refer to an ongoing drag operation, this
    function does nothing.

    If a drag is cancelled in this way, the @result argument of
    #GtkWidget::drag-failed is set to @GTK_DRAG_RESULT_ERROR.
    """
    ...

def drag_finish(context: Gdk.DragContext, success: bool, del: bool, time_: int) -> object:
    """
    Informs the drag source that the drop is finished, and
    that the data of the drag will no longer be required.
    """
    ...

def drag_get_source_widget(context: Gdk.DragContext) -> Widget:
    """
    Determines the source widget for a drag.
    """
    ...

def drag_set_icon_default(context: Gdk.DragContext) -> object:
    """
    Sets the icon for a particular drag to the default
    icon.
    """
    ...

def drag_set_icon_gicon(context: Gdk.DragContext, icon: Gio.Icon, hot_x: int, hot_y: int) -> object:
    """
    Sets the icon for a given drag from the given @icon.
    See the documentation for gtk_drag_set_icon_name()
    for more details about using icons in drag and drop.
    """
    ...

def drag_set_icon_name(context: Gdk.DragContext, icon_name: str, hot_x: int, hot_y: int) -> object:
    """
    Sets the icon for a given drag from a named themed icon. See
    the docs for #GtkIconTheme for more details. Note that the
    size of the icon depends on the icon theme (the icon is
    loaded at the symbolic size #GTK_ICON_SIZE_DND), thus
    @hot_x and @hot_y have to be used with care.
    """
    ...

def drag_set_icon_pixbuf(context: Gdk.DragContext, pixbuf: GdkPixbuf.Pixbuf, hot_x: int, hot_y: int) -> object:
    """
    Sets @pixbuf as the icon for a given drag.
    """
    ...

def drag_set_icon_stock(context: Gdk.DragContext, stock_id: str, hot_x: int, hot_y: int) -> object:
    """
    Sets the icon for a given drag from a stock ID.
    """
    ...

def drag_set_icon_surface(context: Gdk.DragContext, surface: cairo.Surface) -> object:
    """
    Sets @surface as the icon for a given drag. GTK+ retains
    references for the arguments, and will release them when
    they are no longer needed.

    To position the surface relative to the mouse, use
    cairo_surface_set_device_offset() on @surface. The mouse
    cursor will be positioned at the (0,0) coordinate of the
    surface.
    """
    ...

def drag_set_icon_widget(context: Gdk.DragContext, widget: Widget, hot_x: int, hot_y: int) -> object:
    """
    Changes the icon for drag operation to a given widget.
    GTK+ will not destroy the widget, so if you don’t want
    it to persist, you should connect to the “drag-end”
    signal and destroy it yourself.
    """
    ...

def draw_insertion_cursor(widget: Widget, cr: cairo.Context, location: Gdk.Rectangle, is_primary: bool, direction: TextDirection, draw_arrow: bool) -> object:
    """
    Draws a text caret on @cr at @location. This is not a style function
    but merely a convenience function for drawing the standard cursor shape.
    """
    ...

def events_pending() -> bool:
    """
    Checks if any events are pending.

    This can be used to update the UI and invoke timeouts etc.
    while doing some time intensive computation.

    ## Updating the UI during a long computation

    |[<!-- language="C" -->
     // computation going on...

     while (gtk_events_pending ())
       gtk_main_iteration ();

     // ...computation continued
    ]|
    """
    ...

def false() -> bool:
    """
    Analogical to gtk_true(), this function does nothing
    but always returns %FALSE.
    """
    ...

def get_binary_age() -> int:
    """
    Returns the binary age as passed to `libtool`
    when building the GTK+ library the process is running against.
    If `libtool` means nothing to you, don't
    worry about it.
    """
    ...

def get_current_event() -> Gdk.Event:
    """
    Obtains a copy of the event currently being processed by GTK+.

    For example, if you are handling a #GtkButton::clicked signal,
    the current event will be the #GdkEventButton that triggered
    the ::clicked signal.
    """
    ...

def get_current_event_device() -> Gdk.Device:
    """
    If there is a current event and it has a device, return that
    device, otherwise return %NULL.
    """
    ...

def get_current_event_state(state: Gdk.ModifierType) -> bool:
    """
    If there is a current event and it has a state field, place
    that state field in @state and return %TRUE, otherwise return
    %FALSE.
    """
    ...

def get_current_event_time() -> int:
    """
    If there is a current event and it has a timestamp,
    return that timestamp, otherwise return %GDK_CURRENT_TIME.
    """
    ...

def get_debug_flags() -> int:
    """
    Returns the GTK+ debug flags.

    This function is intended for GTK+ modules that want
    to adjust their debug output based on GTK+ debug flags.
    """
    ...

def get_default_language() -> Pango.Language:
    """
    Returns the #PangoLanguage for the default language currently in
    effect. (Note that this can change over the life of an
    application.) The default language is derived from the current
    locale. It determines, for example, whether GTK+ uses the
    right-to-left or left-to-right text direction.

    This function is equivalent to pango_language_get_default().
    See that function for details.
    """
    ...

def get_event_widget(event: Gdk.Event) -> Widget:
    """
    If @event is %NULL or the event was not associated with any widget,
    returns %NULL, otherwise returns the widget that received the event
    originally.
    """
    ...

def get_interface_age() -> int:
    """
    Returns the interface age as passed to `libtool`
    when building the GTK+ library the process is running against.
    If `libtool` means nothing to you, don't
    worry about it.
    """
    ...

def get_locale_direction() -> TextDirection:
    """
    Get the direction of the current locale. This is the expected
    reading direction for text and UI.

    This function depends on the current locale being set with
    setlocale() and will default to setting the %GTK_TEXT_DIR_LTR
    direction otherwise. %GTK_TEXT_DIR_NONE will never be returned.

    GTK+ sets the default text direction according to the locale
    during gtk_init(), and you should normally use
    gtk_widget_get_direction() or gtk_widget_get_default_direction()
    to obtain the current direcion.

    This function is only needed rare cases when the locale is
    changed after GTK+ has already been initialized. In this case,
    you can use it to update the default text direction as follows:

    |[<!-- language="C" -->
    setlocale (LC_ALL, new_locale);
    direction = gtk_get_locale_direction ();
    gtk_widget_set_default_direction (direction);
    ]|
    """
    ...

def get_major_version() -> int:
    """
    Returns the major version number of the GTK+ library.
    (e.g. in GTK+ version 3.1.5 this is 3.)

    This function is in the library, so it represents the GTK+ library
    your code is running against. Contrast with the #GTK_MAJOR_VERSION
    macro, which represents the major version of the GTK+ headers you
    have included when compiling your code.
    """
    ...

def get_micro_version() -> int:
    """
    Returns the micro version number of the GTK+ library.
    (e.g. in GTK+ version 3.1.5 this is 5.)

    This function is in the library, so it represents the GTK+ library
    your code is are running against. Contrast with the
    #GTK_MICRO_VERSION macro, which represents the micro version of the
    GTK+ headers you have included when compiling your code.
    """
    ...

def get_minor_version() -> int:
    """
    Returns the minor version number of the GTK+ library.
    (e.g. in GTK+ version 3.1.5 this is 1.)

    This function is in the library, so it represents the GTK+ library
    your code is are running against. Contrast with the
    #GTK_MINOR_VERSION macro, which represents the minor version of the
    GTK+ headers you have included when compiling your code.
    """
    ...

def get_option_group(open_default_display: bool) -> GLib.OptionGroup:
    """
    Returns a #GOptionGroup for the commandline arguments recognized
    by GTK+ and GDK.

    You should add this group to your #GOptionContext
    with g_option_context_add_group(), if you are using
    g_option_context_parse() to parse your commandline arguments.
    """
    ...

def grab_get_current() -> Widget:
    """
    Queries the current grab of the default window group.
    """
    ...

def init(argc: int, argv: _T.Optional[object]) -> object:
    """
    Call this function before using any other GTK+ functions in your GUI
    applications.  It will initialize everything needed to operate the
    toolkit and parses some standard command line options.

    Although you are expected to pass the @argc, @argv parameters from main() to
    this function, it is possible to pass %NULL if @argv is not available or
    commandline handling is not required.

    @argc and @argv are adjusted accordingly so your own code will
    never see those standard arguments.

    Note that there are some alternative ways to initialize GTK+:
    if you are calling gtk_parse_args(), gtk_init_check(),
    gtk_init_with_args() or g_option_context_parse() with
    the option group returned by gtk_get_option_group(),
    you don’t have to call gtk_init().

    And if you are using #GtkApplication, you don't have to call any of the
    initialization functions either; the #GtkApplication::startup handler
    does it for you.

    This function will terminate your program if it was unable to
    initialize the windowing system for some reason. If you want
    your program to fall back to a textual interface you want to
    call gtk_init_check() instead.

    Since 2.18, GTK+ calls `signal (SIGPIPE, SIG_IGN)`
    during initialization, to ignore SIGPIPE signals, since these are
    almost never wanted in graphical applications. If you do need to
    handle SIGPIPE for some reason, reset the handler after gtk_init(),
    but notice that other libraries (e.g. libdbus or gvfs) might do
    similar things.
    """
    ...

def init_check(argc: int, argv: _T.Optional[object]) -> bool:
    """
    This function does the same work as gtk_init() with only a single
    change: It does not terminate the program if the commandline
    arguments couldn’t be parsed or the windowing system can’t be
    initialized. Instead it returns %FALSE on failure.

    This way the application can fall back to some other means of
    communication with the user - for example a curses or command line
    interface.

    Note that calling any GTK function or instantiating any GTK type after
    this function returns %FALSE results in undefined behavior.
    """
    ...

def init_with_args(argc: int, argv: _T.Optional[object], parameter_string: _T.Optional[str], entries: object, translation_domain: _T.Optional[str]) -> bool:
    """
    This function does the same work as gtk_init_check().
    Additionally, it allows you to add your own commandline options,
    and it automatically generates nicely formatted
    `--help` output. Note that your program will
    be terminated after writing out the help output.
    """
    ...

def key_snooper_install(snooper: KeySnoopFunc, func_data: _T.Optional[object]) -> int:
    """
    Installs a key snooper function, which will get called on all
    key events before delivering them normally.
    """
    ...

def key_snooper_remove(snooper_handler_id: int) -> object:
    """
    Removes the key snooper function with the given id.
    """
    ...

def main() -> object:
    """
    Runs the main loop until gtk_main_quit() is called.

    You can nest calls to gtk_main(). In that case gtk_main_quit()
    will make the innermost invocation of the main loop return.
    """
    ...

def main_do_event(event: Gdk.Event) -> object:
    """
    Processes a single GDK event.

    This is public only to allow filtering of events between GDK and GTK+.
    You will not usually need to call this function directly.

    While you should not call this function directly, you might want to
    know how exactly events are handled. So here is what this function
    does with the event:

    1. Compress enter/leave notify events. If the event passed build an
       enter/leave pair together with the next event (peeked from GDK), both
       events are thrown away. This is to avoid a backlog of (de-)highlighting
       widgets crossed by the pointer.

    2. Find the widget which got the event. If the widget can’t be determined
       the event is thrown away unless it belongs to a INCR transaction.

    3. Then the event is pushed onto a stack so you can query the currently
       handled event with gtk_get_current_event().

    4. The event is sent to a widget. If a grab is active all events for widgets
       that are not in the contained in the grab widget are sent to the latter
       with a few exceptions:
       - Deletion and destruction events are still sent to the event widget for
         obvious reasons.
       - Events which directly relate to the visual representation of the event
         widget.
       - Leave events are delivered to the event widget if there was an enter
         event delivered to it before without the paired leave event.
       - Drag events are not redirected because it is unclear what the semantics
         of that would be.
       Another point of interest might be that all key events are first passed
       through the key snooper functions if there are any. Read the description
       of gtk_key_snooper_install() if you need this feature.

    5. After finishing the delivery the event is popped from the event stack.
    """
    ...

def main_iteration() -> bool:
    """
    Runs a single iteration of the mainloop.

    If no events are waiting to be processed GTK+ will block
    until the next event is noticed. If you don’t want to block
    look at gtk_main_iteration_do() or check if any events are
    pending with gtk_events_pending() first.
    """
    ...

def main_iteration_do(blocking: bool) -> bool:
    """
    Runs a single iteration of the mainloop.
    If no events are available either return or block depending on
    the value of @blocking.
    """
    ...

def main_level() -> int:
    """
    Asks for the current nesting level of the main loop.
    """
    ...

def main_quit() -> object:
    """
    Makes the innermost invocation of the main loop return
    when it regains control.
    """
    ...

def paint_arrow(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], arrow_type: ArrowType, fill: bool, x: int, y: int, width: int, height: int) -> object:
    """
    Draws an arrow in the given rectangle on @cr using the given
    parameters. @arrow_type determines the direction of the arrow.
    """
    ...

def paint_box(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int) -> object:
    """
    Draws a box on @cr with the given parameters.
    """
    ...

def paint_box_gap(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int, gap_side: PositionType, gap_x: int, gap_width: int) -> object:
    """
    Draws a box in @cr using the given style and state and shadow type,
    leaving a gap in one side.
    """
    ...

def paint_check(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int) -> object:
    """
    Draws a check button indicator in the given rectangle on @cr with
    the given parameters.
    """
    ...

def paint_diamond(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int) -> object:
    """
    Draws a diamond in the given rectangle on @window using the given
    parameters.
    """
    ...

def paint_expander(style: Style, cr: cairo.Context, state_type: StateType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, expander_style: ExpanderStyle) -> object:
    """
    Draws an expander as used in #GtkTreeView. @x and @y specify the
    center the expander. The size of the expander is determined by the
    “expander-size” style property of @widget.  (If widget is not
    specified or doesn’t have an “expander-size” property, an
    unspecified default size will be used, since the caller doesn't
    have sufficient information to position the expander, this is
    likely not useful.) The expander is expander_size pixels tall
    in the collapsed position and expander_size pixels wide in the
    expanded position.
    """
    ...

def paint_extension(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int, gap_side: PositionType) -> object:
    """
    Draws an extension, i.e. a notebook tab.
    """
    ...

def paint_flat_box(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int) -> object:
    """
    Draws a flat box on @cr with the given parameters.
    """
    ...

def paint_focus(style: Style, cr: cairo.Context, state_type: StateType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int) -> object:
    """
    Draws a focus indicator around the given rectangle on @cr using the
    given style.
    """
    ...

def paint_handle(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int, orientation: Orientation) -> object:
    """
    Draws a handle as used in #GtkHandleBox and #GtkPaned.
    """
    ...

def paint_hline(style: Style, cr: cairo.Context, state_type: StateType, widget: _T.Optional[Widget], detail: _T.Optional[str], x1: int, x2: int, y: int) -> object:
    """
    Draws a horizontal line from (@x1, @y) to (@x2, @y) in @cr
    using the given style and state.
    """
    ...

def paint_layout(style: Style, cr: cairo.Context, state_type: StateType, use_text: bool, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, layout: Pango.Layout) -> object:
    """
    Draws a layout on @cr using the given parameters.
    """
    ...

def paint_option(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int) -> object:
    """
    Draws a radio button indicator in the given rectangle on @cr with
    the given parameters.
    """
    ...

def paint_resize_grip(style: Style, cr: cairo.Context, state_type: StateType, widget: _T.Optional[Widget], detail: _T.Optional[str], edge: Gdk.WindowEdge, x: int, y: int, width: int, height: int) -> object:
    """
    Draws a resize grip in the given rectangle on @cr using the given
    parameters.
    """
    ...

def paint_shadow(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int) -> object:
    """
    Draws a shadow around the given rectangle in @cr
    using the given style and state and shadow type.
    """
    ...

def paint_shadow_gap(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int, gap_side: PositionType, gap_x: int, gap_width: int) -> object:
    """
    Draws a shadow around the given rectangle in @cr
    using the given style and state and shadow type, leaving a
    gap in one side.
    """
    ...

def paint_slider(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int, orientation: Orientation) -> object:
    """
    Draws a slider in the given rectangle on @cr using the
    given style and orientation.
    """
    ...

def paint_spinner(style: Style, cr: cairo.Context, state_type: StateType, widget: _T.Optional[Widget], detail: _T.Optional[str], step: int, x: int, y: int, width: int, height: int) -> object:
    """
    Draws a spinner on @window using the given parameters.
    """
    ...

def paint_tab(style: Style, cr: cairo.Context, state_type: StateType, shadow_type: ShadowType, widget: _T.Optional[Widget], detail: _T.Optional[str], x: int, y: int, width: int, height: int) -> object:
    """
    Draws an option menu tab (i.e. the up and down pointing arrows)
    in the given rectangle on @cr using the given parameters.
    """
    ...

def paint_vline(style: Style, cr: cairo.Context, state_type: StateType, widget: _T.Optional[Widget], detail: _T.Optional[str], y1_: int, y2_: int, x: int) -> object:
    """
    Draws a vertical line from (@x, @y1_) to (@x, @y2_) in @cr
    using the given style and state.
    """
    ...

def parse_args(argc: int, argv: object) -> bool:
    """
    Parses command line arguments, and initializes global
    attributes of GTK+, but does not actually open a connection
    to a display. (See gdk_display_open(), gdk_get_display_arg_name())

    Any arguments used by GTK+ or GDK are removed from the array and
    @argc and @argv are updated accordingly.

    There is no need to call this function explicitly if you are using
    gtk_init(), or gtk_init_check().

    Note that many aspects of GTK+ require a display connection to
    function, so this way of initializing GTK+ is really only useful
    for specialized use cases.
    """
    ...

def print_run_page_setup_dialog(parent: _T.Optional[Window], page_setup: _T.Optional[PageSetup], settings: PrintSettings) -> PageSetup:
    """
    Runs a page setup dialog, letting the user modify the values from
    @page_setup. If the user cancels the dialog, the returned #GtkPageSetup
    is identical to the passed in @page_setup, otherwise it contains the
    modifications done in the dialog.

    Note that this function may use a recursive mainloop to show the page
    setup dialog. See gtk_print_run_page_setup_dialog_async() if this is
    a problem.
    """
    ...

def print_run_page_setup_dialog_async(parent: _T.Optional[Window], page_setup: _T.Optional[PageSetup], settings: PrintSettings, done_cb: PageSetupDoneFunc, data: _T.Optional[object]) -> object:
    """
    Runs a page setup dialog, letting the user modify the values from @page_setup.

    In contrast to gtk_print_run_page_setup_dialog(), this function  returns after
    showing the page setup dialog on platforms that support this, and calls @done_cb
    from a signal handler for the ::response signal of the dialog.
    """
    ...

def propagate_event(widget: Widget, event: Gdk.Event) -> object:
    """
    Sends an event to a widget, propagating the event to parent widgets
    if the event remains unhandled.

    Events received by GTK+ from GDK normally begin in gtk_main_do_event().
    Depending on the type of event, existence of modal dialogs, grabs, etc.,
    the event may be propagated; if so, this function is used.

    gtk_propagate_event() calls gtk_widget_event() on each widget it
    decides to send the event to. So gtk_widget_event() is the lowest-level
    function; it simply emits the #GtkWidget::event and possibly an
    event-specific signal on a widget. gtk_propagate_event() is a bit
    higher-level, and gtk_main_do_event() is the highest level.

    All that said, you most likely don’t want to use any of these
    functions; synthesizing events is rarely needed. There are almost
    certainly better ways to achieve your goals. For example, use
    gdk_window_invalidate_rect() or gtk_widget_queue_draw() instead
    of making up expose events.
    """
    ...

def rc_add_default_file(filename: str) -> object:
    """
    Adds a file to the list of files to be parsed at the
    end of gtk_init().
    """
    ...

def rc_find_module_in_path(module_file: str) -> str:
    """
    Searches for a theme engine in the GTK+ search path. This function
    is not useful for applications and should not be used.
    """
    ...

def rc_find_pixmap_in_path(settings: Settings, scanner: GLib.Scanner, pixmap_file: str) -> str:
    """
    Looks up a file in pixmap path for the specified #GtkSettings.
    If the file is not found, it outputs a warning message using
    g_warning() and returns %NULL.
    """
    ...

def rc_get_default_files() -> object:
    """
    Retrieves the current list of RC files that will be parsed
    at the end of gtk_init().
    """
    ...

def rc_get_im_module_file() -> str:
    """
    Obtains the path to the IM modules file. See the documentation
    of the `GTK_IM_MODULE_FILE`
    environment variable for more details.
    """
    ...

def rc_get_im_module_path() -> str:
    """
    Obtains the path in which to look for IM modules. See the documentation
    of the `GTK_PATH`
    environment variable for more details about looking up modules. This
    function is useful solely for utilities supplied with GTK+ and should
    not be used by applications under normal circumstances.
    """
    ...

def rc_get_module_dir() -> str:
    """
    Returns a directory in which GTK+ looks for theme engines.
    For full information about the search for theme engines,
    see the docs for `GTK_PATH` in [Running GTK+ Applications][gtk-running].
    """
    ...

def rc_get_style(widget: Widget) -> Style:
    """
    Finds all matching RC styles for a given widget,
    composites them together, and then creates a
    #GtkStyle representing the composite appearance.
    (GTK+ actually keeps a cache of previously
    created styles, so a new style may not be
    created.)
    """
    ...

def rc_get_style_by_paths(settings: Settings, widget_path: _T.Optional[str], class_path: _T.Optional[str], type: GObject.Type) -> Style:
    """
    Creates up a #GtkStyle from styles defined in a RC file by providing
    the raw components used in matching. This function may be useful
    when creating pseudo-widgets that should be themed like widgets but
    don’t actually have corresponding GTK+ widgets. An example of this
    would be items inside a GNOME canvas widget.

    The action of gtk_rc_get_style() is similar to:
    |[<!-- language="C" -->
     gtk_widget_path (widget, NULL, &path, NULL);
     gtk_widget_class_path (widget, NULL, &class_path, NULL);
     gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget),
                                path, class_path,
                                G_OBJECT_TYPE (widget));
    ]|
    """
    ...

def rc_get_theme_dir() -> str:
    """
    Returns the standard directory in which themes should
    be installed. (GTK+ does not actually use this directory
    itself.)
    """
    ...

def rc_parse(filename: str) -> object:
    """
    Parses a given resource file.
    """
    ...

def rc_parse_color(scanner: GLib.Scanner, color: Gdk.Color) -> int:
    """
    Parses a color in the format expected
    in a RC file.

    Note that theme engines should use gtk_rc_parse_color_full() in
    order to support symbolic colors.
    """
    ...

def rc_parse_color_full(scanner: GLib.Scanner, style: _T.Optional[RcStyle], color: Gdk.Color) -> int:
    """
    Parses a color in the format expected
    in a RC file. If @style is not %NULL, it will be consulted to resolve
    references to symbolic colors.
    """
    ...

def rc_parse_priority(scanner: GLib.Scanner, priority: PathPriorityType) -> int:
    """
    Parses a #GtkPathPriorityType variable from the format expected
    in a RC file.
    """
    ...

def rc_parse_state(scanner: GLib.Scanner, state: StateType) -> int:
    """
    Parses a #GtkStateType variable from the format expected
    in a RC file.
    """
    ...

def rc_parse_string(rc_string: str) -> object:
    """
    Parses resource information directly from a string.
    """
    ...

def rc_reparse_all() -> bool:
    """
    If the modification time on any previously read file for the
    default #GtkSettings has changed, discard all style information
    and then reread all previously read RC files.
    """
    ...

def rc_reparse_all_for_settings(settings: Settings, force_load: bool) -> bool:
    """
    If the modification time on any previously read file
    for the given #GtkSettings has changed, discard all style information
    and then reread all previously read RC files.
    """
    ...

def rc_reset_styles(settings: Settings) -> object:
    """
    This function recomputes the styles for all widgets that use a
    particular #GtkSettings object. (There is one #GtkSettings object
    per #GdkScreen, see gtk_settings_get_for_screen()); It is useful
    when some global parameter has changed that affects the appearance
    of all widgets, because when a widget gets a new style, it will
    both redraw and recompute any cached information about its
    appearance. As an example, it is used when the default font size
    set by the operating system changes. Note that this function
    doesn’t affect widgets that have a style set explicitly on them
    with gtk_widget_set_style().
    """
    ...

def rc_scanner_new() -> GLib.Scanner:
    ...

def rc_set_default_files(filenames: object) -> object:
    """
    Sets the list of files that GTK+ will read at the
    end of gtk_init().
    """
    ...

def render_activity(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> object:
    """
    Renders an activity indicator (such as in #GtkSpinner).
    The state %GTK_STATE_FLAG_CHECKED determines whether there is
    activity going on.
    """
    ...

def render_arrow(context: StyleContext, cr: cairo.Context, angle: float, x: float, y: float, size: float) -> object:
    """
    Renders an arrow pointing to @angle.

    Typical arrow rendering at 0, 1⁄2 π;, π; and 3⁄2 π:

    ![](arrows.png)
    """
    ...

def render_background(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> object:
    """
    Renders the background of an element.

    Typical background rendering, showing the effect of
    `background-image`, `border-width` and `border-radius`:

    ![](background.png)
    """
    ...

def render_background_get_clip(context: StyleContext, x: float, y: float, width: float, height: float, out_clip: Gdk.Rectangle) -> object:
    """
    Returns the area that will be affected (i.e. drawn to) when
    calling gtk_render_background() for the given @context and
    rectangle.
    """
    ...

def render_check(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> object:
    """
    Renders a checkmark (as in a #GtkCheckButton).

    The %GTK_STATE_FLAG_CHECKED state determines whether the check is
    on or off, and %GTK_STATE_FLAG_INCONSISTENT determines whether it
    should be marked as undefined.

    Typical checkmark rendering:

    ![](checks.png)
    """
    ...

def render_expander(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> object:
    """
    Renders an expander (as used in #GtkTreeView and #GtkExpander) in the area
    defined by @x, @y, @width, @height. The state %GTK_STATE_FLAG_CHECKED
    determines whether the expander is collapsed or expanded.

    Typical expander rendering:

    ![](expanders.png)
    """
    ...

def render_extension(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float, gap_side: PositionType) -> object:
    """
    Renders a extension (as in a #GtkNotebook tab) in the rectangle
    defined by @x, @y, @width, @height. The side where the extension
    connects to is defined by @gap_side.

    Typical extension rendering:

    ![](extensions.png)
    """
    ...

def render_focus(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> object:
    """
    Renders a focus indicator on the rectangle determined by @x, @y, @width, @height.

    Typical focus rendering:

    ![](focus.png)
    """
    ...

def render_frame(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> object:
    """
    Renders a frame around the rectangle defined by @x, @y, @width, @height.

    Examples of frame rendering, showing the effect of `border-image`,
    `border-color`, `border-width`, `border-radius` and junctions:

    ![](frames.png)
    """
    ...

def render_frame_gap(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float, gap_side: PositionType, xy0_gap: float, xy1_gap: float) -> object:
    """
    Renders a frame around the rectangle defined by (@x, @y, @width, @height),
    leaving a gap on one side. @xy0_gap and @xy1_gap will mean X coordinates
    for %GTK_POS_TOP and %GTK_POS_BOTTOM gap sides, and Y coordinates for
    %GTK_POS_LEFT and %GTK_POS_RIGHT.

    Typical rendering of a frame with a gap:

    ![](frame-gap.png)
    """
    ...

def render_handle(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> object:
    """
    Renders a handle (as in #GtkHandleBox, #GtkPaned and
    #GtkWindow’s resize grip), in the rectangle
    determined by @x, @y, @width, @height.

    Handles rendered for the paned and grip classes:

    ![](handles.png)
    """
    ...

def render_icon(context: StyleContext, cr: cairo.Context, pixbuf: GdkPixbuf.Pixbuf, x: float, y: float) -> object:
    """
    Renders the icon in @pixbuf at the specified @x and @y coordinates.

    This function will render the icon in @pixbuf at exactly its size,
    regardless of scaling factors, which may not be appropriate when
    drawing on displays with high pixel densities.

    You probably want to use gtk_render_icon_surface() instead, if you
    already have a Cairo surface.
    """
    ...

def render_icon_pixbuf(context: StyleContext, source: IconSource, size: int) -> GdkPixbuf.Pixbuf:
    """
    Renders the icon specified by @source at the given @size, returning the result
    in a pixbuf.
    """
    ...

def render_icon_surface(context: StyleContext, cr: cairo.Context, surface: cairo.Surface, x: float, y: float) -> object:
    """
    Renders the icon in @surface at the specified @x and @y coordinates.
    """
    ...

def render_insertion_cursor(context: StyleContext, cr: cairo.Context, x: float, y: float, layout: Pango.Layout, index: int, direction: Pango.Direction) -> object:
    """
    Draws a text caret on @cr at the specified index of @layout.
    """
    ...

def render_layout(context: StyleContext, cr: cairo.Context, x: float, y: float, layout: Pango.Layout) -> object:
    """
    Renders @layout on the coordinates @x, @y
    """
    ...

def render_line(context: StyleContext, cr: cairo.Context, x0: float, y0: float, x1: float, y1: float) -> object:
    """
    Renders a line from (x0, y0) to (x1, y1).
    """
    ...

def render_option(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float) -> object:
    """
    Renders an option mark (as in a #GtkRadioButton), the %GTK_STATE_FLAG_CHECKED
    state will determine whether the option is on or off, and
    %GTK_STATE_FLAG_INCONSISTENT whether it should be marked as undefined.

    Typical option mark rendering:

    ![](options.png)
    """
    ...

def render_slider(context: StyleContext, cr: cairo.Context, x: float, y: float, width: float, height: float, orientation: Orientation) -> object:
    """
    Renders a slider (as in #GtkScale) in the rectangle defined by @x, @y,
    @width, @height. @orientation defines whether the slider is vertical
    or horizontal.

    Typical slider rendering:

    ![](sliders.png)
    """
    ...

def rgb_to_hsv(r: float, g: float, b: float, h: float, s: float, v: float) -> object:
    """
    Converts a color from RGB space to HSV.

    Input values must be in the [0.0, 1.0] range;
    output values will be in the same range.
    """
    ...

def selection_add_target(widget: Widget, selection: Gdk.Atom, target: Gdk.Atom, info: int) -> object:
    """
    Appends a specified target to the list of supported targets for a
    given widget and selection.
    """
    ...

def selection_add_targets(widget: Widget, selection: Gdk.Atom, targets: object, ntargets: int) -> object:
    """
    Prepends a table of targets to the list of supported targets
    for a given widget and selection.
    """
    ...

def selection_clear_targets(widget: Widget, selection: Gdk.Atom) -> object:
    """
    Remove all targets registered for the given selection for the
    widget.
    """
    ...

def selection_convert(widget: Widget, selection: Gdk.Atom, target: Gdk.Atom, time_: int) -> bool:
    """
    Requests the contents of a selection. When received,
    a “selection-received” signal will be generated.
    """
    ...

def selection_owner_set(widget: _T.Optional[Widget], selection: Gdk.Atom, time_: int) -> bool:
    """
    Claims ownership of a given selection for a particular widget,
    or, if @widget is %NULL, release ownership of the selection.
    """
    ...

def selection_owner_set_for_display(display: Gdk.Display, widget: _T.Optional[Widget], selection: Gdk.Atom, time_: int) -> bool:
    """
    Claim ownership of a given selection for a particular widget, or,
    if @widget is %NULL, release ownership of the selection.
    """
    ...

def selection_remove_all(widget: Widget) -> object:
    """
    Removes all handlers and unsets ownership of all
    selections for a widget. Called when widget is being
    destroyed. This function will not generally be
    called by applications.
    """
    ...

def set_debug_flags(flags: int) -> object:
    """
    Sets the GTK+ debug flags.
    """
    ...

def show_about_dialog(parent: _T.Optional[Window], first_property_name: str, *args: object) -> object:
    """
    This is a convenience function for showing an application’s about box.
    The constructed dialog is associated with the parent window and
    reused for future invocations of this function.
    """
    ...

def show_uri(screen: _T.Optional[Gdk.Screen], uri: str, timestamp: int) -> bool:
    """
    A convenience function for launching the default application
    to show the uri. Like gtk_show_uri_on_window(), but takes a screen
    as transient parent instead of a window.

    Note that this function is deprecated as it does not pass the necessary
    information for helpers to parent their dialog properly, when run from
    sandboxed applications for example.
    """
    ...

def show_uri_on_window(parent: _T.Optional[Window], uri: str, timestamp: int) -> bool:
    """
    This is a convenience function for launching the default application
    to show the uri. The uri must be of a form understood by GIO (i.e. you
    need to install gvfs to get support for uri schemes such as http://
    or ftp://, as only local files are handled by GIO itself).
    Typical examples are
    - `file:///home/gnome/pict.jpg`
    - `http://www.gnome.org`
    - `mailto:me@gnome.org`

    Ideally the timestamp is taken from the event triggering
    the gtk_show_uri() call. If timestamp is not known you can take
    %GDK_CURRENT_TIME.

    This is the recommended call to be used as it passes information
    necessary for sandbox helpers to parent their dialogs properly.
    """
    ...

def stock_add(items: object, n_items: int) -> object:
    """
    Registers each of the stock items in @items. If an item already
    exists with the same stock ID as one of the @items, the old item
    gets replaced. The stock items are copied, so GTK+ does not hold
    any pointer into @items and @items can be freed. Use
    gtk_stock_add_static() if @items is persistent and GTK+ need not
    copy the array.
    """
    ...

def stock_add_static(items: object, n_items: int) -> object:
    """
    Same as gtk_stock_add(), but doesn’t copy @items, so
    @items must persist until application exit.
    """
    ...

def stock_list_ids() -> GLib.SList:
    """
    Retrieves a list of all known stock IDs added to a #GtkIconFactory
    or registered with gtk_stock_add(). The list must be freed with g_slist_free(),
    and each string in the list must be freed with g_free().
    """
    ...

def stock_lookup(stock_id: str, item: StockItem) -> bool:
    """
    Fills @item with the registered values for @stock_id, returning %TRUE
    if @stock_id was known.
    """
    ...

def stock_set_translate_func(domain: str, func: TranslateFunc, data: _T.Optional[object], notify: GLib.DestroyNotify) -> object:
    """
    Sets a function to be used for translating the @label of
    a stock item.

    If no function is registered for a translation domain,
    g_dgettext() is used.

    The function is used for all stock items whose
    @translation_domain matches @domain. Note that it is possible
    to use strings different from the actual gettext translation domain
    of your application for this, as long as your #GtkTranslateFunc uses
    the correct domain when calling dgettext(). This can be useful, e.g.
    when dealing with message contexts:

    |[<!-- language="C" -->
    GtkStockItem items[] = {
     { MY_ITEM1, NC_("odd items", "Item 1"), 0, 0, "odd-item-domain" },
     { MY_ITEM2, NC_("even items", "Item 2"), 0, 0, "even-item-domain" },
    };

    gchar *
    my_translate_func (const gchar *msgid,
                       gpointer     data)
    {
      gchar *msgctxt = data;

      return (gchar*)g_dpgettext2 (GETTEXT_PACKAGE, msgctxt, msgid);
    }

    ...

    gtk_stock_add (items, G_N_ELEMENTS (items));
    gtk_stock_set_translate_func ("odd-item-domain", my_translate_func, "odd items");
    gtk_stock_set_translate_func ("even-item-domain", my_translate_func, "even items");
    ]|
    """
    ...

def target_table_free(targets: object, n_targets: int) -> object:
    """
    This function frees a target table as returned by
    gtk_target_table_new_from_list()
    """
    ...

def target_table_new_from_list(list: TargetList, n_targets: int) -> object:
    """
    This function creates an #GtkTargetEntry array that contains the
    same targets as the passed %list. The returned table is newly
    allocated and should be freed using gtk_target_table_free() when no
    longer needed.
    """
    ...

def targets_include_image(targets: object, n_targets: int, writable: bool) -> bool:
    """
    Determines if any of the targets in @targets can be used to
    provide a #GdkPixbuf.
    """
    ...

def targets_include_rich_text(targets: object, n_targets: int, buffer: TextBuffer) -> bool:
    """
    Determines if any of the targets in @targets can be used to
    provide rich text.
    """
    ...

def targets_include_text(targets: object, n_targets: int) -> bool:
    """
    Determines if any of the targets in @targets can be used to
    provide text.
    """
    ...

def targets_include_uri(targets: object, n_targets: int) -> bool:
    """
    Determines if any of the targets in @targets can be used to
    provide an uri list.
    """
    ...

def test_create_simple_window(window_title: str, dialog_text: str) -> Widget:
    """
    Create a simple window with window title @window_title and
    text contents @dialog_text.
    The window will quit any running gtk_main()-loop when destroyed, and it
    will automatically be destroyed upon test function teardown.
    """
    ...

def test_create_widget(widget_type: GObject.Type, first_property_name: _T.Optional[str], *args: object) -> Widget:
    """
    This function wraps g_object_new() for widget types.
    It’ll automatically show all created non window widgets, also
    g_object_ref_sink() them (to keep them alive across a running test)
    and set them up for destruction during the next test teardown phase.
    """
    ...

def test_display_button_window(window_title: str, dialog_text: str, *args: object) -> Widget:
    """
    Create a window with window title @window_title, text contents @dialog_text,
    and a number of buttons, according to the paired argument list given
    as @... parameters.
    Each button is created with a @label and a ::clicked signal handler that
    incremrents the integer stored in @nump.
    The window will be automatically shown with gtk_widget_show_now() after
    creation, so when this function returns it has already been mapped,
    resized and positioned on screen.
    The window will quit any running gtk_main()-loop when destroyed, and it
    will automatically be destroyed upon test function teardown.
    """
    ...

def test_find_label(widget: Widget, label_pattern: str) -> Widget:
    """
    This function will search @widget and all its descendants for a GtkLabel
    widget with a text string matching @label_pattern.
    The @label_pattern may contain asterisks “*” and question marks “?” as
    placeholders, g_pattern_match() is used for the matching.
    Note that locales other than "C“ tend to alter (translate” label strings,
    so this function is genrally only useful in test programs with
    predetermined locales, see gtk_test_init() for more details.
    """
    ...

def test_find_sibling(base_widget: Widget, widget_type: GObject.Type) -> Widget:
    """
    This function will search siblings of @base_widget and siblings of its
    ancestors for all widgets matching @widget_type.
    Of the matching widgets, the one that is geometrically closest to
    @base_widget will be returned.
    The general purpose of this function is to find the most likely “action”
    widget, relative to another labeling widget. Such as finding a
    button or text entry widget, given its corresponding label widget.
    """
    ...

def test_find_widget(widget: Widget, label_pattern: str, widget_type: GObject.Type) -> Widget:
    """
    This function will search the descendants of @widget for a widget
    of type @widget_type that has a label matching @label_pattern next
    to it. This is most useful for automated GUI testing, e.g. to find
    the “OK” button in a dialog and synthesize clicks on it.
    However see gtk_test_find_label(), gtk_test_find_sibling() and
    gtk_test_widget_click() for possible caveats involving the search of
    such widgets and synthesizing widget events.
    """
    ...

def test_init(argcp: int, argvp: object, *args: object) -> object:
    """
    This function is used to initialize a GTK+ test program.

    It will in turn call g_test_init() and gtk_init() to properly
    initialize the testing framework and graphical toolkit. It’ll
    also set the program’s locale to “C” and prevent loading of rc
    files and Gtk+ modules. This is done to make tets program
    environments as deterministic as possible.

    Like gtk_init() and g_test_init(), any known arguments will be
    processed and stripped from @argc and @argv.
    """
    ...

def test_list_all_types(n_types: int) -> object:
    """
    Return the type ids that have been registered after
    calling gtk_test_register_all_types().
    """
    ...

def test_register_all_types() -> object:
    """
    Force registration of all core Gtk+ and Gdk object types.
    This allowes to refer to any of those object types via
    g_type_from_name() after calling this function.
    """
    ...

def test_slider_get_value(widget: Widget) -> float:
    """
    Retrive the literal adjustment value for GtkRange based
    widgets and spin buttons. Note that the value returned by
    this function is anything between the lower and upper bounds
    of the adjustment belonging to @widget, and is not a percentage
    as passed in to gtk_test_slider_set_perc().
    """
    ...

def test_slider_set_perc(widget: Widget, percentage: float) -> object:
    """
    This function will adjust the slider position of all GtkRange
    based widgets, such as scrollbars or scales, it’ll also adjust
    spin buttons. The adjustment value of these widgets is set to
    a value between the lower and upper limits, according to the
    @percentage argument.
    """
    ...

def test_spin_button_click(spinner: SpinButton, button: int, upwards: bool) -> bool:
    """
    This function will generate a @button click in the upwards or downwards
    spin button arrow areas, usually leading to an increase or decrease of
    spin button’s value.
    """
    ...

def test_text_get(widget: Widget) -> str:
    """
    Retrive the text string of @widget if it is a GtkLabel,
    GtkEditable (entry and text widgets) or GtkTextView.
    """
    ...

def test_text_set(widget: Widget, string: str) -> object:
    """
    Set the text string of @widget to @string if it is a GtkLabel,
    GtkEditable (entry and text widgets) or GtkTextView.
    """
    ...

def test_widget_click(widget: Widget, button: int, modifiers: Gdk.ModifierType) -> bool:
    """
    This function will generate a @button click (button press and button
    release event) in the middle of the first GdkWindow found that belongs
    to @widget.
    For windowless widgets like #GtkButton (which returns %FALSE from
    gtk_widget_get_has_window()), this will often be an
    input-only event window. For other widgets, this is usually widget->window.
    Certain caveats should be considered when using this function, in
    particular because the mouse pointer is warped to the button click
    location, see gdk_test_simulate_button() for details.
    """
    ...

def test_widget_send_key(widget: Widget, keyval: int, modifiers: Gdk.ModifierType) -> bool:
    """
    This function will generate keyboard press and release events in
    the middle of the first GdkWindow found that belongs to @widget.
    For windowless widgets like #GtkButton (which returns %FALSE from
    gtk_widget_get_has_window()), this will often be an
    input-only event window. For other widgets, this is usually widget->window.
    Certain caveats should be considered when using this function, in
    particular because the mouse pointer is warped to the key press
    location, see gdk_test_simulate_key() for details.
    """
    ...

def test_widget_wait_for_draw(widget: Widget) -> object:
    """
    Enters the main loop and waits for @widget to be “drawn”. In this
    context that means it waits for the frame clock of @widget to have
    run a full styling, layout and drawing cycle.

    This function is intended to be used for syncing with actions that
    depend on @widget relayouting or on interaction with the display
    server.
    """
    ...

def tree_get_row_drag_data(selection_data: SelectionData, tree_model: _T.Optional[TreeModel], path: _T.Optional[TreePath]) -> bool:
    """
    Obtains a @tree_model and @path from selection data of target type
    %GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.
    This function can only be used if @selection_data originates from the same
    process that’s calling this function, because a pointer to the tree model
    is being passed around. If you aren’t in the same process, then you'll
    get memory corruption. In the #GtkTreeDragDest drag_data_received handler,
    you can assume that selection data of type %GTK_TREE_MODEL_ROW is
    in from the current process. The returned path must be freed with
    gtk_tree_path_free().
    """
    ...

def tree_set_row_drag_data(selection_data: SelectionData, tree_model: TreeModel, path: TreePath) -> bool:
    """
    Sets selection data of target type %GTK_TREE_MODEL_ROW. Normally used
    in a drag_data_get handler.
    """
    ...

def true() -> bool:
    """
    All this function does it to return %TRUE.

    This can be useful for example if you want to inhibit the deletion
    of a window. Of course you should not do this as the user expects
    a reaction from clicking the close icon of the window...

    ## A persistent window

    |[<!-- language="C" -->
    #include <gtk/gtk.h>

    int
    main (int argc, char **argv)
    {
      GtkWidget *win, *but;
      const char *text = "Close yourself. I mean it!";

      gtk_init (&argc, &argv);

      win = gtk_window_new (GTK_WINDOW_TOPLEVEL);
      g_signal_connect (win,
                        "delete-event",
                        G_CALLBACK (gtk_true),
                        NULL);
      g_signal_connect (win, "destroy",
                        G_CALLBACK (gtk_main_quit),
                        NULL);

      but = gtk_button_new_with_label (text);
      g_signal_connect_swapped (but, "clicked",
                                G_CALLBACK (gtk_object_destroy),
                                win);
      gtk_container_add (GTK_CONTAINER (win), but);

      gtk_widget_show_all (win);

      gtk_main ();

      return 0;
    }
    ]|
    """
    ...

class AboutDialog(Dialog, Atk.ImplementorIface, Buildable):
    """
    The GtkAboutDialog offers a simple way to display information about
    a program like its logo, name, copyright, website and license. It is
    also possible to give credits to the authors, documenters, translators
    and artists who have worked on the program. An about dialog is typically
    opened when the user selects the `About` option from the `Help` menu.
    All parts of the dialog are optional.

    About dialogs often contain links and email addresses. GtkAboutDialog
    displays these as clickable links. By default, it calls gtk_show_uri_on_window()
    when a user clicks one. The behaviour can be overridden with the
    #GtkAboutDialog::activate-link signal.

    To specify a person with an email address, use a string like
    "Edgar Allan Poe <edgar\@poe.com>". To specify a website with a title,
    use a string like "GTK+ team http://www.gtk.org".

    To make constructing a GtkAboutDialog as convenient as possible, you can
    use the function gtk_show_about_dialog() which constructs and shows a dialog
    and keeps it around so that it can be shown again.

    Note that GTK+ sets a default title of `_("About %s")` on the dialog
    window (where \%s is replaced by the name of the application, but in
    order to ensure proper translation of the title, applications should
    set the title property explicitly when constructing a GtkAboutDialog,
    as shown in the following example:
    |[<!-- language="C" -->
    GdkPixbuf *example_logo = gdk_pixbuf_new_from_file ("./logo.png", NULL);
    gtk_show_about_dialog (NULL,
                           "program-name", "ExampleCode",
                           "logo", example_logo,
                           "title", _("About ExampleCode"),
                           NULL);
    ]|

    It is also possible to show a #GtkAboutDialog like any other #GtkDialog,
    e.g. using gtk_dialog_run(). In this case, you might need to know that
    the “Close” button returns the #GTK_RESPONSE_CANCEL response id.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkAboutDialog.
        """
        ...

    def add_credit_section(self, section_name: str, people: object) -> object:
        """
        Creates a new section in the Credits page.
        """
        ...

    def get_artists(self) -> object:
        """
        Returns the string which are displayed in the artists tab
        of the secondary credits dialog.
        """
        ...

    def get_authors(self) -> object:
        """
        Returns the string which are displayed in the authors tab
        of the secondary credits dialog.
        """
        ...

    def get_comments(self) -> str:
        """
        Returns the comments string.
        """
        ...

    def get_copyright(self) -> str:
        """
        Returns the copyright string.
        """
        ...

    def get_documenters(self) -> object:
        """
        Returns the string which are displayed in the documenters
        tab of the secondary credits dialog.
        """
        ...

    def get_license(self) -> str:
        """
        Returns the license information.
        """
        ...

    def get_license_type(self) -> License:
        """
        Retrieves the license set using gtk_about_dialog_set_license_type()
        """
        ...

    def get_logo(self) -> GdkPixbuf.Pixbuf:
        """
        Returns the pixbuf displayed as logo in the about dialog.
        """
        ...

    def get_logo_icon_name(self) -> str:
        """
        Returns the icon name displayed as logo in the about dialog.
        """
        ...

    def get_program_name(self) -> str:
        """
        Returns the program name displayed in the about dialog.
        """
        ...

    def get_translator_credits(self) -> str:
        """
        Returns the translator credits string which is displayed
        in the translators tab of the secondary credits dialog.
        """
        ...

    def get_version(self) -> str:
        """
        Returns the version string.
        """
        ...

    def get_website(self) -> str:
        """
        Returns the website URL.
        """
        ...

    def get_website_label(self) -> str:
        """
        Returns the label used for the website link.
        """
        ...

    def get_wrap_license(self) -> bool:
        """
        Returns whether the license text in @about is
        automatically wrapped.
        """
        ...

    def set_artists(self, artists: object) -> object:
        """
        Sets the strings which are displayed in the artists tab
        of the secondary credits dialog.
        """
        ...

    def set_authors(self, authors: object) -> object:
        """
        Sets the strings which are displayed in the authors tab
        of the secondary credits dialog.
        """
        ...

    def set_comments(self, comments: _T.Optional[str]) -> object:
        """
        Sets the comments string to display in the about dialog.
        This should be a short string of one or two lines.
        """
        ...

    def set_copyright(self, copyright: _T.Optional[str]) -> object:
        """
        Sets the copyright string to display in the about dialog.
        This should be a short string of one or two lines.
        """
        ...

    def set_documenters(self, documenters: object) -> object:
        """
        Sets the strings which are displayed in the documenters tab
        of the secondary credits dialog.
        """
        ...

    def set_license(self, license: _T.Optional[str]) -> object:
        """
        Sets the license information to be displayed in the secondary
        license dialog. If @license is %NULL, the license button is
        hidden.
        """
        ...

    def set_license_type(self, license_type: License) -> object:
        """
        Sets the license of the application showing the @about dialog from a
        list of known licenses.

        This function overrides the license set using
        gtk_about_dialog_set_license().
        """
        ...

    def set_logo(self, logo: _T.Optional[GdkPixbuf.Pixbuf]) -> object:
        """
        Sets the pixbuf to be displayed as logo in the about dialog.
        If it is %NULL, the default window icon set with
        gtk_window_set_default_icon() will be used.
        """
        ...

    def set_logo_icon_name(self, icon_name: _T.Optional[str]) -> object:
        """
        Sets the pixbuf to be displayed as logo in the about dialog.
        If it is %NULL, the default window icon set with
        gtk_window_set_default_icon() will be used.
        """
        ...

    def set_program_name(self, name: str) -> object:
        """
        Sets the name to display in the about dialog.
        If this is not set, it defaults to g_get_application_name().
        """
        ...

    def set_translator_credits(self, translator_credits: _T.Optional[str]) -> object:
        """
        Sets the translator credits string which is displayed in
        the translators tab of the secondary credits dialog.

        The intended use for this string is to display the translator
        of the language which is currently used in the user interface.
        Using gettext(), a simple way to achieve that is to mark the
        string for translation:
        |[<!-- language="C" -->
        GtkWidget *about = gtk_about_dialog_new ();
        gtk_about_dialog_set_translator_credits (GTK_ABOUT_DIALOG (about),
                                                 _("translator-credits"));
        ]|
        It is a good idea to use the customary msgid “translator-credits” for this
        purpose, since translators will already know the purpose of that msgid, and
        since #GtkAboutDialog will detect if “translator-credits” is untranslated
        and hide the tab.
        """
        ...

    def set_version(self, version: _T.Optional[str]) -> object:
        """
        Sets the version string to display in the about dialog.
        """
        ...

    def set_website(self, website: _T.Optional[str]) -> object:
        """
        Sets the URL to use for the website link.
        """
        ...

    def set_website_label(self, website_label: str) -> object:
        """
        Sets the label to be used for the website link.
        """
        ...

    def set_wrap_license(self, wrap_license: bool) -> object:
        """
        Sets whether the license text in @about is
        automatically wrapped.
        """
        ...


    ...

class AccelGroup(GObject.Object):
    """
    A #GtkAccelGroup represents a group of keyboard accelerators,
    typically attached to a toplevel #GtkWindow (with
    gtk_window_add_accel_group()). Usually you won’t need to create a
    #GtkAccelGroup directly; instead, when using #GtkUIManager, GTK+
    automatically sets up the accelerators for your menus in the ui
    manager’s #GtkAccelGroup.

    Note that “accelerators” are different from
    “mnemonics”. Accelerators are shortcuts for
    activating a menu item; they appear alongside the menu item they’re a
    shortcut for. For example “Ctrl+Q” might appear alongside the “Quit”
    menu item. Mnemonics are shortcuts for GUI elements such as text
    entries or buttons; they appear as underlined characters. See
    gtk_label_new_with_mnemonic(). Menu items can have both accelerators
    and mnemonics, of course.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> AccelGroup:
        """
        Creates a new #GtkAccelGroup.
        """
        ...

    def activate(self, accel_quark: GLib.Quark, acceleratable: GObject.Object, accel_key: int, accel_mods: Gdk.ModifierType) -> bool:
        """
        Finds the first accelerator in @accel_group that matches
        @accel_key and @accel_mods, and activates it.
        """
        ...

    def connect(self, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: AccelFlags, closure: GObject.Closure) -> object:
        """
        Installs an accelerator in this group. When @accel_group is being
        activated in response to a call to gtk_accel_groups_activate(),
        @closure will be invoked if the @accel_key and @accel_mods from
        gtk_accel_groups_activate() match those of this connection.

        The signature used for the @closure is that of #GtkAccelGroupActivate.

        Note that, due to implementation details, a single closure can
        only be connected to one accelerator group.
        """
        ...

    def connect_by_path(self, accel_path: str, closure: GObject.Closure) -> object:
        """
        Installs an accelerator in this group, using an accelerator path
        to look up the appropriate key and modifiers (see
        gtk_accel_map_add_entry()). When @accel_group is being activated
        in response to a call to gtk_accel_groups_activate(), @closure will
        be invoked if the @accel_key and @accel_mods from
        gtk_accel_groups_activate() match the key and modifiers for the path.

        The signature used for the @closure is that of #GtkAccelGroupActivate.

        Note that @accel_path string will be stored in a #GQuark. Therefore,
        if you pass a static string, you can save some memory by interning it
        first with g_intern_static_string().
        """
        ...

    def disconnect(self, closure: _T.Optional[GObject.Closure]) -> bool:
        """
        Removes an accelerator previously installed through
        gtk_accel_group_connect().

        Since 2.20 @closure can be %NULL.
        """
        ...

    def disconnect_key(self, accel_key: int, accel_mods: Gdk.ModifierType) -> bool:
        """
        Removes an accelerator previously installed through
        gtk_accel_group_connect().
        """
        ...

    def find(self, find_func: AccelGroupFindFunc, data: _T.Optional[object]) -> AccelKey:
        """
        Finds the first entry in an accelerator group for which
        @find_func returns %TRUE and returns its #GtkAccelKey.
        """
        ...

    def get_is_locked(self) -> bool:
        """
        Locks are added and removed using gtk_accel_group_lock() and
        gtk_accel_group_unlock().
        """
        ...

    def get_modifier_mask(self) -> Gdk.ModifierType:
        """
        Gets a #GdkModifierType representing the mask for this
        @accel_group. For example, #GDK_CONTROL_MASK, #GDK_SHIFT_MASK, etc.
        """
        ...

    def lock(self) -> object:
        """
        Locks the given accelerator group.

        Locking an acelerator group prevents the accelerators contained
        within it to be changed during runtime. Refer to
        gtk_accel_map_change_entry() about runtime accelerator changes.

        If called more than once, @accel_group remains locked until
        gtk_accel_group_unlock() has been called an equivalent number
        of times.
        """
        ...

    def query(self, accel_key: int, accel_mods: Gdk.ModifierType, n_entries: int) -> object:
        """
        Queries an accelerator group for all entries matching @accel_key
        and @accel_mods.
        """
        ...

    def unlock(self) -> object:
        """
        Undoes the last call to gtk_accel_group_lock() on this @accel_group.
        """
        ...


    ...

class AccelLabel(Label, Atk.ImplementorIface, Buildable):
    """
    The #GtkAccelLabel widget is a subclass of #GtkLabel that also displays an
    accelerator key on the right of the label text, e.g. “Ctrl+S”.
    It is commonly used in menus to show the keyboard short-cuts for commands.

    The accelerator key to display is typically not set explicitly (although it
    can be, with gtk_accel_label_set_accel()). Instead, the #GtkAccelLabel displays
    the accelerators which have been added to a particular widget. This widget is
    set by calling gtk_accel_label_set_accel_widget().

    For example, a #GtkMenuItem widget may have an accelerator added to emit
    the “activate” signal when the “Ctrl+S” key combination is pressed.
    A #GtkAccelLabel is created and added to the #GtkMenuItem, and
    gtk_accel_label_set_accel_widget() is called with the #GtkMenuItem as the
    second argument. The #GtkAccelLabel will now display “Ctrl+S” after its label.

    Note that creating a #GtkMenuItem with gtk_menu_item_new_with_label() (or
    one of the similar functions for #GtkCheckMenuItem and #GtkRadioMenuItem)
    automatically adds a #GtkAccelLabel to the #GtkMenuItem and calls
    gtk_accel_label_set_accel_widget() to set it up for you.

    A #GtkAccelLabel will only display accelerators which have %GTK_ACCEL_VISIBLE
    set (see #GtkAccelFlags).
    A #GtkAccelLabel can display multiple accelerators and even signal names,
    though it is almost always used to display just one accelerator key.

    ## Creating a simple menu item with an accelerator key.

    |[<!-- language="C" -->
      GtkWidget *window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
      GtkWidget *menu = gtk_menu_new ();
      GtkWidget *save_item;
      GtkAccelGroup *accel_group;

      // Create a GtkAccelGroup and add it to the window.
      accel_group = gtk_accel_group_new ();
      gtk_window_add_accel_group (GTK_WINDOW (window), accel_group);

      // Create the menu item using the convenience function.
      save_item = gtk_menu_item_new_with_label ("Save");
      gtk_widget_show (save_item);
      gtk_container_add (GTK_CONTAINER (menu), save_item);

      // Now add the accelerator to the GtkMenuItem. Note that since we
      // called gtk_menu_item_new_with_label() to create the GtkMenuItem
      // the GtkAccelLabel is automatically set up to display the
      // GtkMenuItem accelerators. We just need to make sure we use
      // GTK_ACCEL_VISIBLE here.
      gtk_widget_add_accelerator (save_item, "activate", accel_group,
                                  GDK_KEY_s, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    label
    ╰── accelerator
    ]|

    Like #GtkLabel, GtkAccelLabel has a main CSS node with the name label.
    It adds a subnode with name accelerator.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, string: str) -> Widget:
        """
        Creates a new #GtkAccelLabel.
        """
        ...

    def get_accel(self, accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> object:
        """
        Gets the keyval and modifier mask set with
        gtk_accel_label_set_accel().
        """
        ...

    def get_accel_widget(self) -> Widget:
        """
        Fetches the widget monitored by this accelerator label. See
        gtk_accel_label_set_accel_widget().
        """
        ...

    def get_accel_width(self) -> int:
        """
        Returns the width needed to display the accelerator key(s).
        This is used by menus to align all of the #GtkMenuItem widgets, and shouldn't
        be needed by applications.
        """
        ...

    def refetch(self) -> bool:
        """
        Recreates the string representing the accelerator keys.
        This should not be needed since the string is automatically updated whenever
        accelerators are added or removed from the associated widget.
        """
        ...

    def set_accel(self, accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> object:
        """
        Manually sets a keyval and modifier mask as the accelerator rendered
        by @accel_label.

        If a keyval and modifier are explicitly set then these values are
        used regardless of any associated accel closure or widget.

        Providing an @accelerator_key of 0 removes the manual setting.
        """
        ...

    def set_accel_closure(self, accel_closure: _T.Optional[GObject.Closure]) -> object:
        """
        Sets the closure to be monitored by this accelerator label. The closure
        must be connected to an accelerator group; see gtk_accel_group_connect().
        Passing %NULL for @accel_closure will dissociate @accel_label from its
        current closure, if any.
        """
        ...

    def set_accel_widget(self, accel_widget: _T.Optional[Widget]) -> object:
        """
        Sets the widget to be monitored by this accelerator label. Passing %NULL for
        @accel_widget will dissociate @accel_label from its current widget, if any.
        """
        ...


    ...

class AccelMap(GObject.Object):
    """
    Accelerator maps are used to define runtime configurable accelerators.
    Functions for manipulating them are are usually used by higher level
    convenience mechanisms like #GtkUIManager and are thus considered
    “low-level”. You’ll want to use them if you’re manually creating menus that
    should have user-configurable accelerators.

    An accelerator is uniquely defined by:
    - accelerator path
    - accelerator key
    - accelerator modifiers

    The accelerator path must consist of
    “<WINDOWTYPE>/Category1/Category2/.../Action”, where WINDOWTYPE
    should be a unique application-specific identifier that corresponds
    to the kind of window the accelerator is being used in, e.g.
    “Gimp-Image”, “Abiword-Document” or “Gnumeric-Settings”.
    The “Category1/.../Action” portion is most appropriately chosen by
    the action the accelerator triggers, i.e. for accelerators on menu
    items, choose the item’s menu path, e.g. “File/Save As”,
    “Image/View/Zoom” or “Edit/Select All”. So a full valid accelerator
    path may look like: “<Gimp-Toolbox>/File/Dialogs/Tool Options...”.

    All accelerators are stored inside one global #GtkAccelMap that can
    be obtained using gtk_accel_map_get(). See
    [Monitoring changes][monitoring-changes] for additional
    details.

    # Manipulating accelerators

    New accelerators can be added using gtk_accel_map_add_entry().
    To search for specific accelerator, use gtk_accel_map_lookup_entry().
    Modifications of existing accelerators should be done using
    gtk_accel_map_change_entry().

    In order to avoid having some accelerators changed, they can be
    locked using gtk_accel_map_lock_path(). Unlocking is done using
    gtk_accel_map_unlock_path().

    # Saving and loading accelerator maps

    Accelerator maps can be saved to and loaded from some external
    resource. For simple saving and loading from file,
    gtk_accel_map_save() and gtk_accel_map_load() are provided.
    Saving and loading can also be done by providing file descriptor
    to gtk_accel_map_save_fd() and gtk_accel_map_load_fd().

    # Monitoring changes

    #GtkAccelMap object is only useful for monitoring changes of
    accelerators. By connecting to #GtkAccelMap::changed signal, one
    can monitor changes of all accelerators. It is also possible to
    monitor only single accelerator path by using it as a detail of
    the #GtkAccelMap::changed signal.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Accessible(Atk.Object):
    """
    The #GtkAccessible class is the base class for accessible
    implementations for #GtkWidget subclasses. It is a thin
    wrapper around #AtkObject, which adds facilities for associating
    a widget with its accessible object.

    An accessible implementation for a third-party widget should
    derive from #GtkAccessible and implement the suitable interfaces
    from ATK, such as #AtkText or #AtkSelection. To establish
    the connection between the widget class and its corresponding
    acccessible implementation, override the get_accessible vfunc
    in #GtkWidgetClass.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def connect_widget_destroyed(self) -> object:
        """
        This function specifies the callback function to be called
        when the widget corresponding to a GtkAccessible is destroyed.
        """
        ...

    def get_widget(self) -> Widget:
        """
        Gets the #GtkWidget corresponding to the #GtkAccessible.
        The returned widget does not have a reference added, so
        you do not need to unref it.
        """
        ...

    def set_widget(self, widget: _T.Optional[Widget]) -> object:
        """
        Sets the #GtkWidget corresponding to the #GtkAccessible.

        @accessible will not hold a reference to @widget.
        It is the caller’s responsibility to ensure that when @widget
        is destroyed, the widget is unset by calling this function
        again with @widget set to %NULL.
        """
        ...


    ...

class Action(GObject.Object, Buildable):
    """
    > In GTK+ 3.10, GtkAction has been deprecated. Use #GAction
    > instead, and associate actions with #GtkActionable widgets. Use
    > #GMenuModel for creating menus with gtk_menu_new_from_model().

    Actions represent operations that the user can be perform, along with
    some information how it should be presented in the interface. Each action
    provides methods to create icons, menu items and toolbar items
    representing itself.

    As well as the callback that is called when the action gets activated,
    the following also gets associated with the action:

    - a name (not translated, for path lookup)

    - a label (translated, for display)

    - an accelerator

    - whether label indicates a stock id

    - a tooltip (optional, translated)

    - a toolbar label (optional, shorter than label)


    The action will also have some state information:

    - visible (shown/hidden)

    - sensitive (enabled/disabled)

    Apart from regular actions, there are [toggle actions][GtkToggleAction],
    which can be toggled between two states and
    [radio actions][GtkRadioAction], of which only one in a group
    can be in the “active” state. Other actions can be implemented as #GtkAction
    subclasses.

    Each action can have one or more proxy widgets. To act as an action proxy,
    widget needs to implement #GtkActivatable interface. Proxies mirror the state
    of the action and should change when the action’s state changes. Properties
    that are always mirrored by proxies are #GtkAction:sensitive and
    #GtkAction:visible. #GtkAction:gicon, #GtkAction:icon-name, #GtkAction:label,
    #GtkAction:short-label and #GtkAction:stock-id properties are only mirorred
    if proxy widget has #GtkActivatable:use-action-appearance property set to
    %TRUE.

    When the proxy is activated, it should activate its action.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: str, label: _T.Optional[str], tooltip: _T.Optional[str], stock_id: _T.Optional[str]) -> Action:
        """
        Creates a new #GtkAction object. To add the action to a
        #GtkActionGroup and set the accelerator for the action,
        call gtk_action_group_add_action_with_accel().
        See the [UI Definition section][XML-UI] for information on allowed action
        names.
        """
        ...

    def activate(self) -> object:
        """
        Emits the “activate” signal on the specified action, if it isn't
        insensitive. This gets called by the proxy widgets when they get
        activated.

        It can also be used to manually activate an action.
        """
        ...

    def block_activate(self) -> object:
        """
        Disable activation signals from the action

        This is needed when updating the state of your proxy
        #GtkActivatable widget could result in calling gtk_action_activate(),
        this is a convenience function to avoid recursing in those
        cases (updating toggle state for instance).
        """
        ...

    def connect_accelerator(self) -> object:
        """
        Installs the accelerator for @action if @action has an
        accel path and group. See gtk_action_set_accel_path() and
        gtk_action_set_accel_group()

        Since multiple proxies may independently trigger the installation
        of the accelerator, the @action counts the number of times this
        function has been called and doesn’t remove the accelerator until
        gtk_action_disconnect_accelerator() has been called as many times.
        """
        ...

    def create_icon(self, icon_size: int) -> Widget:
        """
        This function is intended for use by action implementations to
        create icons displayed in the proxy widgets.
        """
        ...

    def create_menu(self) -> Widget:
        """
        If @action provides a #GtkMenu widget as a submenu for the menu
        item or the toolbar item it creates, this function returns an
        instance of that menu.
        """
        ...

    def create_menu_item(self) -> Widget:
        """
        Creates a menu item widget that proxies for the given action.
        """
        ...

    def create_tool_item(self) -> Widget:
        """
        Creates a toolbar item widget that proxies for the given action.
        """
        ...

    def disconnect_accelerator(self) -> object:
        """
        Undoes the effect of one call to gtk_action_connect_accelerator().
        """
        ...

    def get_accel_closure(self) -> GObject.Closure:
        """
        Returns the accel closure for this action.
        """
        ...

    def get_accel_path(self) -> str:
        """
        Returns the accel path for this action.
        """
        ...

    def get_always_show_image(self) -> bool:
        """
        Returns whether @action's menu item proxies will always
        show their image, if available.
        """
        ...

    def get_gicon(self) -> Gio.Icon:
        """
        Gets the gicon of @action.
        """
        ...

    def get_icon_name(self) -> str:
        """
        Gets the icon name of @action.
        """
        ...

    def get_is_important(self) -> bool:
        """
        Checks whether @action is important or not
        """
        ...

    def get_label(self) -> str:
        """
        Gets the label text of @action.
        """
        ...

    def get_name(self) -> str:
        """
        Returns the name of the action.
        """
        ...

    def get_proxies(self) -> GLib.SList:
        """
        Returns the proxy widgets for an action.
        See also gtk_activatable_get_related_action().
        """
        ...

    def get_sensitive(self) -> bool:
        """
        Returns whether the action itself is sensitive. Note that this doesn’t
        necessarily mean effective sensitivity. See gtk_action_is_sensitive()
        for that.
        """
        ...

    def get_short_label(self) -> str:
        """
        Gets the short label text of @action.
        """
        ...

    def get_stock_id(self) -> str:
        """
        Gets the stock id of @action.
        """
        ...

    def get_tooltip(self) -> str:
        """
        Gets the tooltip text of @action.
        """
        ...

    def get_visible(self) -> bool:
        """
        Returns whether the action itself is visible. Note that this doesn’t
        necessarily mean effective visibility. See gtk_action_is_sensitive()
        for that.
        """
        ...

    def get_visible_horizontal(self) -> bool:
        """
        Checks whether @action is visible when horizontal
        """
        ...

    def get_visible_vertical(self) -> bool:
        """
        Checks whether @action is visible when horizontal
        """
        ...

    def is_sensitive(self) -> bool:
        """
        Returns whether the action is effectively sensitive.
        """
        ...

    def is_visible(self) -> bool:
        """
        Returns whether the action is effectively visible.
        """
        ...

    def set_accel_group(self, accel_group: _T.Optional[AccelGroup]) -> object:
        """
        Sets the #GtkAccelGroup in which the accelerator for this action
        will be installed.
        """
        ...

    def set_accel_path(self, accel_path: str) -> object:
        """
        Sets the accel path for this action.  All proxy widgets associated
        with the action will have this accel path, so that their
        accelerators are consistent.

        Note that @accel_path string will be stored in a #GQuark. Therefore, if you
        pass a static string, you can save some memory by interning it first with
        g_intern_static_string().
        """
        ...

    def set_always_show_image(self, always_show: bool) -> object:
        """
        Sets whether @action's menu item proxies will ignore the
        #GtkSettings:gtk-menu-images setting and always show their image, if available.

        Use this if the menu item would be useless or hard to use
        without their image.
        """
        ...

    def set_gicon(self, icon: Gio.Icon) -> object:
        """
        Sets the icon of @action.
        """
        ...

    def set_icon_name(self, icon_name: str) -> object:
        """
        Sets the icon name on @action
        """
        ...

    def set_is_important(self, is_important: bool) -> object:
        """
        Sets whether the action is important, this attribute is used
        primarily by toolbar items to decide whether to show a label
        or not.
        """
        ...

    def set_label(self, label: str) -> object:
        """
        Sets the label of @action.
        """
        ...

    def set_sensitive(self, sensitive: bool) -> object:
        """
        Sets the :sensitive property of the action to @sensitive. Note that
        this doesn’t necessarily mean effective sensitivity. See
        gtk_action_is_sensitive()
        for that.
        """
        ...

    def set_short_label(self, short_label: str) -> object:
        """
        Sets a shorter label text on @action.
        """
        ...

    def set_stock_id(self, stock_id: str) -> object:
        """
        Sets the stock id on @action
        """
        ...

    def set_tooltip(self, tooltip: str) -> object:
        """
        Sets the tooltip text on @action
        """
        ...

    def set_visible(self, visible: bool) -> object:
        """
        Sets the :visible property of the action to @visible. Note that
        this doesn’t necessarily mean effective visibility. See
        gtk_action_is_visible()
        for that.
        """
        ...

    def set_visible_horizontal(self, visible_horizontal: bool) -> object:
        """
        Sets whether @action is visible when horizontal
        """
        ...

    def set_visible_vertical(self, visible_vertical: bool) -> object:
        """
        Sets whether @action is visible when vertical
        """
        ...

    def unblock_activate(self) -> object:
        """
        Reenable activation signals from the action
        """
        ...


    ...

class ActionBar(Bin, Atk.ImplementorIface, Buildable):
    """
    GtkActionBar is designed to present contextual actions. It is
    expected to be displayed below the content and expand horizontally
    to fill the area.

    It allows placing children at the start or the end. In addition, it
    contains an internal centered box which is centered with respect to
    the full width of the box, even if the children at either side take
    up different amounts of space.

    # CSS nodes

    GtkActionBar has a single CSS node with name actionbar.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkActionBar widget.
        """
        ...

    def get_center_widget(self) -> Widget:
        """
        Retrieves the center bar widget of the bar.
        """
        ...

    def pack_end(self, child: Widget) -> object:
        """
        Adds @child to @action_bar, packed with reference to the
        end of the @action_bar.
        """
        ...

    def pack_start(self, child: Widget) -> object:
        """
        Adds @child to @action_bar, packed with reference to the
        start of the @action_bar.
        """
        ...

    def set_center_widget(self, center_widget: _T.Optional[Widget]) -> object:
        """
        Sets the center widget for the #GtkActionBar.
        """
        ...


    ...

class ActionGroup(GObject.Object, Buildable):
    """
    Actions are organised into groups. An action group is essentially a
    map from names to #GtkAction objects.

    All actions that would make sense to use in a particular context
    should be in a single group. Multiple action groups may be used for a
    particular user interface. In fact, it is expected that most nontrivial
    applications will make use of multiple groups. For example, in an
    application that can edit multiple documents, one group holding global
    actions (e.g. quit, about, new), and one group per document holding
    actions that act on that document (eg. save, cut/copy/paste, etc). Each
    window’s menus would be constructed from a combination of two action
    groups.

    ## Accelerators ## {#Action-Accel}

    Accelerators are handled by the GTK+ accelerator map. All actions are
    assigned an accelerator path (which normally has the form
    `<Actions>/group-name/action-name`) and a shortcut is associated with
    this accelerator path. All menuitems and toolitems take on this accelerator
    path. The GTK+ accelerator map code makes sure that the correct shortcut
    is displayed next to the menu item.

    # GtkActionGroup as GtkBuildable # {#GtkActionGroup-BUILDER-UI}

    The #GtkActionGroup implementation of the #GtkBuildable interface accepts
    #GtkAction objects as `<child>` elements in UI definitions.

    Note that it is probably more common to define actions and action groups
    in the code, since they are directly related to what the code can do.

    The GtkActionGroup implementation of the GtkBuildable interface supports
    a custom `<accelerator>` element, which has attributes named “key“ and
    “modifiers“ and allows to specify accelerators. This is similar to the
    `<accelerator>` element of #GtkWidget, the main difference is that
    it doesn’t allow you to specify a signal.

    ## A #GtkDialog UI definition fragment. ##

    |[<!-- language="xml" -->
    <object class="GtkActionGroup" id="actiongroup">
      <child>
          <object class="GtkAction" id="About">
              <property name="name">About</property>
              <property name="stock_id">gtk-about</property>
              <signal handler="about_activate" name="activate"/>
          </object>
          <accelerator key="F1" modifiers="GDK_CONTROL_MASK | GDK_SHIFT_MASK"/>
      </child>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: str) -> ActionGroup:
        """
        Creates a new #GtkActionGroup object. The name of the action group
        is used when associating [keybindings][Action-Accel]
        with the actions.
        """
        ...

    def add_action(self, action: Action) -> object:
        """
        Adds an action object to the action group. Note that this function
        does not set up the accel path of the action, which can lead to problems
        if a user tries to modify the accelerator of a menuitem associated with
        the action. Therefore you must either set the accel path yourself with
        gtk_action_set_accel_path(), or use
        `gtk_action_group_add_action_with_accel (..., NULL)`.
        """
        ...

    def add_action_with_accel(self, action: Action, accelerator: _T.Optional[str]) -> object:
        """
        Adds an action object to the action group and sets up the accelerator.

        If @accelerator is %NULL, attempts to use the accelerator associated
        with the stock_id of the action.

        Accel paths are set to `<Actions>/group-name/action-name`.
        """
        ...

    def add_actions(self, entries: object, n_entries: int, user_data: _T.Optional[object]) -> object:
        """
        This is a convenience function to create a number of actions and add them
        to the action group.

        The “activate” signals of the actions are connected to the callbacks
        and their accel paths are set to `<Actions>/group-name/action-name`.
        """
        ...

    def add_actions_full(self, entries: object, n_entries: int, user_data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        This variant of gtk_action_group_add_actions() adds a #GDestroyNotify
        callback for @user_data.
        """
        ...

    def add_radio_actions(self, entries: object, n_entries: int, value: int, on_change: GObject.Callback, user_data: _T.Optional[object]) -> object:
        """
        This is a convenience routine to create a group of radio actions and
        add them to the action group.

        The “changed” signal of the first radio action is connected to the
        @on_change callback and the accel paths of the actions are set to
        `<Actions>/group-name/action-name`.
        """
        ...

    def add_radio_actions_full(self, entries: object, n_entries: int, value: int, on_change: GObject.Callback, user_data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        This variant of gtk_action_group_add_radio_actions() adds a
        #GDestroyNotify callback for @user_data.
        """
        ...

    def add_toggle_actions(self, entries: object, n_entries: int, user_data: _T.Optional[object]) -> object:
        """
        This is a convenience function to create a number of toggle actions and add them
        to the action group.

        The “activate” signals of the actions are connected to the callbacks
        and their accel paths are set to `<Actions>/group-name/action-name`.
        """
        ...

    def add_toggle_actions_full(self, entries: object, n_entries: int, user_data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        This variant of gtk_action_group_add_toggle_actions() adds a
        #GDestroyNotify callback for @user_data.
        """
        ...

    def get_accel_group(self) -> AccelGroup:
        """
        Gets the accelerator group.
        """
        ...

    def get_action(self, action_name: str) -> Action:
        """
        Looks up an action in the action group by name.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the name of the action group.
        """
        ...

    def get_sensitive(self) -> bool:
        """
        Returns %TRUE if the group is sensitive.  The constituent actions
        can only be logically sensitive (see gtk_action_is_sensitive()) if
        they are sensitive (see gtk_action_get_sensitive()) and their group
        is sensitive.
        """
        ...

    def get_visible(self) -> bool:
        """
        Returns %TRUE if the group is visible.  The constituent actions
        can only be logically visible (see gtk_action_is_visible()) if
        they are visible (see gtk_action_get_visible()) and their group
        is visible.
        """
        ...

    def list_actions(self) -> GLib.List:
        """
        Lists the actions in the action group.
        """
        ...

    def remove_action(self, action: Action) -> object:
        """
        Removes an action object from the action group.
        """
        ...

    def set_accel_group(self, accel_group: _T.Optional[AccelGroup]) -> object:
        """
        Sets the accelerator group to be used by every action in this group.
        """
        ...

    def set_sensitive(self, sensitive: bool) -> object:
        """
        Changes the sensitivity of @action_group
        """
        ...

    def set_translate_func(self, func: TranslateFunc, data: _T.Optional[object], notify: GLib.DestroyNotify) -> object:
        """
        Sets a function to be used for translating the @label and @tooltip of
        #GtkActionEntrys added by gtk_action_group_add_actions().

        If you’re using gettext(), it is enough to set the translation domain
        with gtk_action_group_set_translation_domain().
        """
        ...

    def set_translation_domain(self, domain: _T.Optional[str]) -> object:
        """
        Sets the translation domain and uses g_dgettext() for translating the
        @label and @tooltip of #GtkActionEntrys added by
        gtk_action_group_add_actions().

        If you’re not using gettext() for localization, see
        gtk_action_group_set_translate_func().
        """
        ...

    def set_visible(self, visible: bool) -> object:
        """
        Changes the visible of @action_group.
        """
        ...

    def translate_string(self, string: str) -> str:
        """
        Translates a string using the function set with
        gtk_action_group_set_translate_func(). This
        is mainly intended for language bindings.
        """
        ...


    ...

class Adjustment(GObject.InitiallyUnowned):
    """
    The #GtkAdjustment object represents a value which has an associated lower
    and upper bound, together with step and page increments, and a page size.
    It is used within several GTK+ widgets, including #GtkSpinButton, #GtkViewport,
    and #GtkRange (which is a base class for #GtkScrollbar and #GtkScale).

    The #GtkAdjustment object does not update the value itself. Instead
    it is left up to the owner of the #GtkAdjustment to control the value.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, value: float, lower: float, upper: float, step_increment: float, page_increment: float, page_size: float) -> Adjustment:
        """
        Creates a new #GtkAdjustment.
        """
        ...

    def changed(self) -> object:
        """
        Emits a #GtkAdjustment::changed signal from the #GtkAdjustment.
        This is typically called by the owner of the #GtkAdjustment after it has
        changed any of the #GtkAdjustment properties other than the value.
        """
        ...

    def clamp_page(self, lower: float, upper: float) -> object:
        """
        Updates the #GtkAdjustment:value property to ensure that the range
        between @lower and @upper is in the current page (i.e. between
        #GtkAdjustment:value and #GtkAdjustment:value + #GtkAdjustment:page-size).
        If the range is larger than the page size, then only the start of it will
        be in the current page.

        A #GtkAdjustment::value-changed signal will be emitted if the value is changed.
        """
        ...

    def configure(self, value: float, lower: float, upper: float, step_increment: float, page_increment: float, page_size: float) -> object:
        """
        Sets all properties of the adjustment at once.

        Use this function to avoid multiple emissions of the
        #GtkAdjustment::changed signal. See gtk_adjustment_set_lower()
        for an alternative way of compressing multiple emissions of
        #GtkAdjustment::changed into one.
        """
        ...

    def get_lower(self) -> float:
        """
        Retrieves the minimum value of the adjustment.
        """
        ...

    def get_minimum_increment(self) -> float:
        """
        Gets the smaller of step increment and page increment.
        """
        ...

    def get_page_increment(self) -> float:
        """
        Retrieves the page increment of the adjustment.
        """
        ...

    def get_page_size(self) -> float:
        """
        Retrieves the page size of the adjustment.
        """
        ...

    def get_step_increment(self) -> float:
        """
        Retrieves the step increment of the adjustment.
        """
        ...

    def get_upper(self) -> float:
        """
        Retrieves the maximum value of the adjustment.
        """
        ...

    def get_value(self) -> float:
        """
        Gets the current value of the adjustment.
        See gtk_adjustment_set_value().
        """
        ...

    def set_lower(self, lower: float) -> object:
        """
        Sets the minimum value of the adjustment.

        When setting multiple adjustment properties via their individual
        setters, multiple #GtkAdjustment::changed signals will be emitted.
        However, since the emission of the #GtkAdjustment::changed signal
        is tied to the emission of the #GObject::notify signals of the changed
        properties, it’s possible to compress the #GtkAdjustment::changed
        signals into one by calling g_object_freeze_notify() and
        g_object_thaw_notify() around the calls to the individual setters.

        Alternatively, using a single g_object_set() for all the properties
        to change, or using gtk_adjustment_configure() has the same effect
        of compressing #GtkAdjustment::changed emissions.
        """
        ...

    def set_page_increment(self, page_increment: float) -> object:
        """
        Sets the page increment of the adjustment.

        See gtk_adjustment_set_lower() about how to compress multiple
        emissions of the #GtkAdjustment::changed signal when setting
        multiple adjustment properties.
        """
        ...

    def set_page_size(self, page_size: float) -> object:
        """
        Sets the page size of the adjustment.

        See gtk_adjustment_set_lower() about how to compress multiple
        emissions of the GtkAdjustment::changed signal when setting
        multiple adjustment properties.
        """
        ...

    def set_step_increment(self, step_increment: float) -> object:
        """
        Sets the step increment of the adjustment.

        See gtk_adjustment_set_lower() about how to compress multiple
        emissions of the #GtkAdjustment::changed signal when setting
        multiple adjustment properties.
        """
        ...

    def set_upper(self, upper: float) -> object:
        """
        Sets the maximum value of the adjustment.

        Note that values will be restricted by `upper - page-size`
        if the page-size property is nonzero.

        See gtk_adjustment_set_lower() about how to compress multiple
        emissions of the #GtkAdjustment::changed signal when setting
        multiple adjustment properties.
        """
        ...

    def set_value(self, value: float) -> object:
        """
        Sets the #GtkAdjustment value. The value is clamped to lie between
        #GtkAdjustment:lower and #GtkAdjustment:upper.

        Note that for adjustments which are used in a #GtkScrollbar, the
        effective range of allowed values goes from #GtkAdjustment:lower to
        #GtkAdjustment:upper - #GtkAdjustment:page-size.
        """
        ...

    def value_changed(self) -> object:
        """
        Emits a #GtkAdjustment::value-changed signal from the #GtkAdjustment.
        This is typically called by the owner of the #GtkAdjustment after it has
        changed the #GtkAdjustment:value property.
        """
        ...


    ...

class Alignment(Bin, Atk.ImplementorIface, Buildable):
    """
    The #GtkAlignment widget controls the alignment and size of its child widget.
    It has four settings: xscale, yscale, xalign, and yalign.

    The scale settings are used to specify how much the child widget should
    expand to fill the space allocated to the #GtkAlignment.
    The values can range from 0 (meaning the child doesn’t expand at all) to
    1 (meaning the child expands to fill all of the available space).

    The align settings are used to place the child widget within the available
    area. The values range from 0 (top or left) to 1 (bottom or right).
    Of course, if the scale settings are both set to 1, the alignment settings
    have no effect.

    GtkAlignment has been deprecated in 3.14 and should not be used in
    newly-written code. The desired effect can be achieved by using the
    #GtkWidget:halign, #GtkWidget:valign and #GtkWidget:margin properties on the
    child widget.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, xalign: float, yalign: float, xscale: float, yscale: float) -> Widget:
        """
        Creates a new #GtkAlignment.
        """
        ...

    def get_padding(self, padding_top: int, padding_bottom: int, padding_left: int, padding_right: int) -> object:
        """
        Gets the padding on the different sides of the widget.
        See gtk_alignment_set_padding ().
        """
        ...

    def set(self, xalign: float, yalign: float, xscale: float, yscale: float) -> object:
        """
        Sets the #GtkAlignment values.
        """
        ...

    def set_padding(self, padding_top: int, padding_bottom: int, padding_left: int, padding_right: int) -> object:
        """
        Sets the padding on the different sides of the widget.
        The padding adds blank space to the sides of the widget. For instance,
        this can be used to indent the child widget towards the right by adding
        padding on the left.
        """
        ...


    ...

class AppChooserButton(ComboBox, Atk.ImplementorIface, AppChooser, Buildable, CellEditable, CellLayout):
    """
    The #GtkAppChooserButton is a widget that lets the user select
    an application. It implements the #GtkAppChooser interface.

    Initially, a #GtkAppChooserButton selects the first application
    in its list, which will either be the most-recently used application
    or, if #GtkAppChooserButton:show-default-item is %TRUE, the
    default application.

    The list of applications shown in a #GtkAppChooserButton includes
    the recommended applications for the given content type. When
    #GtkAppChooserButton:show-default-item is set, the default application
    is also included. To let the user chooser other applications,
    you can set the #GtkAppChooserButton:show-dialog-item property,
    which allows to open a full #GtkAppChooserDialog.

    It is possible to add custom items to the list, using
    gtk_app_chooser_button_append_custom_item(). These items cause
    the #GtkAppChooserButton::custom-item-activated signal to be
    emitted when they are selected.

    To track changes in the selected application, use the
    #GtkComboBox::changed signal.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, content_type: str) -> Widget:
        """
        Creates a new #GtkAppChooserButton for applications
        that can handle content of the given type.
        """
        ...

    def append_custom_item(self, name: str, label: str, icon: Gio.Icon) -> object:
        """
        Appends a custom item to the list of applications that is shown
        in the popup; the item name must be unique per-widget.
        Clients can use the provided name as a detail for the
        #GtkAppChooserButton::custom-item-activated signal, to add a
        callback for the activation of a particular custom item in the list.
        See also gtk_app_chooser_button_append_separator().
        """
        ...

    def append_separator(self) -> object:
        """
        Appends a separator to the list of applications that is shown
        in the popup.
        """
        ...

    def get_heading(self) -> str:
        """
        Returns the text to display at the top of the dialog.
        """
        ...

    def get_show_default_item(self) -> bool:
        """
        Returns the current value of the #GtkAppChooserButton:show-default-item
        property.
        """
        ...

    def get_show_dialog_item(self) -> bool:
        """
        Returns the current value of the #GtkAppChooserButton:show-dialog-item
        property.
        """
        ...

    def set_active_custom_item(self, name: str) -> object:
        """
        Selects a custom item previously added with
        gtk_app_chooser_button_append_custom_item().

        Use gtk_app_chooser_refresh() to bring the selection
        to its initial state.
        """
        ...

    def set_heading(self, heading: str) -> object:
        """
        Sets the text to display at the top of the dialog.
        If the heading is not set, the dialog displays a default text.
        """
        ...

    def set_show_default_item(self, setting: bool) -> object:
        """
        Sets whether the dropdown menu of this button should show the
        default application for the given content type at top.
        """
        ...

    def set_show_dialog_item(self, setting: bool) -> object:
        """
        Sets whether the dropdown menu of this button should show an
        entry to trigger a #GtkAppChooserDialog.
        """
        ...


    ...

class AppChooserDialog(Dialog, Atk.ImplementorIface, AppChooser, Buildable):
    """
    #GtkAppChooserDialog shows a #GtkAppChooserWidget inside a #GtkDialog.

    Note that #GtkAppChooserDialog does not have any interesting methods
    of its own. Instead, you should get the embedded #GtkAppChooserWidget
    using gtk_app_chooser_dialog_get_widget() and call its methods if
    the generic #GtkAppChooser interface is not sufficient for your needs.

    To set the heading that is shown above the #GtkAppChooserWidget,
    use gtk_app_chooser_dialog_set_heading().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, parent: _T.Optional[Window], flags: DialogFlags, file: Gio.File) -> Widget:
        """
        Creates a new #GtkAppChooserDialog for the provided #GFile,
        to allow the user to select an application for it.
        """
        ...


    @classmethod
    def new_for_content_type(cls, parent: _T.Optional[Window], flags: DialogFlags, content_type: str) -> Widget:
        """
        Creates a new #GtkAppChooserDialog for the provided content type,
        to allow the user to select an application for it.
        """
        ...

    def get_heading(self) -> str:
        """
        Returns the text to display at the top of the dialog.
        """
        ...

    def get_widget(self) -> Widget:
        """
        Returns the #GtkAppChooserWidget of this dialog.
        """
        ...

    def set_heading(self, heading: str) -> object:
        """
        Sets the text to display at the top of the dialog.
        If the heading is not set, the dialog displays a default text.
        """
        ...


    ...

class AppChooserWidget(Box, Atk.ImplementorIface, AppChooser, Buildable, Orientable):
    """
    #GtkAppChooserWidget is a widget for selecting applications.
    It is the main building block for #GtkAppChooserDialog. Most
    applications only need to use the latter; but you can use
    this widget as part of a larger widget if you have special needs.

    #GtkAppChooserWidget offers detailed control over what applications
    are shown, using the
    #GtkAppChooserWidget:show-default,
    #GtkAppChooserWidget:show-recommended,
    #GtkAppChooserWidget:show-fallback,
    #GtkAppChooserWidget:show-other and
    #GtkAppChooserWidget:show-all
    properties. See the #GtkAppChooser documentation for more information
    about these groups of applications.

    To keep track of the selected application, use the
    #GtkAppChooserWidget::application-selected and #GtkAppChooserWidget::application-activated signals.

    # CSS nodes

    GtkAppChooserWidget has a single CSS node with name appchooser.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, content_type: str) -> Widget:
        """
        Creates a new #GtkAppChooserWidget for applications
        that can handle content of the given type.
        """
        ...

    def get_default_text(self) -> str:
        """
        Returns the text that is shown if there are not applications
        that can handle the content type.
        """
        ...

    def get_show_all(self) -> bool:
        """
        Returns the current value of the #GtkAppChooserWidget:show-all
        property.
        """
        ...

    def get_show_default(self) -> bool:
        """
        Returns the current value of the #GtkAppChooserWidget:show-default
        property.
        """
        ...

    def get_show_fallback(self) -> bool:
        """
        Returns the current value of the #GtkAppChooserWidget:show-fallback
        property.
        """
        ...

    def get_show_other(self) -> bool:
        """
        Returns the current value of the #GtkAppChooserWidget:show-other
        property.
        """
        ...

    def get_show_recommended(self) -> bool:
        """
        Returns the current value of the #GtkAppChooserWidget:show-recommended
        property.
        """
        ...

    def set_default_text(self, text: str) -> object:
        """
        Sets the text that is shown if there are not applications
        that can handle the content type.
        """
        ...

    def set_show_all(self, setting: bool) -> object:
        """
        Sets whether the app chooser should show all applications
        in a flat list.
        """
        ...

    def set_show_default(self, setting: bool) -> object:
        """
        Sets whether the app chooser should show the default handler
        for the content type in a separate section.
        """
        ...

    def set_show_fallback(self, setting: bool) -> object:
        """
        Sets whether the app chooser should show related applications
        for the content type in a separate section.
        """
        ...

    def set_show_other(self, setting: bool) -> object:
        """
        Sets whether the app chooser should show applications
        which are unrelated to the content type.
        """
        ...

    def set_show_recommended(self, setting: bool) -> object:
        """
        Sets whether the app chooser should show recommended applications
        for the content type in a separate section.
        """
        ...


    ...

class Application(Gio.Application, Gio.ActionGroup, Gio.ActionMap):
    """
    #GtkApplication is a class that handles many important aspects
    of a GTK+ application in a convenient fashion, without enforcing
    a one-size-fits-all application model.

    Currently, GtkApplication handles GTK+ initialization, application
    uniqueness, session management, provides some basic scriptability and
    desktop shell integration by exporting actions and menus and manages a
    list of toplevel windows whose life-cycle is automatically tied to the
    life-cycle of your application.

    While GtkApplication works fine with plain #GtkWindows, it is recommended
    to use it together with #GtkApplicationWindow.

    When GDK threads are enabled, GtkApplication will acquire the GDK
    lock when invoking actions that arrive from other processes.  The GDK
    lock is not touched for local action invocations.  In order to have
    actions invoked in a predictable context it is therefore recommended
    that the GDK lock be held while invoking actions locally with
    g_action_group_activate_action().  The same applies to actions
    associated with #GtkApplicationWindow and to the “activate” and
    “open” #GApplication methods.

    ## Automatic resources ## {#automatic-resources}

    #GtkApplication will automatically load menus from the #GtkBuilder
    resource located at "gtk/menus.ui", relative to the application's
    resource base path (see g_application_set_resource_base_path()).  The
    menu with the ID "app-menu" is taken as the application's app menu
    and the menu with the ID "menubar" is taken as the application's
    menubar.  Additional menus (most interesting submenus) can be named
    and accessed via gtk_application_get_menu_by_id() which allows for
    dynamic population of a part of the menu structure.

    If the resources "gtk/menus-appmenu.ui" or "gtk/menus-traditional.ui" are
    present then these files will be used in preference, depending on the value
    of gtk_application_prefers_app_menu(). If the resource "gtk/menus-common.ui"
    is present it will be loaded as well. This is useful for storing items that
    are referenced from both "gtk/menus-appmenu.ui" and
    "gtk/menus-traditional.ui".

    It is also possible to provide the menus manually using
    gtk_application_set_app_menu() and gtk_application_set_menubar().

    #GtkApplication will also automatically setup an icon search path for
    the default icon theme by appending "icons" to the resource base
    path.  This allows your application to easily store its icons as
    resources.  See gtk_icon_theme_add_resource_path() for more
    information.

    If there is a resource located at "gtk/help-overlay.ui" which
    defines a #GtkShortcutsWindow with ID "help_overlay" then GtkApplication
    associates an instance of this shortcuts window with each
    #GtkApplicationWindow and sets up keyboard accelerators (Control-F1
    and Control-?) to open it. To create a menu item that displays the
    shortcuts window, associate the item with the action win.show-help-overlay.

    ## A simple application ## {#gtkapplication}

    [A simple example](https://git.gnome.org/browse/gtk+/tree/examples/bp/bloatpad.c)

    GtkApplication optionally registers with a session manager
    of the users session (if you set the #GtkApplication:register-session
    property) and offers various functionality related to the session
    life-cycle.

    An application can block various ways to end the session with
    the gtk_application_inhibit() function. Typical use cases for
    this kind of inhibiting are long-running, uninterruptible operations,
    such as burning a CD or performing a disk backup. The session
    manager may not honor the inhibitor, but it can be expected to
    inform the user about the negative consequences of ending the
    session while inhibitors are present.

    ## See Also ## {#seealso}
    [HowDoI: Using GtkApplication](https://wiki.gnome.org/HowDoI/GtkApplication),
    [Getting Started with GTK+: Basics](https://developer.gnome.org/gtk3/stable/gtk-getting-started.html#id-1.2.3.3)
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, application_id: _T.Optional[str], flags: Gio.ApplicationFlags) -> Application:
        """
        Creates a new #GtkApplication instance.

        When using #GtkApplication, it is not necessary to call gtk_init()
        manually. It is called as soon as the application gets registered as
        the primary instance.

        Concretely, gtk_init() is called in the default handler for the
        #GApplication::startup signal. Therefore, #GtkApplication subclasses should
        chain up in their #GApplication::startup handler before using any GTK+ API.

        Note that commandline arguments are not passed to gtk_init().
        All GTK+ functionality that is available via commandline arguments
        can also be achieved by setting suitable environment variables
        such as `G_DEBUG`, so this should not be a big
        problem. If you absolutely must support GTK+ commandline arguments,
        you can explicitly call gtk_init() before creating the application
        instance.

        If non-%NULL, the application ID must be valid.  See
        g_application_id_is_valid().

        If no application ID is given then some features (most notably application
        uniqueness) will be disabled. A null application ID is only allowed with
        GTK+ 3.6 or later.
        """
        ...

    def add_accelerator(self, accelerator: str, action_name: str, parameter: _T.Optional[GLib.Variant]) -> object:
        """
        Installs an accelerator that will cause the named action
        to be activated when the key combination specificed by @accelerator
        is pressed.

        @accelerator must be a string that can be parsed by gtk_accelerator_parse(),
        e.g. "<Primary>q" or “<Control><Alt>p”.

        @action_name must be the name of an action as it would be used
        in the app menu, i.e. actions that have been added to the application
        are referred to with an “app.” prefix, and window-specific actions
        with a “win.” prefix.

        GtkApplication also extracts accelerators out of “accel” attributes
        in the #GMenuModels passed to gtk_application_set_app_menu() and
        gtk_application_set_menubar(), which is usually more convenient
        than calling this function for each accelerator.
        """
        ...

    def add_window(self, window: Window) -> object:
        """
        Adds a window to @application.

        This call can only happen after the @application has started;
        typically, you should add new application windows in response
        to the emission of the #GApplication::activate signal.

        This call is equivalent to setting the #GtkWindow:application
        property of @window to @application.

        Normally, the connection between the application and the window
        will remain until the window is destroyed, but you can explicitly
        remove it with gtk_application_remove_window().

        GTK+ will keep the @application running as long as it has
        any windows.
        """
        ...

    def get_accels_for_action(self, detailed_action_name: str) -> object:
        """
        Gets the accelerators that are currently associated with
        the given action.
        """
        ...

    def get_actions_for_accel(self, accel: str) -> object:
        """
        Returns the list of actions (possibly empty) that @accel maps to.
        Each item in the list is a detailed action name in the usual form.

        This might be useful to discover if an accel already exists in
        order to prevent installation of a conflicting accelerator (from
        an accelerator editor or a plugin system, for example). Note that
        having more than one action per accelerator may not be a bad thing
        and might make sense in cases where the actions never appear in the
        same context.

        In case there are no actions for a given accelerator, an empty array
        is returned.  %NULL is never returned.

        It is a programmer error to pass an invalid accelerator string.
        If you are unsure, check it with gtk_accelerator_parse() first.
        """
        ...

    def get_active_window(self) -> Window:
        """
        Gets the “active” window for the application.

        The active window is the one that was most recently focused (within
        the application).  This window may not have the focus at the moment
        if another application has it — this is just the most
        recently-focused window within this application.
        """
        ...

    def get_app_menu(self) -> Gio.MenuModel:
        """
        Returns the menu model that has been set with
        gtk_application_set_app_menu().
        """
        ...

    def get_menu_by_id(self, id: str) -> Gio.Menu:
        """
        Gets a menu from automatically loaded resources.
        See [Automatic resources][automatic-resources]
        for more information.
        """
        ...

    def get_menubar(self) -> Gio.MenuModel:
        """
        Returns the menu model that has been set with
        gtk_application_set_menubar().
        """
        ...

    def get_window_by_id(self, id: int) -> Window:
        """
        Returns the #GtkApplicationWindow with the given ID.

        The ID of a #GtkApplicationWindow can be retrieved with
        gtk_application_window_get_id().
        """
        ...

    def get_windows(self) -> GLib.List:
        """
        Gets a list of the #GtkWindows associated with @application.

        The list is sorted by most recently focused window, such that the first
        element is the currently focused window. (Useful for choosing a parent
        for a transient window.)

        The list that is returned should not be modified in any way. It will
        only remain valid until the next focus change or window creation or
        deletion.
        """
        ...

    def inhibit(self, window: _T.Optional[Window], flags: ApplicationInhibitFlags, reason: _T.Optional[str]) -> int:
        """
        Inform the session manager that certain types of actions should be
        inhibited. This is not guaranteed to work on all platforms and for
        all types of actions.

        Applications should invoke this method when they begin an operation
        that should not be interrupted, such as creating a CD or DVD. The
        types of actions that may be blocked are specified by the @flags
        parameter. When the application completes the operation it should
        call gtk_application_uninhibit() to remove the inhibitor. Note that
        an application can have multiple inhibitors, and all of them must
        be individually removed. Inhibitors are also cleared when the
        application exits.

        Applications should not expect that they will always be able to block
        the action. In most cases, users will be given the option to force
        the action to take place.

        Reasons should be short and to the point.

        If @window is given, the session manager may point the user to
        this window to find out more about why the action is inhibited.
        """
        ...

    def is_inhibited(self, flags: ApplicationInhibitFlags) -> bool:
        """
        Determines if any of the actions specified in @flags are
        currently inhibited (possibly by another application).

        Note that this information may not be available (for example
        when the application is running in a sandbox).
        """
        ...

    def list_action_descriptions(self) -> object:
        """
        Lists the detailed action names which have associated accelerators.
        See gtk_application_set_accels_for_action().
        """
        ...

    def prefers_app_menu(self) -> bool:
        """
        Determines if the desktop environment in which the application is
        running would prefer an application menu be shown.

        If this function returns %TRUE then the application should call
        gtk_application_set_app_menu() with the contents of an application
        menu, which will be shown by the desktop environment.  If it returns
        %FALSE then you should consider using an alternate approach, such as
        a menubar.

        The value returned by this function is purely advisory and you are
        free to ignore it.  If you call gtk_application_set_app_menu() even
        if the desktop environment doesn't support app menus, then a fallback
        will be provided.

        Applications are similarly free not to set an app menu even if the
        desktop environment wants to show one.  In that case, a fallback will
        also be created by the desktop environment (GNOME, for example, uses
        a menu with only a "Quit" item in it).

        The value returned by this function never changes.  Once it returns a
        particular value, it is guaranteed to always return the same value.

        You may only call this function after the application has been
        registered and after the base startup handler has run.  You're most
        likely to want to use this from your own startup handler.  It may
        also make sense to consult this function while constructing UI (in
        activate, open or an action activation handler) in order to determine
        if you should show a gear menu or not.

        This function will return %FALSE on Mac OS and a default app menu
        will be created automatically with the "usual" contents of that menu
        typical to most Mac OS applications.  If you call
        gtk_application_set_app_menu() anyway, then this menu will be
        replaced with your own.
        """
        ...

    def remove_accelerator(self, action_name: str, parameter: _T.Optional[GLib.Variant]) -> object:
        """
        Removes an accelerator that has been previously added
        with gtk_application_add_accelerator().
        """
        ...

    def remove_window(self, window: Window) -> object:
        """
        Remove a window from @application.

        If @window belongs to @application then this call is equivalent to
        setting the #GtkWindow:application property of @window to
        %NULL.

        The application may stop running as a result of a call to this
        function.
        """
        ...

    def set_accels_for_action(self, detailed_action_name: str, accels: object) -> object:
        """
        Sets zero or more keyboard accelerators that will trigger the
        given action. The first item in @accels will be the primary
        accelerator, which may be displayed in the UI.

        To remove all accelerators for an action, use an empty, zero-terminated
        array for @accels.

        For the @detailed_action_name, see g_action_parse_detailed_name() and
        g_action_print_detailed_name().
        """
        ...

    def set_app_menu(self, app_menu: _T.Optional[Gio.MenuModel]) -> object:
        """
        Sets or unsets the application menu for @application.

        This can only be done in the primary instance of the application,
        after it has been registered.  #GApplication::startup is a good place
        to call this.

        The application menu is a single menu containing items that typically
        impact the application as a whole, rather than acting on a specific
        window or document.  For example, you would expect to see
        “Preferences” or “Quit” in an application menu, but not “Save” or
        “Print”.

        If supported, the application menu will be rendered by the desktop
        environment.

        Use the base #GActionMap interface to add actions, to respond to the user
        selecting these menu items.
        """
        ...

    def set_menubar(self, menubar: _T.Optional[Gio.MenuModel]) -> object:
        """
        Sets or unsets the menubar for windows of @application.

        This is a menubar in the traditional sense.

        This can only be done in the primary instance of the application,
        after it has been registered.  #GApplication::startup is a good place
        to call this.

        Depending on the desktop environment, this may appear at the top of
        each window, or at the top of the screen.  In some environments, if
        both the application menu and the menubar are set, the application
        menu will be presented as if it were the first item of the menubar.
        Other environments treat the two as completely separate — for example,
        the application menu may be rendered by the desktop shell while the
        menubar (if set) remains in each individual window.

        Use the base #GActionMap interface to add actions, to respond to the
        user selecting these menu items.
        """
        ...

    def uninhibit(self, cookie: int) -> object:
        """
        Removes an inhibitor that has been established with gtk_application_inhibit().
        Inhibitors are also cleared when the application exits.
        """
        ...


    ...

class ApplicationWindow(Window, Atk.ImplementorIface, Gio.ActionGroup, Gio.ActionMap, Buildable):
    """
    #GtkApplicationWindow is a #GtkWindow subclass that offers some
    extra functionality for better integration with #GtkApplication
    features.  Notably, it can handle both the application menu as well
    as the menubar. See gtk_application_set_app_menu() and
    gtk_application_set_menubar().

    This class implements the #GActionGroup and #GActionMap interfaces,
    to let you add window-specific actions that will be exported by the
    associated #GtkApplication, together with its application-wide
    actions.  Window-specific actions are prefixed with the “win.”
    prefix and application-wide actions are prefixed with the “app.”
    prefix.  Actions must be addressed with the prefixed name when
    referring to them from a #GMenuModel.

    Note that widgets that are placed inside a #GtkApplicationWindow
    can also activate these actions, if they implement the
    #GtkActionable interface.

    As with #GtkApplication, the GDK lock will be acquired when
    processing actions arriving from other processes and should therefore
    be held when activating actions locally (if GDK threads are enabled).

    The settings #GtkSettings:gtk-shell-shows-app-menu and
    #GtkSettings:gtk-shell-shows-menubar tell GTK+ whether the
    desktop environment is showing the application menu and menubar
    models outside the application as part of the desktop shell.
    For instance, on OS X, both menus will be displayed remotely;
    on Windows neither will be. gnome-shell (starting with version 3.4)
    will display the application menu, but not the menubar.

    If the desktop environment does not display the menubar, then
    #GtkApplicationWindow will automatically show a #GtkMenuBar for it.
    This behaviour can be overridden with the #GtkApplicationWindow:show-menubar
    property. If the desktop environment does not display the application
    menu, then it will automatically be included in the menubar or in the
    windows client-side decorations.

    ## A GtkApplicationWindow with a menubar

    |[<!-- language="C" -->
    GtkApplication *app = gtk_application_new ("org.gtk.test", 0);

    GtkBuilder *builder = gtk_builder_new_from_string (
        "<interface>"
        "  <menu id='menubar'>"
        "    <submenu label='_Edit'>"
        "      <item label='_Copy' action='win.copy'/>"
        "      <item label='_Paste' action='win.paste'/>"
        "    </submenu>"
        "  </menu>"
        "</interface>",
        -1);

    GMenuModel *menubar = G_MENU_MODEL (gtk_builder_get_object (builder,
                                                                "menubar"));
    gtk_application_set_menubar (GTK_APPLICATION (app), menubar);
    g_object_unref (builder);

    // ...

    GtkWidget *window = gtk_application_window_new (app);
    ]|

    ## Handling fallback yourself

    [A simple example](https://git.gnome.org/browse/gtk+/tree/examples/sunny.c)

    The XML format understood by #GtkBuilder for #GMenuModel consists
    of a toplevel `<menu>` element, which contains one or more `<item>`
    elements. Each `<item>` element contains `<attribute>` and `<link>`
    elements with a mandatory name attribute. `<link>` elements have the
    same content model as `<menu>`. Instead of `<link name="submenu>` or
    `<link name="section">`, you can use `<submenu>` or `<section>`
    elements.

    Attribute values can be translated using gettext, like other #GtkBuilder
    content. `<attribute>` elements can be marked for translation with a
    `translatable="yes"` attribute. It is also possible to specify message
    context and translator comments, using the context and comments attributes.
    To make use of this, the #GtkBuilder must have been given the gettext
    domain to use.

    The following attributes are used when constructing menu items:
    - "label": a user-visible string to display
    - "action": the prefixed name of the action to trigger
    - "target": the parameter to use when activating the action
    - "icon" and "verb-icon": names of icons that may be displayed
    - "submenu-action": name of an action that may be used to determine
         if a submenu can be opened
    - "hidden-when": a string used to determine when the item will be hidden.
         Possible values include "action-disabled", "action-missing", "macos-menubar".

    The following attributes are used when constructing sections:
    - "label": a user-visible string to use as section heading
    - "display-hint": a string used to determine special formatting for the section.
        Possible values include "horizontal-buttons".
    - "text-direction": a string used to determine the #GtkTextDirection to use
        when "display-hint" is set to "horizontal-buttons". Possible values
        include "rtl", "ltr", and "none".

    The following attributes are used when constructing submenus:
    - "label": a user-visible string to display
    - "icon": icon name to display
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, application: Application) -> Widget:
        """
        Creates a new #GtkApplicationWindow.
        """
        ...

    def get_help_overlay(self) -> ShortcutsWindow:
        """
        Gets the #GtkShortcutsWindow that has been set up with
        a prior call to gtk_application_window_set_help_overlay().
        """
        ...

    def get_id(self) -> int:
        """
        Returns the unique ID of the window. If the window has not yet been added to
        a #GtkApplication, returns `0`.
        """
        ...

    def get_show_menubar(self) -> bool:
        """
        Returns whether the window will display a menubar for the app menu
        and menubar as needed.
        """
        ...

    def set_help_overlay(self, help_overlay: _T.Optional[ShortcutsWindow]) -> object:
        """
        Associates a shortcuts window with the application window, and
        sets up an action with the name win.show-help-overlay to present
        it.

        @window takes resposibility for destroying @help_overlay.
        """
        ...

    def set_show_menubar(self, show_menubar: bool) -> object:
        """
        Sets whether the window will display a menubar for the app menu
        and menubar as needed.
        """
        ...


    ...

class Arrow(Misc, Atk.ImplementorIface, Buildable):
    """
    GtkArrow should be used to draw simple arrows that need to point in
    one of the four cardinal directions (up, down, left, or right).  The
    style of the arrow can be one of shadow in, shadow out, etched in, or
    etched out.  Note that these directions and style types may be
    amended in versions of GTK+ to come.

    GtkArrow will fill any space alloted to it, but since it is inherited
    from #GtkMisc, it can be padded and/or aligned, to fill exactly the
    space the programmer desires.

    Arrows are created with a call to gtk_arrow_new().  The direction or
    style of an arrow can be changed after creation by using gtk_arrow_set().

    GtkArrow has been deprecated; you can simply use a #GtkImage with a
    suitable icon name, such as “pan-down-symbolic“. When replacing
    GtkArrow by an image, pay attention to the fact that GtkArrow is
    doing automatic flipping between #GTK_ARROW_LEFT and #GTK_ARROW_RIGHT,
    depending on the text direction. To get the same effect with an image,
    use the icon names “pan-start-symbolic“ and “pan-end-symbolic“, which
    react to the text direction.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, arrow_type: ArrowType, shadow_type: ShadowType) -> Widget:
        """
        Creates a new #GtkArrow widget.
        """
        ...

    def set(self, arrow_type: ArrowType, shadow_type: ShadowType) -> object:
        """
        Sets the direction and style of the #GtkArrow, @arrow.
        """
        ...


    ...

class ArrowAccessible(WidgetAccessible, Atk.Component, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class AspectFrame(Frame, Atk.ImplementorIface, Buildable):
    """
    The #GtkAspectFrame is useful when you want
    pack a widget so that it can resize but always retains
    the same aspect ratio. For instance, one might be
    drawing a small preview of a larger image. #GtkAspectFrame
    derives from #GtkFrame, so it can draw a label and
    a frame around the child. The frame will be
    “shrink-wrapped” to the size of the child.

    # CSS nodes

    GtkAspectFrame uses a CSS node with name frame.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, label: _T.Optional[str], xalign: float, yalign: float, ratio: float, obey_child: bool) -> Widget:
        """
        Create a new #GtkAspectFrame.
        """
        ...

    def set(self, xalign: float, yalign: float, ratio: float, obey_child: bool) -> object:
        """
        Set parameters for an existing #GtkAspectFrame.
        """
        ...


    ...

class Assistant(Window, Atk.ImplementorIface, Buildable):
    """
    A #GtkAssistant is a widget used to represent a generally complex
    operation splitted in several steps, guiding the user through its
    pages and controlling the page flow to collect the necessary data.

    The design of GtkAssistant is that it controls what buttons to show
    and to make sensitive, based on what it knows about the page sequence
    and the [type][GtkAssistantPageType] of each page,
    in addition to state information like the page
    [completion][gtk-assistant-set-page-complete]
    and [committed][gtk-assistant-commit] status.

    If you have a case that doesn’t quite fit in #GtkAssistants way of
    handling buttons, you can use the #GTK_ASSISTANT_PAGE_CUSTOM page
    type and handle buttons yourself.

    # GtkAssistant as GtkBuildable

    The GtkAssistant implementation of the #GtkBuildable interface
    exposes the @action_area as internal children with the name
    “action_area”.

    To add pages to an assistant in #GtkBuilder, simply add it as a
    child to the GtkAssistant object, and set its child properties
    as necessary.

    # CSS nodes

    GtkAssistant has a single CSS node with the name assistant.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkAssistant.
        """
        ...

    def add_action_widget(self, child: Widget) -> object:
        """
        Adds a widget to the action area of a #GtkAssistant.
        """
        ...

    def append_page(self, page: Widget) -> int:
        """
        Appends a page to the @assistant.
        """
        ...

    def commit(self) -> object:
        """
        Erases the visited page history so the back button is not
        shown on the current page, and removes the cancel button
        from subsequent pages.

        Use this when the information provided up to the current
        page is hereafter deemed permanent and cannot be modified
        or undone. For example, showing a progress page to track
        a long-running, unreversible operation after the user has
        clicked apply on a confirmation page.
        """
        ...

    def get_current_page(self) -> int:
        """
        Returns the page number of the current page.
        """
        ...

    def get_n_pages(self) -> int:
        """
        Returns the number of pages in the @assistant
        """
        ...

    def get_nth_page(self, page_num: int) -> Widget:
        """
        Returns the child widget contained in page number @page_num.
        """
        ...

    def get_page_complete(self, page: Widget) -> bool:
        """
        Gets whether @page is complete.
        """
        ...

    def get_page_has_padding(self, page: Widget) -> bool:
        """
        Gets whether page has padding.
        """
        ...

    def get_page_header_image(self, page: Widget) -> GdkPixbuf.Pixbuf:
        """
        Gets the header image for @page.
        """
        ...

    def get_page_side_image(self, page: Widget) -> GdkPixbuf.Pixbuf:
        """
        Gets the side image for @page.
        """
        ...

    def get_page_title(self, page: Widget) -> str:
        """
        Gets the title for @page.
        """
        ...

    def get_page_type(self, page: Widget) -> AssistantPageType:
        """
        Gets the page type of @page.
        """
        ...

    def insert_page(self, page: Widget, position: int) -> int:
        """
        Inserts a page in the @assistant at a given position.
        """
        ...

    def next_page(self) -> object:
        """
        Navigate to the next page.

        It is a programming error to call this function when
        there is no next page.

        This function is for use when creating pages of the
        #GTK_ASSISTANT_PAGE_CUSTOM type.
        """
        ...

    def prepend_page(self, page: Widget) -> int:
        """
        Prepends a page to the @assistant.
        """
        ...

    def previous_page(self) -> object:
        """
        Navigate to the previous visited page.

        It is a programming error to call this function when
        no previous page is available.

        This function is for use when creating pages of the
        #GTK_ASSISTANT_PAGE_CUSTOM type.
        """
        ...

    def remove_action_widget(self, child: Widget) -> object:
        """
        Removes a widget from the action area of a #GtkAssistant.
        """
        ...

    def remove_page(self, page_num: int) -> object:
        """
        Removes the @page_num’s page from @assistant.
        """
        ...

    def set_current_page(self, page_num: int) -> object:
        """
        Switches the page to @page_num.

        Note that this will only be necessary in custom buttons,
        as the @assistant flow can be set with
        gtk_assistant_set_forward_page_func().
        """
        ...

    def set_forward_page_func(self, page_func: _T.Optional[AssistantPageFunc], data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        Sets the page forwarding function to be @page_func.

        This function will be used to determine what will be
        the next page when the user presses the forward button.
        Setting @page_func to %NULL will make the assistant to
        use the default forward function, which just goes to the
        next visible page.
        """
        ...

    def set_page_complete(self, page: Widget, complete: bool) -> object:
        """
        Sets whether @page contents are complete.

        This will make @assistant update the buttons state
        to be able to continue the task.
        """
        ...

    def set_page_has_padding(self, page: Widget, has_padding: bool) -> object:
        """
        Sets whether the assistant is adding padding around
        the page.
        """
        ...

    def set_page_header_image(self, page: Widget, pixbuf: _T.Optional[GdkPixbuf.Pixbuf]) -> object:
        """
        Sets a header image for @page.
        """
        ...

    def set_page_side_image(self, page: Widget, pixbuf: _T.Optional[GdkPixbuf.Pixbuf]) -> object:
        """
        Sets a side image for @page.

        This image used to be displayed in the side area of the assistant
        when @page is the current page.
        """
        ...

    def set_page_title(self, page: Widget, title: str) -> object:
        """
        Sets a title for @page.

        The title is displayed in the header area of the assistant
        when @page is the current page.
        """
        ...

    def set_page_type(self, page: Widget, type: AssistantPageType) -> object:
        """
        Sets the page type for @page.

        The page type determines the page behavior in the @assistant.
        """
        ...

    def update_buttons_state(self) -> object:
        """
        Forces @assistant to recompute the buttons state.

        GTK+ automatically takes care of this in most situations,
        e.g. when the user goes to a different page, or when the
        visibility or completeness of a page changes.

        One situation where it can be necessary to call this
        function is when changing a value on the current page
        affects the future page flow of the assistant.
        """
        ...


    ...

class Bin(Container, Atk.ImplementorIface, Buildable):
    """
    The #GtkBin widget is a container with just one child.
    It is not very useful itself, but it is useful for deriving subclasses,
    since it provides common code needed for handling a single child widget.

    Many GTK+ widgets are subclasses of #GtkBin, including #GtkWindow,
    #GtkButton, #GtkFrame, #GtkHandleBox or #GtkScrolledWindow.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_child(self) -> Widget:
        """
        Gets the child of the #GtkBin, or %NULL if the bin contains
        no child widget. The returned widget does not have a reference
        added, so you do not need to unref it.
        """
        ...


    ...

class BooleanCellAccessible(RendererCellAccessible, Atk.Action, Atk.Component, Atk.TableCell):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Box(Container, Atk.ImplementorIface, Buildable, Orientable):
    """
    The GtkBox widget arranges child widgets into a single row or column,
    depending upon the value of its #GtkOrientable:orientation property. Within
    the other dimension, all children are allocated the same size. Of course,
    the #GtkWidget:halign and #GtkWidget:valign properties can be used on
    the children to influence their allocation.

    GtkBox uses a notion of packing. Packing refers
    to adding widgets with reference to a particular position in a
    #GtkContainer. For a GtkBox, there are two reference positions: the
    start and the end of the box.
    For a vertical #GtkBox, the start is defined as the top of the box and
    the end is defined as the bottom. For a horizontal #GtkBox the start
    is defined as the left side and the end is defined as the right side.

    Use repeated calls to gtk_box_pack_start() to pack widgets into a
    GtkBox from start to end. Use gtk_box_pack_end() to add widgets from
    end to start. You may intersperse these calls and add widgets from
    both ends of the same GtkBox.

    Because GtkBox is a #GtkContainer, you may also use gtk_container_add()
    to insert widgets into the box, and they will be packed with the default
    values for expand and fill child properties. Use gtk_container_remove()
    to remove widgets from the GtkBox.

    Use gtk_box_set_homogeneous() to specify whether or not all children
    of the GtkBox are forced to get the same amount of space.

    Use gtk_box_set_spacing() to determine how much space will be
    minimally placed between all children in the GtkBox. Note that
    spacing is added between the children, while
    padding added by gtk_box_pack_start() or gtk_box_pack_end() is added
    on either side of the widget it belongs to.

    Use gtk_box_reorder_child() to move a GtkBox child to a different
    place in the box.

    Use gtk_box_set_child_packing() to reset the expand,
    fill and padding child properties.
    Use gtk_box_query_child_packing() to query these fields.

    # CSS nodes

    GtkBox uses a single CSS node with name box.

    In horizontal orientation, the nodes of the children are always arranged
    from left to right. So :first-child will always select the leftmost child,
    regardless of text direction.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, orientation: Orientation, spacing: int) -> Widget:
        """
        Creates a new #GtkBox.
        """
        ...

    def get_baseline_position(self) -> BaselinePosition:
        """
        Gets the value set by gtk_box_set_baseline_position().
        """
        ...

    def get_center_widget(self) -> Widget:
        """
        Retrieves the center widget of the box.
        """
        ...

    def get_homogeneous(self) -> bool:
        """
        Returns whether the box is homogeneous (all children are the
        same size). See gtk_box_set_homogeneous().
        """
        ...

    def get_spacing(self) -> int:
        """
        Gets the value set by gtk_box_set_spacing().
        """
        ...

    def pack_end(self, child: Widget, expand: bool, fill: bool, padding: int) -> object:
        """
        Adds @child to @box, packed with reference to the end of @box.
        The @child is packed after (away from end of) any other child
        packed with reference to the end of @box.
        """
        ...

    def pack_start(self, child: Widget, expand: bool, fill: bool, padding: int) -> object:
        """
        Adds @child to @box, packed with reference to the start of @box.
        The @child is packed after any other child packed with reference
        to the start of @box.
        """
        ...

    def query_child_packing(self, child: Widget, expand: bool, fill: bool, padding: int, pack_type: PackType) -> object:
        """
        Obtains information about how @child is packed into @box.
        """
        ...

    def reorder_child(self, child: Widget, position: int) -> object:
        """
        Moves @child to a new @position in the list of @box children.
        The list contains widgets packed #GTK_PACK_START
        as well as widgets packed #GTK_PACK_END, in the order that these
        widgets were added to @box.

        A widget’s position in the @box children list determines where
        the widget is packed into @box.  A child widget at some position
        in the list will be packed just after all other widgets of the
        same packing type that appear earlier in the list.
        """
        ...

    def set_baseline_position(self, position: BaselinePosition) -> object:
        """
        Sets the baseline position of a box. This affects
        only horizontal boxes with at least one baseline aligned
        child. If there is more vertical space available than requested,
        and the baseline is not allocated by the parent then
        @position is used to allocate the baseline wrt the
        extra space available.
        """
        ...

    def set_center_widget(self, widget: _T.Optional[Widget]) -> object:
        """
        Sets a center widget; that is a child widget that will be
        centered with respect to the full width of the box, even
        if the children at either side take up different amounts
        of space.
        """
        ...

    def set_child_packing(self, child: Widget, expand: bool, fill: bool, padding: int, pack_type: PackType) -> object:
        """
        Sets the way @child is packed into @box.
        """
        ...

    def set_homogeneous(self, homogeneous: bool) -> object:
        """
        Sets the #GtkBox:homogeneous property of @box, controlling
        whether or not all children of @box are given equal space
        in the box.
        """
        ...

    def set_spacing(self, spacing: int) -> object:
        """
        Sets the #GtkBox:spacing property of @box, which is the
        number of pixels to place between children of @box.
        """
        ...


    ...

class Builder(GObject.Object):
    """
    A GtkBuilder is an auxiliary object that reads textual descriptions
    of a user interface and instantiates the described objects. To create
    a GtkBuilder from a user interface description, call
    gtk_builder_new_from_file(), gtk_builder_new_from_resource() or
    gtk_builder_new_from_string().

    In the (unusual) case that you want to add user interface
    descriptions from multiple sources to the same GtkBuilder you can
    call gtk_builder_new() to get an empty builder and populate it by
    (multiple) calls to gtk_builder_add_from_file(),
    gtk_builder_add_from_resource() or gtk_builder_add_from_string().

    A GtkBuilder holds a reference to all objects that it has constructed
    and drops these references when it is finalized. This finalization can
    cause the destruction of non-widget objects or widgets which are not
    contained in a toplevel window. For toplevel windows constructed by a
    builder, it is the responsibility of the user to call gtk_widget_destroy()
    to get rid of them and all the widgets they contain.

    The functions gtk_builder_get_object() and gtk_builder_get_objects()
    can be used to access the widgets in the interface by the names assigned
    to them inside the UI description. Toplevel windows returned by these
    functions will stay around until the user explicitly destroys them
    with gtk_widget_destroy(). Other widgets will either be part of a
    larger hierarchy constructed by the builder (in which case you should
    not have to worry about their lifecycle), or without a parent, in which
    case they have to be added to some container to make use of them.
    Non-widget objects need to be reffed with g_object_ref() to keep them
    beyond the lifespan of the builder.

    The function gtk_builder_connect_signals() and variants thereof can be
    used to connect handlers to the named signals in the description.

    # GtkBuilder UI Definitions # {#BUILDER-UI}

    GtkBuilder parses textual descriptions of user interfaces which are
    specified in an XML format which can be roughly described by the
    RELAX NG schema below. We refer to these descriptions as “GtkBuilder
    UI definitions” or just “UI definitions” if the context is clear.
    Do not confuse GtkBuilder UI Definitions with
    [GtkUIManager UI Definitions][XML-UI], which are more limited in scope.
    It is common to use `.ui` as the filename extension for files containing
    GtkBuilder UI definitions.

    [RELAX NG Compact Syntax](https://gitlab.gnome.org/GNOME/gtk/-/blob/gtk-3-24/gtk/gtkbuilder.rnc)

    The toplevel element is `<interface>`. It optionally takes a “domain”
    attribute, which will make the builder look for translated strings
    using dgettext() in the domain specified. This can also be done by
    calling gtk_builder_set_translation_domain() on the builder.
    Objects are described by `<object>` elements, which can contain
    `<property>` elements to set properties, `<signal>` elements which
    connect signals to handlers, and `<child>` elements, which describe
    child objects (most often widgets inside a container, but also e.g.
    actions in an action group, or columns in a tree model). A `<child>`
    element contains an `<object>` element which describes the child object.
    The target toolkit version(s) are described by `<requires>` elements,
    the “lib” attribute specifies the widget library in question (currently
    the only supported value is “gtk+”) and the “version” attribute specifies
    the target version in the form `<major>.<minor>`. The builder will error
    out if the version requirements are not met.

    Typically, the specific kind of object represented by an `<object>`
    element is specified by the “class” attribute. If the type has not
    been loaded yet, GTK+ tries to find the `get_type()` function from the
    class name by applying heuristics. This works in most cases, but if
    necessary, it is possible to specify the name of the get_type() function
    explictly with the "type-func" attribute. As a special case, GtkBuilder
    allows to use an object that has been constructed by a #GtkUIManager in
    another part of the UI definition by specifying the id of the #GtkUIManager
    in the “constructor” attribute and the name of the object in the “id”
    attribute.

    Objects may be given a name with the “id” attribute, which allows the
    application to retrieve them from the builder with gtk_builder_get_object().
    An id is also necessary to use the object as property value in other
    parts of the UI definition. GTK+ reserves ids starting and ending
    with `___` (3 underscores) for its own purposes.

    Setting properties of objects is pretty straightforward with the
    `<property>` element: the “name” attribute specifies the name of the
    property, and the content of the element specifies the value.
    If the “translatable” attribute is set to a true value, GTK+ uses
    gettext() (or dgettext() if the builder has a translation domain set)
    to find a translation for the value. This happens before the value
    is parsed, so it can be used for properties of any type, but it is
    probably most useful for string properties. It is also possible to
    specify a context to disambiguate short strings, and comments which
    may help the translators.

    GtkBuilder can parse textual representations for the most common
    property types: characters, strings, integers, floating-point numbers,
    booleans (strings like “TRUE”, “t”, “yes”, “y”, “1” are interpreted
    as %TRUE, strings like “FALSE”, “f”, “no”, “n”, “0” are interpreted
    as %FALSE), enumerations (can be specified by their name, nick or
    integer value), flags (can be specified by their name, nick, integer
    value, optionally combined with “|”, e.g. “GTK_VISIBLE|GTK_REALIZED”)
    and colors (in a format understood by gdk_rgba_parse()).

    GVariants can be specified in the format understood by g_variant_parse(),
    and pixbufs can be specified as a filename of an image file to load.

    Objects can be referred to by their name and by default refer to
    objects declared in the local xml fragment and objects exposed via
    gtk_builder_expose_object(). In general, GtkBuilder allows forward
    references to objects — declared in the local xml; an object doesn’t
    have to be constructed before it can be referred to. The exception
    to this rule is that an object has to be constructed before it can
    be used as the value of a construct-only property.

    It is also possible to bind a property value to another object's
    property value using the attributes
    "bind-source" to specify the source object of the binding,
    "bind-property" to specify the source property and optionally
    "bind-flags" to specify the binding flags.
    Internally builder implements this using GBinding objects.
    For more information see g_object_bind_property()

    Signal handlers are set up with the `<signal>` element. The “name”
    attribute specifies the name of the signal, and the “handler” attribute
    specifies the function to connect to the signal. By default, GTK+ tries
    to find the handler using g_module_symbol(), but this can be changed by
    passing a custom #GtkBuilderConnectFunc to
    gtk_builder_connect_signals_full(). The remaining attributes, “after”,
    “swapped” and “object”, have the same meaning as the corresponding
    parameters of the g_signal_connect_object() or
    g_signal_connect_data() functions. A “last_modification_time”
    attribute is also allowed, but it does not have a meaning to the
    builder.

    Sometimes it is necessary to refer to widgets which have implicitly
    been constructed by GTK+ as part of a composite widget, to set
    properties on them or to add further children (e.g. the @vbox of
    a #GtkDialog). This can be achieved by setting the “internal-child”
    property of the `<child>` element to a true value. Note that GtkBuilder
    still requires an `<object>` element for the internal child, even if it
    has already been constructed.

    A number of widgets have different places where a child can be added
    (e.g. tabs vs. page content in notebooks). This can be reflected in
    a UI definition by specifying the “type” attribute on a `<child>`
    The possible values for the “type” attribute are described in the
    sections describing the widget-specific portions of UI definitions.

    # A GtkBuilder UI Definition

    |[<!-- language="xml" -->
    <interface>
      <object class="GtkDialog" id="dialog1">
        <child internal-child="vbox">
          <object class="GtkBox" id="vbox1">
            <property name="border-width">10</property>
            <child internal-child="action_area">
              <object class="GtkButtonBox" id="hbuttonbox1">
                <property name="border-width">20</property>
                <child>
                  <object class="GtkButton" id="ok_button">
                    <property name="label">gtk-ok</property>
                    <property name="use-stock">TRUE</property>
                    <signal name="clicked" handler="ok_button_clicked"/>
                  </object>
                </child>
              </object>
            </child>
          </object>
        </child>
      </object>
    </interface>
    ]|

    Beyond this general structure, several object classes define their
    own XML DTD fragments for filling in the ANY placeholders in the DTD
    above. Note that a custom element in a `<child>` element gets parsed by
    the custom tag handler of the parent object, while a custom element in
    an `<object>` element gets parsed by the custom tag handler of the object.

    These XML fragments are explained in the documentation of the
    respective objects.

    Additionally, since 3.10 a special `<template>` tag has been added
    to the format allowing one to define a widget class’s components.
    See the [GtkWidget documentation][composite-templates] for details.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Builder:
        """
        Creates a new empty builder object.

        This function is only useful if you intend to make multiple calls
        to gtk_builder_add_from_file(), gtk_builder_add_from_resource()
        or gtk_builder_add_from_string() in order to merge multiple UI
        descriptions into a single builder.

        Most users will probably want to use gtk_builder_new_from_file(),
        gtk_builder_new_from_resource() or gtk_builder_new_from_string().
        """
        ...


    @classmethod
    def new_from_file(cls, filename: str) -> Builder:
        """
        Builds the [GtkBuilder UI definition][BUILDER-UI]
        in the file @filename.

        If there is an error opening the file or parsing the description then
        the program will be aborted.  You should only ever attempt to parse
        user interface descriptions that are shipped as part of your program.
        """
        ...


    @classmethod
    def new_from_resource(cls, resource_path: str) -> Builder:
        """
        Builds the [GtkBuilder UI definition][BUILDER-UI]
        at @resource_path.

        If there is an error locating the resource or parsing the
        description, then the program will be aborted.
        """
        ...


    @classmethod
    def new_from_string(cls, string: str, length: int) -> Builder:
        """
        Builds the user interface described by @string (in the
        [GtkBuilder UI definition][BUILDER-UI] format).

        If @string is %NULL-terminated, then @length should be -1.
        If @length is not -1, then it is the length of @string.

        If there is an error parsing @string then the program will be
        aborted. You should not attempt to parse user interface description
        from untrusted sources.
        """
        ...

    def add_callback_symbol(self, callback_name: str, callback_symbol: GObject.Callback) -> object:
        """
        Adds the @callback_symbol to the scope of @builder under the given @callback_name.

        Using this function overrides the behavior of gtk_builder_connect_signals()
        for any callback symbols that are added. Using this method allows for better
        encapsulation as it does not require that callback symbols be declared in
        the global namespace.
        """
        ...

    def add_callback_symbols(self, first_callback_name: str, first_callback_symbol: GObject.Callback, *args: object) -> object:
        """
        A convenience function to add many callbacks instead of calling
        gtk_builder_add_callback_symbol() for each symbol.
        """
        ...

    def add_from_file(self, filename: str) -> int:
        """
        Parses a file containing a [GtkBuilder UI definition][BUILDER-UI]
        and merges it with the current contents of @builder.

        Most users will probably want to use gtk_builder_new_from_file().

        If an error occurs, 0 will be returned and @error will be assigned a
        #GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR
        domain.

        It’s not really reasonable to attempt to handle failures of this
        call. You should not use this function with untrusted files (ie:
        files that are not part of your application). Broken #GtkBuilder
        files can easily crash your program, and it’s possible that memory
        was leaked leading up to the reported failure. The only reasonable
        thing to do when an error is detected is to call g_error().
        """
        ...

    def add_from_resource(self, resource_path: str) -> int:
        """
        Parses a resource file containing a [GtkBuilder UI definition][BUILDER-UI]
        and merges it with the current contents of @builder.

        Most users will probably want to use gtk_builder_new_from_resource().

        If an error occurs, 0 will be returned and @error will be assigned a
        #GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_RESOURCE_ERROR
        domain.

        It’s not really reasonable to attempt to handle failures of this
        call.  The only reasonable thing to do when an error is detected is
        to call g_error().
        """
        ...

    def add_from_string(self, buffer: str, length: int) -> int:
        """
        Parses a string containing a [GtkBuilder UI definition][BUILDER-UI]
        and merges it with the current contents of @builder.

        Most users will probably want to use gtk_builder_new_from_string().

        Upon errors 0 will be returned and @error will be assigned a
        #GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or
        #G_VARIANT_PARSE_ERROR domain.

        It’s not really reasonable to attempt to handle failures of this
        call.  The only reasonable thing to do when an error is detected is
        to call g_error().
        """
        ...

    def add_objects_from_file(self, filename: str, object_ids: object) -> int:
        """
        Parses a file containing a [GtkBuilder UI definition][BUILDER-UI]
        building only the requested objects and merges
        them with the current contents of @builder.

        Upon errors 0 will be returned and @error will be assigned a
        #GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR
        domain.

        If you are adding an object that depends on an object that is not
        its child (for instance a #GtkTreeView that depends on its
        #GtkTreeModel), you have to explicitly list all of them in @object_ids.
        """
        ...

    def add_objects_from_resource(self, resource_path: str, object_ids: object) -> int:
        """
        Parses a resource file containing a [GtkBuilder UI definition][BUILDER-UI]
        building only the requested objects and merges
        them with the current contents of @builder.

        Upon errors 0 will be returned and @error will be assigned a
        #GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_RESOURCE_ERROR
        domain.

        If you are adding an object that depends on an object that is not
        its child (for instance a #GtkTreeView that depends on its
        #GtkTreeModel), you have to explicitly list all of them in @object_ids.
        """
        ...

    def add_objects_from_string(self, buffer: str, length: int, object_ids: object) -> int:
        """
        Parses a string containing a [GtkBuilder UI definition][BUILDER-UI]
        building only the requested objects and merges
        them with the current contents of @builder.

        Upon errors 0 will be returned and @error will be assigned a
        #GError from the #GTK_BUILDER_ERROR or #G_MARKUP_ERROR domain.

        If you are adding an object that depends on an object that is not
        its child (for instance a #GtkTreeView that depends on its
        #GtkTreeModel), you have to explicitly list all of them in @object_ids.
        """
        ...

    def connect_signals(self, user_data: _T.Optional[object]) -> object:
        """
        This method is a simpler variation of gtk_builder_connect_signals_full().
        It uses symbols explicitly added to @builder with prior calls to
        gtk_builder_add_callback_symbol(). In the case that symbols are not
        explicitly added; it uses #GModule’s introspective features (by opening the module %NULL)
        to look at the application’s symbol table. From here it tries to match
        the signal handler names given in the interface description with
        symbols in the application and connects the signals. Note that this
        function can only be called once, subsequent calls will do nothing.

        Note that unless gtk_builder_add_callback_symbol() is called for
        all signal callbacks which are referenced by the loaded XML, this
        function will require that #GModule be supported on the platform.

        If you rely on #GModule support to lookup callbacks in the symbol table,
        the following details should be noted:

        When compiling applications for Windows, you must declare signal callbacks
        with #G_MODULE_EXPORT, or they will not be put in the symbol table.
        On Linux and Unices, this is not necessary; applications should instead
        be compiled with the -Wl,--export-dynamic CFLAGS, and linked against
        gmodule-export-2.0.
        """
        ...

    def connect_signals_full(self, func: BuilderConnectFunc, user_data: _T.Optional[object]) -> object:
        """
        This function can be thought of the interpreted language binding
        version of gtk_builder_connect_signals(), except that it does not
        require GModule to function correctly.
        """
        ...

    def expose_object(self, name: str, object: GObject.Object) -> object:
        """
        Add @object to the @builder object pool so it can be referenced just like any
        other object built by builder.
        """
        ...

    def extend_with_template(self, widget: Widget, template_type: GObject.Type, buffer: str, length: int) -> int:
        """
        Main private entry point for building composite container
        components from template XML.

        This is exported purely to let gtk-builder-tool validate
        templates, applications have no need to call this function.
        """
        ...

    def get_application(self) -> Application:
        """
        Gets the #GtkApplication associated with the builder.

        The #GtkApplication is used for creating action proxies as requested
        from XML that the builder is loading.

        By default, the builder uses the default application: the one from
        g_application_get_default(). If you want to use another application
        for constructing proxies, use gtk_builder_set_application().
        """
        ...

    def get_object(self, name: str) -> GObject.Object:
        """
        Gets the object named @name. Note that this function does not
        increment the reference count of the returned object.
        """
        ...

    def get_objects(self) -> GLib.SList:
        """
        Gets all objects that have been constructed by @builder. Note that
        this function does not increment the reference counts of the returned
        objects.
        """
        ...

    def get_translation_domain(self) -> str:
        """
        Gets the translation domain of @builder.
        """
        ...

    def get_type_from_name(self, type_name: str) -> GObject.Type:
        """
        Looks up a type by name, using the virtual function that
        #GtkBuilder has for that purpose. This is mainly used when
        implementing the #GtkBuildable interface on a type.
        """
        ...

    def lookup_callback_symbol(self, callback_name: str) -> GObject.Callback:
        """
        Fetches a symbol previously added to @builder
        with gtk_builder_add_callback_symbols()

        This function is intended for possible use in language bindings
        or for any case that one might be cusomizing signal connections
        using gtk_builder_connect_signals_full()
        """
        ...

    def set_application(self, application: Application) -> object:
        """
        Sets the application associated with @builder.

        You only need this function if there is more than one #GApplication
        in your process. @application cannot be %NULL.
        """
        ...

    def set_translation_domain(self, domain: _T.Optional[str]) -> object:
        """
        Sets the translation domain of @builder.
        See #GtkBuilder:translation-domain.
        """
        ...

    def value_from_string(self, pspec: GObject.ParamSpec, string: str, value: GObject.Value) -> bool:
        """
        This function demarshals a value from a string. This function
        calls g_value_init() on the @value argument, so it need not be
        initialised beforehand.

        This function can handle char, uchar, boolean, int, uint, long,
        ulong, enum, flags, float, double, string, #GdkColor, #GdkRGBA and
        #GtkAdjustment type values. Support for #GtkWidget type values is
        still to come.

        Upon errors %FALSE will be returned and @error will be assigned a
        #GError from the #GTK_BUILDER_ERROR domain.
        """
        ...

    def value_from_string_type(self, type: GObject.Type, string: str, value: GObject.Value) -> bool:
        """
        Like gtk_builder_value_from_string(), this function demarshals
        a value from a string, but takes a #GType instead of #GParamSpec.
        This function calls g_value_init() on the @value argument, so it
        need not be initialised beforehand.

        Upon errors %FALSE will be returned and @error will be assigned a
        #GError from the #GTK_BUILDER_ERROR domain.
        """
        ...


    ...

class Button(Bin, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    The #GtkButton widget is generally used to trigger a callback function that is
    called when the button is pressed.  The various signals and how to use them
    are outlined below.

    The #GtkButton widget can hold any valid child widget.  That is, it can hold
    almost any other standard #GtkWidget.  The most commonly used child is the
    #GtkLabel.

    # CSS nodes

    GtkButton has a single CSS node with name button. The node will get the
    style classes .image-button or .text-button, if the content is just an
    image or label, respectively. It may also receive the .flat style class.

    Other style classes that are commonly used with GtkButton include
    .suggested-action and .destructive-action. In special cases, buttons
    can be made round by adding the .circular style class.

    Button-like widgets like #GtkToggleButton, #GtkMenuButton, #GtkVolumeButton,
    #GtkLockButton, #GtkColorButton, #GtkFontButton or #GtkFileChooserButton use
    style classes such as .toggle, .popup, .scale, .lock, .color, .font, .file
    to differentiate themselves from a plain GtkButton.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkButton widget. To add a child widget to the button,
        use gtk_container_add().
        """
        ...


    @classmethod
    def new_from_icon_name(cls, icon_name: _T.Optional[str], size: int) -> Widget:
        """
        Creates a new button containing an icon from the current icon theme.

        If the icon name isn’t known, a “broken image” icon will be
        displayed instead. If the current icon theme is changed, the icon
        will be updated appropriately.

        This function is a convenience wrapper around gtk_button_new() and
        gtk_button_set_image().
        """
        ...


    @classmethod
    def new_from_stock(cls, stock_id: str) -> Widget:
        """
        Creates a new #GtkButton containing the image and text from a
        [stock item][gtkstock].
        Some stock ids have preprocessor macros like #GTK_STOCK_OK and
        #GTK_STOCK_APPLY.

        If @stock_id is unknown, then it will be treated as a mnemonic
        label (as for gtk_button_new_with_mnemonic()).
        """
        ...


    @classmethod
    def new_with_label(cls, label: str) -> Widget:
        """
        Creates a #GtkButton widget with a #GtkLabel child containing the given
        text.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, label: str) -> Widget:
        """
        Creates a new #GtkButton containing a label.
        If characters in @label are preceded by an underscore, they are underlined.
        If you need a literal underscore character in a label, use “__” (two
        underscores). The first underlined character represents a keyboard
        accelerator called a mnemonic.
        Pressing Alt and that key activates the button.
        """
        ...

    def clicked(self) -> object:
        """
        Emits a #GtkButton::clicked signal to the given #GtkButton.
        """
        ...

    def enter(self) -> object:
        """
        Emits a #GtkButton::enter signal to the given #GtkButton.
        """
        ...

    def get_alignment(self, xalign: float, yalign: float) -> object:
        """
        Gets the alignment of the child in the button.
        """
        ...

    def get_always_show_image(self) -> bool:
        """
        Returns whether the button will ignore the #GtkSettings:gtk-button-images
        setting and always show the image, if available.
        """
        ...

    def get_event_window(self) -> Gdk.Window:
        """
        Returns the button’s event window if it is realized, %NULL otherwise.
        This function should be rarely needed.
        """
        ...

    def get_focus_on_click(self) -> bool:
        """
        Returns whether the button grabs focus when it is clicked with the mouse.
        See gtk_button_set_focus_on_click().
        """
        ...

    def get_image(self) -> Widget:
        """
        Gets the widget that is currenty set as the image of @button.
        This may have been explicitly set by gtk_button_set_image()
        or constructed by gtk_button_new_from_stock().
        """
        ...

    def get_image_position(self) -> PositionType:
        """
        Gets the position of the image relative to the text
        inside the button.
        """
        ...

    def get_label(self) -> str:
        """
        Fetches the text from the label of the button, as set by
        gtk_button_set_label(). If the label text has not
        been set the return value will be %NULL. This will be the
        case if you create an empty button with gtk_button_new() to
        use as a container.
        """
        ...

    def get_relief(self) -> ReliefStyle:
        """
        Returns the current relief style of the given #GtkButton.
        """
        ...

    def get_use_stock(self) -> bool:
        """
        Returns whether the button label is a stock item.
        """
        ...

    def get_use_underline(self) -> bool:
        """
        Returns whether an embedded underline in the button label indicates a
        mnemonic. See gtk_button_set_use_underline ().
        """
        ...

    def leave(self) -> object:
        """
        Emits a #GtkButton::leave signal to the given #GtkButton.
        """
        ...

    def pressed(self) -> object:
        """
        Emits a #GtkButton::pressed signal to the given #GtkButton.
        """
        ...

    def released(self) -> object:
        """
        Emits a #GtkButton::released signal to the given #GtkButton.
        """
        ...

    def set_alignment(self, xalign: float, yalign: float) -> object:
        """
        Sets the alignment of the child. This property has no effect unless
        the child is a #GtkMisc or a #GtkAlignment.
        """
        ...

    def set_always_show_image(self, always_show: bool) -> object:
        """
        If %TRUE, the button will ignore the #GtkSettings:gtk-button-images
        setting and always show the image, if available.

        Use this property if the button  would be useless or hard to use
        without the image.
        """
        ...

    def set_focus_on_click(self, focus_on_click: bool) -> object:
        """
        Sets whether the button will grab focus when it is clicked with the mouse.
        Making mouse clicks not grab focus is useful in places like toolbars where
        you don’t want the keyboard focus removed from the main area of the
        application.
        """
        ...

    def set_image(self, image: _T.Optional[Widget]) -> object:
        """
        Set the image of @button to the given widget. The image will be
        displayed if the label text is %NULL or if
        #GtkButton:always-show-image is %TRUE. You don’t have to call
        gtk_widget_show() on @image yourself.
        """
        ...

    def set_image_position(self, position: PositionType) -> object:
        """
        Sets the position of the image relative to the text
        inside the button.
        """
        ...

    def set_label(self, label: str) -> object:
        """
        Sets the text of the label of the button to @str. This text is
        also used to select the stock item if gtk_button_set_use_stock()
        is used.

        This will also clear any previously set labels.
        """
        ...

    def set_relief(self, relief: ReliefStyle) -> object:
        """
        Sets the relief style of the edges of the given #GtkButton widget.
        Two styles exist, %GTK_RELIEF_NORMAL and %GTK_RELIEF_NONE.
        The default style is, as one can guess, %GTK_RELIEF_NORMAL.
        The deprecated value %GTK_RELIEF_HALF behaves the same as
        %GTK_RELIEF_NORMAL.
        """
        ...

    def set_use_stock(self, use_stock: bool) -> object:
        """
        If %TRUE, the label set on the button is used as a
        stock id to select the stock item for the button.
        """
        ...

    def set_use_underline(self, use_underline: bool) -> object:
        """
        If true, an underline in the text of the button label indicates
        the next character should be used for the mnemonic accelerator key.
        """
        ...


    ...

class ButtonAccessible(ContainerAccessible, Atk.Action, Atk.Component, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ButtonBox(Box, Atk.ImplementorIface, Buildable, Orientable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, orientation: Orientation) -> Widget:
        """
        Creates a new #GtkButtonBox.
        """
        ...

    def get_child_non_homogeneous(self, child: Widget) -> bool:
        """
        Returns whether the child is exempted from homogenous
        sizing.
        """
        ...

    def get_child_secondary(self, child: Widget) -> bool:
        """
        Returns whether @child should appear in a secondary group of children.
        """
        ...

    def get_layout(self) -> ButtonBoxStyle:
        """
        Retrieves the method being used to arrange the buttons in a button box.
        """
        ...

    def set_child_non_homogeneous(self, child: Widget, non_homogeneous: bool) -> object:
        """
        Sets whether the child is exempted from homogeous sizing.
        """
        ...

    def set_child_secondary(self, child: Widget, is_secondary: bool) -> object:
        """
        Sets whether @child should appear in a secondary group of children.
        A typical use of a secondary child is the help button in a dialog.

        This group appears after the other children if the style
        is %GTK_BUTTONBOX_START, %GTK_BUTTONBOX_SPREAD or
        %GTK_BUTTONBOX_EDGE, and before the other children if the style
        is %GTK_BUTTONBOX_END. For horizontal button boxes, the definition
        of before/after depends on direction of the widget (see
        gtk_widget_set_direction()). If the style is %GTK_BUTTONBOX_START
        or %GTK_BUTTONBOX_END, then the secondary children are aligned at
        the other end of the button box from the main children. For the
        other styles, they appear immediately next to the main children.
        """
        ...

    def set_layout(self, layout_style: ButtonBoxStyle) -> object:
        """
        Changes the way buttons are arranged in their container.
        """
        ...


    ...

class Calendar(Widget, Atk.ImplementorIface, Buildable):
    """
    #GtkCalendar is a widget that displays a Gregorian calendar, one month
    at a time. It can be created with gtk_calendar_new().

    The month and year currently displayed can be altered with
    gtk_calendar_select_month(). The exact day can be selected from the
    displayed month using gtk_calendar_select_day().

    To place a visual marker on a particular day, use gtk_calendar_mark_day()
    and to remove the marker, gtk_calendar_unmark_day(). Alternative, all
    marks can be cleared with gtk_calendar_clear_marks().

    The way in which the calendar itself is displayed can be altered using
    gtk_calendar_set_display_options().

    The selected date can be retrieved from a #GtkCalendar using
    gtk_calendar_get_date().

    Users should be aware that, although the Gregorian calendar is the
    legal calendar in most countries, it was adopted progressively
    between 1582 and 1929. Display before these dates is likely to be
    historically incorrect.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new calendar, with the current date being selected.
        """
        ...

    def clear_marks(self) -> object:
        """
        Remove all visual markers.
        """
        ...

    def get_date(self, year: int, month: int, day: int) -> object:
        """
        Obtains the selected date from a #GtkCalendar.
        """
        ...

    def get_day_is_marked(self, day: int) -> bool:
        """
        Returns if the @day of the @calendar is already marked.
        """
        ...

    def get_detail_height_rows(self) -> int:
        """
        Queries the height of detail cells, in rows.
        See #GtkCalendar:detail-width-chars.
        """
        ...

    def get_detail_width_chars(self) -> int:
        """
        Queries the width of detail cells, in characters.
        See #GtkCalendar:detail-width-chars.
        """
        ...

    def get_display_options(self) -> CalendarDisplayOptions:
        """
        Returns the current display options of @calendar.
        """
        ...

    def mark_day(self, day: int) -> object:
        """
        Places a visual marker on a particular day.
        """
        ...

    def select_day(self, day: int) -> object:
        """
        Selects a day from the current month.
        """
        ...

    def select_month(self, month: int, year: int) -> object:
        """
        Shifts the calendar to a different month.
        """
        ...

    def set_detail_func(self, func: CalendarDetailFunc, data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        Installs a function which provides Pango markup with detail information
        for each day. Examples for such details are holidays or appointments. That
        information is shown below each day when #GtkCalendar:show-details is set.
        A tooltip containing with full detail information is provided, if the entire
        text should not fit into the details area, or if #GtkCalendar:show-details
        is not set.

        The size of the details area can be restricted by setting the
        #GtkCalendar:detail-width-chars and #GtkCalendar:detail-height-rows
        properties.
        """
        ...

    def set_detail_height_rows(self, rows: int) -> object:
        """
        Updates the height of detail cells.
        See #GtkCalendar:detail-height-rows.
        """
        ...

    def set_detail_width_chars(self, chars: int) -> object:
        """
        Updates the width of detail cells.
        See #GtkCalendar:detail-width-chars.
        """
        ...

    def set_display_options(self, flags: CalendarDisplayOptions) -> object:
        """
        Sets display options (whether to display the heading and the month
        headings).
        """
        ...

    def unmark_day(self, day: int) -> object:
        """
        Removes the visual marker from a particular day.
        """
        ...


    ...

class CellAccessible(Accessible, Atk.Action, Atk.Component, Atk.TableCell):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class CellArea(GObject.InitiallyUnowned, Buildable, CellLayout):
    """
    The #GtkCellArea is an abstract class for #GtkCellLayout widgets
    (also referred to as "layouting widgets") to interface with an
    arbitrary number of #GtkCellRenderers and interact with the user
    for a given #GtkTreeModel row.

    The cell area handles events, focus navigation, drawing and
    size requests and allocations for a given row of data.

    Usually users dont have to interact with the #GtkCellArea directly
    unless they are implementing a cell-layouting widget themselves.

    # Requesting area sizes

    As outlined in
    [GtkWidget’s geometry management section][geometry-management],
    GTK+ uses a height-for-width
    geometry management system to compute the sizes of widgets and user
    interfaces. #GtkCellArea uses the same semantics to calculate the
    size of an area for an arbitrary number of #GtkTreeModel rows.

    When requesting the size of a cell area one needs to calculate
    the size for a handful of rows, and this will be done differently by
    different layouting widgets. For instance a #GtkTreeViewColumn
    always lines up the areas from top to bottom while a #GtkIconView
    on the other hand might enforce that all areas received the same
    width and wrap the areas around, requesting height for more cell
    areas when allocated less width.

    It’s also important for areas to maintain some cell
    alignments with areas rendered for adjacent rows (cells can
    appear “columnized” inside an area even when the size of
    cells are different in each row). For this reason the #GtkCellArea
    uses a #GtkCellAreaContext object to store the alignments
    and sizes along the way (as well as the overall largest minimum
    and natural size for all the rows which have been calculated
    with the said context).

    The #GtkCellAreaContext is an opaque object specific to the
    #GtkCellArea which created it (see gtk_cell_area_create_context()).
    The owning cell-layouting widget can create as many contexts as
    it wishes to calculate sizes of rows which should receive the
    same size in at least one orientation (horizontally or vertically),
    However, it’s important that the same #GtkCellAreaContext which
    was used to request the sizes for a given #GtkTreeModel row be
    used when rendering or processing events for that row.

    In order to request the width of all the rows at the root level
    of a #GtkTreeModel one would do the following:

    |[<!-- language="C" -->
    GtkTreeIter iter;
    gint        minimum_width;
    gint        natural_width;

    valid = gtk_tree_model_get_iter_first (model, &iter);
    while (valid)
      {
        gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
        gtk_cell_area_get_preferred_width (area, context, widget, NULL, NULL);

        valid = gtk_tree_model_iter_next (model, &iter);
      }
    gtk_cell_area_context_get_preferred_width (context, &minimum_width, &natural_width);
    ]|

    Note that in this example it’s not important to observe the
    returned minimum and natural width of the area for each row
    unless the cell-layouting object is actually interested in the
    widths of individual rows. The overall width is however stored
    in the accompanying #GtkCellAreaContext object and can be consulted
    at any time.

    This can be useful since #GtkCellLayout widgets usually have to
    support requesting and rendering rows in treemodels with an
    exceedingly large amount of rows. The #GtkCellLayout widget in
    that case would calculate the required width of the rows in an
    idle or timeout source (see g_timeout_add()) and when the widget
    is requested its actual width in #GtkWidgetClass.get_preferred_width()
    it can simply consult the width accumulated so far in the
    #GtkCellAreaContext object.

    A simple example where rows are rendered from top to bottom and
    take up the full width of the layouting widget would look like:

    |[<!-- language="C" -->
    static void
    foo_get_preferred_width (GtkWidget       *widget,
                             gint            *minimum_size,
                             gint            *natural_size)
    {
      Foo        *foo  = FOO (widget);
      FooPrivate *priv = foo->priv;

      foo_ensure_at_least_one_handfull_of_rows_have_been_requested (foo);

      gtk_cell_area_context_get_preferred_width (priv->context, minimum_size, natural_size);
    }
    ]|

    In the above example the Foo widget has to make sure that some
    row sizes have been calculated (the amount of rows that Foo judged
    was appropriate to request space for in a single timeout iteration)
    before simply returning the amount of space required by the area via
    the #GtkCellAreaContext.

    Requesting the height for width (or width for height) of an area is
    a similar task except in this case the #GtkCellAreaContext does not
    store the data (actually, it does not know how much space the layouting
    widget plans to allocate it for every row. It’s up to the layouting
    widget to render each row of data with the appropriate height and
    width which was requested by the #GtkCellArea).

    In order to request the height for width of all the rows at the
    root level of a #GtkTreeModel one would do the following:

    |[<!-- language="C" -->
    GtkTreeIter iter;
    gint        minimum_height;
    gint        natural_height;
    gint        full_minimum_height = 0;
    gint        full_natural_height = 0;

    valid = gtk_tree_model_get_iter_first (model, &iter);
    while (valid)
      {
        gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
        gtk_cell_area_get_preferred_height_for_width (area, context, widget,
                                                      width, &minimum_height, &natural_height);

        if (width_is_for_allocation)
           cache_row_height (&iter, minimum_height, natural_height);

        full_minimum_height += minimum_height;
        full_natural_height += natural_height;

        valid = gtk_tree_model_iter_next (model, &iter);
      }
    ]|

    Note that in the above example we would need to cache the heights
    returned for each row so that we would know what sizes to render the
    areas for each row. However we would only want to really cache the
    heights if the request is intended for the layouting widgets real
    allocation.

    In some cases the layouting widget is requested the height for an
    arbitrary for_width, this is a special case for layouting widgets
    who need to request size for tens of thousands  of rows. For this
    case it’s only important that the layouting widget calculate
    one reasonably sized chunk of rows and return that height
    synchronously. The reasoning here is that any layouting widget is
    at least capable of synchronously calculating enough height to fill
    the screen height (or scrolled window height) in response to a single
    call to #GtkWidgetClass.get_preferred_height_for_width(). Returning
    a perfect height for width that is larger than the screen area is
    inconsequential since after the layouting receives an allocation
    from a scrolled window it simply continues to drive the scrollbar
    values while more and more height is required for the row heights
    that are calculated in the background.

    # Rendering Areas

    Once area sizes have been aquired at least for the rows in the
    visible area of the layouting widget they can be rendered at
    #GtkWidgetClass.draw() time.

    A crude example of how to render all the rows at the root level
    runs as follows:

    |[<!-- language="C" -->
    GtkAllocation allocation;
    GdkRectangle  cell_area = { 0, };
    GtkTreeIter   iter;
    gint          minimum_width;
    gint          natural_width;

    gtk_widget_get_allocation (widget, &allocation);
    cell_area.width = allocation.width;

    valid = gtk_tree_model_get_iter_first (model, &iter);
    while (valid)
      {
        cell_area.height = get_cached_height_for_row (&iter);

        gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
        gtk_cell_area_render (area, context, widget, cr,
                              &cell_area, &cell_area, state_flags, FALSE);

        cell_area.y += cell_area.height;

        valid = gtk_tree_model_iter_next (model, &iter);
      }
    ]|

    Note that the cached height in this example really depends on how
    the layouting widget works. The layouting widget might decide to
    give every row its minimum or natural height or, if the model content
    is expected to fit inside the layouting widget without scrolling, it
    would make sense to calculate the allocation for each row at
    #GtkWidget::size-allocate time using gtk_distribute_natural_allocation().

    # Handling Events and Driving Keyboard Focus

    Passing events to the area is as simple as handling events on any
    normal widget and then passing them to the gtk_cell_area_event()
    API as they come in. Usually #GtkCellArea is only interested in
    button events, however some customized derived areas can be implemented
    who are interested in handling other events. Handling an event can
    trigger the #GtkCellArea::focus-changed signal to fire; as well as
    #GtkCellArea::add-editable in the case that an editable cell was
    clicked and needs to start editing. You can call
    gtk_cell_area_stop_editing() at any time to cancel any cell editing
    that is currently in progress.

    The #GtkCellArea drives keyboard focus from cell to cell in a way
    similar to #GtkWidget. For layouting widgets that support giving
    focus to cells it’s important to remember to pass %GTK_CELL_RENDERER_FOCUSED
    to the area functions for the row that has focus and to tell the
    area to paint the focus at render time.

    Layouting widgets that accept focus on cells should implement the
    #GtkWidgetClass.focus() virtual method. The layouting widget is always
    responsible for knowing where #GtkTreeModel rows are rendered inside
    the widget, so at #GtkWidgetClass.focus() time the layouting widget
    should use the #GtkCellArea methods to navigate focus inside the area
    and then observe the GtkDirectionType to pass the focus to adjacent
    rows and areas.

    A basic example of how the #GtkWidgetClass.focus() virtual method
    should be implemented:

    |[<!-- language="C" -->
    static gboolean
    foo_focus (GtkWidget       *widget,
               GtkDirectionType direction)
    {
      Foo        *foo  = FOO (widget);
      FooPrivate *priv = foo->priv;
      gint        focus_row;
      gboolean    have_focus = FALSE;

      focus_row = priv->focus_row;

      if (!gtk_widget_has_focus (widget))
        gtk_widget_grab_focus (widget);

      valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, priv->focus_row);
      while (valid)
        {
          gtk_cell_area_apply_attributes (priv->area, priv->model, &iter, FALSE, FALSE);

          if (gtk_cell_area_focus (priv->area, direction))
            {
               priv->focus_row = focus_row;
               have_focus = TRUE;
               break;
            }
          else
            {
              if (direction == GTK_DIR_RIGHT ||
                  direction == GTK_DIR_LEFT)
                break;
              else if (direction == GTK_DIR_UP ||
                       direction == GTK_DIR_TAB_BACKWARD)
               {
                  if (focus_row == 0)
                    break;
                  else
                   {
                      focus_row--;
                      valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, focus_row);
                   }
                }
              else
                {
                  if (focus_row == last_row)
                    break;
                  else
                    {
                      focus_row++;
                      valid = gtk_tree_model_iter_next (priv->model, &iter);
                    }
                }
            }
        }
        return have_focus;
    }
    ]|

    Note that the layouting widget is responsible for matching the
    GtkDirectionType values to the way it lays out its cells.

    # Cell Properties

    The #GtkCellArea introduces cell properties for #GtkCellRenderers
    in very much the same way that #GtkContainer introduces
    [child properties][child-properties]
    for #GtkWidgets. This provides some general interfaces for defining
    the relationship cell areas have with their cells. For instance in a
    #GtkCellAreaBox a cell might “expand” and receive extra space when
    the area is allocated more than its full natural request, or a cell
    might be configured to “align” with adjacent rows which were requested
    and rendered with the same #GtkCellAreaContext.

    Use gtk_cell_area_class_install_cell_property() to install cell
    properties for a cell area class and gtk_cell_area_class_find_cell_property()
    or gtk_cell_area_class_list_cell_properties() to get information about
    existing cell properties.

    To set the value of a cell property, use gtk_cell_area_cell_set_property(),
    gtk_cell_area_cell_set() or gtk_cell_area_cell_set_valist(). To obtain
    the value of a cell property, use gtk_cell_area_cell_get_property(),
    gtk_cell_area_cell_get() or gtk_cell_area_cell_get_valist().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def activate(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, flags: CellRendererState, edit_only: bool) -> bool:
        """
        Activates @area, usually by activating the currently focused
        cell, however some subclasses which embed widgets in the area
        can also activate a widget if it currently has the focus.
        """
        ...

    def activate_cell(self, widget: Widget, renderer: CellRenderer, event: Gdk.Event, cell_area: Gdk.Rectangle, flags: CellRendererState) -> bool:
        """
        This is used by #GtkCellArea subclasses when handling events
        to activate cells, the base #GtkCellArea class activates cells
        for keyboard events for free in its own GtkCellArea->activate()
        implementation.
        """
        ...

    def add(self, renderer: CellRenderer) -> object:
        """
        Adds @renderer to @area with the default child cell properties.
        """
        ...

    def add_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> object:
        """
        Adds @sibling to @renderer’s focusable area, focus will be drawn
        around @renderer and all of its siblings if @renderer can
        focus for a given row.

        Events handled by focus siblings can also activate the given
        focusable @renderer.
        """
        ...

    def add_with_properties(self, renderer: CellRenderer, first_prop_name: str, *args: object) -> object:
        """
        Adds @renderer to @area, setting cell properties at the same time.
        See gtk_cell_area_add() and gtk_cell_area_cell_set() for more details.
        """
        ...

    def apply_attributes(self, tree_model: TreeModel, iter: TreeIter, is_expander: bool, is_expanded: bool) -> object:
        """
        Applies any connected attributes to the renderers in
        @area by pulling the values from @tree_model.
        """
        ...

    def attribute_connect(self, renderer: CellRenderer, attribute: str, column: int) -> object:
        """
        Connects an @attribute to apply values from @column for the
        #GtkTreeModel in use.
        """
        ...

    def attribute_disconnect(self, renderer: CellRenderer, attribute: str) -> object:
        """
        Disconnects @attribute for the @renderer in @area so that
        attribute will no longer be updated with values from the
        model.
        """
        ...

    def attribute_get_column(self, renderer: CellRenderer, attribute: str) -> int:
        """
        Returns the model column that an attribute has been mapped to,
        or -1 if the attribute is not mapped.
        """
        ...

    def cell_get(self, renderer: CellRenderer, first_prop_name: str, *args: object) -> object:
        """
        Gets the values of one or more cell properties for @renderer in @area.
        """
        ...

    def cell_get_property(self, renderer: CellRenderer, property_name: str, value: GObject.Value) -> object:
        """
        Gets the value of a cell property for @renderer in @area.
        """
        ...

    def cell_get_valist(self, renderer: CellRenderer, first_property_name: str, var_args: list) -> object:
        """
        Gets the values of one or more cell properties for @renderer in @area.
        """
        ...

    def cell_set(self, renderer: CellRenderer, first_prop_name: str, *args: object) -> object:
        """
        Sets one or more cell properties for @cell in @area.
        """
        ...

    def cell_set_property(self, renderer: CellRenderer, property_name: str, value: GObject.Value) -> object:
        """
        Sets a cell property for @renderer in @area.
        """
        ...

    def cell_set_valist(self, renderer: CellRenderer, first_property_name: str, var_args: list) -> object:
        """
        Sets one or more cell properties for @renderer in @area.
        """
        ...

    def copy_context(self, context: CellAreaContext) -> CellAreaContext:
        """
        This is sometimes needed for cases where rows need to share
        alignments in one orientation but may be separately grouped
        in the opposing orientation.

        For instance, #GtkIconView creates all icons (rows) to have
        the same width and the cells theirin to have the same
        horizontal alignments. However each row of icons may have
        a separate collective height. #GtkIconView uses this to
        request the heights of each row based on a context which
        was already used to request all the row widths that are
        to be displayed.
        """
        ...

    def create_context(self) -> CellAreaContext:
        """
        Creates a #GtkCellAreaContext to be used with @area for
        all purposes. #GtkCellAreaContext stores geometry information
        for rows for which it was operated on, it is important to use
        the same context for the same row of data at all times (i.e.
        one should render and handle events with the same #GtkCellAreaContext
        which was used to request the size of those rows of data).
        """
        ...

    def event(self, context: CellAreaContext, widget: Widget, event: Gdk.Event, cell_area: Gdk.Rectangle, flags: CellRendererState) -> int:
        """
        Delegates event handling to a #GtkCellArea.
        """
        ...

    def focus(self, direction: DirectionType) -> bool:
        """
        This should be called by the @area’s owning layout widget
        when focus is to be passed to @area, or moved within @area
        for a given @direction and row data.

        Implementing #GtkCellArea classes should implement this
        method to receive and navigate focus in its own way particular
        to how it lays out cells.
        """
        ...

    def foreach(self, callback: CellCallback, callback_data: _T.Optional[object]) -> object:
        """
        Calls @callback for every #GtkCellRenderer in @area.
        """
        ...

    def foreach_alloc(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, background_area: Gdk.Rectangle, callback: CellAllocCallback, callback_data: _T.Optional[object]) -> object:
        """
        Calls @callback for every #GtkCellRenderer in @area with the
        allocated rectangle inside @cell_area.
        """
        ...

    def get_cell_allocation(self, context: CellAreaContext, widget: Widget, renderer: CellRenderer, cell_area: Gdk.Rectangle, allocation: Gdk.Rectangle) -> object:
        """
        Derives the allocation of @renderer inside @area if @area
        were to be renderered in @cell_area.
        """
        ...

    def get_cell_at_position(self, context: CellAreaContext, widget: Widget, cell_area: Gdk.Rectangle, x: int, y: int, alloc_area: Gdk.Rectangle) -> CellRenderer:
        """
        Gets the #GtkCellRenderer at @x and @y coordinates inside @area and optionally
        returns the full cell allocation for it inside @cell_area.
        """
        ...

    def get_current_path_string(self) -> str:
        """
        Gets the current #GtkTreePath string for the currently
        applied #GtkTreeIter, this is implicitly updated when
        gtk_cell_area_apply_attributes() is called and can be
        used to interact with renderers from #GtkCellArea
        subclasses.
        """
        ...

    def get_edit_widget(self) -> CellEditable:
        """
        Gets the #GtkCellEditable widget currently used
        to edit the currently edited cell.
        """
        ...

    def get_edited_cell(self) -> CellRenderer:
        """
        Gets the #GtkCellRenderer in @area that is currently
        being edited.
        """
        ...

    def get_focus_cell(self) -> CellRenderer:
        """
        Retrieves the currently focused cell for @area
        """
        ...

    def get_focus_from_sibling(self, renderer: CellRenderer) -> CellRenderer:
        """
        Gets the #GtkCellRenderer which is expected to be focusable
        for which @renderer is, or may be a sibling.

        This is handy for #GtkCellArea subclasses when handling events,
        after determining the renderer at the event location it can
        then chose to activate the focus cell for which the event
        cell may have been a sibling.
        """
        ...

    def get_focus_siblings(self, renderer: CellRenderer) -> GLib.List:
        """
        Gets the focus sibling cell renderers for @renderer.
        """
        ...

    def get_preferred_height(self, context: CellAreaContext, widget: Widget, minimum_height: int, natural_height: int) -> object:
        """
        Retrieves a cell area’s initial minimum and natural height.

        @area will store some geometrical information in @context along the way;
        when requesting sizes over an arbitrary number of rows, it’s not important
        to check the @minimum_height and @natural_height of this call but rather to
        consult gtk_cell_area_context_get_preferred_height() after a series of
        requests.
        """
        ...

    def get_preferred_height_for_width(self, context: CellAreaContext, widget: Widget, width: int, minimum_height: int, natural_height: int) -> object:
        """
        Retrieves a cell area’s minimum and natural height if it would be given
        the specified @width.

        @area stores some geometrical information in @context along the way
        while calling gtk_cell_area_get_preferred_width(). It’s important to
        perform a series of gtk_cell_area_get_preferred_width() requests with
        @context first and then call gtk_cell_area_get_preferred_height_for_width()
        on each cell area individually to get the height for width of each
        fully requested row.

        If at some point, the width of a single row changes, it should be
        requested with gtk_cell_area_get_preferred_width() again and then
        the full width of the requested rows checked again with
        gtk_cell_area_context_get_preferred_width().
        """
        ...

    def get_preferred_width(self, context: CellAreaContext, widget: Widget, minimum_width: int, natural_width: int) -> object:
        """
        Retrieves a cell area’s initial minimum and natural width.

        @area will store some geometrical information in @context along the way;
        when requesting sizes over an arbitrary number of rows, it’s not important
        to check the @minimum_width and @natural_width of this call but rather to
        consult gtk_cell_area_context_get_preferred_width() after a series of
        requests.
        """
        ...

    def get_preferred_width_for_height(self, context: CellAreaContext, widget: Widget, height: int, minimum_width: int, natural_width: int) -> object:
        """
        Retrieves a cell area’s minimum and natural width if it would be given
        the specified @height.

        @area stores some geometrical information in @context along the way
        while calling gtk_cell_area_get_preferred_height(). It’s important to
        perform a series of gtk_cell_area_get_preferred_height() requests with
        @context first and then call gtk_cell_area_get_preferred_width_for_height()
        on each cell area individually to get the height for width of each
        fully requested row.

        If at some point, the height of a single row changes, it should be
        requested with gtk_cell_area_get_preferred_height() again and then
        the full height of the requested rows checked again with
        gtk_cell_area_context_get_preferred_height().
        """
        ...

    def get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the area prefers a height-for-width layout
        or a width-for-height layout.
        """
        ...

    def has_renderer(self, renderer: CellRenderer) -> bool:
        """
        Checks if @area contains @renderer.
        """
        ...

    def inner_cell_area(self, widget: Widget, cell_area: Gdk.Rectangle, inner_area: Gdk.Rectangle) -> object:
        """
        This is a convenience function for #GtkCellArea implementations
        to get the inner area where a given #GtkCellRenderer will be
        rendered. It removes any padding previously added by gtk_cell_area_request_renderer().
        """
        ...

    def is_activatable(self) -> bool:
        """
        Returns whether the area can do anything when activated,
        after applying new attributes to @area.
        """
        ...

    def is_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> bool:
        """
        Returns whether @sibling is one of @renderer’s focus siblings
        (see gtk_cell_area_add_focus_sibling()).
        """
        ...

    def remove(self, renderer: CellRenderer) -> object:
        """
        Removes @renderer from @area.
        """
        ...

    def remove_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> object:
        """
        Removes @sibling from @renderer’s focus sibling list
        (see gtk_cell_area_add_focus_sibling()).
        """
        ...

    def render(self, context: CellAreaContext, widget: Widget, cr: cairo.Context, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState, paint_focus: bool) -> object:
        """
        Renders @area’s cells according to @area’s layout onto @widget at
        the given coordinates.
        """
        ...

    def request_renderer(self, renderer: CellRenderer, orientation: Orientation, widget: Widget, for_size: int, minimum_size: int, natural_size: int) -> object:
        """
        This is a convenience function for #GtkCellArea implementations
        to request size for cell renderers. It’s important to use this
        function to request size and then use gtk_cell_area_inner_cell_area()
        at render and event time since this function will add padding
        around the cell for focus painting.
        """
        ...

    def set_focus_cell(self, renderer: CellRenderer) -> object:
        """
        Explicitly sets the currently focused cell to @renderer.

        This is generally called by implementations of
        #GtkCellAreaClass.focus() or #GtkCellAreaClass.event(),
        however it can also be used to implement functions such
        as gtk_tree_view_set_cursor_on_cell().
        """
        ...

    def stop_editing(self, canceled: bool) -> object:
        """
        Explicitly stops the editing of the currently edited cell.

        If @canceled is %TRUE, the currently edited cell renderer
        will emit the ::editing-canceled signal, otherwise the
        the ::editing-done signal will be emitted on the current
        edit widget.

        See gtk_cell_area_get_edited_cell() and gtk_cell_area_get_edit_widget().
        """
        ...


    ...

class CellAreaBox(CellArea, Buildable, CellLayout, Orientable):
    """
    The #GtkCellAreaBox renders cell renderers into a row or a column
    depending on its #GtkOrientation.

    GtkCellAreaBox uses a notion of packing. Packing
    refers to adding cell renderers with reference to a particular position
    in a #GtkCellAreaBox. There are two reference positions: the
    start and the end of the box.
    When the #GtkCellAreaBox is oriented in the %GTK_ORIENTATION_VERTICAL
    orientation, the start is defined as the top of the box and the end is
    defined as the bottom. In the %GTK_ORIENTATION_HORIZONTAL orientation
    start is defined as the left side and the end is defined as the right
    side.

    Alignments of #GtkCellRenderers rendered in adjacent rows can be
    configured by configuring the #GtkCellAreaBox align child cell property
    with gtk_cell_area_cell_set_property() or by specifying the "align"
    argument to gtk_cell_area_box_pack_start() and gtk_cell_area_box_pack_end().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellArea:
        """
        Creates a new #GtkCellAreaBox.
        """
        ...

    def get_spacing(self) -> int:
        """
        Gets the spacing added between cell renderers.
        """
        ...

    def pack_end(self, renderer: CellRenderer, expand: bool, align: bool, fixed: bool) -> object:
        """
        Adds @renderer to @box, packed with reference to the end of @box.

        The @renderer is packed after (away from end of) any other
        #GtkCellRenderer packed with reference to the end of @box.
        """
        ...

    def pack_start(self, renderer: CellRenderer, expand: bool, align: bool, fixed: bool) -> object:
        """
        Adds @renderer to @box, packed with reference to the start of @box.

        The @renderer is packed after any other #GtkCellRenderer packed
        with reference to the start of @box.
        """
        ...

    def set_spacing(self, spacing: int) -> object:
        """
        Sets the spacing to add between cell renderers in @box.
        """
        ...


    ...

class CellAreaContext(GObject.Object):
    """
    The #GtkCellAreaContext object is created by a given #GtkCellArea
    implementation via its #GtkCellAreaClass.create_context() virtual
    method and is used to store cell sizes and alignments for a series of
    #GtkTreeModel rows that are requested and rendered in the same context.

    #GtkCellLayout widgets can create any number of contexts in which to
    request and render groups of data rows. However, it’s important that the
    same context which was used to request sizes for a given #GtkTreeModel
    row also be used for the same row when calling other #GtkCellArea APIs
    such as gtk_cell_area_render() and gtk_cell_area_event().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def allocate(self, width: int, height: int) -> object:
        """
        Allocates a width and/or a height for all rows which are to be
        rendered with @context.

        Usually allocation is performed only horizontally or sometimes
        vertically since a group of rows are usually rendered side by
        side vertically or horizontally and share either the same width
        or the same height. Sometimes they are allocated in both horizontal
        and vertical orientations producing a homogeneous effect of the
        rows. This is generally the case for #GtkTreeView when
        #GtkTreeView:fixed-height-mode is enabled.

        Since 3.0
        """
        ...

    def get_allocation(self, width: int, height: int) -> object:
        """
        Fetches the current allocation size for @context.

        If the context was not allocated in width or height, or if the
        context was recently reset with gtk_cell_area_context_reset(),
        the returned value will be -1.
        """
        ...

    def get_area(self) -> CellArea:
        """
        Fetches the #GtkCellArea this @context was created by.

        This is generally unneeded by layouting widgets; however,
        it is important for the context implementation itself to
        fetch information about the area it is being used for.

        For instance at #GtkCellAreaContextClass.allocate() time
        it’s important to know details about any cell spacing
        that the #GtkCellArea is configured with in order to
        compute a proper allocation.
        """
        ...

    def get_preferred_height(self, minimum_height: int, natural_height: int) -> object:
        """
        Gets the accumulative preferred height for all rows which have been
        requested with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a #GtkCellArea, the returned values are 0.
        """
        ...

    def get_preferred_height_for_width(self, width: int, minimum_height: int, natural_height: int) -> object:
        """
        Gets the accumulative preferred height for @width for all rows
        which have been requested for the same said @width with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a #GtkCellArea, the returned values are -1.
        """
        ...

    def get_preferred_width(self, minimum_width: int, natural_width: int) -> object:
        """
        Gets the accumulative preferred width for all rows which have been
        requested with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a #GtkCellArea, the returned values are 0.
        """
        ...

    def get_preferred_width_for_height(self, height: int, minimum_width: int, natural_width: int) -> object:
        """
        Gets the accumulative preferred width for @height for all rows which
        have been requested for the same said @height with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a #GtkCellArea, the returned values are -1.
        """
        ...

    def push_preferred_height(self, minimum_height: int, natural_height: int) -> object:
        """
        Causes the minimum and/or natural height to grow if the new
        proposed sizes exceed the current minimum and natural height.

        This is used by #GtkCellAreaContext implementations during
        the request process over a series of #GtkTreeModel rows to
        progressively push the requested height over a series of
        gtk_cell_area_get_preferred_height() requests.
        """
        ...

    def push_preferred_width(self, minimum_width: int, natural_width: int) -> object:
        """
        Causes the minimum and/or natural width to grow if the new
        proposed sizes exceed the current minimum and natural width.

        This is used by #GtkCellAreaContext implementations during
        the request process over a series of #GtkTreeModel rows to
        progressively push the requested width over a series of
        gtk_cell_area_get_preferred_width() requests.
        """
        ...

    def reset(self) -> object:
        """
        Resets any previously cached request and allocation
        data.

        When underlying #GtkTreeModel data changes its
        important to reset the context if the content
        size is allowed to shrink. If the content size
        is only allowed to grow (this is usually an option
        for views rendering large data stores as a measure
        of optimization), then only the row that changed
        or was inserted needs to be (re)requested with
        gtk_cell_area_get_preferred_width().

        When the new overall size of the context requires
        that the allocated size changes (or whenever this
        allocation changes at all), the variable row
        sizes need to be re-requested for every row.

        For instance, if the rows are displayed all with
        the same width from top to bottom then a change
        in the allocated width necessitates a recalculation
        of all the displayed row heights using
        gtk_cell_area_get_preferred_height_for_width().

        Since 3.0
        """
        ...


    ...

class CellRenderer(GObject.InitiallyUnowned):
    """
    The #GtkCellRenderer is a base class of a set of objects used for
    rendering a cell to a #cairo_t.  These objects are used primarily by
    the #GtkTreeView widget, though they aren’t tied to them in any
    specific way.  It is worth noting that #GtkCellRenderer is not a
    #GtkWidget and cannot be treated as such.

    The primary use of a #GtkCellRenderer is for drawing a certain graphical
    elements on a #cairo_t. Typically, one cell renderer is used to
    draw many cells on the screen.  To this extent, it isn’t expected that a
    CellRenderer keep any permanent state around.  Instead, any state is set
    just prior to use using #GObjects property system.  Then, the
    cell is measured using gtk_cell_renderer_get_size(). Finally, the cell
    is rendered in the correct location using gtk_cell_renderer_render().

    There are a number of rules that must be followed when writing a new
    #GtkCellRenderer.  First and foremost, it’s important that a certain set
    of properties will always yield a cell renderer of the same size,
    barring a #GtkStyle change.  The #GtkCellRenderer also has a number of
    generic properties that are expected to be honored by all children.

    Beyond merely rendering a cell, cell renderers can optionally
    provide active user interface elements. A cell renderer can be
    “activatable” like #GtkCellRendererToggle,
    which toggles when it gets activated by a mouse click, or it can be
    “editable” like #GtkCellRendererText, which
    allows the user to edit the text using a widget implementing the
    #GtkCellEditable interface, e.g. #GtkEntry.
    To make a cell renderer activatable or editable, you have to
    implement the #GtkCellRendererClass.activate or
    #GtkCellRendererClass.start_editing virtual functions, respectively.

    Many properties of #GtkCellRenderer and its subclasses have a
    corresponding “set” property, e.g. “cell-background-set” corresponds
    to “cell-background”. These “set” properties reflect whether a property
    has been set or not. You should not set them independently.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def activate(self, event: Gdk.Event, widget: Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> bool:
        """
        Passes an activate event to the cell renderer for possible processing.
        Some cell renderers may use events; for example, #GtkCellRendererToggle
        toggles when it gets a mouse click.
        """
        ...

    def get_aligned_area(self, widget: Widget, flags: CellRendererState, cell_area: Gdk.Rectangle, aligned_area: Gdk.Rectangle) -> object:
        """
        Gets the aligned area used by @cell inside @cell_area. Used for finding
        the appropriate edit and focus rectangle.
        """
        ...

    def get_alignment(self, xalign: float, yalign: float) -> object:
        """
        Fills in @xalign and @yalign with the appropriate values of @cell.
        """
        ...

    def get_fixed_size(self, width: int, height: int) -> object:
        """
        Fills in @width and @height with the appropriate size of @cell.
        """
        ...

    def get_padding(self, xpad: int, ypad: int) -> object:
        """
        Fills in @xpad and @ypad with the appropriate values of @cell.
        """
        ...

    def get_preferred_height(self, widget: Widget, minimum_size: int, natural_size: int) -> object:
        """
        Retreives a renderer’s natural size when rendered to @widget.
        """
        ...

    def get_preferred_height_for_width(self, widget: Widget, width: int, minimum_height: int, natural_height: int) -> object:
        """
        Retreives a cell renderers’s minimum and natural height if it were rendered to
        @widget with the specified @width.
        """
        ...

    def get_preferred_size(self, widget: Widget, minimum_size: Requisition, natural_size: Requisition) -> object:
        """
        Retrieves the minimum and natural size of a cell taking
        into account the widget’s preference for height-for-width management.
        """
        ...

    def get_preferred_width(self, widget: Widget, minimum_size: int, natural_size: int) -> object:
        """
        Retreives a renderer’s natural size when rendered to @widget.
        """
        ...

    def get_preferred_width_for_height(self, widget: Widget, height: int, minimum_width: int, natural_width: int) -> object:
        """
        Retreives a cell renderers’s minimum and natural width if it were rendered to
        @widget with the specified @height.
        """
        ...

    def get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the cell renderer prefers a height-for-width layout
        or a width-for-height layout.
        """
        ...

    def get_sensitive(self) -> bool:
        """
        Returns the cell renderer’s sensitivity.
        """
        ...

    def get_size(self, widget: Widget, cell_area: _T.Optional[Gdk.Rectangle], x_offset: int, y_offset: int, width: int, height: int) -> object:
        """
        Obtains the width and height needed to render the cell. Used by view
        widgets to determine the appropriate size for the cell_area passed to
        gtk_cell_renderer_render().  If @cell_area is not %NULL, fills in the
        x and y offsets (if set) of the cell relative to this location.

        Please note that the values set in @width and @height, as well as those
        in @x_offset and @y_offset are inclusive of the xpad and ypad properties.
        """
        ...

    def get_state(self, widget: _T.Optional[Widget], cell_state: CellRendererState) -> StateFlags:
        """
        Translates the cell renderer state to #GtkStateFlags,
        based on the cell renderer and widget sensitivity, and
        the given #GtkCellRendererState.
        """
        ...

    def get_visible(self) -> bool:
        """
        Returns the cell renderer’s visibility.
        """
        ...

    def is_activatable(self) -> bool:
        """
        Checks whether the cell renderer can do something when activated.
        """
        ...

    def render(self, cr: cairo.Context, widget: Widget, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> object:
        """
        Invokes the virtual render function of the #GtkCellRenderer. The three
        passed-in rectangles are areas in @cr. Most renderers will draw within
        @cell_area; the xalign, yalign, xpad, and ypad fields of the #GtkCellRenderer
        should be honored with respect to @cell_area. @background_area includes the
        blank space around the cell, and also the area containing the tree expander;
        so the @background_area rectangles for all cells tile to cover the entire
        @window.
        """
        ...

    def set_alignment(self, xalign: float, yalign: float) -> object:
        """
        Sets the renderer’s alignment within its available space.
        """
        ...

    def set_fixed_size(self, width: int, height: int) -> object:
        """
        Sets the renderer size to be explicit, independent of the properties set.
        """
        ...

    def set_padding(self, xpad: int, ypad: int) -> object:
        """
        Sets the renderer’s padding.
        """
        ...

    def set_sensitive(self, sensitive: bool) -> object:
        """
        Sets the cell renderer’s sensitivity.
        """
        ...

    def set_visible(self, visible: bool) -> object:
        """
        Sets the cell renderer’s visibility.
        """
        ...

    def start_editing(self, event: _T.Optional[Gdk.Event], widget: Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: CellRendererState) -> CellEditable:
        """
        Starts editing the contents of this @cell, through a new #GtkCellEditable
        widget created by the #GtkCellRendererClass.start_editing virtual function.
        """
        ...

    def stop_editing(self, canceled: bool) -> object:
        """
        Informs the cell renderer that the editing is stopped.
        If @canceled is %TRUE, the cell renderer will emit the
        #GtkCellRenderer::editing-canceled signal.

        This function should be called by cell renderer implementations
        in response to the #GtkCellEditable::editing-done signal of
        #GtkCellEditable.
        """
        ...


    ...

class CellRendererAccel(CellRendererText):
    """
    #GtkCellRendererAccel displays a keyboard accelerator (i.e. a key
    combination like `Control + a`). If the cell renderer is editable,
    the accelerator can be changed by simply typing the new combination.

    The #GtkCellRendererAccel cell renderer was added in GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellRenderer:
        """
        Creates a new #GtkCellRendererAccel.
        """
        ...


    ...

class CellRendererCombo(CellRendererText):
    """
    #GtkCellRendererCombo renders text in a cell like #GtkCellRendererText from
    which it is derived. But while #GtkCellRendererText offers a simple entry to
    edit the text, #GtkCellRendererCombo offers a #GtkComboBox
    widget to edit the text. The values to display in the combo box are taken from
    the tree model specified in the #GtkCellRendererCombo:model property.

    The combo cell renderer takes care of adding a text cell renderer to the combo
    box and sets it to display the column specified by its
    #GtkCellRendererCombo:text-column property. Further properties of the combo box
    can be set in a handler for the #GtkCellRenderer::editing-started signal.

    The #GtkCellRendererCombo cell renderer was added in GTK+ 2.6.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellRenderer:
        """
        Creates a new #GtkCellRendererCombo.
        Adjust how text is drawn using object properties.
        Object properties can be set globally (with g_object_set()).
        Also, with #GtkTreeViewColumn, you can bind a property to a value
        in a #GtkTreeModel. For example, you can bind the “text” property
        on the cell renderer to a string value in the model, thus rendering
        a different string in each row of the #GtkTreeView.
        """
        ...


    ...

class CellRendererPixbuf(CellRenderer):
    """
    A #GtkCellRendererPixbuf can be used to render an image in a cell. It allows
    to render either a given #GdkPixbuf (set via the
    #GtkCellRendererPixbuf:pixbuf property) or a named icon (set via the
    #GtkCellRendererPixbuf:icon-name property).

    To support the tree view, #GtkCellRendererPixbuf also supports rendering two
    alternative pixbufs, when the #GtkCellRenderer:is-expander property is %TRUE.
    If the #GtkCellRenderer:is-expanded property is %TRUE and the
    #GtkCellRendererPixbuf:pixbuf-expander-open property is set to a pixbuf, it
    renders that pixbuf, if the #GtkCellRenderer:is-expanded property is %FALSE
    and the #GtkCellRendererPixbuf:pixbuf-expander-closed property is set to a
    pixbuf, it renders that one.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellRenderer:
        """
        Creates a new #GtkCellRendererPixbuf. Adjust rendering
        parameters using object properties. Object properties can be set
        globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
        can bind a property to a value in a #GtkTreeModel. For example, you
        can bind the “pixbuf” property on the cell renderer to a pixbuf value
        in the model, thus rendering a different image in each row of the
        #GtkTreeView.
        """
        ...


    ...

class CellRendererProgress(CellRenderer, Orientable):
    """
    #GtkCellRendererProgress renders a numeric value as a progress par in a cell.
    Additionally, it can display a text on top of the progress bar.

    The #GtkCellRendererProgress cell renderer was added in GTK+ 2.6.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellRenderer:
        """
        Creates a new #GtkCellRendererProgress.
        """
        ...


    ...

class CellRendererSpin(CellRendererText):
    """
    #GtkCellRendererSpin renders text in a cell like #GtkCellRendererText from
    which it is derived. But while #GtkCellRendererText offers a simple entry to
    edit the text, #GtkCellRendererSpin offers a #GtkSpinButton widget. Of course,
    that means that the text has to be parseable as a floating point number.

    The range of the spinbutton is taken from the adjustment property of the
    cell renderer, which can be set explicitly or mapped to a column in the
    tree model, like all properties of cell renders. #GtkCellRendererSpin
    also has properties for the #GtkCellRendererSpin:climb-rate and the number
    of #GtkCellRendererSpin:digits to display. Other #GtkSpinButton properties
    can be set in a handler for the #GtkCellRenderer::editing-started signal.

    The #GtkCellRendererSpin cell renderer was added in GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellRenderer:
        """
        Creates a new #GtkCellRendererSpin.
        """
        ...


    ...

class CellRendererSpinner(CellRenderer):
    """
    GtkCellRendererSpinner renders a spinning animation in a cell, very
    similar to #GtkSpinner. It can often be used as an alternative
    to a #GtkCellRendererProgress for displaying indefinite activity,
    instead of actual progress.

    To start the animation in a cell, set the #GtkCellRendererSpinner:active
    property to %TRUE and increment the #GtkCellRendererSpinner:pulse property
    at regular intervals. The usual way to set the cell renderer properties
    for each cell is to bind them to columns in your tree model using e.g.
    gtk_tree_view_column_add_attribute().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellRenderer:
        """
        Returns a new cell renderer which will show a spinner to indicate
        activity.
        """
        ...


    ...

class CellRendererText(CellRenderer):
    """
    A #GtkCellRendererText renders a given text in its cell, using the font, color and
    style information provided by its properties. The text will be ellipsized if it is
    too long and the #GtkCellRendererText:ellipsize property allows it.

    If the #GtkCellRenderer:mode is %GTK_CELL_RENDERER_MODE_EDITABLE,
    the #GtkCellRendererText allows to edit its text using an entry.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellRenderer:
        """
        Creates a new #GtkCellRendererText. Adjust how text is drawn using
        object properties. Object properties can be
        set globally (with g_object_set()). Also, with #GtkTreeViewColumn,
        you can bind a property to a value in a #GtkTreeModel. For example,
        you can bind the “text” property on the cell renderer to a string
        value in the model, thus rendering a different string in each row
        of the #GtkTreeView
        """
        ...

    def set_fixed_height_from_font(self, number_of_rows: int) -> object:
        """
        Sets the height of a renderer to explicitly be determined by the “font” and
        “y_pad” property set on it.  Further changes in these properties do not
        affect the height, so they must be accompanied by a subsequent call to this
        function.  Using this function is unflexible, and should really only be used
        if calculating the size of a cell is too slow (ie, a massive number of cells
        displayed).  If @number_of_rows is -1, then the fixed height is unset, and
        the height is determined by the properties again.
        """
        ...


    ...

class CellRendererToggle(CellRenderer):
    """
    #GtkCellRendererToggle renders a toggle button in a cell. The
    button is drawn as a radio or a checkbutton, depending on the
    #GtkCellRendererToggle:radio property.
    When activated, it emits the #GtkCellRendererToggle::toggled signal.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CellRenderer:
        """
        Creates a new #GtkCellRendererToggle. Adjust rendering
        parameters using object properties. Object properties can be set
        globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
        can bind a property to a value in a #GtkTreeModel. For example, you
        can bind the “active” property on the cell renderer to a boolean value
        in the model, thus causing the check button to reflect the state of
        the model.
        """
        ...

    def get_activatable(self) -> bool:
        """
        Returns whether the cell renderer is activatable. See
        gtk_cell_renderer_toggle_set_activatable().
        """
        ...

    def get_active(self) -> bool:
        """
        Returns whether the cell renderer is active. See
        gtk_cell_renderer_toggle_set_active().
        """
        ...

    def get_radio(self) -> bool:
        """
        Returns whether we’re rendering radio toggles rather than checkboxes.
        """
        ...

    def set_activatable(self, setting: bool) -> object:
        """
        Makes the cell renderer activatable.
        """
        ...

    def set_active(self, setting: bool) -> object:
        """
        Activates or deactivates a cell renderer.
        """
        ...

    def set_radio(self, radio: bool) -> object:
        """
        If @radio is %TRUE, the cell renderer renders a radio toggle
        (i.e. a toggle in a group of mutually-exclusive toggles).
        If %FALSE, it renders a check toggle (a standalone boolean option).
        This can be set globally for the cell renderer, or changed just
        before rendering each cell in the model (for #GtkTreeView, you set
        up a per-row setting using #GtkTreeViewColumn to associate model
        columns with cell renderer properties).
        """
        ...


    ...

class CellView(Widget, Atk.ImplementorIface, Buildable, CellLayout, Orientable):
    """
    A #GtkCellView displays a single row of a #GtkTreeModel using a #GtkCellArea
    and #GtkCellAreaContext. A #GtkCellAreaContext can be provided to the
    #GtkCellView at construction time in order to keep the cellview in context
    of a group of cell views, this ensures that the renderers displayed will
    be properly aligned with eachother (like the aligned cells in the menus
    of #GtkComboBox).

    #GtkCellView is #GtkOrientable in order to decide in which orientation
    the underlying #GtkCellAreaContext should be allocated. Taking the #GtkComboBox
    menu as an example, cellviews should be oriented horizontally if the menus are
    listed top-to-bottom and thus all share the same width but may have separate
    individual heights (left-to-right menus should be allocated vertically since
    they all share the same height but may have variable widths).

    # CSS nodes

    GtkCellView has a single CSS node with name cellview.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkCellView widget.
        """
        ...


    @classmethod
    def new_with_context(cls, area: CellArea, context: CellAreaContext) -> Widget:
        """
        Creates a new #GtkCellView widget with a specific #GtkCellArea
        to layout cells and a specific #GtkCellAreaContext.

        Specifying the same context for a handfull of cells lets
        the underlying area synchronize the geometry for those cells,
        in this way alignments with cellviews for other rows are
        possible.
        """
        ...


    @classmethod
    def new_with_markup(cls, markup: str) -> Widget:
        """
        Creates a new #GtkCellView widget, adds a #GtkCellRendererText
        to it, and makes it show @markup. The text can be
        marked up with the [Pango text markup language][PangoMarkupFormat].
        """
        ...


    @classmethod
    def new_with_pixbuf(cls, pixbuf: GdkPixbuf.Pixbuf) -> Widget:
        """
        Creates a new #GtkCellView widget, adds a #GtkCellRendererPixbuf
        to it, and makes it show @pixbuf.
        """
        ...


    @classmethod
    def new_with_text(cls, text: str) -> Widget:
        """
        Creates a new #GtkCellView widget, adds a #GtkCellRendererText
        to it, and makes it show @text.
        """
        ...

    def get_displayed_row(self) -> TreePath:
        """
        Returns a #GtkTreePath referring to the currently
        displayed row. If no row is currently displayed,
        %NULL is returned.
        """
        ...

    def get_draw_sensitive(self) -> bool:
        """
        Gets whether @cell_view is configured to draw all of its
        cells in a sensitive state.
        """
        ...

    def get_fit_model(self) -> bool:
        """
        Gets whether @cell_view is configured to request space
        to fit the entire #GtkTreeModel.
        """
        ...

    def get_model(self) -> TreeModel:
        """
        Returns the model for @cell_view. If no model is used %NULL is
        returned.
        """
        ...

    def get_size_of_row(self, path: TreePath, requisition: Requisition) -> bool:
        """
        Sets @requisition to the size needed by @cell_view to display
        the model row pointed to by @path.
        """
        ...

    def set_background_color(self, color: Gdk.Color) -> object:
        """
        Sets the background color of @view.
        """
        ...

    def set_background_rgba(self, rgba: Gdk.RGBA) -> object:
        """
        Sets the background color of @cell_view.
        """
        ...

    def set_displayed_row(self, path: _T.Optional[TreePath]) -> object:
        """
        Sets the row of the model that is currently displayed
        by the #GtkCellView. If the path is unset, then the
        contents of the cellview “stick” at their last value;
        this is not normally a desired result, but may be
        a needed intermediate state if say, the model for
        the #GtkCellView becomes temporarily empty.
        """
        ...

    def set_draw_sensitive(self, draw_sensitive: bool) -> object:
        """
        Sets whether @cell_view should draw all of its
        cells in a sensitive state, this is used by #GtkComboBox menus
        to ensure that rows with insensitive cells that contain
        children appear sensitive in the parent menu item.
        """
        ...

    def set_fit_model(self, fit_model: bool) -> object:
        """
        Sets whether @cell_view should request space to fit the entire #GtkTreeModel.

        This is used by #GtkComboBox to ensure that the cell view displayed on
        the combo box’s button always gets enough space and does not resize
        when selection changes.
        """
        ...

    def set_model(self, model: _T.Optional[TreeModel]) -> object:
        """
        Sets the model for @cell_view.  If @cell_view already has a model
        set, it will remove it before setting the new model.  If @model is
        %NULL, then it will unset the old model.
        """
        ...


    ...

class CheckButton(ToggleButton, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A #GtkCheckButton places a discrete #GtkToggleButton next to a widget,
    (usually a #GtkLabel). See the section on #GtkToggleButton widgets for
    more information about toggle/check buttons.

    The important signal ( #GtkToggleButton::toggled ) is also inherited from
    #GtkToggleButton.

    # CSS nodes

    |[<!-- language="plain" -->
    checkbutton
    ├── check
    ╰── <child>
    ]|

    A GtkCheckButton with indicator (see gtk_toggle_button_set_mode()) has a
    main CSS node with name checkbutton and a subnode with name check.

    |[<!-- language="plain" -->
    button.check
    ├── check
    ╰── <child>
    ]|

    A GtkCheckButton without indicator changes the name of its main node
    to button and adds a .check style class to it. The subnode is invisible
    in this case.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkCheckButton.
        """
        ...


    @classmethod
    def new_with_label(cls, label: str) -> Widget:
        """
        Creates a new #GtkCheckButton with a #GtkLabel to the right of it.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, label: str) -> Widget:
        """
        Creates a new #GtkCheckButton containing a label. The label
        will be created using gtk_label_new_with_mnemonic(), so underscores
        in @label indicate the mnemonic for the check button.
        """
        ...


    ...

class CheckMenuItem(MenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A #GtkCheckMenuItem is a menu item that maintains the state of a boolean
    value in addition to a #GtkMenuItem usual role in activating application
    code.

    A check box indicating the state of the boolean value is displayed
    at the left side of the #GtkMenuItem.  Activating the #GtkMenuItem
    toggles the value.

    # CSS nodes

    |[<!-- language="plain" -->
    menuitem
    ├── check.left
    ╰── <child>
    ]|

    GtkCheckMenuItem has a main CSS node with name menuitem, and a subnode
    with name check, which gets the .left or .right style class.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkCheckMenuItem.
        """
        ...


    @classmethod
    def new_with_label(cls, label: str) -> Widget:
        """
        Creates a new #GtkCheckMenuItem with a label.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, label: str) -> Widget:
        """
        Creates a new #GtkCheckMenuItem containing a label. The label
        will be created using gtk_label_new_with_mnemonic(), so underscores
        in @label indicate the mnemonic for the menu item.
        """
        ...

    def get_active(self) -> bool:
        """
        Returns whether the check menu item is active. See
        gtk_check_menu_item_set_active ().
        """
        ...

    def get_draw_as_radio(self) -> bool:
        """
        Returns whether @check_menu_item looks like a #GtkRadioMenuItem
        """
        ...

    def get_inconsistent(self) -> bool:
        """
        Retrieves the value set by gtk_check_menu_item_set_inconsistent().
        """
        ...

    def set_active(self, is_active: bool) -> object:
        """
        Sets the active state of the menu item’s check box.
        """
        ...

    def set_draw_as_radio(self, draw_as_radio: bool) -> object:
        """
        Sets whether @check_menu_item is drawn like a #GtkRadioMenuItem
        """
        ...

    def set_inconsistent(self, setting: bool) -> object:
        """
        If the user has selected a range of elements (such as some text or
        spreadsheet cells) that are affected by a boolean setting, and the
        current values in that range are inconsistent, you may want to
        display the check in an “in between” state. This function turns on
        “in between” display.  Normally you would turn off the inconsistent
        state again if the user explicitly selects a setting. This has to be
        done manually, gtk_check_menu_item_set_inconsistent() only affects
        visual appearance, it doesn’t affect the semantics of the widget.
        """
        ...

    def toggled(self) -> object:
        """
        Emits the #GtkCheckMenuItem::toggled signal.
        """
        ...


    ...

class CheckMenuItemAccessible(MenuItemAccessible, Atk.Action, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Clipboard(GObject.Object):
    """
    The #GtkClipboard object represents a clipboard of data shared
    between different processes or between different widgets in
    the same process. Each clipboard is identified by a name encoded as a
    #GdkAtom. (Conversion to and from strings can be done with
    gdk_atom_intern() and gdk_atom_name().) The default clipboard
    corresponds to the “CLIPBOARD” atom; another commonly used clipboard
    is the “PRIMARY” clipboard, which, in X, traditionally contains
    the currently selected text.

    To support having a number of different formats on the clipboard
    at the same time, the clipboard mechanism allows providing
    callbacks instead of the actual data.  When you set the contents
    of the clipboard, you can either supply the data directly (via
    functions like gtk_clipboard_set_text()), or you can supply a
    callback to be called at a later time when the data is needed (via
    gtk_clipboard_set_with_data() or gtk_clipboard_set_with_owner().)
    Providing a callback also avoids having to make copies of the data
    when it is not needed.

    gtk_clipboard_set_with_data() and gtk_clipboard_set_with_owner()
    are quite similar; the choice between the two depends mostly on
    which is more convenient in a particular situation.
    The former is most useful when you want to have a blob of data
    with callbacks to convert it into the various data types that you
    advertise. When the @clear_func you provided is called, you
    simply free the data blob. The latter is more useful when the
    contents of clipboard reflect the internal state of a #GObject
    (As an example, for the PRIMARY clipboard, when an entry widget
    provides the clipboard’s contents the contents are simply the
    text within the selected region.) If the contents change, the
    entry widget can call gtk_clipboard_set_with_owner() to update
    the timestamp for clipboard ownership, without having to worry
    about @clear_func being called.

    Requesting the data from the clipboard is essentially
    asynchronous. If the contents of the clipboard are provided within
    the same process, then a direct function call will be made to
    retrieve the data, but if they are provided by another process,
    then the data needs to be retrieved from the other process, which
    may take some time. To avoid blocking the user interface, the call
    to request the selection, gtk_clipboard_request_contents() takes a
    callback that will be called when the contents are received (or
    when the request fails.) If you don’t want to deal with providing
    a separate callback, you can also use gtk_clipboard_wait_for_contents().
    What this does is run the GLib main loop recursively waiting for
    the contents. This can simplify the code flow, but you still have
    to be aware that other callbacks in your program can be called
    while this recursive mainloop is running.

    Along with the functions to get the clipboard contents as an
    arbitrary data chunk, there are also functions to retrieve
    it as text, gtk_clipboard_request_text() and
    gtk_clipboard_wait_for_text(). These functions take care of
    determining which formats are advertised by the clipboard
    provider, asking for the clipboard in the best available format
    and converting the results into the UTF-8 encoding. (The standard
    form for representing strings in GTK+.)
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def clear(self) -> object:
        """
        Clears the contents of the clipboard. Generally this should only
        be called between the time you call gtk_clipboard_set_with_owner()
        or gtk_clipboard_set_with_data(),
        and when the @clear_func you supplied is called. Otherwise, the
        clipboard may be owned by someone else.
        """
        ...

    def get_display(self) -> Gdk.Display:
        """
        Gets the #GdkDisplay associated with @clipboard
        """
        ...

    def get_owner(self) -> GObject.Object:
        """
        If the clipboard contents callbacks were set with
        gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or
        gtk_clipboard_clear() has not subsequently called, returns the owner set
        by gtk_clipboard_set_with_owner().
        """
        ...

    def get_selection(self) -> Gdk.Atom:
        """
        Gets the selection that this clipboard is for.
        """
        ...

    def request_contents(self, target: Gdk.Atom, callback: ClipboardReceivedFunc, user_data: _T.Optional[object]) -> object:
        """
        Requests the contents of clipboard as the given target.
        When the results of the result are later received the supplied callback
        will be called.
        """
        ...

    def request_image(self, callback: ClipboardImageReceivedFunc, user_data: _T.Optional[object]) -> object:
        """
        Requests the contents of the clipboard as image. When the image is
        later received, it will be converted to a #GdkPixbuf, and
        @callback will be called.

        The @pixbuf parameter to @callback will contain the resulting
        #GdkPixbuf if the request succeeded, or %NULL if it failed. This
        could happen for various reasons, in particular if the clipboard
        was empty or if the contents of the clipboard could not be
        converted into an image.
        """
        ...

    def request_rich_text(self, buffer: TextBuffer, callback: ClipboardRichTextReceivedFunc, user_data: _T.Optional[object]) -> object:
        """
        Requests the contents of the clipboard as rich text. When the rich
        text is later received, @callback will be called.

        The @text parameter to @callback will contain the resulting rich
        text if the request succeeded, or %NULL if it failed. The @length
        parameter will contain @text’s length. This function can fail for
        various reasons, in particular if the clipboard was empty or if the
        contents of the clipboard could not be converted into rich text form.
        """
        ...

    def request_targets(self, callback: ClipboardTargetsReceivedFunc, user_data: _T.Optional[object]) -> object:
        """
        Requests the contents of the clipboard as list of supported targets.
        When the list is later received, @callback will be called.

        The @targets parameter to @callback will contain the resulting targets if
        the request succeeded, or %NULL if it failed.
        """
        ...

    def request_text(self, callback: ClipboardTextReceivedFunc, user_data: _T.Optional[object]) -> object:
        """
        Requests the contents of the clipboard as text. When the text is
        later received, it will be converted to UTF-8 if necessary, and
        @callback will be called.

        The @text parameter to @callback will contain the resulting text if
        the request succeeded, or %NULL if it failed. This could happen for
        various reasons, in particular if the clipboard was empty or if the
        contents of the clipboard could not be converted into text form.
        """
        ...

    def request_uris(self, callback: ClipboardURIReceivedFunc, user_data: _T.Optional[object]) -> object:
        """
        Requests the contents of the clipboard as URIs. When the URIs are
        later received @callback will be called.

        The @uris parameter to @callback will contain the resulting array of
        URIs if the request succeeded, or %NULL if it failed. This could happen
        for various reasons, in particular if the clipboard was empty or if the
        contents of the clipboard could not be converted into URI form.
        """
        ...

    def set_can_store(self, targets: _T.Optional[object], n_targets: int) -> object:
        """
        Hints that the clipboard data should be stored somewhere when the
        application exits or when gtk_clipboard_store () is called.

        This value is reset when the clipboard owner changes.
        Where the clipboard data is stored is platform dependent,
        see gdk_display_store_clipboard () for more information.
        """
        ...

    def set_image(self, pixbuf: GdkPixbuf.Pixbuf) -> object:
        """
        Sets the contents of the clipboard to the given #GdkPixbuf.
        GTK+ will take responsibility for responding for requests
        for the image, and for converting the image into the
        requested format.
        """
        ...

    def set_text(self, text: str, len: int) -> object:
        """
        Sets the contents of the clipboard to the given UTF-8 string. GTK+ will
        make a copy of the text and take responsibility for responding
        for requests for the text, and for converting the text into
        the requested format.
        """
        ...

    def set_with_data(self, targets: object, n_targets: int, get_func: ClipboardGetFunc, clear_func: ClipboardClearFunc, user_data: _T.Optional[object]) -> bool:
        """
        Virtually sets the contents of the specified clipboard by providing
        a list of supported formats for the clipboard data and a function
        to call to get the actual data when it is requested.
        """
        ...

    def set_with_owner(self, targets: object, n_targets: int, get_func: ClipboardGetFunc, clear_func: ClipboardClearFunc, owner: GObject.Object) -> bool:
        """
        Virtually sets the contents of the specified clipboard by providing
        a list of supported formats for the clipboard data and a function
        to call to get the actual data when it is requested.

        The difference between this function and gtk_clipboard_set_with_data()
        is that instead of an generic @user_data pointer, a #GObject is passed
        in.
        """
        ...

    def store(self) -> object:
        """
        Stores the current clipboard data somewhere so that it will stay
        around after the application has quit.
        """
        ...

    def wait_for_contents(self, target: Gdk.Atom) -> SelectionData:
        """
        Requests the contents of the clipboard using the given target.
        This function waits for the data to be received using the main
        loop, so events, timeouts, etc, may be dispatched during the wait.
        """
        ...

    def wait_for_image(self) -> GdkPixbuf.Pixbuf:
        """
        Requests the contents of the clipboard as image and converts
        the result to a #GdkPixbuf. This function waits for
        the data to be received using the main loop, so events,
        timeouts, etc, may be dispatched during the wait.
        """
        ...

    def wait_for_rich_text(self, buffer: TextBuffer, format: Gdk.Atom, length: int) -> object:
        """
        Requests the contents of the clipboard as rich text.  This function
        waits for the data to be received using the main loop, so events,
        timeouts, etc, may be dispatched during the wait.
        """
        ...

    def wait_for_targets(self, targets: object, n_targets: int) -> bool:
        """
        Returns a list of targets that are present on the clipboard, or %NULL
        if there aren’t any targets available. The returned list must be
        freed with g_free().
        This function waits for the data to be received using the main
        loop, so events, timeouts, etc, may be dispatched during the wait.
        """
        ...

    def wait_for_text(self) -> str:
        """
        Requests the contents of the clipboard as text and converts
        the result to UTF-8 if necessary. This function waits for
        the data to be received using the main loop, so events,
        timeouts, etc, may be dispatched during the wait.
        """
        ...

    def wait_for_uris(self) -> object:
        """
        Requests the contents of the clipboard as URIs. This function waits
        for the data to be received using the main loop, so events,
        timeouts, etc, may be dispatched during the wait.
        """
        ...

    def wait_is_image_available(self) -> bool:
        """
        Test to see if there is an image available to be pasted
        This is done by requesting the TARGETS atom and checking
        if it contains any of the supported image targets. This function
        waits for the data to be received using the main loop, so events,
        timeouts, etc, may be dispatched during the wait.

        This function is a little faster than calling
        gtk_clipboard_wait_for_image() since it doesn’t need to retrieve
        the actual image data.
        """
        ...

    def wait_is_rich_text_available(self, buffer: TextBuffer) -> bool:
        """
        Test to see if there is rich text available to be pasted
        This is done by requesting the TARGETS atom and checking
        if it contains any of the supported rich text targets. This function
        waits for the data to be received using the main loop, so events,
        timeouts, etc, may be dispatched during the wait.

        This function is a little faster than calling
        gtk_clipboard_wait_for_rich_text() since it doesn’t need to retrieve
        the actual text.
        """
        ...

    def wait_is_target_available(self, target: Gdk.Atom) -> bool:
        """
        Checks if a clipboard supports pasting data of a given type. This
        function can be used to determine if a “Paste” menu item should be
        insensitive or not.

        If you want to see if there’s text available on the clipboard, use
        gtk_clipboard_wait_is_text_available () instead.
        """
        ...

    def wait_is_text_available(self) -> bool:
        """
        Test to see if there is text available to be pasted
        This is done by requesting the TARGETS atom and checking
        if it contains any of the supported text targets. This function
        waits for the data to be received using the main loop, so events,
        timeouts, etc, may be dispatched during the wait.

        This function is a little faster than calling
        gtk_clipboard_wait_for_text() since it doesn’t need to retrieve
        the actual text.
        """
        ...

    def wait_is_uris_available(self) -> bool:
        """
        Test to see if there is a list of URIs available to be pasted
        This is done by requesting the TARGETS atom and checking
        if it contains the URI targets. This function
        waits for the data to be received using the main loop, so events,
        timeouts, etc, may be dispatched during the wait.

        This function is a little faster than calling
        gtk_clipboard_wait_for_uris() since it doesn’t need to retrieve
        the actual URI data.
        """
        ...


    ...

class ColorButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable, ColorChooser):
    """
    The #GtkColorButton is a button which displays the currently selected
    color and allows to open a color selection dialog to change the color.
    It is suitable widget for selecting a color in a preference dialog.

    # CSS nodes

    GtkColorButton has a single CSS node with name button. To differentiate
    it from a plain #GtkButton, it gets the .color style class.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new color button.

        This returns a widget in the form of a small button containing
        a swatch representing the current selected color. When the button
        is clicked, a color-selection dialog will open, allowing the user
        to select a color. The swatch will be updated to reflect the new
        color when the user finishes.
        """
        ...


    @classmethod
    def new_with_color(cls, color: Gdk.Color) -> Widget:
        """
        Creates a new color button.
        """
        ...


    @classmethod
    def new_with_rgba(cls, rgba: Gdk.RGBA) -> Widget:
        """
        Creates a new color button.
        """
        ...

    def get_alpha(self) -> int:
        """
        Returns the current alpha value.
        """
        ...

    def get_color(self, color: Gdk.Color) -> object:
        """
        Sets @color to be the current color in the #GtkColorButton widget.
        """
        ...

    def get_rgba(self, rgba: Gdk.RGBA) -> object:
        """
        Sets @rgba to be the current color in the #GtkColorButton widget.
        """
        ...

    def get_title(self) -> str:
        """
        Gets the title of the color selection dialog.
        """
        ...

    def get_use_alpha(self) -> bool:
        """
        Does the color selection dialog use the alpha channel ?
        """
        ...

    def set_alpha(self, alpha: int) -> object:
        """
        Sets the current opacity to be @alpha.
        """
        ...

    def set_color(self, color: Gdk.Color) -> object:
        """
        Sets the current color to be @color.
        """
        ...

    def set_rgba(self, rgba: Gdk.RGBA) -> object:
        """
        Sets the current color to be @rgba.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the title for the color selection dialog.
        """
        ...

    def set_use_alpha(self, use_alpha: bool) -> object:
        """
        Sets whether or not the color button should use the alpha channel.
        """
        ...


    ...

class ColorChooserDialog(Dialog, Atk.ImplementorIface, Buildable, ColorChooser):
    """
    The #GtkColorChooserDialog widget is a dialog for choosing
    a color. It implements the #GtkColorChooser interface.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: _T.Optional[str], parent: _T.Optional[Window]) -> Widget:
        """
        Creates a new #GtkColorChooserDialog.
        """
        ...


    ...

class ColorChooserWidget(Box, Atk.ImplementorIface, Buildable, ColorChooser, Orientable):
    """
    The #GtkColorChooserWidget widget lets the user select a
    color. By default, the chooser presents a predefined palette
    of colors, plus a small number of settable custom colors.
    It is also possible to select a different color with the
    single-color editor. To enter the single-color editing mode,
    use the context menu of any color of the palette, or use the
    '+' button to add a new custom color.

    The chooser automatically remembers the last selection, as well
    as custom colors.

    To change the initially selected color, use gtk_color_chooser_set_rgba().
    To get the selected color use gtk_color_chooser_get_rgba().

    The #GtkColorChooserWidget is used in the #GtkColorChooserDialog
    to provide a dialog for selecting colors.

    # CSS names

    GtkColorChooserWidget has a single CSS node with name colorchooser.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkColorChooserWidget.
        """
        ...


    ...

class ColorSelection(Box, Atk.ImplementorIface, Buildable, Orientable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new GtkColorSelection.
        """
        ...

    def get_current_alpha(self) -> int:
        """
        Returns the current alpha value.
        """
        ...

    def get_current_color(self, color: Gdk.Color) -> object:
        """
        Sets @color to be the current color in the GtkColorSelection widget.
        """
        ...

    def get_current_rgba(self, rgba: Gdk.RGBA) -> object:
        """
        Sets @rgba to be the current color in the GtkColorSelection widget.
        """
        ...

    def get_has_opacity_control(self) -> bool:
        """
        Determines whether the colorsel has an opacity control.
        """
        ...

    def get_has_palette(self) -> bool:
        """
        Determines whether the color selector has a color palette.
        """
        ...

    def get_previous_alpha(self) -> int:
        """
        Returns the previous alpha value.
        """
        ...

    def get_previous_color(self, color: Gdk.Color) -> object:
        """
        Fills @color in with the original color value.
        """
        ...

    def get_previous_rgba(self, rgba: Gdk.RGBA) -> object:
        """
        Fills @rgba in with the original color value.
        """
        ...

    def is_adjusting(self) -> bool:
        """
        Gets the current state of the @colorsel.
        """
        ...

    def set_current_alpha(self, alpha: int) -> object:
        """
        Sets the current opacity to be @alpha.

        The first time this is called, it will also set
        the original opacity to be @alpha too.
        """
        ...

    def set_current_color(self, color: Gdk.Color) -> object:
        """
        Sets the current color to be @color.

        The first time this is called, it will also set
        the original color to be @color too.
        """
        ...

    def set_current_rgba(self, rgba: Gdk.RGBA) -> object:
        """
        Sets the current color to be @rgba.

        The first time this is called, it will also set
        the original color to be @rgba too.
        """
        ...

    def set_has_opacity_control(self, has_opacity: bool) -> object:
        """
        Sets the @colorsel to use or not use opacity.
        """
        ...

    def set_has_palette(self, has_palette: bool) -> object:
        """
        Shows and hides the palette based upon the value of @has_palette.
        """
        ...

    def set_previous_alpha(self, alpha: int) -> object:
        """
        Sets the “previous” alpha to be @alpha.

        This function should be called with some hesitations,
        as it might seem confusing to have that alpha change.
        """
        ...

    def set_previous_color(self, color: Gdk.Color) -> object:
        """
        Sets the “previous” color to be @color.

        This function should be called with some hesitations,
        as it might seem confusing to have that color change.
        Calling gtk_color_selection_set_current_color() will also
        set this color the first time it is called.
        """
        ...

    def set_previous_rgba(self, rgba: Gdk.RGBA) -> object:
        """
        Sets the “previous” color to be @rgba.

        This function should be called with some hesitations,
        as it might seem confusing to have that color change.
        Calling gtk_color_selection_set_current_rgba() will also
        set this color the first time it is called.
        """
        ...


    ...

class ColorSelectionDialog(Dialog, Atk.ImplementorIface, Buildable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: str) -> Widget:
        """
        Creates a new #GtkColorSelectionDialog.
        """
        ...

    def get_color_selection(self) -> Widget:
        """
        Retrieves the #GtkColorSelection widget embedded in the dialog.
        """
        ...


    ...

class ComboBox(Bin, Atk.ImplementorIface, Buildable, CellEditable, CellLayout):
    """
    A GtkComboBox is a widget that allows the user to choose from a list of
    valid choices. The GtkComboBox displays the selected choice. When
    activated, the GtkComboBox displays a popup which allows the user to
    make a new choice. The style in which the selected value is displayed,
    and the style of the popup is determined by the current theme. It may
    be similar to a Windows-style combo box.

    The GtkComboBox uses the model-view pattern; the list of valid choices
    is specified in the form of a tree model, and the display of the choices
    can be adapted to the data in the model by using cell renderers, as you
    would in a tree view. This is possible since GtkComboBox implements the
    #GtkCellLayout interface. The tree model holding the valid choices is
    not restricted to a flat list, it can be a real tree, and the popup will
    reflect the tree structure.

    To allow the user to enter values not in the model, the “has-entry”
    property allows the GtkComboBox to contain a #GtkEntry. This entry
    can be accessed by calling gtk_bin_get_child() on the combo box.

    For a simple list of textual choices, the model-view API of GtkComboBox
    can be a bit overwhelming. In this case, #GtkComboBoxText offers a
    simple alternative. Both GtkComboBox and #GtkComboBoxText can contain
    an entry.

    # CSS nodes

    |[<!-- language="plain" -->
    combobox
    ├── box.linked
    │   ╰── button.combo
    │       ╰── box
    │           ├── cellview
    │           ╰── arrow
    ╰── window.popup
    ]|

    A normal combobox contains a box with the .linked class, a button
    with the .combo class and inside those buttons, there are a cellview and
    an arrow.

    |[<!-- language="plain" -->
    combobox
    ├── box.linked
    │   ├── entry.combo
    │   ╰── button.combo
    │       ╰── box
    │           ╰── arrow
    ╰── window.popup
    ]|

    A GtkComboBox with an entry has a single CSS node with name combobox. It
    contains a box with the .linked class. That box contains an entry and a
    button, both with the .combo class added.
    The button also contains another node with name arrow.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new empty #GtkComboBox.
        """
        ...


    @classmethod
    def new_with_area(cls, area: CellArea) -> Widget:
        """
        Creates a new empty #GtkComboBox using @area to layout cells.
        """
        ...


    @classmethod
    def new_with_area_and_entry(cls, area: CellArea) -> Widget:
        """
        Creates a new empty #GtkComboBox with an entry.

        The new combo box will use @area to layout cells.
        """
        ...


    @classmethod
    def new_with_entry(cls) -> Widget:
        """
        Creates a new empty #GtkComboBox with an entry.
        """
        ...


    @classmethod
    def new_with_model(cls, model: TreeModel) -> Widget:
        """
        Creates a new #GtkComboBox with the model initialized to @model.
        """
        ...


    @classmethod
    def new_with_model_and_entry(cls, model: TreeModel) -> Widget:
        """
        Creates a new empty #GtkComboBox with an entry
        and with the model initialized to @model.
        """
        ...

    def get_active(self) -> int:
        """
        Returns the index of the currently active item, or -1 if there’s no
        active item. If the model is a non-flat treemodel, and the active item
        is not an immediate child of the root of the tree, this function returns
        `gtk_tree_path_get_indices (path)[0]`, where
        `path` is the #GtkTreePath of the active item.
        """
        ...

    def get_active_id(self) -> str:
        """
        Returns the ID of the active row of @combo_box.  This value is taken
        from the active row and the column specified by the #GtkComboBox:id-column
        property of @combo_box (see gtk_combo_box_set_id_column()).

        The returned value is an interned string which means that you can
        compare the pointer by value to other interned strings and that you
        must not free it.

        If the #GtkComboBox:id-column property of @combo_box is not set, or if
        no row is active, or if the active row has a %NULL ID value, then %NULL
        is returned.
        """
        ...

    def get_active_iter(self, iter: TreeIter) -> bool:
        """
        Sets @iter to point to the currently active item, if any item is active.
        Otherwise, @iter is left unchanged.
        """
        ...

    def get_add_tearoffs(self) -> bool:
        """
        Gets the current value of the :add-tearoffs property.
        """
        ...

    def get_button_sensitivity(self) -> SensitivityType:
        """
        Returns whether the combo box sets the dropdown button
        sensitive or not when there are no items in the model.
        """
        ...

    def get_column_span_column(self) -> int:
        """
        Returns the column with column span information for @combo_box.
        """
        ...

    def get_entry_text_column(self) -> int:
        """
        Returns the column which @combo_box is using to get the strings
        from to display in the internal entry.
        """
        ...

    def get_focus_on_click(self) -> bool:
        """
        Returns whether the combo box grabs focus when it is clicked
        with the mouse. See gtk_combo_box_set_focus_on_click().
        """
        ...

    def get_has_entry(self) -> bool:
        """
        Returns whether the combo box has an entry.
        """
        ...

    def get_id_column(self) -> int:
        """
        Returns the column which @combo_box is using to get string IDs
        for values from.
        """
        ...

    def get_model(self) -> TreeModel:
        """
        Returns the #GtkTreeModel which is acting as data source for @combo_box.
        """
        ...

    def get_popup_accessible(self) -> Atk.Object:
        """
        Gets the accessible object corresponding to the combo box’s popup.

        This function is mostly intended for use by accessibility technologies;
        applications should have little use for it.
        """
        ...

    def get_popup_fixed_width(self) -> bool:
        """
        Gets whether the popup uses a fixed width matching
        the allocated width of the combo box.
        """
        ...

    def get_row_separator_func(self) -> TreeViewRowSeparatorFunc:
        """
        Returns the current row separator function.
        """
        ...

    def get_row_span_column(self) -> int:
        """
        Returns the column with row span information for @combo_box.
        """
        ...

    def get_title(self) -> str:
        """
        Gets the current title of the menu in tearoff mode. See
        gtk_combo_box_set_add_tearoffs().
        """
        ...

    def get_wrap_width(self) -> int:
        """
        Returns the wrap width which is used to determine the number of columns
        for the popup menu. If the wrap width is larger than 1, the combo box
        is in table mode.
        """
        ...

    def popdown(self) -> object:
        """
        Hides the menu or dropdown list of @combo_box.

        This function is mostly intended for use by accessibility technologies;
        applications should have little use for it.
        """
        ...

    def popup(self) -> object:
        """
        Pops up the menu or dropdown list of @combo_box.

        This function is mostly intended for use by accessibility technologies;
        applications should have little use for it.

        Before calling this, @combo_box must be mapped, or nothing will happen.
        """
        ...

    def popup_for_device(self, device: Gdk.Device) -> object:
        """
        Pops up the menu or dropdown list of @combo_box, the popup window
        will be grabbed so only @device and its associated pointer/keyboard
        are the only #GdkDevices able to send events to it.
        """
        ...

    def set_active(self, index_: int) -> object:
        """
        Sets the active item of @combo_box to be the item at @index.
        """
        ...

    def set_active_id(self, active_id: _T.Optional[str]) -> bool:
        """
        Changes the active row of @combo_box to the one that has an ID equal to
        @active_id, or unsets the active row if @active_id is %NULL.  Rows having
        a %NULL ID string cannot be made active by this function.

        If the #GtkComboBox:id-column property of @combo_box is unset or if no
        row has the given ID then the function does nothing and returns %FALSE.
        """
        ...

    def set_active_iter(self, iter: _T.Optional[TreeIter]) -> object:
        """
        Sets the current active item to be the one referenced by @iter, or
        unsets the active item if @iter is %NULL.
        """
        ...

    def set_add_tearoffs(self, add_tearoffs: bool) -> object:
        """
        Sets whether the popup menu should have a tearoff
        menu item.
        """
        ...

    def set_button_sensitivity(self, sensitivity: SensitivityType) -> object:
        """
        Sets whether the dropdown button of the combo box should be
        always sensitive (%GTK_SENSITIVITY_ON), never sensitive (%GTK_SENSITIVITY_OFF)
        or only if there is at least one item to display (%GTK_SENSITIVITY_AUTO).
        """
        ...

    def set_column_span_column(self, column_span: int) -> object:
        """
        Sets the column with column span information for @combo_box to be
        @column_span. The column span column contains integers which indicate
        how many columns an item should span.
        """
        ...

    def set_entry_text_column(self, text_column: int) -> object:
        """
        Sets the model column which @combo_box should use to get strings from
        to be @text_column. The column @text_column in the model of @combo_box
        must be of type %G_TYPE_STRING.

        This is only relevant if @combo_box has been created with
        #GtkComboBox:has-entry as %TRUE.
        """
        ...

    def set_focus_on_click(self, focus_on_click: bool) -> object:
        """
        Sets whether the combo box will grab focus when it is clicked with
        the mouse. Making mouse clicks not grab focus is useful in places
        like toolbars where you don’t want the keyboard focus removed from
        the main area of the application.
        """
        ...

    def set_id_column(self, id_column: int) -> object:
        """
        Sets the model column which @combo_box should use to get string IDs
        for values from. The column @id_column in the model of @combo_box
        must be of type %G_TYPE_STRING.
        """
        ...

    def set_model(self, model: _T.Optional[TreeModel]) -> object:
        """
        Sets the model used by @combo_box to be @model. Will unset a previously set
        model (if applicable). If model is %NULL, then it will unset the model.

        Note that this function does not clear the cell renderers, you have to
        call gtk_cell_layout_clear() yourself if you need to set up different
        cell renderers for the new model.
        """
        ...

    def set_popup_fixed_width(self, fixed: bool) -> object:
        """
        Specifies whether the popup’s width should be a fixed width
        matching the allocated width of the combo box.
        """
        ...

    def set_row_separator_func(self, func: TreeViewRowSeparatorFunc, data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Sets the row separator function, which is used to determine
        whether a row should be drawn as a separator. If the row separator
        function is %NULL, no separators are drawn. This is the default value.
        """
        ...

    def set_row_span_column(self, row_span: int) -> object:
        """
        Sets the column with row span information for @combo_box to be @row_span.
        The row span column contains integers which indicate how many rows
        an item should span.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the menu’s title in tearoff mode.
        """
        ...

    def set_wrap_width(self, width: int) -> object:
        """
        Sets the wrap width of @combo_box to be @width. The wrap width is basically
        the preferred number of columns when you want the popup to be layed out
        in a table.
        """
        ...


    ...

class ComboBoxAccessible(ContainerAccessible, Atk.Action, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ComboBoxText(ComboBox, Atk.ImplementorIface, Buildable, CellEditable, CellLayout):
    """
    A GtkComboBoxText is a simple variant of #GtkComboBox that hides
    the model-view complexity for simple text-only use cases.

    To create a GtkComboBoxText, use gtk_combo_box_text_new() or
    gtk_combo_box_text_new_with_entry().

    You can add items to a GtkComboBoxText with
    gtk_combo_box_text_append_text(), gtk_combo_box_text_insert_text()
    or gtk_combo_box_text_prepend_text() and remove options with
    gtk_combo_box_text_remove().

    If the GtkComboBoxText contains an entry (via the “has-entry” property),
    its contents can be retrieved using gtk_combo_box_text_get_active_text().
    The entry itself can be accessed by calling gtk_bin_get_child() on the
    combo box.

    You should not call gtk_combo_box_set_model() or attempt to pack more cells
    into this combo box via its GtkCellLayout interface.

    # GtkComboBoxText as GtkBuildable

    The GtkComboBoxText implementation of the GtkBuildable interface supports
    adding items directly using the `<items>` element and specifying `<item>`
    elements for each item. Each `<item>` element can specify the “id”
    corresponding to the appended text and also supports the regular
    translation attributes “translatable”, “context” and “comments”.

    Here is a UI definition fragment specifying GtkComboBoxText items:

    |[<!-- language="xml" -->
    <object class="GtkComboBoxText">
      <items>
        <item translatable="yes" id="factory">Factory</item>
        <item translatable="yes" id="home">Home</item>
        <item translatable="yes" id="subway">Subway</item>
      </items>
    </object>
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    combobox
    ╰── box.linked
        ├── entry.combo
        ├── button.combo
        ╰── window.popup
    ]|

    GtkComboBoxText has a single CSS node with name combobox. It adds
    the style class .combo to the main CSS nodes of its entry and button
    children, and the .linked class to the node of its internal box.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkComboBoxText, which is a #GtkComboBox just displaying
        strings.
        """
        ...


    @classmethod
    def new_with_entry(cls) -> Widget:
        """
        Creates a new #GtkComboBoxText, which is a #GtkComboBox just displaying
        strings. The combo box created by this function has an entry.
        """
        ...

    def append(self, id: _T.Optional[str], text: str) -> object:
        """
        Appends @text to the list of strings stored in @combo_box.
        If @id is non-%NULL then it is used as the ID of the row.

        This is the same as calling gtk_combo_box_text_insert() with a
        position of -1.
        """
        ...

    def append_text(self, text: str) -> object:
        """
        Appends @text to the list of strings stored in @combo_box.

        This is the same as calling gtk_combo_box_text_insert_text() with a
        position of -1.
        """
        ...

    def get_active_text(self) -> str:
        """
        Returns the currently active string in @combo_box, or %NULL
        if none is selected. If @combo_box contains an entry, this
        function will return its contents (which will not necessarily
        be an item from the list).
        """
        ...

    def insert(self, position: int, id: _T.Optional[str], text: str) -> object:
        """
        Inserts @text at @position in the list of strings stored in @combo_box.
        If @id is non-%NULL then it is used as the ID of the row.  See
        #GtkComboBox:id-column.

        If @position is negative then @text is appended.
        """
        ...

    def insert_text(self, position: int, text: str) -> object:
        """
        Inserts @text at @position in the list of strings stored in @combo_box.

        If @position is negative then @text is appended.

        This is the same as calling gtk_combo_box_text_insert() with a %NULL
        ID string.
        """
        ...

    def prepend(self, id: _T.Optional[str], text: str) -> object:
        """
        Prepends @text to the list of strings stored in @combo_box.
        If @id is non-%NULL then it is used as the ID of the row.

        This is the same as calling gtk_combo_box_text_insert() with a
        position of 0.
        """
        ...

    def prepend_text(self, text: str) -> object:
        """
        Prepends @text to the list of strings stored in @combo_box.

        This is the same as calling gtk_combo_box_text_insert_text() with a
        position of 0.
        """
        ...

    def remove(self, position: int) -> object:
        """
        Removes the string at @position from @combo_box.
        """
        ...

    def remove_all(self) -> object:
        """
        Removes all the text entries from the combo box.
        """
        ...


    ...

class Container(Widget, Atk.ImplementorIface, Buildable):
    """
    A GTK+ user interface is constructed by nesting widgets inside widgets.
    Container widgets are the inner nodes in the resulting tree of widgets:
    they contain other widgets. So, for example, you might have a #GtkWindow
    containing a #GtkFrame containing a #GtkLabel. If you wanted an image instead
    of a textual label inside the frame, you might replace the #GtkLabel widget
    with a #GtkImage widget.

    There are two major kinds of container widgets in GTK+. Both are subclasses
    of the abstract GtkContainer base class.

    The first type of container widget has a single child widget and derives
    from #GtkBin. These containers are decorators, which
    add some kind of functionality to the child. For example, a #GtkButton makes
    its child into a clickable button; a #GtkFrame draws a frame around its child
    and a #GtkWindow places its child widget inside a top-level window.

    The second type of container can have more than one child; its purpose is to
    manage layout. This means that these containers assign
    sizes and positions to their children. For example, a #GtkHBox arranges its
    children in a horizontal row, and a #GtkGrid arranges the widgets it contains
    in a two-dimensional grid.

    For implementations of #GtkContainer the virtual method #GtkContainerClass.forall()
    is always required, since it's used for drawing and other internal operations
    on the children.
    If the #GtkContainer implementation expect to have non internal children
    it's needed to implement both #GtkContainerClass.add() and #GtkContainerClass.remove().
    If the GtkContainer implementation has internal children, they should be added
    with gtk_widget_set_parent() on init() and removed with gtk_widget_unparent()
    in the #GtkWidgetClass.destroy() implementation.
    See more about implementing custom widgets at https://wiki.gnome.org/HowDoI/CustomWidgets

    # Height for width geometry management

    GTK+ uses a height-for-width (and width-for-height) geometry management system.
    Height-for-width means that a widget can change how much vertical space it needs,
    depending on the amount of horizontal space that it is given (and similar for
    width-for-height).

    There are some things to keep in mind when implementing container widgets
    that make use of GTK+’s height for width geometry management system. First,
    it’s important to note that a container must prioritize one of its
    dimensions, that is to say that a widget or container can only have a
    #GtkSizeRequestMode that is %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH or
    %GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT. However, every widget and container
    must be able to respond to the APIs for both dimensions, i.e. even if a
    widget has a request mode that is height-for-width, it is possible that
    its parent will request its sizes using the width-for-height APIs.

    To ensure that everything works properly, here are some guidelines to follow
    when implementing height-for-width (or width-for-height) containers.

    Each request mode involves 2 virtual methods. Height-for-width apis run
    through gtk_widget_get_preferred_width() and then through gtk_widget_get_preferred_height_for_width().
    When handling requests in the opposite #GtkSizeRequestMode it is important that
    every widget request at least enough space to display all of its content at all times.

    When gtk_widget_get_preferred_height() is called on a container that is height-for-width,
    the container must return the height for its minimum width. This is easily achieved by
    simply calling the reverse apis implemented for itself as follows:

    |[<!-- language="C" -->
    static void
    foo_container_get_preferred_height (GtkWidget *widget,
                                        gint *min_height,
                                        gint *nat_height)
    {
       if (i_am_in_height_for_width_mode)
         {
           gint min_width;

           GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
                                                               &min_width,
                                                               NULL);
           GTK_WIDGET_GET_CLASS (widget)->get_preferred_height_for_width
                                                              (widget,
                                                               min_width,
                                                               min_height,
                                                               nat_height);
         }
       else
         {
           ... many containers support both request modes, execute the
           real width-for-height request here by returning the
           collective heights of all widgets that are stacked
           vertically (or whatever is appropriate for this container)
           ...
         }
    }
    ]|

    Similarly, when gtk_widget_get_preferred_width_for_height() is called for a container or widget
    that is height-for-width, it then only needs to return the base minimum width like so:

    |[<!-- language="C" -->
    static void
    foo_container_get_preferred_width_for_height (GtkWidget *widget,
                                                  gint for_height,
                                                  gint *min_width,
                                                  gint *nat_width)
    {
       if (i_am_in_height_for_width_mode)
         {
           GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
                                                               min_width,
                                                               nat_width);
         }
       else
         {
           ... execute the real width-for-height request here based on
           the required width of the children collectively if the
           container were to be allocated the said height ...
         }
    }
    ]|

    Height for width requests are generally implemented in terms of a virtual allocation
    of widgets in the input orientation. Assuming an height-for-width request mode, a container
    would implement the get_preferred_height_for_width() virtual function by first calling
    gtk_widget_get_preferred_width() for each of its children.

    For each potential group of children that are lined up horizontally, the values returned by
    gtk_widget_get_preferred_width() should be collected in an array of #GtkRequestedSize structures.
    Any child spacing should be removed from the input @for_width and then the collective size should be
    allocated using the gtk_distribute_natural_allocation() convenience function.

    The container will then move on to request the preferred height for each child by using
    gtk_widget_get_preferred_height_for_width() and using the sizes stored in the #GtkRequestedSize array.

    To allocate a height-for-width container, it’s again important
    to consider that a container must prioritize one dimension over the other. So if
    a container is a height-for-width container it must first allocate all widgets horizontally
    using a #GtkRequestedSize array and gtk_distribute_natural_allocation() and then add any
    extra space (if and where appropriate) for the widget to expand.

    After adding all the expand space, the container assumes it was allocated sufficient
    height to fit all of its content. At this time, the container must use the total horizontal sizes
    of each widget to request the height-for-width of each of its children and store the requests in a
    #GtkRequestedSize array for any widgets that stack vertically (for tabular containers this can
    be generalized into the heights and widths of rows and columns).
    The vertical space must then again be distributed using gtk_distribute_natural_allocation()
    while this time considering the allocated height of the widget minus any vertical spacing
    that the container adds. Then vertical expand space should be added where appropriate and available
    and the container should go on to actually allocating the child widgets.

    See [GtkWidget’s geometry management section][geometry-management]
    to learn more about implementing height-for-width geometry management for widgets.

    # Child properties

    GtkContainer introduces child properties.
    These are object properties that are not specific
    to either the container or the contained widget, but rather to their relation.
    Typical examples of child properties are the position or pack-type of a widget
    which is contained in a #GtkBox.

    Use gtk_container_class_install_child_property() to install child properties
    for a container class and gtk_container_class_find_child_property() or
    gtk_container_class_list_child_properties() to get information about existing
    child properties.

    To set the value of a child property, use gtk_container_child_set_property(),
    gtk_container_child_set() or gtk_container_child_set_valist().
    To obtain the value of a child property, use
    gtk_container_child_get_property(), gtk_container_child_get() or
    gtk_container_child_get_valist(). To emit notification about child property
    changes, use gtk_widget_child_notify().

    # GtkContainer as GtkBuildable

    The GtkContainer implementation of the GtkBuildable interface supports
    a `<packing>` element for children, which can contain multiple `<property>`
    elements that specify child properties for the child.

    Since 2.16, child properties can also be marked as translatable using
    the same “translatable”, “comments” and “context” attributes that are used
    for regular properties.

    Since 3.16, containers can have a `<focus-chain>` element containing multiple
    `<widget>` elements, one for each child that should be added to the focus
    chain. The ”name” attribute gives the id of the widget.

    An example of these properties in UI definitions:

    |[<!-- language="xml" -->
    <object class="GtkBox">
      <child>
        <object class="GtkEntry" id="entry1"/>
        <packing>
          <property name="pack-type">start</property>
        </packing>
      </child>
      <child>
        <object class="GtkEntry" id="entry2"/>
      </child>
      <focus-chain>
        <widget name="entry1"/>
        <widget name="entry2"/>
      </focus-chain>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def add(self, widget: Widget) -> object:
        """
        Adds @widget to @container. Typically used for simple containers
        such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
        layout containers such as #GtkBox or #GtkGrid, this function will
        pick default packing parameters that may not be correct.  So
        consider functions such as gtk_box_pack_start() and
        gtk_grid_attach() as an alternative to gtk_container_add() in
        those cases. A widget may be added to only one container at a time;
        you can’t place the same widget inside two different containers.

        Note that some containers, such as #GtkScrolledWindow or #GtkListBox,
        may add intermediate children between the added widget and the
        container.
        """
        ...

    def add_with_properties(self, widget: Widget, first_prop_name: str, *args: object) -> object:
        """
        Adds @widget to @container, setting child properties at the same time.
        See gtk_container_add() and gtk_container_child_set() for more details.
        """
        ...

    def check_resize(self) -> object:
        ...

    def child_get(self, child: Widget, first_prop_name: str, *args: object) -> object:
        """
        Gets the values of one or more child properties for @child and @container.
        """
        ...

    def child_get_property(self, child: Widget, property_name: str, value: GObject.Value) -> object:
        """
        Gets the value of a child property for @child and @container.
        """
        ...

    def child_get_valist(self, child: Widget, first_property_name: str, var_args: list) -> object:
        """
        Gets the values of one or more child properties for @child and @container.
        """
        ...

    def child_notify(self, child: Widget, child_property: str) -> object:
        """
        Emits a #GtkWidget::child-notify signal for the
        [child property][child-properties]
        @child_property on the child.

        This is an analogue of g_object_notify() for child properties.

        Also see gtk_widget_child_notify().
        """
        ...

    def child_notify_by_pspec(self, child: Widget, pspec: GObject.ParamSpec) -> object:
        """
        Emits a #GtkWidget::child-notify signal for the
        [child property][child-properties] specified by
        @pspec on the child.

        This is an analogue of g_object_notify_by_pspec() for child properties.
        """
        ...

    def child_set(self, child: Widget, first_prop_name: str, *args: object) -> object:
        """
        Sets one or more child properties for @child and @container.
        """
        ...

    def child_set_property(self, child: Widget, property_name: str, value: GObject.Value) -> object:
        """
        Sets a child property for @child and @container.
        """
        ...

    def child_set_valist(self, child: Widget, first_property_name: str, var_args: list) -> object:
        """
        Sets one or more child properties for @child and @container.
        """
        ...

    def child_type(self) -> GObject.Type:
        """
        Returns the type of the children supported by the container.

        Note that this may return %G_TYPE_NONE to indicate that no more
        children can be added, e.g. for a #GtkPaned which already has two
        children.
        """
        ...

    def forall(self, callback: Callback, callback_data: _T.Optional[object]) -> object:
        """
        Invokes @callback on each direct child of @container, including
        children that are considered “internal” (implementation details
        of the container). “Internal” children generally weren’t added
        by the user of the container, but were added by the container
        implementation itself.

        Most applications should use gtk_container_foreach(), rather
        than gtk_container_forall().
        """
        ...

    def foreach(self, callback: Callback, callback_data: _T.Optional[object]) -> object:
        """
        Invokes @callback on each non-internal child of @container.
        See gtk_container_forall() for details on what constitutes
        an “internal” child. For all practical purposes, this function
        should iterate over precisely those child widgets that were
        added to the container by the application with explicit add()
        calls.

        It is permissible to remove the child from the @callback handler.

        Most applications should use gtk_container_foreach(),
        rather than gtk_container_forall().
        """
        ...

    def get_border_width(self) -> int:
        """
        Retrieves the border width of the container. See
        gtk_container_set_border_width().
        """
        ...

    def get_children(self) -> GLib.List:
        """
        Returns the container’s non-internal children. See
        gtk_container_forall() for details on what constitutes an "internal" child.
        """
        ...

    def get_focus_chain(self, focusable_widgets: GLib.List) -> bool:
        """
        Retrieves the focus chain of the container, if one has been
        set explicitly. If no focus chain has been explicitly
        set, GTK+ computes the focus chain based on the positions
        of the children. In that case, GTK+ stores %NULL in
        @focusable_widgets and returns %FALSE.
        """
        ...

    def get_focus_child(self) -> Widget:
        """
        Returns the current focus child widget inside @container. This is not the
        currently focused widget. That can be obtained by calling
        gtk_window_get_focus().
        """
        ...

    def get_focus_hadjustment(self) -> Adjustment:
        """
        Retrieves the horizontal focus adjustment for the container. See
        gtk_container_set_focus_hadjustment ().
        """
        ...

    def get_focus_vadjustment(self) -> Adjustment:
        """
        Retrieves the vertical focus adjustment for the container. See
        gtk_container_set_focus_vadjustment().
        """
        ...

    def get_path_for_child(self, child: Widget) -> WidgetPath:
        """
        Returns a newly created widget path representing all the widget hierarchy
        from the toplevel down to and including @child.
        """
        ...

    def get_resize_mode(self) -> ResizeMode:
        """
        Returns the resize mode for the container. See
        gtk_container_set_resize_mode ().
        """
        ...

    def propagate_draw(self, child: Widget, cr: cairo.Context) -> object:
        """
        When a container receives a call to the draw function, it must send
        synthetic #GtkWidget::draw calls to all children that don’t have their
        own #GdkWindows. This function provides a convenient way of doing this.
        A container, when it receives a call to its #GtkWidget::draw function,
        calls gtk_container_propagate_draw() once for each child, passing in
        the @cr the container received.

        gtk_container_propagate_draw() takes care of translating the origin of @cr,
        and deciding whether the draw needs to be sent to the child. It is a
        convenient and optimized way of getting the same effect as calling
        gtk_widget_draw() on the child directly.

        In most cases, a container can simply either inherit the
        #GtkWidget::draw implementation from #GtkContainer, or do some drawing
        and then chain to the ::draw implementation from #GtkContainer.
        """
        ...

    def remove(self, widget: Widget) -> object:
        """
        Removes @widget from @container. @widget must be inside @container.
        Note that @container will own a reference to @widget, and that this
        may be the last reference held; so removing a widget from its
        container can destroy that widget. If you want to use @widget
        again, you need to add a reference to it before removing it from
        a container, using g_object_ref(). If you don’t want to use @widget
        again it’s usually more efficient to simply destroy it directly
        using gtk_widget_destroy() since this will remove it from the
        container and help break any circular reference count cycles.
        """
        ...

    def resize_children(self) -> object:
        ...

    def set_border_width(self, border_width: int) -> object:
        """
        Sets the border width of the container.

        The border width of a container is the amount of space to leave
        around the outside of the container. The only exception to this is
        #GtkWindow; because toplevel windows can’t leave space outside,
        they leave the space inside. The border is added on all sides of
        the container. To add space to only one side, use a specific
        #GtkWidget:margin property on the child widget, for example
        #GtkWidget:margin-top.
        """
        ...

    def set_focus_chain(self, focusable_widgets: GLib.List) -> object:
        """
        Sets a focus chain, overriding the one computed automatically by GTK+.

        In principle each widget in the chain should be a descendant of the
        container, but this is not enforced by this method, since it’s allowed
        to set the focus chain before you pack the widgets, or have a widget
        in the chain that isn’t always packed. The necessary checks are done
        when the focus chain is actually traversed.
        """
        ...

    def set_focus_child(self, child: _T.Optional[Widget]) -> object:
        """
        Sets, or unsets if @child is %NULL, the focused child of @container.

        This function emits the GtkContainer::set_focus_child signal of
        @container. Implementations of #GtkContainer can override the
        default behaviour by overriding the class closure of this signal.

        This is function is mostly meant to be used by widgets. Applications can use
        gtk_widget_grab_focus() to manually set the focus to a specific widget.
        """
        ...

    def set_focus_hadjustment(self, adjustment: Adjustment) -> object:
        """
        Hooks up an adjustment to focus handling in a container, so when a child
        of the container is focused, the adjustment is scrolled to show that
        widget. This function sets the horizontal alignment.
        See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
        the adjustment and gtk_container_set_focus_vadjustment() for setting
        the vertical adjustment.

        The adjustments have to be in pixel units and in the same coordinate
        system as the allocation for immediate children of the container.
        """
        ...

    def set_focus_vadjustment(self, adjustment: Adjustment) -> object:
        """
        Hooks up an adjustment to focus handling in a container, so when a
        child of the container is focused, the adjustment is scrolled to
        show that widget. This function sets the vertical alignment. See
        gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
        the adjustment and gtk_container_set_focus_hadjustment() for setting
        the horizontal adjustment.

        The adjustments have to be in pixel units and in the same coordinate
        system as the allocation for immediate children of the container.
        """
        ...

    def set_reallocate_redraws(self, needs_redraws: bool) -> object:
        """
        Sets the @reallocate_redraws flag of the container to the given value.

        Containers requesting reallocation redraws get automatically
        redrawn if any of their children changed allocation.
        """
        ...

    def set_resize_mode(self, resize_mode: ResizeMode) -> object:
        """
        Sets the resize mode for the container.

        The resize mode of a container determines whether a resize request
        will be passed to the container’s parent, queued for later execution
        or executed immediately.
        """
        ...

    def unset_focus_chain(self) -> object:
        """
        Removes a focus chain explicitly set with gtk_container_set_focus_chain().
        """
        ...


    ...

class ContainerAccessible(WidgetAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ContainerCellAccessible(CellAccessible, Atk.Action, Atk.Component, Atk.TableCell):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> ContainerCellAccessible:
        ...

    def add_child(self, child: CellAccessible) -> object:
        ...

    def get_children(self) -> GLib.List:
        """
        Get a list of children.
        """
        ...

    def remove_child(self, child: CellAccessible) -> object:
        ...


    ...

class CssProvider(GObject.Object, StyleProvider):
    """
    GtkCssProvider is an object implementing the #GtkStyleProvider interface.
    It is able to parse [CSS-like][css-overview] input in order to style widgets.

    An application can make GTK+ parse a specific CSS style sheet by calling
    gtk_css_provider_load_from_file() or gtk_css_provider_load_from_resource()
    and adding the provider with gtk_style_context_add_provider() or
    gtk_style_context_add_provider_for_screen().

    In addition, certain files will be read when GTK+ is initialized. First, the
    file `$XDG_CONFIG_HOME/gtk-3.0/gtk.css` is loaded if it exists. Then, GTK+
    loads the first existing file among
    `XDG_DATA_HOME/themes/THEME/gtk-VERSION/gtk.css`,
    `$HOME/.themes/THEME/gtk-VERSION/gtk.css`,
    `$XDG_DATA_DIRS/themes/THEME/gtk-VERSION/gtk.css` and
    `DATADIR/share/themes/THEME/gtk-VERSION/gtk.css`, where `THEME` is the name of
    the current theme (see the #GtkSettings:gtk-theme-name setting), `DATADIR`
    is the prefix configured when GTK+ was compiled (unless overridden by the
    `GTK_DATA_PREFIX` environment variable), and `VERSION` is the GTK+ version number.
    If no file is found for the current version, GTK+ tries older versions all the
    way back to 3.0.

    In the same way, GTK+ tries to load a gtk-keys.css file for the current
    key theme, as defined by #GtkSettings:gtk-key-theme-name.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> CssProvider:
        """
        Returns a newly created #GtkCssProvider.
        """
        ...

    def load_from_data(self, data: object, length: int) -> bool:
        """
        Loads @data into @css_provider, and by doing so clears any previously loaded
        information.
        """
        ...

    def load_from_file(self, file: Gio.File) -> bool:
        """
        Loads the data contained in @file into @css_provider, making it
        clear any previously loaded information.
        """
        ...

    def load_from_path(self, path: str) -> bool:
        """
        Loads the data contained in @path into @css_provider, making it clear
        any previously loaded information.
        """
        ...

    def load_from_resource(self, resource_path: str) -> object:
        """
        Loads the data contained in the resource at @resource_path into
        the #GtkCssProvider, clearing any previously loaded information.

        To track errors while loading CSS, connect to the
        #GtkCssProvider::parsing-error signal.
        """
        ...

    def to_string(self) -> str:
        """
        Converts the @provider into a string representation in CSS
        format.

        Using gtk_css_provider_load_from_data() with the return value
        from this function on a new provider created with
        gtk_css_provider_new() will basically create a duplicate of
        this @provider.
        """
        ...


    ...

class Dialog(Window, Atk.ImplementorIface, Buildable):
    """
    Dialog boxes are a convenient way to prompt the user for a small amount
    of input, e.g. to display a message, ask a question, or anything else
    that does not require extensive effort on the user’s part.

    GTK+ treats a dialog as a window split vertically. The top section is a
    #GtkVBox, and is where widgets such as a #GtkLabel or a #GtkEntry should
    be packed. The bottom area is known as the
    “action area”. This is generally used for
    packing buttons into the dialog which may perform functions such as
    cancel, ok, or apply.

    #GtkDialog boxes are created with a call to gtk_dialog_new() or
    gtk_dialog_new_with_buttons(). gtk_dialog_new_with_buttons() is
    recommended; it allows you to set the dialog title, some convenient
    flags, and add simple buttons.

    If “dialog” is a newly created dialog, the two primary areas of the
    window can be accessed through gtk_dialog_get_content_area() and
    gtk_dialog_get_action_area(), as can be seen from the example below.

    A “modal” dialog (that is, one which freezes the rest of the application
    from user input), can be created by calling gtk_window_set_modal() on the
    dialog. Use the GTK_WINDOW() macro to cast the widget returned from
    gtk_dialog_new() into a #GtkWindow. When using gtk_dialog_new_with_buttons()
    you can also pass the #GTK_DIALOG_MODAL flag to make a dialog modal.

    If you add buttons to #GtkDialog using gtk_dialog_new_with_buttons(),
    gtk_dialog_add_button(), gtk_dialog_add_buttons(), or
    gtk_dialog_add_action_widget(), clicking the button will emit a signal
    called #GtkDialog::response with a response ID that you specified. GTK+
    will never assign a meaning to positive response IDs; these are entirely
    user-defined. But for convenience, you can use the response IDs in the
    #GtkResponseType enumeration (these all have values less than zero). If
    a dialog receives a delete event, the #GtkDialog::response signal will
    be emitted with a response ID of #GTK_RESPONSE_DELETE_EVENT.

    If you want to block waiting for a dialog to return before returning
    control flow to your code, you can call gtk_dialog_run(). This function
    enters a recursive main loop and waits for the user to respond to the
    dialog, returning the response ID corresponding to the button the user
    clicked.

    For the simple dialog in the following example, in reality you’d probably
    use #GtkMessageDialog to save yourself some effort. But you’d need to
    create the dialog contents manually if you had more than a simple message
    in the dialog.

    An example for simple GtkDialog usage:
    |[<!-- language="C" -->
    // Function to open a dialog box with a message
    void
    quick_message (GtkWindow *parent, gchar *message)
    {
     GtkWidget *dialog, *label, *content_area;
     GtkDialogFlags flags;

     // Create the widgets
     flags = GTK_DIALOG_DESTROY_WITH_PARENT;
     dialog = gtk_dialog_new_with_buttons ("Message",
                                           parent,
                                           flags,
                                           _("_OK"),
                                           GTK_RESPONSE_NONE,
                                           NULL);
     content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
     label = gtk_label_new (message);

     // Ensure that the dialog box is destroyed when the user responds

     g_signal_connect_swapped (dialog,
                               "response",
                               G_CALLBACK (gtk_widget_destroy),
                               dialog);

     // Add the label, and show everything we’ve added

     gtk_container_add (GTK_CONTAINER (content_area), label);
     gtk_widget_show_all (dialog);
    }
    ]|

    # GtkDialog as GtkBuildable

    The GtkDialog implementation of the #GtkBuildable interface exposes the
    @vbox and @action_area as internal children with the names “vbox” and
    “action_area”.

    GtkDialog supports a custom `<action-widgets>` element, which can contain
    multiple `<action-widget>` elements. The “response” attribute specifies a
    numeric response, and the content of the element is the id of widget
    (which should be a child of the dialogs @action_area). To mark a response
    as default, set the “default“ attribute of the `<action-widget>` element
    to true.

    GtkDialog supports adding action widgets by specifying “action“ as
    the “type“ attribute of a `<child>` element. The widget will be added
    either to the action area or the headerbar of the dialog, depending
    on the “use-header-bar“ property. The response id has to be associated
    with the action widget using the `<action-widgets>` element.

    An example of a #GtkDialog UI definition fragment:

    |[<!-- language="xml" -->
    <object class="GtkDialog" id="dialog1">
      <child type="action">
        <object class="GtkButton" id="button_cancel"/>
      </child>
      <child type="action">
        <object class="GtkButton" id="button_ok">
          <property name="can-default">True</property>
        </object>
      </child>
      <action-widgets>
        <action-widget response="cancel">button_cancel</action-widget>
        <action-widget response="ok" default="true">button_ok</action-widget>
      </action-widgets>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new dialog box.

        Widgets should not be packed into this #GtkWindow
        directly, but into the @vbox and @action_area, as described above.
        """
        ...


    @classmethod
    def new_with_buttons(cls, title: _T.Optional[str], parent: _T.Optional[Window], flags: DialogFlags, first_button_text: _T.Optional[str], *args: object) -> Widget:
        """
        Creates a new #GtkDialog with title @title (or %NULL for the default
        title; see gtk_window_set_title()) and transient parent @parent (or
        %NULL for none; see gtk_window_set_transient_for()). The @flags
        argument can be used to make the dialog modal (#GTK_DIALOG_MODAL)
        and/or to have it destroyed along with its transient parent
        (#GTK_DIALOG_DESTROY_WITH_PARENT). After @flags, button
        text/response ID pairs should be listed, with a %NULL pointer ending
        the list. Button text can be arbitrary text. A response ID can be
        any positive number, or one of the values in the #GtkResponseType
        enumeration. If the user clicks one of these dialog buttons,
        #GtkDialog will emit the #GtkDialog::response signal with the corresponding
        response ID. If a #GtkDialog receives the #GtkWidget::delete-event signal,
        it will emit ::response with a response ID of #GTK_RESPONSE_DELETE_EVENT.
        However, destroying a dialog does not emit the ::response signal;
        so be careful relying on ::response when using the
        #GTK_DIALOG_DESTROY_WITH_PARENT flag. Buttons are from left to right,
        so the first button in the list will be the leftmost button in the dialog.

        Here’s a simple example:
        |[<!-- language="C" -->
         GtkWidget *main_app_window; // Window the dialog should show up on
         GtkWidget *dialog;
         GtkDialogFlags flags = GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT;
         dialog = gtk_dialog_new_with_buttons ("My dialog",
                                               main_app_window,
                                               flags,
                                               _("_OK"),
                                               GTK_RESPONSE_ACCEPT,
                                               _("_Cancel"),
                                               GTK_RESPONSE_REJECT,
                                               NULL);
        ]|
        """
        ...

    def add_action_widget(self, child: Widget, response_id: int) -> object:
        """
        Adds an activatable widget to the action area of a #GtkDialog,
        connecting a signal handler that will emit the #GtkDialog::response
        signal on the dialog when the widget is activated. The widget is
        appended to the end of the dialog’s action area. If you want to add a
        non-activatable widget, simply pack it into the @action_area field
        of the #GtkDialog struct.
        """
        ...

    def add_button(self, button_text: str, response_id: int) -> Widget:
        """
        Adds a button with the given text and sets things up so that
        clicking the button will emit the #GtkDialog::response signal with
        the given @response_id. The button is appended to the end of the
        dialog’s action area. The button widget is returned, but usually
        you don’t need it.
        """
        ...

    def add_buttons(self, first_button_text: str, *args: object) -> object:
        """
        Adds more buttons, same as calling gtk_dialog_add_button()
        repeatedly.  The variable argument list should be %NULL-terminated
        as with gtk_dialog_new_with_buttons(). Each button must have both
        text and response ID.
        """
        ...

    def get_action_area(self) -> Box:
        """
        Returns the action area of @dialog.
        """
        ...

    def get_content_area(self) -> Box:
        """
        Returns the content area of @dialog.
        """
        ...

    def get_header_bar(self) -> HeaderBar:
        """
        Returns the header bar of @dialog. Note that the
        headerbar is only used by the dialog if the
        #GtkDialog:use-header-bar property is %TRUE.
        """
        ...

    def get_response_for_widget(self, widget: Widget) -> int:
        """
        Gets the response id of a widget in the action area
        of a dialog.
        """
        ...

    def get_widget_for_response(self, response_id: int) -> Widget:
        """
        Gets the widget button that uses the given response ID in the action area
        of a dialog.
        """
        ...

    def response(self, response_id: int) -> object:
        """
        Emits the #GtkDialog::response signal with the given response ID.
        Used to indicate that the user has responded to the dialog in some way;
        typically either you or gtk_dialog_run() will be monitoring the
        ::response signal and take appropriate action.
        """
        ...

    def run(self) -> int:
        """
        Blocks in a recursive main loop until the @dialog either emits the
        #GtkDialog::response signal, or is destroyed. If the dialog is
        destroyed during the call to gtk_dialog_run(), gtk_dialog_run() returns
        #GTK_RESPONSE_NONE. Otherwise, it returns the response ID from the
        ::response signal emission.

        Before entering the recursive main loop, gtk_dialog_run() calls
        gtk_widget_show() on the dialog for you. Note that you still
        need to show any children of the dialog yourself.

        During gtk_dialog_run(), the default behavior of #GtkWidget::delete-event
        is disabled; if the dialog receives ::delete_event, it will not be
        destroyed as windows usually are, and gtk_dialog_run() will return
        #GTK_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog
        will be modal. You can force gtk_dialog_run() to return at any time by
        calling gtk_dialog_response() to emit the ::response signal. Destroying
        the dialog during gtk_dialog_run() is a very bad idea, because your
        post-run code won’t know whether the dialog was destroyed or not.

        After gtk_dialog_run() returns, you are responsible for hiding or
        destroying the dialog if you wish to do so.

        Typical usage of this function might be:
        |[<!-- language="C" -->
          GtkWidget *dialog = gtk_dialog_new ();
          // Set up dialog...

          int result = gtk_dialog_run (GTK_DIALOG (dialog));
          switch (result)
            {
              case GTK_RESPONSE_ACCEPT:
                 // do_application_specific_something ();
                 break;
              default:
                 // do_nothing_since_dialog_was_cancelled ();
                 break;
            }
          gtk_widget_destroy (dialog);
        ]|

        Note that even though the recursive main loop gives the effect of a
        modal dialog (it prevents the user from interacting with other
        windows in the same window group while the dialog is run), callbacks
        such as timeouts, IO channel watches, DND drops, etc, will
        be triggered during a gtk_dialog_run() call.
        """
        ...

    def set_alternative_button_order(self, first_response_id: int, *args: object) -> object:
        """
        Sets an alternative button order. If the
        #GtkSettings:gtk-alternative-button-order setting is set to %TRUE,
        the dialog buttons are reordered according to the order of the
        response ids passed to this function.

        By default, GTK+ dialogs use the button order advocated by the
        [GNOME Human Interface Guidelines](http://library.gnome.org/devel/hig-book/stable/)
        with the affirmative button at the far
        right, and the cancel button left of it. But the builtin GTK+ dialogs
        and #GtkMessageDialogs do provide an alternative button order,
        which is more suitable on some platforms, e.g. Windows.

        Use this function after adding all the buttons to your dialog, as the
        following example shows:

        |[<!-- language="C" -->
        cancel_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                               _("_Cancel"),
                                               GTK_RESPONSE_CANCEL);

        ok_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                           _("_OK"),
                                           GTK_RESPONSE_OK);

        gtk_widget_grab_default (ok_button);

        help_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                             _("_Help"),
                                             GTK_RESPONSE_HELP);

        gtk_dialog_set_alternative_button_order (GTK_DIALOG (dialog),
                                                 GTK_RESPONSE_OK,
                                                 GTK_RESPONSE_CANCEL,
                                                 GTK_RESPONSE_HELP,
                                                 -1);
        ]|
        """
        ...

    def set_alternative_button_order_from_array(self, n_params: int, new_order: object) -> object:
        """
        Sets an alternative button order. If the
        #GtkSettings:gtk-alternative-button-order setting is set to %TRUE,
        the dialog buttons are reordered according to the order of the
        response ids in @new_order.

        See gtk_dialog_set_alternative_button_order() for more information.

        This function is for use by language bindings.
        """
        ...

    def set_default_response(self, response_id: int) -> object:
        """
        Sets the last widget in the dialog’s action area with the given @response_id
        as the default widget for the dialog. Pressing “Enter” normally activates
        the default widget.
        """
        ...

    def set_response_sensitive(self, response_id: int, setting: bool) -> object:
        """
        Calls `gtk_widget_set_sensitive (widget, @setting)`
        for each widget in the dialog’s action area with the given @response_id.
        A convenient way to sensitize/desensitize dialog buttons.
        """
        ...


    ...

class DrawingArea(Widget, Atk.ImplementorIface, Buildable):
    """
    The #GtkDrawingArea widget is used for creating custom user interface
    elements. It’s essentially a blank widget; you can draw on it. After
    creating a drawing area, the application may want to connect to:

    - Mouse and button press signals to respond to input from
      the user. (Use gtk_widget_add_events() to enable events
      you wish to receive.)

    - The #GtkWidget::realize signal to take any necessary actions
      when the widget is instantiated on a particular display.
      (Create GDK resources in response to this signal.)

    - The #GtkWidget::size-allocate signal to take any necessary
      actions when the widget changes size.

    - The #GtkWidget::draw signal to handle redrawing the
      contents of the widget.

    The following code portion demonstrates using a drawing
    area to display a circle in the normal widget foreground
    color.

    Note that GDK automatically clears the exposed area before sending
    the expose event, and that drawing is implicitly clipped to the exposed
    area. If you want to have a theme-provided background, you need
    to call gtk_render_background() in your ::draw method.

    ## Simple GtkDrawingArea usage

    |[<!-- language="C" -->
    gboolean
    draw_callback (GtkWidget *widget, cairo_t *cr, gpointer data)
    {
      guint width, height;
      GdkRGBA color;
      GtkStyleContext *context;

      context = gtk_widget_get_style_context (widget);

      width = gtk_widget_get_allocated_width (widget);
      height = gtk_widget_get_allocated_height (widget);

      gtk_render_background (context, cr, 0, 0, width, height);

      cairo_arc (cr,
                 width / 2.0, height / 2.0,
                 MIN (width, height) / 2.0,
                 0, 2 * G_PI);

      gtk_style_context_get_color (context,
                                   gtk_style_context_get_state (context),
                                   &color);
      gdk_cairo_set_source_rgba (cr, &color);

      cairo_fill (cr);

     return FALSE;
    }
    [...]
      GtkWidget *drawing_area = gtk_drawing_area_new ();
      gtk_widget_set_size_request (drawing_area, 100, 100);
      g_signal_connect (G_OBJECT (drawing_area), "draw",
                        G_CALLBACK (draw_callback), NULL);
    ]|

    Draw signals are normally delivered when a drawing area first comes
    onscreen, or when it’s covered by another window and then uncovered.
    You can also force an expose event by adding to the “damage region”
    of the drawing area’s window; gtk_widget_queue_draw_area() and
    gdk_window_invalidate_rect() are equally good ways to do this.
    You’ll then get a draw signal for the invalid region.

    The available routines for drawing are documented on the
    [GDK Drawing Primitives][gdk3-Cairo-Interaction] page
    and the cairo documentation.

    To receive mouse events on a drawing area, you will need to enable
    them with gtk_widget_add_events(). To receive keyboard events, you
    will need to set the “can-focus” property on the drawing area, and you
    should probably draw some user-visible indication that the drawing
    area is focused. Use gtk_widget_has_focus() in your expose event
    handler to decide whether to draw the focus indicator. See
    gtk_render_focus() for one way to draw focus.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new drawing area.
        """
        ...


    ...

class Entry(Widget, Atk.ImplementorIface, Buildable, CellEditable, Editable):
    """
    The #GtkEntry widget is a single line text entry
    widget. A fairly large set of key bindings are supported
    by default. If the entered text is longer than the allocation
    of the widget, the widget will scroll so that the cursor
    position is visible.

    When using an entry for passwords and other sensitive information,
    it can be put into “password mode” using gtk_entry_set_visibility().
    In this mode, entered text is displayed using a “invisible” character.
    By default, GTK+ picks the best invisible character that is available
    in the current font, but it can be changed with
    gtk_entry_set_invisible_char(). Since 2.16, GTK+ displays a warning
    when Caps Lock or input methods might interfere with entering text in
    a password entry. The warning can be turned off with the
    #GtkEntry:caps-lock-warning property.

    Since 2.16, GtkEntry has the ability to display progress or activity
    information behind the text. To make an entry display such information,
    use gtk_entry_set_progress_fraction() or gtk_entry_set_progress_pulse_step().

    Additionally, GtkEntry can show icons at either side of the entry. These
    icons can be activatable by clicking, can be set up as drag source and
    can have tooltips. To add an icon, use gtk_entry_set_icon_from_gicon() or
    one of the various other functions that set an icon from a stock id, an
    icon name or a pixbuf. To trigger an action when the user clicks an icon,
    connect to the #GtkEntry::icon-press signal. To allow DND operations
    from an icon, use gtk_entry_set_icon_drag_source(). To set a tooltip on
    an icon, use gtk_entry_set_icon_tooltip_text() or the corresponding function
    for markup.

    Note that functionality or information that is only available by clicking
    on an icon in an entry may not be accessible at all to users which are not
    able to use a mouse or other pointing device. It is therefore recommended
    that any such functionality should also be available by other means, e.g.
    via the context menu of the entry.

    # CSS nodes

    |[<!-- language="plain" -->
    entry[.read-only][.flat][.warning][.error]
    ├── image.left
    ├── image.right
    ├── undershoot.left
    ├── undershoot.right
    ├── [selection]
    ├── [progress[.pulse]]
    ╰── [window.popup]
    ]|

    GtkEntry has a main node with the name entry. Depending on the properties
    of the entry, the style classes .read-only and .flat may appear. The style
    classes .warning and .error may also be used with entries.

    When the entry shows icons, it adds subnodes with the name image and the
    style class .left or .right, depending on where the icon appears.

    When the entry has a selection, it adds a subnode with the name selection.

    When the entry shows progress, it adds a subnode with the name progress.
    The node has the style class .pulse when the shown progress is pulsing.

    The CSS node for a context menu is added as a subnode below entry as well.

    The undershoot nodes are used to draw the underflow indication when content
    is scrolled out of view. These nodes get the .left and .right style classes
    added depending on where the indication is drawn.

    When touch is used and touch selection handles are shown, they are using
    CSS nodes with name cursor-handle. They get the .top or .bottom style class
    depending on where they are shown in relation to the selection. If there is
    just a single handle for the text cursor, it gets the style class
    .insertion-cursor.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new entry.
        """
        ...


    @classmethod
    def new_with_buffer(cls, buffer: EntryBuffer) -> Widget:
        """
        Creates a new entry with the specified text buffer.
        """
        ...

    def get_activates_default(self) -> bool:
        """
        Retrieves the value set by gtk_entry_set_activates_default().
        """
        ...

    def get_alignment(self) -> float:
        """
        Gets the value set by gtk_entry_set_alignment().
        """
        ...

    def get_attributes(self) -> Pango.AttrList:
        """
        Gets the attribute list that was set on the entry using
        gtk_entry_set_attributes(), if any.
        """
        ...

    def get_buffer(self) -> EntryBuffer:
        """
        Get the #GtkEntryBuffer object which holds the text for
        this widget.
        """
        ...

    def get_completion(self) -> EntryCompletion:
        """
        Returns the auxiliary completion object currently in use by @entry.
        """
        ...

    def get_current_icon_drag_source(self) -> int:
        """
        Returns the index of the icon which is the source of the current
        DND operation, or -1.

        This function is meant to be used in a #GtkWidget::drag-data-get
        callback.
        """
        ...

    def get_cursor_hadjustment(self) -> Adjustment:
        """
        Retrieves the horizontal cursor adjustment for the entry.
        See gtk_entry_set_cursor_hadjustment().
        """
        ...

    def get_has_frame(self) -> bool:
        """
        Gets the value set by gtk_entry_set_has_frame().
        """
        ...

    def get_icon_activatable(self, icon_pos: EntryIconPosition) -> bool:
        """
        Returns whether the icon is activatable.
        """
        ...

    def get_icon_area(self, icon_pos: EntryIconPosition, icon_area: Gdk.Rectangle) -> object:
        """
        Gets the area where entry’s icon at @icon_pos is drawn.
        This function is useful when drawing something to the
        entry in a draw callback.

        If the entry is not realized or has no icon at the given position,
        @icon_area is filled with zeros. Otherwise, @icon_area will be filled
        with the icon’s allocation, relative to @entry’s allocation.

        See also gtk_entry_get_text_area()
        """
        ...

    def get_icon_at_pos(self, x: int, y: int) -> int:
        """
        Finds the icon at the given position and return its index. The
        position’s coordinates are relative to the @entry’s top left corner.
        If @x, @y doesn’t lie inside an icon, -1 is returned.
        This function is intended for use in a #GtkWidget::query-tooltip
        signal handler.
        """
        ...

    def get_icon_gicon(self, icon_pos: EntryIconPosition) -> Gio.Icon:
        """
        Retrieves the #GIcon used for the icon, or %NULL if there is
        no icon or if the icon was set by some other method (e.g., by
        stock, pixbuf, or icon name).
        """
        ...

    def get_icon_name(self, icon_pos: EntryIconPosition) -> str:
        """
        Retrieves the icon name used for the icon, or %NULL if there is
        no icon or if the icon was set by some other method (e.g., by
        pixbuf, stock or gicon).
        """
        ...

    def get_icon_pixbuf(self, icon_pos: EntryIconPosition) -> GdkPixbuf.Pixbuf:
        """
        Retrieves the image used for the icon.

        Unlike the other methods of setting and getting icon data, this
        method will work regardless of whether the icon was set using a
        #GdkPixbuf, a #GIcon, a stock item, or an icon name.
        """
        ...

    def get_icon_sensitive(self, icon_pos: EntryIconPosition) -> bool:
        """
        Returns whether the icon appears sensitive or insensitive.
        """
        ...

    def get_icon_stock(self, icon_pos: EntryIconPosition) -> str:
        """
        Retrieves the stock id used for the icon, or %NULL if there is
        no icon or if the icon was set by some other method (e.g., by
        pixbuf, icon name or gicon).
        """
        ...

    def get_icon_storage_type(self, icon_pos: EntryIconPosition) -> ImageType:
        """
        Gets the type of representation being used by the icon
        to store image data. If the icon has no image data,
        the return value will be %GTK_IMAGE_EMPTY.
        """
        ...

    def get_icon_tooltip_markup(self, icon_pos: EntryIconPosition) -> str:
        """
        Gets the contents of the tooltip on the icon at the specified
        position in @entry.
        """
        ...

    def get_icon_tooltip_text(self, icon_pos: EntryIconPosition) -> str:
        """
        Gets the contents of the tooltip on the icon at the specified
        position in @entry.
        """
        ...

    def get_inner_border(self) -> Border:
        """
        This function returns the entry’s #GtkEntry:inner-border property. See
        gtk_entry_set_inner_border() for more information.
        """
        ...

    def get_input_hints(self) -> InputHints:
        """
        Gets the value of the #GtkEntry:input-hints property.
        """
        ...

    def get_input_purpose(self) -> InputPurpose:
        """
        Gets the value of the #GtkEntry:input-purpose property.
        """
        ...

    def get_invisible_char(self) -> str:
        """
        Retrieves the character displayed in place of the real characters
        for entries with visibility set to false. See gtk_entry_set_invisible_char().
        """
        ...

    def get_layout(self) -> Pango.Layout:
        """
        Gets the #PangoLayout used to display the entry.
        The layout is useful to e.g. convert text positions to
        pixel positions, in combination with gtk_entry_get_layout_offsets().
        The returned layout is owned by the entry and must not be
        modified or freed by the caller.

        Keep in mind that the layout text may contain a preedit string, so
        gtk_entry_layout_index_to_text_index() and
        gtk_entry_text_index_to_layout_index() are needed to convert byte
        indices in the layout to byte indices in the entry contents.
        """
        ...

    def get_layout_offsets(self, x: int, y: int) -> object:
        """
        Obtains the position of the #PangoLayout used to render text
        in the entry, in widget coordinates. Useful if you want to line
        up the text in an entry with some other text, e.g. when using the
        entry to implement editable cells in a sheet widget.

        Also useful to convert mouse events into coordinates inside the
        #PangoLayout, e.g. to take some action if some part of the entry text
        is clicked.

        Note that as the user scrolls around in the entry the offsets will
        change; you’ll need to connect to the “notify::scroll-offset”
        signal to track this. Remember when using the #PangoLayout
        functions you need to convert to and from pixels using
        PANGO_PIXELS() or #PANGO_SCALE.

        Keep in mind that the layout text may contain a preedit string, so
        gtk_entry_layout_index_to_text_index() and
        gtk_entry_text_index_to_layout_index() are needed to convert byte
        indices in the layout to byte indices in the entry contents.
        """
        ...

    def get_max_length(self) -> int:
        """
        Retrieves the maximum allowed length of the text in
        @entry. See gtk_entry_set_max_length().

        This is equivalent to getting @entry's #GtkEntryBuffer and
        calling gtk_entry_buffer_get_max_length() on it.
        """
        ...

    def get_max_width_chars(self) -> int:
        """
        Retrieves the desired maximum width of @entry, in characters.
        See gtk_entry_set_max_width_chars().
        """
        ...

    def get_overwrite_mode(self) -> bool:
        """
        Gets the value set by gtk_entry_set_overwrite_mode().
        """
        ...

    def get_placeholder_text(self) -> str:
        """
        Retrieves the text that will be displayed when @entry is empty and unfocused
        """
        ...

    def get_progress_fraction(self) -> float:
        """
        Returns the current fraction of the task that’s been completed.
        See gtk_entry_set_progress_fraction().
        """
        ...

    def get_progress_pulse_step(self) -> float:
        """
        Retrieves the pulse step set with gtk_entry_set_progress_pulse_step().
        """
        ...

    def get_tabs(self) -> Pango.TabArray:
        """
        Gets the tabstops that were set on the entry using gtk_entry_set_tabs(), if
        any.
        """
        ...

    def get_text(self) -> str:
        """
        Retrieves the contents of the entry widget.
        See also gtk_editable_get_chars().

        This is equivalent to getting @entry's #GtkEntryBuffer and calling
        gtk_entry_buffer_get_text() on it.
        """
        ...

    def get_text_area(self, text_area: Gdk.Rectangle) -> object:
        """
        Gets the area where the entry’s text is drawn. This function is
        useful when drawing something to the entry in a draw callback.

        If the entry is not realized, @text_area is filled with zeros.

        See also gtk_entry_get_icon_area().
        """
        ...

    def get_text_length(self) -> int:
        """
        Retrieves the current length of the text in
        @entry.

        This is equivalent to getting @entry's #GtkEntryBuffer and
        calling gtk_entry_buffer_get_length() on it.
        """
        ...

    def get_visibility(self) -> bool:
        """
        Retrieves whether the text in @entry is visible. See
        gtk_entry_set_visibility().
        """
        ...

    def get_width_chars(self) -> int:
        """
        Gets the value set by gtk_entry_set_width_chars().
        """
        ...

    def grab_focus_without_selecting(self) -> object:
        """
        Causes @entry to have keyboard focus.

        It behaves like gtk_widget_grab_focus(),
        except that it doesn't select the contents of the entry.
        You only want to call this on some special entries
        which the user usually doesn't want to replace all text in,
        such as search-as-you-type entries.
        """
        ...

    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool:
        """
        Allow the #GtkEntry input method to internally handle key press
        and release events. If this function returns %TRUE, then no further
        processing should be done for this key event. See
        gtk_im_context_filter_keypress().

        Note that you are expected to call this function from your handler
        when overriding key event handling. This is needed in the case when
        you need to insert your own key handling between the input method
        and the default key event handling of the #GtkEntry.
        See gtk_text_view_reset_im_context() for an example of use.
        """
        ...

    def layout_index_to_text_index(self, layout_index: int) -> int:
        """
        Converts from a position in the entry’s #PangoLayout (returned by
        gtk_entry_get_layout()) to a position in the entry contents
        (returned by gtk_entry_get_text()).
        """
        ...

    def progress_pulse(self) -> object:
        """
        Indicates that some progress is made, but you don’t know how much.
        Causes the entry’s progress indicator to enter “activity mode,”
        where a block bounces back and forth. Each call to
        gtk_entry_progress_pulse() causes the block to move by a little bit
        (the amount of movement per pulse is determined by
        gtk_entry_set_progress_pulse_step()).
        """
        ...

    def reset_im_context(self) -> object:
        """
        Reset the input method context of the entry if needed.

        This can be necessary in the case where modifying the buffer
        would confuse on-going input method behavior.
        """
        ...

    def set_activates_default(self, setting: bool) -> object:
        """
        If @setting is %TRUE, pressing Enter in the @entry will activate the default
        widget for the window containing the entry. This usually means that
        the dialog box containing the entry will be closed, since the default
        widget is usually one of the dialog buttons.

        (For experts: if @setting is %TRUE, the entry calls
        gtk_window_activate_default() on the window containing the entry, in
        the default handler for the #GtkEntry::activate signal.)
        """
        ...

    def set_alignment(self, xalign: float) -> object:
        """
        Sets the alignment for the contents of the entry. This controls
        the horizontal positioning of the contents when the displayed
        text is shorter than the width of the entry.
        """
        ...

    def set_attributes(self, attrs: Pango.AttrList) -> object:
        """
        Sets a #PangoAttrList; the attributes in the list are applied to the
        entry text.
        """
        ...

    def set_buffer(self, buffer: EntryBuffer) -> object:
        """
        Set the #GtkEntryBuffer object which holds the text for
        this widget.
        """
        ...

    def set_completion(self, completion: _T.Optional[EntryCompletion]) -> object:
        """
        Sets @completion to be the auxiliary completion object to use with @entry.
        All further configuration of the completion mechanism is done on
        @completion using the #GtkEntryCompletion API. Completion is disabled if
        @completion is set to %NULL.
        """
        ...

    def set_cursor_hadjustment(self, adjustment: _T.Optional[Adjustment]) -> object:
        """
        Hooks up an adjustment to the cursor position in an entry, so that when
        the cursor is moved, the adjustment is scrolled to show that position.
        See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
        the adjustment.

        The adjustment has to be in pixel units and in the same coordinate system
        as the entry.
        """
        ...

    def set_has_frame(self, setting: bool) -> object:
        """
        Sets whether the entry has a beveled frame around it.
        """
        ...

    def set_icon_activatable(self, icon_pos: EntryIconPosition, activatable: bool) -> object:
        """
        Sets whether the icon is activatable.
        """
        ...

    def set_icon_drag_source(self, icon_pos: EntryIconPosition, target_list: TargetList, actions: Gdk.DragAction) -> object:
        """
        Sets up the icon at the given position so that GTK+ will start a drag
        operation when the user clicks and drags the icon.

        To handle the drag operation, you need to connect to the usual
        #GtkWidget::drag-data-get (or possibly #GtkWidget::drag-data-delete)
        signal, and use gtk_entry_get_current_icon_drag_source() in
        your signal handler to find out if the drag was started from
        an icon.

        By default, GTK+ uses the icon as the drag icon. You can use the
        #GtkWidget::drag-begin signal to set a different icon. Note that you
        have to use g_signal_connect_after() to ensure that your signal handler
        gets executed after the default handler.
        """
        ...

    def set_icon_from_gicon(self, icon_pos: EntryIconPosition, icon: _T.Optional[Gio.Icon]) -> object:
        """
        Sets the icon shown in the entry at the specified position
        from the current icon theme.
        If the icon isn’t known, a “broken image” icon will be displayed
        instead.

        If @icon is %NULL, no icon will be shown in the specified position.
        """
        ...

    def set_icon_from_icon_name(self, icon_pos: EntryIconPosition, icon_name: _T.Optional[str]) -> object:
        """
        Sets the icon shown in the entry at the specified position
        from the current icon theme.

        If the icon name isn’t known, a “broken image” icon will be displayed
        instead.

        If @icon_name is %NULL, no icon will be shown in the specified position.
        """
        ...

    def set_icon_from_pixbuf(self, icon_pos: EntryIconPosition, pixbuf: _T.Optional[GdkPixbuf.Pixbuf]) -> object:
        """
        Sets the icon shown in the specified position using a pixbuf.

        If @pixbuf is %NULL, no icon will be shown in the specified position.
        """
        ...

    def set_icon_from_stock(self, icon_pos: EntryIconPosition, stock_id: _T.Optional[str]) -> object:
        """
        Sets the icon shown in the entry at the specified position from
        a stock image.

        If @stock_id is %NULL, no icon will be shown in the specified position.
        """
        ...

    def set_icon_sensitive(self, icon_pos: EntryIconPosition, sensitive: bool) -> object:
        """
        Sets the sensitivity for the specified icon.
        """
        ...

    def set_icon_tooltip_markup(self, icon_pos: EntryIconPosition, tooltip: _T.Optional[str]) -> object:
        """
        Sets @tooltip as the contents of the tooltip for the icon at
        the specified position. @tooltip is assumed to be marked up with
        the [Pango text markup language][PangoMarkupFormat].

        Use %NULL for @tooltip to remove an existing tooltip.

        See also gtk_widget_set_tooltip_markup() and
        gtk_entry_set_icon_tooltip_text().
        """
        ...

    def set_icon_tooltip_text(self, icon_pos: EntryIconPosition, tooltip: _T.Optional[str]) -> object:
        """
        Sets @tooltip as the contents of the tooltip for the icon
        at the specified position.

        Use %NULL for @tooltip to remove an existing tooltip.

        See also gtk_widget_set_tooltip_text() and
        gtk_entry_set_icon_tooltip_markup().

        If you unset the widget tooltip via gtk_widget_set_tooltip_text() or
        gtk_widget_set_tooltip_markup(), this sets GtkWidget:has-tooltip to %FALSE,
        which suppresses icon tooltips too. You can resolve this by then calling
        gtk_widget_set_has_tooltip() to set GtkWidget:has-tooltip back to %TRUE, or
        setting at least one non-empty tooltip on any icon achieves the same result.
        """
        ...

    def set_inner_border(self, border: _T.Optional[Border]) -> object:
        """
        Sets %entry’s inner-border property to @border, or clears it if %NULL
        is passed. The inner-border is the area around the entry’s text, but
        inside its frame.

        If set, this property overrides the inner-border style property.
        Overriding the style-provided border is useful when you want to do
        in-place editing of some text in a canvas or list widget, where
        pixel-exact positioning of the entry is important.
        """
        ...

    def set_input_hints(self, hints: InputHints) -> object:
        """
        Sets the #GtkEntry:input-hints property, which
        allows input methods to fine-tune their behaviour.
        """
        ...

    def set_input_purpose(self, purpose: InputPurpose) -> object:
        """
        Sets the #GtkEntry:input-purpose property which
        can be used by on-screen keyboards and other input
        methods to adjust their behaviour.
        """
        ...

    def set_invisible_char(self, ch: str) -> object:
        """
        Sets the character to use in place of the actual text when
        gtk_entry_set_visibility() has been called to set text visibility
        to %FALSE. i.e. this is the character used in “password mode” to
        show the user how many characters have been typed. By default, GTK+
        picks the best invisible char available in the current font. If you
        set the invisible char to 0, then the user will get no feedback
        at all; there will be no text on the screen as they type.
        """
        ...

    def set_max_length(self, max: int) -> object:
        """
        Sets the maximum allowed length of the contents of the widget. If
        the current contents are longer than the given length, then they
        will be truncated to fit.

        This is equivalent to getting @entry's #GtkEntryBuffer and
        calling gtk_entry_buffer_set_max_length() on it.
        ]|
        """
        ...

    def set_max_width_chars(self, n_chars: int) -> object:
        """
        Sets the desired maximum width in characters of @entry.
        """
        ...

    def set_overwrite_mode(self, overwrite: bool) -> object:
        """
        Sets whether the text is overwritten when typing in the #GtkEntry.
        """
        ...

    def set_placeholder_text(self, text: _T.Optional[str]) -> object:
        """
        Sets text to be displayed in @entry when it is empty and unfocused.
        This can be used to give a visual hint of the expected contents of
        the #GtkEntry.

        Note that since the placeholder text gets removed when the entry
        received focus, using this feature is a bit problematic if the entry
        is given the initial focus in a window. Sometimes this can be
        worked around by delaying the initial focus setting until the
        first key event arrives.
        """
        ...

    def set_progress_fraction(self, fraction: float) -> object:
        """
        Causes the entry’s progress indicator to “fill in” the given
        fraction of the bar. The fraction should be between 0.0 and 1.0,
        inclusive.
        """
        ...

    def set_progress_pulse_step(self, fraction: float) -> object:
        """
        Sets the fraction of total entry width to move the progress
        bouncing block for each call to gtk_entry_progress_pulse().
        """
        ...

    def set_tabs(self, tabs: Pango.TabArray) -> object:
        """
        Sets a #PangoTabArray; the tabstops in the array are applied to the entry
        text.
        """
        ...

    def set_text(self, text: str) -> object:
        """
        Sets the text in the widget to the given
        value, replacing the current contents.

        See gtk_entry_buffer_set_text().
        """
        ...

    def set_visibility(self, visible: bool) -> object:
        """
        Sets whether the contents of the entry are visible or not.
        When visibility is set to %FALSE, characters are displayed
        as the invisible char, and will also appear that way when
        the text in the entry widget is copied elsewhere.

        By default, GTK+ picks the best invisible character available
        in the current font, but it can be changed with
        gtk_entry_set_invisible_char().

        Note that you probably want to set #GtkEntry:input-purpose
        to %GTK_INPUT_PURPOSE_PASSWORD or %GTK_INPUT_PURPOSE_PIN to
        inform input methods about the purpose of this entry,
        in addition to setting visibility to %FALSE.
        """
        ...

    def set_width_chars(self, n_chars: int) -> object:
        """
        Changes the size request of the entry to be about the right size
        for @n_chars characters. Note that it changes the size
        request, the size can still be affected by
        how you pack the widget into containers. If @n_chars is -1, the
        size reverts to the default entry size.
        """
        ...

    def text_index_to_layout_index(self, text_index: int) -> int:
        """
        Converts from a position in the entry contents (returned
        by gtk_entry_get_text()) to a position in the
        entry’s #PangoLayout (returned by gtk_entry_get_layout(),
        with text retrieved via pango_layout_get_text()).
        """
        ...

    def unset_invisible_char(self) -> object:
        """
        Unsets the invisible char previously set with
        gtk_entry_set_invisible_char(). So that the
        default invisible char is used again.
        """
        ...


    ...

class EntryAccessible(WidgetAccessible, Atk.Action, Atk.Component, Atk.EditableText, Atk.Text):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class EntryBuffer(GObject.Object):
    """
    The #GtkEntryBuffer class contains the actual text displayed in a
    #GtkEntry widget.

    A single #GtkEntryBuffer object can be shared by multiple #GtkEntry
    widgets which will then share the same text content, but not the cursor
    position, visibility attributes, icon etc.

    #GtkEntryBuffer may be derived from. Such a derived class might allow
    text to be stored in an alternate location, such as non-pageable memory,
    useful in the case of important passwords. Or a derived class could
    integrate with an application’s concept of undo/redo.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, initial_chars: _T.Optional[str], n_initial_chars: int) -> EntryBuffer:
        """
        Create a new GtkEntryBuffer object.

        Optionally, specify initial text to set in the buffer.
        """
        ...

    def delete_text(self, position: int, n_chars: int) -> int:
        """
        Deletes a sequence of characters from the buffer. @n_chars characters are
        deleted starting at @position. If @n_chars is negative, then all characters
        until the end of the text are deleted.

        If @position or @n_chars are out of bounds, then they are coerced to sane
        values.

        Note that the positions are specified in characters, not bytes.
        """
        ...

    def emit_deleted_text(self, position: int, n_chars: int) -> object:
        """
        Used when subclassing #GtkEntryBuffer
        """
        ...

    def emit_inserted_text(self, position: int, chars: str, n_chars: int) -> object:
        """
        Used when subclassing #GtkEntryBuffer
        """
        ...

    def get_bytes(self) -> int:
        """
        Retrieves the length in bytes of the buffer.
        See gtk_entry_buffer_get_length().
        """
        ...

    def get_length(self) -> int:
        """
        Retrieves the length in characters of the buffer.
        """
        ...

    def get_max_length(self) -> int:
        """
        Retrieves the maximum allowed length of the text in
        @buffer. See gtk_entry_buffer_set_max_length().
        """
        ...

    def get_text(self) -> str:
        """
        Retrieves the contents of the buffer.

        The memory pointer returned by this call will not change
        unless this object emits a signal, or is finalized.
        """
        ...

    def insert_text(self, position: int, chars: str, n_chars: int) -> int:
        """
        Inserts @n_chars characters of @chars into the contents of the
        buffer, at position @position.

        If @n_chars is negative, then characters from chars will be inserted
        until a null-terminator is found. If @position or @n_chars are out of
        bounds, or the maximum buffer text length is exceeded, then they are
        coerced to sane values.

        Note that the position and length are in characters, not in bytes.
        """
        ...

    def set_max_length(self, max_length: int) -> object:
        """
        Sets the maximum allowed length of the contents of the buffer. If
        the current contents are longer than the given length, then they
        will be truncated to fit.
        """
        ...

    def set_text(self, chars: str, n_chars: int) -> object:
        """
        Sets the text in the buffer.

        This is roughly equivalent to calling gtk_entry_buffer_delete_text()
        and gtk_entry_buffer_insert_text().

        Note that @n_chars is in characters, not in bytes.
        """
        ...


    ...

class EntryCompletion(GObject.Object, Buildable, CellLayout):
    """
    #GtkEntryCompletion is an auxiliary object to be used in conjunction with
    #GtkEntry to provide the completion functionality. It implements the
    #GtkCellLayout interface, to allow the user to add extra cells to the
    #GtkTreeView with completion matches.

    “Completion functionality” means that when the user modifies the text
    in the entry, #GtkEntryCompletion checks which rows in the model match
    the current content of the entry, and displays a list of matches.
    By default, the matching is done by comparing the entry text
    case-insensitively against the text column of the model (see
    gtk_entry_completion_set_text_column()), but this can be overridden
    with a custom match function (see gtk_entry_completion_set_match_func()).

    When the user selects a completion, the content of the entry is
    updated. By default, the content of the entry is replaced by the
    text column of the model, but this can be overridden by connecting
    to the #GtkEntryCompletion::match-selected signal and updating the
    entry in the signal handler. Note that you should return %TRUE from
    the signal handler to suppress the default behaviour.

    To add completion functionality to an entry, use gtk_entry_set_completion().

    In addition to regular completion matches, which will be inserted into the
    entry when they are selected, #GtkEntryCompletion also allows to display
    “actions” in the popup window. Their appearance is similar to menuitems,
    to differentiate them clearly from completion strings. When an action is
    selected, the #GtkEntryCompletion::action-activated signal is emitted.

    GtkEntryCompletion uses a #GtkTreeModelFilter model to represent the
    subset of the entire model that is currently matching. While the
    GtkEntryCompletion signals #GtkEntryCompletion::match-selected and
    #GtkEntryCompletion::cursor-on-match take the original model and an
    iter pointing to that model as arguments, other callbacks and signals
    (such as #GtkCellLayoutDataFuncs or #GtkCellArea::apply-attributes)
    will generally take the filter model as argument. As long as you are
    only calling gtk_tree_model_get(), this will make no difference to
    you. If for some reason, you need the original model, use
    gtk_tree_model_filter_get_model(). Don’t forget to use
    gtk_tree_model_filter_convert_iter_to_child_iter() to obtain a
    matching iter.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> EntryCompletion:
        """
        Creates a new #GtkEntryCompletion object.
        """
        ...


    @classmethod
    def new_with_area(cls, area: CellArea) -> EntryCompletion:
        """
        Creates a new #GtkEntryCompletion object using the
        specified @area to layout cells in the underlying
        #GtkTreeViewColumn for the drop-down menu.
        """
        ...

    def complete(self) -> object:
        """
        Requests a completion operation, or in other words a refiltering of the
        current list with completions, using the current key. The completion list
        view will be updated accordingly.
        """
        ...

    def compute_prefix(self, key: str) -> str:
        """
        Computes the common prefix that is shared by all rows in @completion
        that start with @key. If no row matches @key, %NULL will be returned.
        Note that a text column must have been set for this function to work,
        see gtk_entry_completion_set_text_column() for details.
        """
        ...

    def delete_action(self, index_: int) -> object:
        """
        Deletes the action at @index_ from @completion’s action list.

        Note that @index_ is a relative position and the position of an
        action may have changed since it was inserted.
        """
        ...

    def get_completion_prefix(self) -> str:
        """
        Get the original text entered by the user that triggered
        the completion or %NULL if there’s no completion ongoing.
        """
        ...

    def get_entry(self) -> Widget:
        """
        Gets the entry @completion has been attached to.
        """
        ...

    def get_inline_completion(self) -> bool:
        """
        Returns whether the common prefix of the possible completions should
        be automatically inserted in the entry.
        """
        ...

    def get_inline_selection(self) -> bool:
        """
        Returns %TRUE if inline-selection mode is turned on.
        """
        ...

    def get_minimum_key_length(self) -> int:
        """
        Returns the minimum key length as set for @completion.
        """
        ...

    def get_model(self) -> TreeModel:
        """
        Returns the model the #GtkEntryCompletion is using as data source.
        Returns %NULL if the model is unset.
        """
        ...

    def get_popup_completion(self) -> bool:
        """
        Returns whether the completions should be presented in a popup window.
        """
        ...

    def get_popup_set_width(self) -> bool:
        """
        Returns whether the  completion popup window will be resized to the
        width of the entry.
        """
        ...

    def get_popup_single_match(self) -> bool:
        """
        Returns whether the completion popup window will appear even if there is
        only a single match.
        """
        ...

    def get_text_column(self) -> int:
        """
        Returns the column in the model of @completion to get strings from.
        """
        ...

    def insert_action_markup(self, index_: int, markup: str) -> object:
        """
        Inserts an action in @completion’s action item list at position @index_
        with markup @markup.
        """
        ...

    def insert_action_text(self, index_: int, text: str) -> object:
        """
        Inserts an action in @completion’s action item list at position @index_
        with text @text. If you want the action item to have markup, use
        gtk_entry_completion_insert_action_markup().

        Note that @index_ is a relative position in the list of actions and
        the position of an action can change when deleting a different action.
        """
        ...

    def insert_prefix(self) -> object:
        """
        Requests a prefix insertion.
        """
        ...

    def set_inline_completion(self, inline_completion: bool) -> object:
        """
        Sets whether the common prefix of the possible completions should
        be automatically inserted in the entry.
        """
        ...

    def set_inline_selection(self, inline_selection: bool) -> object:
        """
        Sets whether it is possible to cycle through the possible completions
        inside the entry.
        """
        ...

    def set_match_func(self, func: EntryCompletionMatchFunc, func_data: _T.Optional[object], func_notify: GLib.DestroyNotify) -> object:
        """
        Sets the match function for @completion to be @func. The match function
        is used to determine if a row should or should not be in the completion
        list.
        """
        ...

    def set_minimum_key_length(self, length: int) -> object:
        """
        Requires the length of the search key for @completion to be at least
        @length. This is useful for long lists, where completing using a small
        key takes a lot of time and will come up with meaningless results anyway
        (ie, a too large dataset).
        """
        ...

    def set_model(self, model: _T.Optional[TreeModel]) -> object:
        """
        Sets the model for a #GtkEntryCompletion. If @completion already has
        a model set, it will remove it before setting the new model.
        If model is %NULL, then it will unset the model.
        """
        ...

    def set_popup_completion(self, popup_completion: bool) -> object:
        """
        Sets whether the completions should be presented in a popup window.
        """
        ...

    def set_popup_set_width(self, popup_set_width: bool) -> object:
        """
        Sets whether the completion popup window will be resized to be the same
        width as the entry.
        """
        ...

    def set_popup_single_match(self, popup_single_match: bool) -> object:
        """
        Sets whether the completion popup window will appear even if there is
        only a single match. You may want to set this to %FALSE if you
        are using [inline completion][GtkEntryCompletion--inline-completion].
        """
        ...

    def set_text_column(self, column: int) -> object:
        """
        Convenience function for setting up the most used case of this code: a
        completion list with just strings. This function will set up @completion
        to have a list displaying all (and just) strings in the completion list,
        and to get those strings from @column in the model of @completion.

        This functions creates and adds a #GtkCellRendererText for the selected
        column. If you need to set the text column, but don't want the cell
        renderer, use g_object_set() to set the #GtkEntryCompletion:text-column
        property directly.
        """
        ...


    ...

class EntryIconAccessible(Atk.Object, Atk.Action, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class EventBox(Bin, Atk.ImplementorIface, Buildable):
    """
    The #GtkEventBox widget is a subclass of #GtkBin which also has its
    own window. It is useful since it allows you to catch events for widgets
    which do not have their own window.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkEventBox.
        """
        ...

    def get_above_child(self) -> bool:
        """
        Returns whether the event box window is above or below the
        windows of its child. See gtk_event_box_set_above_child()
        for details.
        """
        ...

    def get_visible_window(self) -> bool:
        """
        Returns whether the event box has a visible window.
        See gtk_event_box_set_visible_window() for details.
        """
        ...

    def set_above_child(self, above_child: bool) -> object:
        """
        Set whether the event box window is positioned above the windows
        of its child, as opposed to below it. If the window is above, all
        events inside the event box will go to the event box. If the window
        is below, events in windows of child widgets will first got to that
        widget, and then to its parents.

        The default is to keep the window below the child.
        """
        ...

    def set_visible_window(self, visible_window: bool) -> object:
        """
        Set whether the event box uses a visible or invisible child
        window. The default is to use visible windows.

        In an invisible window event box, the window that the
        event box creates is a %GDK_INPUT_ONLY window, which
        means that it is invisible and only serves to receive
        events.

        A visible window event box creates a visible (%GDK_INPUT_OUTPUT)
        window that acts as the parent window for all the widgets
        contained in the event box.

        You should generally make your event box invisible if
        you just want to trap events. Creating a visible window
        may cause artifacts that are visible to the user, especially
        if the user is using a theme with gradients or pixmaps.

        The main reason to create a non input-only event box is if
        you want to set the background to a different color or
        draw on it.

        There is one unexpected issue for an invisible event box that has its
        window below the child. (See gtk_event_box_set_above_child().)
        Since the input-only window is not an ancestor window of any windows
        that descendent widgets of the event box create, events on these
        windows aren’t propagated up by the windowing system, but only by GTK+.
        The practical effect of this is if an event isn’t in the event
        mask for the descendant window (see gtk_widget_add_events()),
        it won’t be received by the event box.

        This problem doesn’t occur for visible event boxes, because in
        that case, the event box window is actually the ancestor of the
        descendant windows, not just at the same place on the screen.
        """
        ...


    ...

class EventController(GObject.Object):
    """
    #GtkEventController is a base, low-level implementation for event
    controllers. Those react to a series of #GdkEvents, and possibly trigger
    actions as a consequence of those.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_propagation_phase(self) -> PropagationPhase:
        """
        Gets the propagation phase at which @controller handles events.
        """
        ...

    def get_widget(self) -> Widget:
        """
        Returns the #GtkWidget this controller relates to.
        """
        ...

    def handle_event(self, event: Gdk.Event) -> bool:
        """
        Feeds an events into @controller, so it can be interpreted
        and the controller actions triggered.
        """
        ...

    def reset(self) -> object:
        """
        Resets the @controller to a clean state. Every interaction
        the controller did through #GtkEventController::handle-event
        will be dropped at this point.
        """
        ...

    def set_propagation_phase(self, phase: PropagationPhase) -> object:
        """
        Sets the propagation phase at which a controller handles events.

        If @phase is %GTK_PHASE_NONE, no automatic event handling will be
        performed, but other additional gesture maintenance will. In that phase,
        the events can be managed by calling gtk_event_controller_handle_event().
        """
        ...


    ...

class EventControllerKey(EventController):
    """
    #GtkEventControllerKey is an event controller meant for situations
    where you need access to key events.

    This object was added in 3.24.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> EventController:
        ...

    def forward(self, widget: Widget) -> bool:
        ...

    def get_group(self) -> int:
        ...

    def get_im_context(self) -> IMContext:
        """
        Gets the IM context of a key controller.
        """
        ...

    def set_im_context(self, im_context: IMContext) -> object:
        ...


    ...

class EventControllerMotion(EventController):
    """
    #GtkEventControllerMotion is an event controller meant for situations
    where you need to track the position of the pointer.

    This object was added in 3.24.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> EventController:
        """
        Creates a new event controller that will handle motion events
        for the given @widget.
        """
        ...


    ...

class EventControllerScroll(EventController):
    """
    #GtkEventControllerScroll is an event controller meant to handle
    scroll events from mice and touchpads. It is capable of handling
    both discrete and continuous scroll events, abstracting them both
    on the #GtkEventControllerScroll::scroll signal (deltas in the
    discrete case are multiples of 1).

    In the case of continuous scroll events, #GtkEventControllerScroll
    encloses all #GtkEventControllerScroll::scroll events between two
    #GtkEventControllerScroll::scroll-begin and #GtkEventControllerScroll::scroll-end
    signals.

    The behavior of the event controller can be modified by the
    flags given at creation time, or modified at a later point through
    gtk_event_controller_scroll_set_flags() (e.g. because the scrolling
    conditions of the widget changed).

    The controller can be set up to emit motion for either/both vertical
    and horizontal scroll events through #GTK_EVENT_CONTROLLER_SCROLL_VERTICAL,
    #GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL and #GTK_EVENT_CONTROLLER_SCROLL_BOTH.
    If any axis is disabled, the respective #GtkEventControllerScroll::scroll
    delta will be 0. Vertical scroll events will be translated to horizontal
    motion for the devices incapable of horizontal scrolling.

    The event controller can also be forced to emit discrete events on all devices
    through #GTK_EVENT_CONTROLLER_SCROLL_DISCRETE. This can be used to implement
    discrete actions triggered through scroll events (e.g. switching across
    combobox options).

    The #GTK_EVENT_CONTROLLER_SCROLL_KINETIC flag toggles the emission of the
    #GtkEventControllerScroll::decelerate signal, emitted at the end of scrolling
    with two X/Y velocity arguments that are consistent with the motion that
    was received.

    This object was added in 3.24.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget, flags: EventControllerScrollFlags) -> EventController:
        """
        Creates a new event controller that will handle scroll events
        for the given @widget.
        """
        ...

    def get_flags(self) -> EventControllerScrollFlags:
        """
        Gets the flags conditioning the scroll controller behavior.
        """
        ...

    def set_flags(self, flags: EventControllerScrollFlags) -> object:
        """
        Sets the flags conditioning scroll controller behavior.
        """
        ...


    ...

class Expander(Bin, Atk.ImplementorIface, Buildable):
    """
    A #GtkExpander allows the user to hide or show its child by clicking
    on an expander triangle similar to the triangles used in a #GtkTreeView.

    Normally you use an expander as you would use any other descendant
    of #GtkBin; you create the child widget and use gtk_container_add()
    to add it to the expander. When the expander is toggled, it will take
    care of showing and hiding the child automatically.

    # Special Usage

    There are situations in which you may prefer to show and hide the
    expanded widget yourself, such as when you want to actually create
    the widget at expansion time. In this case, create a #GtkExpander
    but do not add a child to it. The expander widget has an
    #GtkExpander:expanded property which can be used to monitor
    its expansion state. You should watch this property with a signal
    connection as follows:

    |[<!-- language="C" -->
    static void
    expander_callback (GObject    *object,
                       GParamSpec *param_spec,
                       gpointer    user_data)
    {
      GtkExpander *expander;

      expander = GTK_EXPANDER (object);

      if (gtk_expander_get_expanded (expander))
        {
          // Show or create widgets
        }
      else
        {
          // Hide or destroy widgets
        }
    }

    static void
    create_expander (void)
    {
      GtkWidget *expander = gtk_expander_new_with_mnemonic ("_More Options");
      g_signal_connect (expander, "notify::expanded",
                        G_CALLBACK (expander_callback), NULL);

      // ...
    }
    ]|

    # GtkExpander as GtkBuildable

    The GtkExpander implementation of the GtkBuildable interface supports
    placing a child in the label position by specifying “label” as the
    “type” attribute of a `<child>` element. A normal content child can be
    specified without specifying a `<child>` type attribute.

    An example of a UI definition fragment with GtkExpander:

    |[<!-- language="xml" -->
    <object class="GtkExpander">
      <child type="label">
        <object class="GtkLabel" id="expander-label"/>
      </child>
      <child>
        <object class="GtkEntry" id="expander-content"/>
      </child>
    </object>
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    expander
    ├── title
    │   ├── arrow
    │   ╰── <label widget>
    ╰── <child>
    ]|

    GtkExpander has three CSS nodes, the main node with the name expander,
    a subnode with name title and node below it with name arrow. The arrow of an
    expander that is showing its child gets the :checked pseudoclass added to it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, label: _T.Optional[str]) -> Widget:
        """
        Creates a new expander using @label as the text of the label.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, label: _T.Optional[str]) -> Widget:
        """
        Creates a new expander using @label as the text of the label.
        If characters in @label are preceded by an underscore, they are underlined.
        If you need a literal underscore character in a label, use “__” (two
        underscores). The first underlined character represents a keyboard
        accelerator called a mnemonic.
        Pressing Alt and that key activates the button.
        """
        ...

    def get_expanded(self) -> bool:
        """
        Queries a #GtkExpander and returns its current state. Returns %TRUE
        if the child widget is revealed.

        See gtk_expander_set_expanded().
        """
        ...

    def get_label(self) -> str:
        """
        Fetches the text from a label widget including any embedded
        underlines indicating mnemonics and Pango markup, as set by
        gtk_expander_set_label(). If the label text has not been set the
        return value will be %NULL. This will be the case if you create an
        empty button with gtk_button_new() to use as a container.

        Note that this function behaved differently in versions prior to
        2.14 and used to return the label text stripped of embedded
        underlines indicating mnemonics and Pango markup. This problem can
        be avoided by fetching the label text directly from the label
        widget.
        """
        ...

    def get_label_fill(self) -> bool:
        """
        Returns whether the label widget will fill all available
        horizontal space allocated to @expander.
        """
        ...

    def get_label_widget(self) -> Widget:
        """
        Retrieves the label widget for the frame. See
        gtk_expander_set_label_widget().
        """
        ...

    def get_resize_toplevel(self) -> bool:
        """
        Returns whether the expander will resize the toplevel widget
        containing the expander upon resizing and collpasing.
        """
        ...

    def get_spacing(self) -> int:
        """
        Gets the value set by gtk_expander_set_spacing().
        """
        ...

    def get_use_markup(self) -> bool:
        """
        Returns whether the label’s text is interpreted as marked up with
        the [Pango text markup language][PangoMarkupFormat].
        See gtk_expander_set_use_markup().
        """
        ...

    def get_use_underline(self) -> bool:
        """
        Returns whether an embedded underline in the expander label
        indicates a mnemonic. See gtk_expander_set_use_underline().
        """
        ...

    def set_expanded(self, expanded: bool) -> object:
        """
        Sets the state of the expander. Set to %TRUE, if you want
        the child widget to be revealed, and %FALSE if you want the
        child widget to be hidden.
        """
        ...

    def set_label(self, label: _T.Optional[str]) -> object:
        """
        Sets the text of the label of the expander to @label.

        This will also clear any previously set labels.
        """
        ...

    def set_label_fill(self, label_fill: bool) -> object:
        """
        Sets whether the label widget should fill all available
        horizontal space allocated to @expander.

        Note that this function has no effect since 3.20.
        """
        ...

    def set_label_widget(self, label_widget: _T.Optional[Widget]) -> object:
        """
        Set the label widget for the expander. This is the widget
        that will appear embedded alongside the expander arrow.
        """
        ...

    def set_resize_toplevel(self, resize_toplevel: bool) -> object:
        """
        Sets whether the expander will resize the toplevel widget
        containing the expander upon resizing and collpasing.
        """
        ...

    def set_spacing(self, spacing: int) -> object:
        """
        Sets the spacing field of @expander, which is the number of
        pixels to place between expander and the child.
        """
        ...

    def set_use_markup(self, use_markup: bool) -> object:
        """
        Sets whether the text of the label contains markup in
        [Pango’s text markup language][PangoMarkupFormat].
        See gtk_label_set_markup().
        """
        ...

    def set_use_underline(self, use_underline: bool) -> object:
        """
        If true, an underline in the text of the expander label indicates
        the next character should be used for the mnemonic accelerator key.
        """
        ...


    ...

class ExpanderAccessible(ContainerAccessible, Atk.Action, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class FileChooserButton(Box, Atk.ImplementorIface, Buildable, FileChooser, Orientable):
    """
    The #GtkFileChooserButton is a widget that lets the user select a
    file.  It implements the #GtkFileChooser interface.  Visually, it is a
    file name with a button to bring up a #GtkFileChooserDialog.
    The user can then use that dialog to change the file associated with
    that button.  This widget does not support setting the
    #GtkFileChooser:select-multiple property to %TRUE.

    ## Create a button to let the user select a file in /etc

    |[<!-- language="C" -->
    {
      GtkWidget *button;

      button = gtk_file_chooser_button_new (_("Select a file"),
                                            GTK_FILE_CHOOSER_ACTION_OPEN);
      gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (button),
                                           "/etc");
    }
    ]|

    The #GtkFileChooserButton supports the #GtkFileChooserActions
    %GTK_FILE_CHOOSER_ACTION_OPEN and %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.

    > The #GtkFileChooserButton will ellipsize the label, and will thus
    > request little horizontal space.  To give the button more space,
    > you should call gtk_widget_get_preferred_size(),
    > gtk_file_chooser_button_set_width_chars(), or pack the button in
    > such a way that other interface elements give space to the
    > widget.

    # CSS nodes

    GtkFileChooserButton has a CSS node with name “filechooserbutton”, containing
    a subnode for the internal button with name “button” and style class “.file”.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: str, action: FileChooserAction) -> Widget:
        """
        Creates a new file-selecting button widget.
        """
        ...


    @classmethod
    def new_with_dialog(cls, dialog: Dialog) -> Widget:
        """
        Creates a #GtkFileChooserButton widget which uses @dialog as its
        file-picking window.

        Note that @dialog must be a #GtkDialog (or subclass) which
        implements the #GtkFileChooser interface and must not have
        %GTK_DIALOG_DESTROY_WITH_PARENT set.

        Also note that the dialog needs to have its confirmative button
        added with response %GTK_RESPONSE_ACCEPT or %GTK_RESPONSE_OK in
        order for the button to take over the file selected in the dialog.
        """
        ...

    def get_focus_on_click(self) -> bool:
        """
        Returns whether the button grabs focus when it is clicked with the mouse.
        See gtk_file_chooser_button_set_focus_on_click().
        """
        ...

    def get_title(self) -> str:
        """
        Retrieves the title of the browse dialog used by @button. The returned value
        should not be modified or freed.
        """
        ...

    def get_width_chars(self) -> int:
        """
        Retrieves the width in characters of the @button widget’s entry and/or label.
        """
        ...

    def set_focus_on_click(self, focus_on_click: bool) -> object:
        """
        Sets whether the button will grab focus when it is clicked with the mouse.
        Making mouse clicks not grab focus is useful in places like toolbars where
        you don’t want the keyboard focus removed from the main area of the
        application.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Modifies the @title of the browse dialog used by @button.
        """
        ...

    def set_width_chars(self, n_chars: int) -> object:
        """
        Sets the width (in characters) that @button will use to @n_chars.
        """
        ...


    ...

class FileChooserDialog(Dialog, Atk.ImplementorIface, Buildable, FileChooser):
    """
    #GtkFileChooserDialog is a dialog box suitable for use with
    “File/Open” or “File/Save as” commands.  This widget works by
    putting a #GtkFileChooserWidget inside a #GtkDialog.  It exposes
    the #GtkFileChooser interface, so you can use all of the
    #GtkFileChooser functions on the file chooser dialog as well as
    those for #GtkDialog.

    Note that #GtkFileChooserDialog does not have any methods of its
    own.  Instead, you should use the functions that work on a
    #GtkFileChooser.

    If you want to integrate well with the platform you should use the
    #GtkFileChooserNative API, which will use a platform-specific
    dialog if available and fall back to GtkFileChooserDialog
    otherwise.

    ## Typical usage ## {#gtkfilechooser-typical-usage}

    In the simplest of cases, you can the following code to use
    #GtkFileChooserDialog to select a file for opening:

    |[
    GtkWidget *dialog;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;
    gint res;

    dialog = gtk_file_chooser_dialog_new ("Open File",
                                          parent_window,
                                          action,
                                          _("_Cancel"),
                                          GTK_RESPONSE_CANCEL,
                                          _("_Open"),
                                          GTK_RESPONSE_ACCEPT,
                                          NULL);

    res = gtk_dialog_run (GTK_DIALOG (dialog));
    if (res == GTK_RESPONSE_ACCEPT)
      {
        char *filename;
        GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);
        filename = gtk_file_chooser_get_filename (chooser);
        open_file (filename);
        g_free (filename);
      }

    gtk_widget_destroy (dialog);
    ]|

    To use a dialog for saving, you can use this:

    |[
    GtkWidget *dialog;
    GtkFileChooser *chooser;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;
    gint res;

    dialog = gtk_file_chooser_dialog_new ("Save File",
                                          parent_window,
                                          action,
                                          _("_Cancel"),
                                          GTK_RESPONSE_CANCEL,
                                          _("_Save"),
                                          GTK_RESPONSE_ACCEPT,
                                          NULL);
    chooser = GTK_FILE_CHOOSER (dialog);

    gtk_file_chooser_set_do_overwrite_confirmation (chooser, TRUE);

    if (user_edited_a_new_document)
      gtk_file_chooser_set_current_name (chooser,
                                         _("Untitled document"));
    else
      gtk_file_chooser_set_filename (chooser,
                                     existing_filename);

    res = gtk_dialog_run (GTK_DIALOG (dialog));
    if (res == GTK_RESPONSE_ACCEPT)
      {
        char *filename;

        filename = gtk_file_chooser_get_filename (chooser);
        save_to_file (filename);
        g_free (filename);
      }

    gtk_widget_destroy (dialog);
    ]|

    ## Setting up a file chooser dialog ## {#gtkfilechooserdialog-setting-up}

    There are various cases in which you may need to use a #GtkFileChooserDialog:

    - To select a file for opening. Use #GTK_FILE_CHOOSER_ACTION_OPEN.

    - To save a file for the first time. Use #GTK_FILE_CHOOSER_ACTION_SAVE,
      and suggest a name such as “Untitled” with gtk_file_chooser_set_current_name().

    - To save a file under a different name. Use #GTK_FILE_CHOOSER_ACTION_SAVE,
      and set the existing filename with gtk_file_chooser_set_filename().

    - To choose a folder instead of a file. Use #GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.

    Note that old versions of the file chooser’s documentation suggested
    using gtk_file_chooser_set_current_folder() in various
    situations, with the intention of letting the application
    suggest a reasonable default folder.  This is no longer
    considered to be a good policy, as now the file chooser is
    able to make good suggestions on its own.  In general, you
    should only cause the file chooser to show a specific folder
    when it is appropriate to use gtk_file_chooser_set_filename(),
    i.e. when you are doing a Save As command and you already
    have a file saved somewhere.

    ## Response Codes ## {#gtkfilechooserdialog-responses}

    #GtkFileChooserDialog inherits from #GtkDialog, so buttons that
    go in its action area have response codes such as
    #GTK_RESPONSE_ACCEPT and #GTK_RESPONSE_CANCEL.  For example, you
    could call gtk_file_chooser_dialog_new() as follows:

    |[
    GtkWidget *dialog;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;

    dialog = gtk_file_chooser_dialog_new ("Open File",
                                          parent_window,
                                          action,
                                          _("_Cancel"),
                                          GTK_RESPONSE_CANCEL,
                                          _("_Open"),
                                          GTK_RESPONSE_ACCEPT,
                                          NULL);
    ]|

    This will create buttons for “Cancel” and “Open” that use stock
    response identifiers from #GtkResponseType.  For most dialog
    boxes you can use your own custom response codes rather than the
    ones in #GtkResponseType, but #GtkFileChooserDialog assumes that
    its “accept”-type action, e.g. an “Open” or “Save” button,
    will have one of the following response codes:

    - #GTK_RESPONSE_ACCEPT
    - #GTK_RESPONSE_OK
    - #GTK_RESPONSE_YES
    - #GTK_RESPONSE_APPLY

    This is because #GtkFileChooserDialog must intercept responses
    and switch to folders if appropriate, rather than letting the
    dialog terminate — the implementation uses these known
    response codes to know which responses can be blocked if
    appropriate.

    To summarize, make sure you use a
    [stock response code][gtkfilechooserdialog-responses]
    when you use #GtkFileChooserDialog to ensure proper operation.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: _T.Optional[str], parent: _T.Optional[Window], action: FileChooserAction, first_button_text: _T.Optional[str], *args: object) -> Widget:
        """
        Creates a new #GtkFileChooserDialog.  This function is analogous to
        gtk_dialog_new_with_buttons().
        """
        ...


    ...

class FileChooserNative(NativeDialog, FileChooser):
    """
    #GtkFileChooserNative is an abstraction of a dialog box suitable
    for use with “File/Open” or “File/Save as” commands. By default, this
    just uses a #GtkFileChooserDialog to implement the actual dialog.
    However, on certain platforms, such as Windows and macOS, the native platform
    file chooser is used instead. When the application is running in a
    sandboxed environment without direct filesystem access (such as Flatpak),
    #GtkFileChooserNative may call the proper APIs (portals) to let the user
    choose a file and make it available to the application.

    While the API of #GtkFileChooserNative closely mirrors #GtkFileChooserDialog, the main
    difference is that there is no access to any #GtkWindow or #GtkWidget for the dialog.
    This is required, as there may not be one in the case of a platform native dialog.
    Showing, hiding and running the dialog is handled by the #GtkNativeDialog functions.

    ## Typical usage ## {#gtkfilechoosernative-typical-usage}

    In the simplest of cases, you can the following code to use
    #GtkFileChooserDialog to select a file for opening:

    |[
    GtkFileChooserNative *native;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;
    gint res;

    native = gtk_file_chooser_native_new ("Open File",
                                          parent_window,
                                          action,
                                          "_Open",
                                          "_Cancel");

    res = gtk_native_dialog_run (GTK_NATIVE_DIALOG (native));
    if (res == GTK_RESPONSE_ACCEPT)
      {
        char *filename;
        GtkFileChooser *chooser = GTK_FILE_CHOOSER (native);
        filename = gtk_file_chooser_get_filename (chooser);
        open_file (filename);
        g_free (filename);
      }

    g_object_unref (native);
    ]|

    To use a dialog for saving, you can use this:

    |[
    GtkFileChooserNative *native;
    GtkFileChooser *chooser;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;
    gint res;

    native = gtk_file_chooser_native_new ("Save File",
                                          parent_window,
                                          action,
                                          "_Save",
                                          "_Cancel");
    chooser = GTK_FILE_CHOOSER (native);

    gtk_file_chooser_set_do_overwrite_confirmation (chooser, TRUE);

    if (user_edited_a_new_document)
      gtk_file_chooser_set_current_name (chooser,
                                         _("Untitled document"));
    else
      gtk_file_chooser_set_filename (chooser,
                                     existing_filename);

    res = gtk_native_dialog_run (GTK_NATIVE_DIALOG (native));
    if (res == GTK_RESPONSE_ACCEPT)
      {
        char *filename;

        filename = gtk_file_chooser_get_filename (chooser);
        save_to_file (filename);
        g_free (filename);
      }

    g_object_unref (native);
    ]|

    For more information on how to best set up a file dialog, see #GtkFileChooserDialog.

    ## Response Codes ## {#gtkfilechooserdialognative-responses}

    #GtkFileChooserNative inherits from #GtkNativeDialog, which means it
    will return #GTK_RESPONSE_ACCEPT if the user accepted, and
    #GTK_RESPONSE_CANCEL if he pressed cancel. It can also return
    #GTK_RESPONSE_DELETE_EVENT if the window was unexpectedly closed.

    ## Differences from #GtkFileChooserDialog ##  {#gtkfilechooserdialognative-differences}

    There are a few things in the GtkFileChooser API that are not
    possible to use with #GtkFileChooserNative, as such use would
    prohibit the use of a native dialog.

    There is no support for the signals that are emitted when the user
    navigates in the dialog, including:
    * #GtkFileChooser::current-folder-changed
    * #GtkFileChooser::selection-changed
    * #GtkFileChooser::file-activated
    * #GtkFileChooser::confirm-overwrite

    You can also not use the methods that directly control user navigation:
    * gtk_file_chooser_unselect_filename()
    * gtk_file_chooser_select_all()
    * gtk_file_chooser_unselect_all()

    If you need any of the above you will have to use #GtkFileChooserDialog directly.

    No operations that change the the dialog work while the dialog is
    visible. Set all the properties that are required before showing the dialog.

    ## Win32 details ## {#gtkfilechooserdialognative-win32}

    On windows the IFileDialog implementation (added in Windows Vista) is
    used. It supports many of the features that #GtkFileChooserDialog
    does, but there are some things it does not handle:

    * Extra widgets added with gtk_file_chooser_set_extra_widget().

    * Use of custom previews by connecting to #GtkFileChooser::update-preview.

    * Any #GtkFileFilter added using a mimetype or custom filter.

    If any of these features are used the regular #GtkFileChooserDialog
    will be used in place of the native one.

    ## Portal details ## {#gtkfilechooserdialognative-portal}

    When the org.freedesktop.portal.FileChooser portal is available on the
    session bus, it is used to bring up an out-of-process file chooser. Depending
    on the kind of session the application is running in, this may or may not
    be a GTK+ file chooser. In this situation, the following things are not
    supported and will be silently ignored:

    * Extra widgets added with gtk_file_chooser_set_extra_widget().

    * Use of custom previews by connecting to #GtkFileChooser::update-preview.

    * Any #GtkFileFilter added with a custom filter.

    ## macOS details ## {#gtkfilechooserdialognative-macos}

    On macOS the NSSavePanel and NSOpenPanel classes are used to provide native
    file chooser dialogs. Some features provided by #GtkFileChooserDialog are
    not supported:

    * Extra widgets added with gtk_file_chooser_set_extra_widget(), unless the
      widget is an instance of GtkLabel, in which case the label text will be used
      to set the NSSavePanel message instance property.

    * Use of custom previews by connecting to #GtkFileChooser::update-preview.

    * Any #GtkFileFilter added with a custom filter.

    * Shortcut folders.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: _T.Optional[str], parent: _T.Optional[Window], action: FileChooserAction, accept_label: _T.Optional[str], cancel_label: _T.Optional[str]) -> FileChooserNative:
        """
        Creates a new #GtkFileChooserNative.
        """
        ...

    def get_accept_label(self) -> str:
        """
        Retrieves the custom label text for the accept button.
        """
        ...

    def get_cancel_label(self) -> str:
        """
        Retrieves the custom label text for the cancel button.
        """
        ...

    def set_accept_label(self, accept_label: _T.Optional[str]) -> object:
        """
        Sets the custom label text for the accept button.

        If characters in @label are preceded by an underscore, they are underlined.
        If you need a literal underscore character in a label, use “__” (two
        underscores). The first underlined character represents a keyboard
        accelerator called a mnemonic.
        Pressing Alt and that key activates the button.
        """
        ...

    def set_cancel_label(self, cancel_label: _T.Optional[str]) -> object:
        """
        Sets the custom label text for the cancel button.

        If characters in @label are preceded by an underscore, they are underlined.
        If you need a literal underscore character in a label, use “__” (two
        underscores). The first underlined character represents a keyboard
        accelerator called a mnemonic.
        Pressing Alt and that key activates the button.
        """
        ...


    ...

class FileChooserWidget(Box, Atk.ImplementorIface, Buildable, FileChooser, Orientable):
    """
    #GtkFileChooserWidget is a widget for choosing files.
    It exposes the #GtkFileChooser interface, and you should
    use the methods of this interface to interact with the
    widget.

    # CSS nodes

    GtkFileChooserWidget has a single CSS node with name filechooser.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, action: FileChooserAction) -> Widget:
        """
        Creates a new #GtkFileChooserWidget. This is a file chooser widget that can
        be embedded in custom windows, and it is the same widget that is used by
        #GtkFileChooserDialog.
        """
        ...


    ...

class FileChooserWidgetAccessible(ContainerAccessible, Atk.Action, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class FileFilter(GObject.InitiallyUnowned, Buildable):
    """
    A GtkFileFilter can be used to restrict the files being shown in a
    #GtkFileChooser. Files can be filtered based on their name (with
    gtk_file_filter_add_pattern()), on their mime type (with
    gtk_file_filter_add_mime_type()), or by a custom filter function
    (with gtk_file_filter_add_custom()).

    Filtering by mime types handles aliasing and subclassing of mime
    types; e.g. a filter for text/plain also matches a file with mime
    type application/rtf, since application/rtf is a subclass of
    text/plain. Note that #GtkFileFilter allows wildcards for the
    subtype of a mime type, so you can e.g. filter for image/\*.

    Normally, filters are used by adding them to a #GtkFileChooser,
    see gtk_file_chooser_add_filter(), but it is also possible
    to manually use a filter on a file with gtk_file_filter_filter().

    # GtkFileFilter as GtkBuildable

    The GtkFileFilter implementation of the GtkBuildable interface
    supports adding rules using the `<mime-types>`, `<patterns>` and
    `<applications>` elements and listing the rules within. Specifying
    a `<mime-type>` or `<pattern>` has the same effect as as calling
    gtk_file_filter_add_mime_type() or gtk_file_filter_add_pattern().

    An example of a UI definition fragment specifying GtkFileFilter
    rules:

    |[<!-- language="xml" -->
    <object class="GtkFileFilter">
      <mime-types>
        <mime-type>text/plain</mime-type>
        <mime-type>image/ *</mime-type>
      </mime-types>
      <patterns>
        <pattern>*.txt</pattern>
        <pattern>*.png</pattern>
      </patterns>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> FileFilter:
        """
        Creates a new #GtkFileFilter with no rules added to it.
        Such a filter doesn’t accept any files, so is not
        particularly useful until you add rules with
        gtk_file_filter_add_mime_type(), gtk_file_filter_add_pattern(),
        or gtk_file_filter_add_custom(). To create a filter
        that accepts any file, use:
        |[<!-- language="C" -->
        GtkFileFilter *filter = gtk_file_filter_new ();
        gtk_file_filter_add_pattern (filter, "*");
        ]|
        """
        ...


    @classmethod
    def new_from_gvariant(cls, variant: GLib.Variant) -> FileFilter:
        """
        Deserialize a file filter from an a{sv} variant in
        the format produced by gtk_file_filter_to_gvariant().
        """
        ...

    def add_custom(self, needed: FileFilterFlags, func: FileFilterFunc, data: _T.Optional[object], notify: GLib.DestroyNotify) -> object:
        """
        Adds rule to a filter that allows files based on a custom callback
        function. The bitfield @needed which is passed in provides information
        about what sorts of information that the filter function needs;
        this allows GTK+ to avoid retrieving expensive information when
        it isn’t needed by the filter.
        """
        ...

    def add_mime_type(self, mime_type: str) -> object:
        """
        Adds a rule allowing a given mime type to @filter.
        """
        ...

    def add_pattern(self, pattern: str) -> object:
        """
        Adds a rule allowing a shell style glob to a filter.
        """
        ...

    def add_pixbuf_formats(self) -> object:
        """
        Adds a rule allowing image files in the formats supported
        by GdkPixbuf.
        """
        ...

    def filter(self, filter_info: FileFilterInfo) -> bool:
        """
        Tests whether a file should be displayed according to @filter.
        The #GtkFileFilterInfo @filter_info should include
        the fields returned from gtk_file_filter_get_needed().

        This function will not typically be used by applications; it
        is intended principally for use in the implementation of
        #GtkFileChooser.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the human-readable name for the filter. See gtk_file_filter_set_name().
        """
        ...

    def get_needed(self) -> FileFilterFlags:
        """
        Gets the fields that need to be filled in for the #GtkFileFilterInfo
        passed to gtk_file_filter_filter()

        This function will not typically be used by applications; it
        is intended principally for use in the implementation of
        #GtkFileChooser.
        """
        ...

    def set_name(self, name: _T.Optional[str]) -> object:
        """
        Sets the human-readable name of the filter; this is the string
        that will be displayed in the file selector user interface if
        there is a selectable list of filters.
        """
        ...

    def to_gvariant(self) -> GLib.Variant:
        """
        Serialize a file filter to an a{sv} variant.
        """
        ...


    ...

class Fixed(Container, Atk.ImplementorIface, Buildable):
    """
    The #GtkFixed widget is a container which can place child widgets
    at fixed positions and with fixed sizes, given in pixels. #GtkFixed
    performs no automatic layout management.

    For most applications, you should not use this container! It keeps
    you from having to learn about the other GTK+ containers, but it
    results in broken applications.  With #GtkFixed, the following
    things will result in truncated text, overlapping widgets, and
    other display bugs:

    - Themes, which may change widget sizes.

    - Fonts other than the one you used to write the app will of course
      change the size of widgets containing text; keep in mind that
      users may use a larger font because of difficulty reading the
      default, or they may be using a different OS that provides different fonts.

    - Translation of text into other languages changes its size. Also,
      display of non-English text will use a different font in many
      cases.

    In addition, #GtkFixed does not pay attention to text direction and thus may
    produce unwanted results if your app is run under right-to-left languages
    such as Hebrew or Arabic. That is: normally GTK+ will order containers
    appropriately for the text direction, e.g. to put labels to the right of the
    thing they label when using an RTL language, but it can’t do that with
    #GtkFixed. So if you need to reorder widgets depending on the text direction,
    you would need to manually detect it and adjust child positions accordingly.

    Finally, fixed positioning makes it kind of annoying to add/remove
    GUI elements, since you have to reposition all the other
    elements. This is a long-term maintenance problem for your
    application.

    If you know none of these things are an issue for your application,
    and prefer the simplicity of #GtkFixed, by all means use the
    widget. But you should be aware of the tradeoffs.

    See also #GtkLayout, which shares the ability to perform fixed positioning
    of child widgets and additionally adds custom drawing and scrollability.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkFixed.
        """
        ...

    def move(self, widget: Widget, x: int, y: int) -> object:
        """
        Moves a child of a #GtkFixed container to the given position.
        """
        ...

    def put(self, widget: Widget, x: int, y: int) -> object:
        """
        Adds a widget to a #GtkFixed container at the given position.
        """
        ...


    ...

class FlowBox(Container, Atk.ImplementorIface, Buildable, Orientable):
    """
    A GtkFlowBox positions child widgets in sequence according to its
    orientation.

    For instance, with the horizontal orientation, the widgets will be
    arranged from left to right, starting a new row under the previous
    row when necessary. Reducing the width in this case will require more
    rows, so a larger height will be requested.

    Likewise, with the vertical orientation, the widgets will be arranged
    from top to bottom, starting a new column to the right when necessary.
    Reducing the height will require more columns, so a larger width will
    be requested.

    The size request of a GtkFlowBox alone may not be what you expect; if you
    need to be able to shrink it along both axes and dynamically reflow its
    children, you may have to wrap it in a #GtkScrolledWindow to enable that.

    The children of a GtkFlowBox can be dynamically sorted and filtered.

    Although a GtkFlowBox must have only #GtkFlowBoxChild children,
    you can add any kind of widget to it via gtk_container_add(), and
    a GtkFlowBoxChild widget will automatically be inserted between
    the box and the widget.

    Also see #GtkListBox.

    GtkFlowBox was added in GTK+ 3.12.

    # CSS nodes

    |[<!-- language="plain" -->
    flowbox
    ├── flowboxchild
    │   ╰── <child>
    ├── flowboxchild
    │   ╰── <child>
    ┊
    ╰── [rubberband]
    ]|

    GtkFlowBox uses a single CSS node with name flowbox. GtkFlowBoxChild
    uses a single CSS node with name flowboxchild.
    For rubberband selection, a subnode with name rubberband is used.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a GtkFlowBox.
        """
        ...

    def bind_model(self, model: _T.Optional[Gio.ListModel], create_widget_func: FlowBoxCreateWidgetFunc, user_data: _T.Optional[object], user_data_free_func: GLib.DestroyNotify) -> object:
        """
        Binds @model to @box.

        If @box was already bound to a model, that previous binding is
        destroyed.

        The contents of @box are cleared and then filled with widgets that
        represent items from @model. @box is updated whenever @model changes.
        If @model is %NULL, @box is left empty.

        It is undefined to add or remove widgets directly (for example, with
        gtk_flow_box_insert() or gtk_container_add()) while @box is bound to a
        model.

        Note that using a model is incompatible with the filtering and sorting
        functionality in GtkFlowBox. When using a model, filtering and sorting
        should be implemented by the model.
        """
        ...

    def get_activate_on_single_click(self) -> bool:
        """
        Returns whether children activate on single clicks.
        """
        ...

    def get_child_at_index(self, idx: int) -> FlowBoxChild:
        """
        Gets the nth child in the @box.
        """
        ...

    def get_child_at_pos(self, x: int, y: int) -> FlowBoxChild:
        """
        Gets the child in the (@x, @y) position.
        """
        ...

    def get_column_spacing(self) -> int:
        """
        Gets the horizontal spacing.
        """
        ...

    def get_homogeneous(self) -> bool:
        """
        Returns whether the box is homogeneous (all children are the
        same size). See gtk_box_set_homogeneous().
        """
        ...

    def get_max_children_per_line(self) -> int:
        """
        Gets the maximum number of children per line.
        """
        ...

    def get_min_children_per_line(self) -> int:
        """
        Gets the minimum number of children per line.
        """
        ...

    def get_row_spacing(self) -> int:
        """
        Gets the vertical spacing.
        """
        ...

    def get_selected_children(self) -> GLib.List:
        """
        Creates a list of all selected children.
        """
        ...

    def get_selection_mode(self) -> SelectionMode:
        """
        Gets the selection mode of @box.
        """
        ...

    def insert(self, widget: Widget, position: int) -> object:
        """
        Inserts the @widget into @box at @position.

        If a sort function is set, the widget will actually be inserted
        at the calculated position and this function has the same effect
        as gtk_container_add().

        If @position is -1, or larger than the total number of children
        in the @box, then the @widget will be appended to the end.
        """
        ...

    def invalidate_filter(self) -> object:
        """
        Updates the filtering for all children.

        Call this function when the result of the filter
        function on the @box is changed due ot an external
        factor. For instance, this would be used if the
        filter function just looked for a specific search
        term, and the entry with the string has changed.
        """
        ...

    def invalidate_sort(self) -> object:
        """
        Updates the sorting for all children.

        Call this when the result of the sort function on
        @box is changed due to an external factor.
        """
        ...

    def select_all(self) -> object:
        """
        Select all children of @box, if the selection
        mode allows it.
        """
        ...

    def select_child(self, child: FlowBoxChild) -> object:
        """
        Selects a single child of @box, if the selection
        mode allows it.
        """
        ...

    def selected_foreach(self, func: FlowBoxForeachFunc, data: _T.Optional[object]) -> object:
        """
        Calls a function for each selected child.

        Note that the selection cannot be modified from within
        this function.
        """
        ...

    def set_activate_on_single_click(self, single: bool) -> object:
        """
        If @single is %TRUE, children will be activated when you click
        on them, otherwise you need to double-click.
        """
        ...

    def set_column_spacing(self, spacing: int) -> object:
        """
        Sets the horizontal space to add between children.
        See the #GtkFlowBox:column-spacing property.
        """
        ...

    def set_filter_func(self, filter_func: _T.Optional[FlowBoxFilterFunc], user_data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        By setting a filter function on the @box one can decide dynamically
        which of the children to show. For instance, to implement a search
        function that only shows the children matching the search terms.

        The @filter_func will be called for each child after the call, and
        it will continue to be called each time a child changes (via
        gtk_flow_box_child_changed()) or when gtk_flow_box_invalidate_filter()
        is called.

        Note that using a filter function is incompatible with using a model
        (see gtk_flow_box_bind_model()).
        """
        ...

    def set_hadjustment(self, adjustment: Adjustment) -> object:
        """
        Hooks up an adjustment to focus handling in @box.
        The adjustment is also used for autoscrolling during
        rubberband selection. See gtk_scrolled_window_get_hadjustment()
        for a typical way of obtaining the adjustment, and
        gtk_flow_box_set_vadjustment()for setting the vertical
        adjustment.

        The adjustments have to be in pixel units and in the same
        coordinate system as the allocation for immediate children
        of the box.
        """
        ...

    def set_homogeneous(self, homogeneous: bool) -> object:
        """
        Sets the #GtkFlowBox:homogeneous property of @box, controlling
        whether or not all children of @box are given equal space
        in the box.
        """
        ...

    def set_max_children_per_line(self, n_children: int) -> object:
        """
        Sets the maximum number of children to request and
        allocate space for in @box’s orientation.

        Setting the maximum number of children per line
        limits the overall natural size request to be no more
        than @n_children children long in the given orientation.
        """
        ...

    def set_min_children_per_line(self, n_children: int) -> object:
        """
        Sets the minimum number of children to line up
        in @box’s orientation before flowing.
        """
        ...

    def set_row_spacing(self, spacing: int) -> object:
        """
        Sets the vertical space to add between children.
        See the #GtkFlowBox:row-spacing property.
        """
        ...

    def set_selection_mode(self, mode: SelectionMode) -> object:
        """
        Sets how selection works in @box.
        See #GtkSelectionMode for details.
        """
        ...

    def set_sort_func(self, sort_func: _T.Optional[FlowBoxSortFunc], user_data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        By setting a sort function on the @box, one can dynamically
        reorder the children of the box, based on the contents of
        the children.

        The @sort_func will be called for each child after the call,
        and will continue to be called each time a child changes (via
        gtk_flow_box_child_changed()) and when gtk_flow_box_invalidate_sort()
        is called.

        Note that using a sort function is incompatible with using a model
        (see gtk_flow_box_bind_model()).
        """
        ...

    def set_vadjustment(self, adjustment: Adjustment) -> object:
        """
        Hooks up an adjustment to focus handling in @box.
        The adjustment is also used for autoscrolling during
        rubberband selection. See gtk_scrolled_window_get_vadjustment()
        for a typical way of obtaining the adjustment, and
        gtk_flow_box_set_hadjustment()for setting the horizontal
        adjustment.

        The adjustments have to be in pixel units and in the same
        coordinate system as the allocation for immediate children
        of the box.
        """
        ...

    def unselect_all(self) -> object:
        """
        Unselect all children of @box, if the selection
        mode allows it.
        """
        ...

    def unselect_child(self, child: FlowBoxChild) -> object:
        """
        Unselects a single child of @box, if the selection
        mode allows it.
        """
        ...


    ...

class FlowBoxAccessible(ContainerAccessible, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class FlowBoxChild(Bin, Atk.ImplementorIface, Buildable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkFlowBoxChild, to be used as a child
        of a #GtkFlowBox.
        """
        ...

    def changed(self) -> object:
        """
        Marks @child as changed, causing any state that depends on this
        to be updated. This affects sorting and filtering.

        Note that calls to this method must be in sync with the data
        used for the sorting and filtering functions. For instance, if
        the list is mirroring some external data set, and *two* children
        changed in the external data set when you call
        gtk_flow_box_child_changed() on the first child, the sort function
        must only read the new data for the first of the two changed
        children, otherwise the resorting of the children will be wrong.

        This generally means that if you don’t fully control the data
        model, you have to duplicate the data that affects the sorting
        and filtering functions into the widgets themselves. Another
        alternative is to call gtk_flow_box_invalidate_sort() on any
        model change, but that is more expensive.
        """
        ...

    def get_index(self) -> int:
        """
        Gets the current index of the @child in its #GtkFlowBox container.
        """
        ...

    def is_selected(self) -> bool:
        """
        Returns whether the @child is currently selected in its
        #GtkFlowBox container.
        """
        ...


    ...

class FlowBoxChildAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class FontButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable, FontChooser):
    """
    The #GtkFontButton is a button which displays the currently selected
    font an allows to open a font chooser dialog to change the font.
    It is suitable widget for selecting a font in a preference dialog.

    # CSS nodes

    GtkFontButton has a single CSS node with name button and style class .font.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new font picker widget.
        """
        ...


    @classmethod
    def new_with_font(cls, fontname: str) -> Widget:
        """
        Creates a new font picker widget.
        """
        ...

    def get_font_name(self) -> str:
        """
        Retrieves the name of the currently selected font. This name includes
        style and size information as well. If you want to render something
        with the font, use this string with pango_font_description_from_string() .
        If you’re interested in peeking certain values (family name,
        style, size, weight) just query these properties from the
        #PangoFontDescription object.
        """
        ...

    def get_show_size(self) -> bool:
        """
        Returns whether the font size will be shown in the label.
        """
        ...

    def get_show_style(self) -> bool:
        """
        Returns whether the name of the font style will be shown in the label.
        """
        ...

    def get_title(self) -> str:
        """
        Retrieves the title of the font chooser dialog.
        """
        ...

    def get_use_font(self) -> bool:
        """
        Returns whether the selected font is used in the label.
        """
        ...

    def get_use_size(self) -> bool:
        """
        Returns whether the selected size is used in the label.
        """
        ...

    def set_font_name(self, fontname: str) -> bool:
        """
        Sets or updates the currently-displayed font in font picker dialog.
        """
        ...

    def set_show_size(self, show_size: bool) -> object:
        """
        If @show_size is %TRUE, the font size will be displayed along with the name of the selected font.
        """
        ...

    def set_show_style(self, show_style: bool) -> object:
        """
        If @show_style is %TRUE, the font style will be displayed along with name of the selected font.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the title for the font chooser dialog.
        """
        ...

    def set_use_font(self, use_font: bool) -> object:
        """
        If @use_font is %TRUE, the font name will be written using the selected font.
        """
        ...

    def set_use_size(self, use_size: bool) -> object:
        """
        If @use_size is %TRUE, the font name will be written using the selected size.
        """
        ...


    ...

class FontChooserDialog(Dialog, Atk.ImplementorIface, Buildable, FontChooser):
    """
    The #GtkFontChooserDialog widget is a dialog for selecting a font.
    It implements the #GtkFontChooser interface.

    # GtkFontChooserDialog as GtkBuildable

    The GtkFontChooserDialog implementation of the #GtkBuildable
    interface exposes the buttons with the names “select_button”
    and “cancel_button”.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: _T.Optional[str], parent: _T.Optional[Window]) -> Widget:
        """
        Creates a new #GtkFontChooserDialog.
        """
        ...


    ...

class FontChooserWidget(Box, Atk.ImplementorIface, Buildable, FontChooser, Orientable):
    """
    The #GtkFontChooserWidget widget lists the available fonts,
    styles and sizes, allowing the user to select a font. It is
    used in the #GtkFontChooserDialog widget to provide a
    dialog box for selecting fonts.

    To set the font which is initially selected, use
    gtk_font_chooser_set_font() or gtk_font_chooser_set_font_desc().

    To get the selected font use gtk_font_chooser_get_font() or
    gtk_font_chooser_get_font_desc().

    To change the text which is shown in the preview area, use
    gtk_font_chooser_set_preview_text().

    # CSS nodes

    GtkFontChooserWidget has a single CSS node with name fontchooser.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkFontChooserWidget.
        """
        ...


    ...

class FontSelection(Box, Atk.ImplementorIface, Buildable, Orientable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkFontSelection.
        """
        ...

    def get_face(self) -> Pango.FontFace:
        """
        Gets the #PangoFontFace representing the selected font group
        details (i.e. family, slant, weight, width, etc).
        """
        ...

    def get_face_list(self) -> Widget:
        """
        This returns the #GtkTreeView which lists all styles available for
        the selected font. For example, “Regular”, “Bold”, etc.
        """
        ...

    def get_family(self) -> Pango.FontFamily:
        """
        Gets the #PangoFontFamily representing the selected font family.
        """
        ...

    def get_family_list(self) -> Widget:
        """
        This returns the #GtkTreeView that lists font families, for
        example, “Sans”, “Serif”, etc.
        """
        ...

    def get_font_name(self) -> str:
        """
        Gets the currently-selected font name.

        Note that this can be a different string than what you set with
        gtk_font_selection_set_font_name(), as the font selection widget may
        normalize font names and thus return a string with a different structure.
        For example, “Helvetica Italic Bold 12” could be normalized to
        “Helvetica Bold Italic 12”. Use pango_font_description_equal()
        if you want to compare two font descriptions.
        """
        ...

    def get_preview_entry(self) -> Widget:
        """
        This returns the #GtkEntry used to display the font as a preview.
        """
        ...

    def get_preview_text(self) -> str:
        """
        Gets the text displayed in the preview area.
        """
        ...

    def get_size(self) -> int:
        """
        The selected font size.
        """
        ...

    def get_size_entry(self) -> Widget:
        """
        This returns the #GtkEntry used to allow the user to edit the font
        number manually instead of selecting it from the list of font sizes.
        """
        ...

    def get_size_list(self) -> Widget:
        """
        This returns the #GtkTreeView used to list font sizes.
        """
        ...

    def set_font_name(self, fontname: str) -> bool:
        """
        Sets the currently-selected font.

        Note that the @fontsel needs to know the screen in which it will appear
        for this to work; this can be guaranteed by simply making sure that the
        @fontsel is inserted in a toplevel window before you call this function.
        """
        ...

    def set_preview_text(self, text: str) -> object:
        """
        Sets the text displayed in the preview area.
        The @text is used to show how the selected font looks.
        """
        ...


    ...

class FontSelectionDialog(Dialog, Atk.ImplementorIface, Buildable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: str) -> Widget:
        """
        Creates a new #GtkFontSelectionDialog.
        """
        ...

    def get_cancel_button(self) -> Widget:
        """
        Gets the “Cancel” button.
        """
        ...

    def get_font_name(self) -> str:
        """
        Gets the currently-selected font name.

        Note that this can be a different string than what you set with
        gtk_font_selection_dialog_set_font_name(), as the font selection widget
        may normalize font names and thus return a string with a different
        structure. For example, “Helvetica Italic Bold 12” could be normalized
        to “Helvetica Bold Italic 12”.  Use pango_font_description_equal()
        if you want to compare two font descriptions.
        """
        ...

    def get_font_selection(self) -> Widget:
        """
        Retrieves the #GtkFontSelection widget embedded in the dialog.
        """
        ...

    def get_ok_button(self) -> Widget:
        """
        Gets the “OK” button.
        """
        ...

    def get_preview_text(self) -> str:
        """
        Gets the text displayed in the preview area.
        """
        ...

    def set_font_name(self, fontname: str) -> bool:
        """
        Sets the currently selected font.
        """
        ...

    def set_preview_text(self, text: str) -> object:
        """
        Sets the text displayed in the preview area.
        """
        ...


    ...

class Frame(Bin, Atk.ImplementorIface, Buildable):
    """
    The frame widget is a bin that surrounds its child with a decorative
    frame and an optional label. If present, the label is drawn in a gap
    in the top side of the frame. The position of the label can be
    controlled with gtk_frame_set_label_align().

    # GtkFrame as GtkBuildable

    The GtkFrame implementation of the #GtkBuildable interface supports
    placing a child in the label position by specifying “label” as the
    “type” attribute of a `<child>` element. A normal content child can
    be specified without specifying a `<child>` type attribute.

    An example of a UI definition fragment with `GtkFrame`:

    |[<!-- language="xml" -->
    <object class="GtkFrame">
      <child type="label">
        <object class="GtkLabel" id="frame-label"/>
      </child>
      <child>
        <object class="GtkEntry" id="frame-content"/>
      </child>
    </object>
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    frame
    ├── border[.flat]
    ├── <label widget>
    ╰── <child>
    ]|

    GtkFrame has a main CSS node named “frame” and a subnode named “border”. The
    “border” node is used to draw the visible border. You can set the appearance
    of the border using CSS properties like “border-style” on the “border” node.

    The border node can be given the style class “.flat”, which is used by themes
    to disable drawing of the border. To do this from code, call
    gtk_frame_set_shadow_type() with %GTK_SHADOW_NONE to add the “.flat” class or
    any other shadow type to remove it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, label: _T.Optional[str]) -> Widget:
        """
        Creates a new #GtkFrame, with optional label @label.
        If @label is %NULL, the label is omitted.
        """
        ...

    def get_label(self) -> str:
        """
        If the frame’s label widget is a #GtkLabel, returns the
        text in the label widget. (The frame will have a #GtkLabel
        for the label widget if a non-%NULL argument was passed
        to gtk_frame_new().)
        """
        ...

    def get_label_align(self, xalign: float, yalign: float) -> object:
        """
        Retrieves the X and Y alignment of the frame’s label. See
        gtk_frame_set_label_align().
        """
        ...

    def get_label_widget(self) -> Widget:
        """
        Retrieves the label widget for the frame. See
        gtk_frame_set_label_widget().
        """
        ...

    def get_shadow_type(self) -> ShadowType:
        """
        Retrieves the shadow type of the frame. See
        gtk_frame_set_shadow_type().
        """
        ...

    def set_label(self, label: _T.Optional[str]) -> object:
        """
        Removes the current #GtkFrame:label-widget. If @label is not %NULL, creates a
        new #GtkLabel with that text and adds it as the #GtkFrame:label-widget.
        """
        ...

    def set_label_align(self, xalign: float, yalign: float) -> object:
        """
        Sets the alignment of the frame widget’s label. The
        default values for a newly created frame are 0.0 and 0.5.
        """
        ...

    def set_label_widget(self, label_widget: _T.Optional[Widget]) -> object:
        """
        Sets the #GtkFrame:label-widget for the frame. This is the widget that
        will appear embedded in the top edge of the frame as a title.
        """
        ...

    def set_shadow_type(self, type: ShadowType) -> object:
        """
        Sets the #GtkFrame:shadow-type for @frame, i.e. whether it is drawn without
        (%GTK_SHADOW_NONE) or with (other values) a visible border. Values other than
        %GTK_SHADOW_NONE are treated identically by GtkFrame. The chosen type is
        applied by removing or adding the .flat class to the CSS node named border.
        """
        ...


    ...

class FrameAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class GLArea(Widget, Atk.ImplementorIface, Buildable):
    """
    #GtkGLArea is a widget that allows drawing with OpenGL.

    #GtkGLArea sets up its own #GdkGLContext for the window it creates, and
    creates a custom GL framebuffer that the widget will do GL rendering onto.
    It also ensures that this framebuffer is the default GL rendering target
    when rendering.

    In order to draw, you have to connect to the #GtkGLArea::render signal,
    or subclass #GtkGLArea and override the @GtkGLAreaClass.render() virtual
    function.

    The #GtkGLArea widget ensures that the #GdkGLContext is associated with
    the widget's drawing area, and it is kept updated when the size and
    position of the drawing area changes.

    ## Drawing with GtkGLArea ##

    The simplest way to draw using OpenGL commands in a #GtkGLArea is to
    create a widget instance and connect to the #GtkGLArea::render signal:

    |[<!-- language="C" -->
      // create a GtkGLArea instance
      GtkWidget *gl_area = gtk_gl_area_new ();

      // connect to the "render" signal
      g_signal_connect (gl_area, "render", G_CALLBACK (render), NULL);
    ]|

    The `render()` function will be called when the #GtkGLArea is ready
    for you to draw its content:

    |[<!-- language="C" -->
      static gboolean
      render (GtkGLArea *area, GdkGLContext *context)
      {
        // inside this function it's safe to use GL; the given
        // #GdkGLContext has been made current to the drawable
        // surface used by the #GtkGLArea and the viewport has
        // already been set to be the size of the allocation

        // we can start by clearing the buffer
        glClearColor (0, 0, 0, 0);
        glClear (GL_COLOR_BUFFER_BIT);

        // draw your object
        draw_an_object ();

        // we completed our drawing; the draw commands will be
        // flushed at the end of the signal emission chain, and
        // the buffers will be drawn on the window
        return TRUE;
      }
    ]|

    If you need to initialize OpenGL state, e.g. buffer objects or
    shaders, you should use the #GtkWidget::realize signal; you
    can use the #GtkWidget::unrealize signal to clean up. Since the
    #GdkGLContext creation and initialization may fail, you will
    need to check for errors, using gtk_gl_area_get_error(). An example
    of how to safely initialize the GL state is:

    |[<!-- language="C" -->
      static void
      on_realize (GtkGLarea *area)
      {
        // We need to make the context current if we want to
        // call GL API
        gtk_gl_area_make_current (area);

        // If there were errors during the initialization or
        // when trying to make the context current, this
        // function will return a #GError for you to catch
        if (gtk_gl_area_get_error (area) != NULL)
          return;

        // You can also use gtk_gl_area_set_error() in order
        // to show eventual initialization errors on the
        // GtkGLArea widget itself
        GError *internal_error = NULL;
        init_buffer_objects (&error);
        if (error != NULL)
          {
            gtk_gl_area_set_error (area, error);
            g_error_free (error);
            return;
          }

        init_shaders (&error);
        if (error != NULL)
          {
            gtk_gl_area_set_error (area, error);
            g_error_free (error);
            return;
          }
      }
    ]|

    If you need to change the options for creating the #GdkGLContext
    you should use the #GtkGLArea::create-context signal.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkGLArea widget.
        """
        ...

    def attach_buffers(self) -> object:
        """
        Ensures that the @area framebuffer object is made the current draw
        and read target, and that all the required buffers for the @area
        are created and bound to the frambuffer.

        This function is automatically called before emitting the
        #GtkGLArea::render signal, and doesn't normally need to be called
        by application code.
        """
        ...

    def get_auto_render(self) -> bool:
        """
        Returns whether the area is in auto render mode or not.
        """
        ...

    def get_context(self) -> Gdk.GLContext:
        """
        Retrieves the #GdkGLContext used by @area.
        """
        ...

    def get_error(self) -> GLib.Error:
        """
        Gets the current error set on the @area.
        """
        ...

    def get_has_alpha(self) -> bool:
        """
        Returns whether the area has an alpha component.
        """
        ...

    def get_has_depth_buffer(self) -> bool:
        """
        Returns whether the area has a depth buffer.
        """
        ...

    def get_has_stencil_buffer(self) -> bool:
        """
        Returns whether the area has a stencil buffer.
        """
        ...

    def get_required_version(self, major: int, minor: int) -> object:
        """
        Retrieves the required version of OpenGL set
        using gtk_gl_area_set_required_version().
        """
        ...

    def get_use_es(self) -> bool:
        """
        Retrieves the value set by gtk_gl_area_set_use_es().
        """
        ...

    def make_current(self) -> object:
        """
        Ensures that the #GdkGLContext used by @area is associated with
        the #GtkGLArea.

        This function is automatically called before emitting the
        #GtkGLArea::render signal, and doesn't normally need to be called
        by application code.
        """
        ...

    def queue_render(self) -> object:
        """
        Marks the currently rendered data (if any) as invalid, and queues
        a redraw of the widget, ensuring that the #GtkGLArea::render signal
        is emitted during the draw.

        This is only needed when the gtk_gl_area_set_auto_render() has
        been called with a %FALSE value. The default behaviour is to
        emit #GtkGLArea::render on each draw.
        """
        ...

    def set_auto_render(self, auto_render: bool) -> object:
        """
        If @auto_render is %TRUE the #GtkGLArea::render signal will be
        emitted every time the widget draws. This is the default and is
        useful if drawing the widget is faster.

        If @auto_render is %FALSE the data from previous rendering is kept
        around and will be used for drawing the widget the next time,
        unless the window is resized. In order to force a rendering
        gtk_gl_area_queue_render() must be called. This mode is useful when
        the scene changes seldomly, but takes a long time to redraw.
        """
        ...

    def set_error(self, error: _T.Optional[GLib.Error]) -> object:
        """
        Sets an error on the area which will be shown instead of the
        GL rendering. This is useful in the #GtkGLArea::create-context
        signal if GL context creation fails.
        """
        ...

    def set_has_alpha(self, has_alpha: bool) -> object:
        """
        If @has_alpha is %TRUE the buffer allocated by the widget will have
        an alpha channel component, and when rendering to the window the
        result will be composited over whatever is below the widget.

        If @has_alpha is %FALSE there will be no alpha channel, and the
        buffer will fully replace anything below the widget.
        """
        ...

    def set_has_depth_buffer(self, has_depth_buffer: bool) -> object:
        """
        If @has_depth_buffer is %TRUE the widget will allocate and
        enable a depth buffer for the target framebuffer. Otherwise
        there will be none.
        """
        ...

    def set_has_stencil_buffer(self, has_stencil_buffer: bool) -> object:
        """
        If @has_stencil_buffer is %TRUE the widget will allocate and
        enable a stencil buffer for the target framebuffer. Otherwise
        there will be none.
        """
        ...

    def set_required_version(self, major: int, minor: int) -> object:
        """
        Sets the required version of OpenGL to be used when creating the context
        for the widget.

        This function must be called before the area has been realized.
        """
        ...

    def set_use_es(self, use_es: bool) -> object:
        """
        Sets whether the @area should create an OpenGL or an OpenGL ES context.

        You should check the capabilities of the #GdkGLContext before drawing
        with either API.
        """
        ...


    ...

class Gesture(EventController):
    """
    #GtkGesture is the base object for gesture recognition, although this
    object is quite generalized to serve as a base for multi-touch gestures,
    it is suitable to implement single-touch and pointer-based gestures (using
    the special %NULL #GdkEventSequence value for these).

    The number of touches that a #GtkGesture need to be recognized is controlled
    by the #GtkGesture:n-points property, if a gesture is keeping track of less
    or more than that number of sequences, it won't check wether the gesture
    is recognized.

    As soon as the gesture has the expected number of touches, the gesture will
    run the #GtkGesture::check signal regularly on input events until the gesture
    is recognized, the criteria to consider a gesture as "recognized" is left to
    #GtkGesture subclasses.

    A recognized gesture will then emit the following signals:
    - #GtkGesture::begin when the gesture is recognized.
    - A number of #GtkGesture::update, whenever an input event is processed.
    - #GtkGesture::end when the gesture is no longer recognized.

    ## Event propagation

    In order to receive events, a gesture needs to either set a propagation phase
    through gtk_event_controller_set_propagation_phase(), or feed those manually
    through gtk_event_controller_handle_event().

    In the capture phase, events are propagated from the toplevel down to the
    target widget, and gestures that are attached to containers above the widget
    get a chance to interact with the event before it reaches the target.

    After the capture phase, GTK+ emits the traditional #GtkWidget::button-press-event,
    #GtkWidget::button-release-event, #GtkWidget::touch-event, etc signals. Gestures
    with the %GTK_PHASE_TARGET phase are fed events from the default #GtkWidget::event
    handlers.

    In the bubble phase, events are propagated up from the target widget to the
    toplevel, and gestures that are attached to containers above the widget get
    a chance to interact with events that have not been handled yet.

    ## States of a sequence # {#touch-sequence-states}

    Whenever input interaction happens, a single event may trigger a cascade of
    #GtkGestures, both across the parents of the widget receiving the event and
    in parallel within an individual widget. It is a responsibility of the
    widgets using those gestures to set the state of touch sequences accordingly
    in order to enable cooperation of gestures around the #GdkEventSequences
    triggering those.

    Within a widget, gestures can be grouped through gtk_gesture_group(),
    grouped gestures synchronize the state of sequences, so calling
    gtk_gesture_set_sequence_state() on one will effectively propagate
    the state throughout the group.

    By default, all sequences start out in the #GTK_EVENT_SEQUENCE_NONE state,
    sequences in this state trigger the gesture event handler, but event
    propagation will continue unstopped by gestures.

    If a sequence enters into the #GTK_EVENT_SEQUENCE_DENIED state, the gesture
    group will effectively ignore the sequence, letting events go unstopped
    through the gesture, but the "slot" will still remain occupied while
    the touch is active.

    If a sequence enters in the #GTK_EVENT_SEQUENCE_CLAIMED state, the gesture
    group will grab all interaction on the sequence, by:
    - Setting the same sequence to #GTK_EVENT_SEQUENCE_DENIED on every other gesture
      group within the widget, and every gesture on parent widgets in the propagation
      chain.
    - calling #GtkGesture::cancel on every gesture in widgets underneath in the
      propagation chain.
    - Stopping event propagation after the gesture group handles the event.

    Note: if a sequence is set early to #GTK_EVENT_SEQUENCE_CLAIMED on
    #GDK_TOUCH_BEGIN/#GDK_BUTTON_PRESS (so those events are captured before
    reaching the event widget, this implies #GTK_PHASE_CAPTURE), one similar
    event will emulated if the sequence changes to #GTK_EVENT_SEQUENCE_DENIED.
    This way event coherence is preserved before event propagation is unstopped
    again.

    Sequence states can't be changed freely, see gtk_gesture_set_sequence_state()
    to know about the possible lifetimes of a #GdkEventSequence.

    ## Touchpad gestures

    On the platforms that support it, #GtkGesture will handle transparently
    touchpad gesture events. The only precautions users of #GtkGesture should do
    to enable this support are:
    - Enabling %GDK_TOUCHPAD_GESTURE_MASK on their #GdkWindows
    - If the gesture has %GTK_PHASE_NONE, ensuring events of type
      %GDK_TOUCHPAD_SWIPE and %GDK_TOUCHPAD_PINCH are handled by the #GtkGesture
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_bounding_box(self, rect: Gdk.Rectangle) -> bool:
        """
        If there are touch sequences being currently handled by @gesture,
        this function returns %TRUE and fills in @rect with the bounding
        box containing all active touches. Otherwise, %FALSE will be
        returned.

        Note: This function will yield unexpected results on touchpad
        gestures. Since there is no correlation between physical and
        pixel distances, these will look as if constrained in an
        infinitely small area, @rect width and height will thus be 0
        regardless of the number of touchpoints.
        """
        ...

    def get_bounding_box_center(self, x: float, y: float) -> bool:
        """
        If there are touch sequences being currently handled by @gesture,
        this function returns %TRUE and fills in @x and @y with the center
        of the bounding box containing all active touches. Otherwise, %FALSE
        will be returned.
        """
        ...

    def get_device(self) -> Gdk.Device:
        """
        Returns the master #GdkDevice that is currently operating
        on @gesture, or %NULL if the gesture is not being interacted.
        """
        ...

    def get_group(self) -> GLib.List:
        """
        Returns all gestures in the group of @gesture
        """
        ...

    def get_last_event(self, sequence: _T.Optional[Gdk.EventSequence]) -> Gdk.Event:
        """
        Returns the last event that was processed for @sequence.

        Note that the returned pointer is only valid as long as the @sequence
        is still interpreted by the @gesture. If in doubt, you should make
        a copy of the event.
        """
        ...

    def get_last_updated_sequence(self) -> Gdk.EventSequence:
        """
        Returns the #GdkEventSequence that was last updated on @gesture.
        """
        ...

    def get_point(self, sequence: _T.Optional[Gdk.EventSequence], x: float, y: float) -> bool:
        """
        If @sequence is currently being interpreted by @gesture, this
        function returns %TRUE and fills in @x and @y with the last coordinates
        stored for that event sequence. The coordinates are always relative to the
        widget allocation.
        """
        ...

    def get_sequence_state(self, sequence: Gdk.EventSequence) -> EventSequenceState:
        """
        Returns the @sequence state, as seen by @gesture.
        """
        ...

    def get_sequences(self) -> GLib.List:
        """
        Returns the list of #GdkEventSequences currently being interpreted
        by @gesture.
        """
        ...

    def get_window(self) -> Gdk.Window:
        """
        Returns the user-defined window that receives the events
        handled by @gesture. See gtk_gesture_set_window() for more
        information.
        """
        ...

    def group(self, gesture: Gesture) -> object:
        """
        Adds @gesture to the same group than @group_gesture. Gestures
        are by default isolated in their own groups.

        When gestures are grouped, the state of #GdkEventSequences
        is kept in sync for all of those, so calling gtk_gesture_set_sequence_state(),
        on one will transfer the same value to the others.

        Groups also perform an "implicit grabbing" of sequences, if a
        #GdkEventSequence state is set to #GTK_EVENT_SEQUENCE_CLAIMED on one group,
        every other gesture group attached to the same #GtkWidget will switch the
        state for that sequence to #GTK_EVENT_SEQUENCE_DENIED.
        """
        ...

    def handles_sequence(self, sequence: _T.Optional[Gdk.EventSequence]) -> bool:
        """
        Returns %TRUE if @gesture is currently handling events corresponding to
        @sequence.
        """
        ...

    def is_active(self) -> bool:
        """
        Returns %TRUE if the gesture is currently active.
        A gesture is active meanwhile there are touch sequences
        interacting with it.
        """
        ...

    def is_grouped_with(self, other: Gesture) -> bool:
        """
        Returns %TRUE if both gestures pertain to the same group.
        """
        ...

    def is_recognized(self) -> bool:
        """
        Returns %TRUE if the gesture is currently recognized.
        A gesture is recognized if there are as many interacting
        touch sequences as required by @gesture, and #GtkGesture::check
        returned %TRUE for the sequences being currently interpreted.
        """
        ...

    def set_sequence_state(self, sequence: Gdk.EventSequence, state: EventSequenceState) -> bool:
        """
        Sets the state of @sequence in @gesture. Sequences start
        in state #GTK_EVENT_SEQUENCE_NONE, and whenever they change
        state, they can never go back to that state. Likewise,
        sequences in state #GTK_EVENT_SEQUENCE_DENIED cannot turn
        back to a not denied state. With these rules, the lifetime
        of an event sequence is constrained to the next four:

        * None
        * None → Denied
        * None → Claimed
        * None → Claimed → Denied

        Note: Due to event handling ordering, it may be unsafe to
        set the state on another gesture within a #GtkGesture::begin
        signal handler, as the callback might be executed before
        the other gesture knows about the sequence. A safe way to
        perform this could be:

        |[
        static void
        first_gesture_begin_cb (GtkGesture       *first_gesture,
                                GdkEventSequence *sequence,
                                gpointer          user_data)
        {
          gtk_gesture_set_sequence_state (first_gesture, sequence, GTK_EVENT_SEQUENCE_CLAIMED);
          gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
        }

        static void
        second_gesture_begin_cb (GtkGesture       *second_gesture,
                                 GdkEventSequence *sequence,
                                 gpointer          user_data)
        {
          if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_CLAIMED)
            gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
        }
        ]|

        If both gestures are in the same group, just set the state on
        the gesture emitting the event, the sequence will be already
        be initialized to the group's global state when the second
        gesture processes the event.
        """
        ...

    def set_state(self, state: EventSequenceState) -> bool:
        """
        Sets the state of all sequences that @gesture is currently
        interacting with. See gtk_gesture_set_sequence_state()
        for more details on sequence states.
        """
        ...

    def set_window(self, window: _T.Optional[Gdk.Window]) -> object:
        """
        Sets a specific window to receive events about, so @gesture
        will effectively handle only events targeting @window, or
        a child of it. @window must pertain to gtk_event_controller_get_widget().
        """
        ...

    def ungroup(self) -> object:
        """
        Separates @gesture into an isolated group.
        """
        ...


    ...

class GestureDrag(GestureSingle):
    """
    #GtkGestureDrag is a #GtkGesture implementation that recognizes drag
    operations. The drag operation itself can be tracked throught the
    #GtkGestureDrag::drag-begin, #GtkGestureDrag::drag-update and
    #GtkGestureDrag::drag-end signals, or the relevant coordinates be
    extracted through gtk_gesture_drag_get_offset() and
    gtk_gesture_drag_get_start_point().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> Gesture:
        """
        Returns a newly created #GtkGesture that recognizes drags.
        """
        ...

    def get_offset(self, x: _T.Optional[float], y: _T.Optional[float]) -> bool:
        """
        If the @gesture is active, this function returns %TRUE and
        fills in @x and @y with the coordinates of the current point,
        as an offset to the starting drag point.
        """
        ...

    def get_start_point(self, x: _T.Optional[float], y: _T.Optional[float]) -> bool:
        """
        If the @gesture is active, this function returns %TRUE
        and fills in @x and @y with the drag start coordinates,
        in window-relative coordinates.
        """
        ...


    ...

class GestureLongPress(GestureSingle):
    """
    #GtkGestureLongPress is a #GtkGesture implementation able to recognize
    long presses, triggering the #GtkGestureLongPress::pressed after the
    timeout is exceeded.

    If the touchpoint is lifted before the timeout passes, or if it drifts
    too far of the initial press point, the #GtkGestureLongPress::cancelled
    signal will be emitted.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> Gesture:
        """
        Returns a newly created #GtkGesture that recognizes long presses.
        """
        ...


    ...

class GestureMultiPress(GestureSingle):
    """
    #GtkGestureMultiPress is a #GtkGesture implementation able to recognize
    multiple clicks on a nearby zone, which can be listened for through the
    #GtkGestureMultiPress::pressed signal. Whenever time or distance between
    clicks exceed the GTK+ defaults, #GtkGestureMultiPress::stopped is emitted,
    and the click counter is reset.

    Callers may also restrict the area that is considered valid for a >1
    touch/button press through gtk_gesture_multi_press_set_area(), so any
    click happening outside that area is considered to be a first click of
    its own.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> Gesture:
        """
        Returns a newly created #GtkGesture that recognizes single and multiple
        presses.
        """
        ...

    def get_area(self, rect: Gdk.Rectangle) -> bool:
        """
        If an area was set through gtk_gesture_multi_press_set_area(),
        this function will return %TRUE and fill in @rect with the
        press area. See gtk_gesture_multi_press_set_area() for more
        details on what the press area represents.
        """
        ...

    def set_area(self, rect: _T.Optional[Gdk.Rectangle]) -> object:
        """
        If @rect is non-%NULL, the press area will be checked to be
        confined within the rectangle, otherwise the button count
        will be reset so the press is seen as being the first one.
        If @rect is %NULL, the area will be reset to an unrestricted
        state.

        Note: The rectangle is only used to determine whether any
        non-first click falls within the expected area. This is not
        akin to an input shape.
        """
        ...


    ...

class GesturePan(GestureDrag):
    """
    #GtkGesturePan is a #GtkGesture implementation able to recognize
    pan gestures, those are drags that are locked to happen along one
    axis. The axis that a #GtkGesturePan handles is defined at
    construct time, and can be changed through
    gtk_gesture_pan_set_orientation().

    When the gesture starts to be recognized, #GtkGesturePan will
    attempt to determine as early as possible whether the sequence
    is moving in the expected direction, and denying the sequence if
    this does not happen.

    Once a panning gesture along the expected axis is recognized,
    the #GtkGesturePan::pan signal will be emitted as input events
    are received, containing the offset in the given axis.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget, orientation: Orientation) -> Gesture:
        """
        Returns a newly created #GtkGesture that recognizes pan gestures.
        """
        ...

    def get_orientation(self) -> Orientation:
        """
        Returns the orientation of the pan gestures that this @gesture expects.
        """
        ...

    def set_orientation(self, orientation: Orientation) -> object:
        """
        Sets the orientation to be expected on pan gestures.
        """
        ...


    ...

class GestureRotate(Gesture):
    """
    #GtkGestureRotate is a #GtkGesture implementation able to recognize
    2-finger rotations, whenever the angle between both handled sequences
    changes, the #GtkGestureRotate::angle-changed signal is emitted.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> Gesture:
        """
        Returns a newly created #GtkGesture that recognizes 2-touch
        rotation gestures.
        """
        ...

    def get_angle_delta(self) -> float:
        """
        If @gesture is active, this function returns the angle difference
        in radians since the gesture was first recognized. If @gesture is
        not active, 0 is returned.
        """
        ...


    ...

class GestureSingle(Gesture):
    """
    #GtkGestureSingle is a subclass of #GtkGesture, optimized (although
    not restricted) for dealing with mouse and single-touch gestures. Under
    interaction, these gestures stick to the first interacting sequence, which
    is accessible through gtk_gesture_single_get_current_sequence() while the
    gesture is being interacted with.

    By default gestures react to both %GDK_BUTTON_PRIMARY and touch
    events, gtk_gesture_single_set_touch_only() can be used to change the
    touch behavior. Callers may also specify a different mouse button number
    to interact with through gtk_gesture_single_set_button(), or react to any
    mouse button by setting 0. While the gesture is active, the button being
    currently pressed can be known through gtk_gesture_single_get_current_button().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_button(self) -> int:
        """
        Returns the button number @gesture listens for, or 0 if @gesture
        reacts to any button press.
        """
        ...

    def get_current_button(self) -> int:
        """
        Returns the button number currently interacting with @gesture, or 0 if there
        is none.
        """
        ...

    def get_current_sequence(self) -> Gdk.EventSequence:
        """
        Returns the event sequence currently interacting with @gesture.
        This is only meaningful if gtk_gesture_is_active() returns %TRUE.
        """
        ...

    def get_exclusive(self) -> bool:
        """
        Gets whether a gesture is exclusive. For more information, see
        gtk_gesture_single_set_exclusive().
        """
        ...

    def get_touch_only(self) -> bool:
        """
        Returns %TRUE if the gesture is only triggered by touch events.
        """
        ...

    def set_button(self, button: int) -> object:
        """
        Sets the button number @gesture listens to. If non-0, every
        button press from a different button number will be ignored.
        Touch events implicitly match with button 1.
        """
        ...

    def set_exclusive(self, exclusive: bool) -> object:
        """
        Sets whether @gesture is exclusive. An exclusive gesture will
        only handle pointer and "pointer emulated" touch events, so at
        any given time, there is only one sequence able to interact with
        those.
        """
        ...

    def set_touch_only(self, touch_only: bool) -> object:
        """
        If @touch_only is %TRUE, @gesture will only handle events of type
        #GDK_TOUCH_BEGIN, #GDK_TOUCH_UPDATE or #GDK_TOUCH_END. If %FALSE,
        mouse events will be handled too.
        """
        ...


    ...

class GestureStylus(GestureSingle):
    """
    #GtkGestureStylus is a #GtkGesture implementation specific to stylus
    input. The provided signals just provide the basic information
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> Gesture:
        """
        Creates a new #GtkGestureStylus.
        """
        ...

    def get_axes(self, axes: object, values: object) -> bool:
        """
        Returns the current values for the requested @axes. This function
        must be called from either the #GtkGestureStylus:down,
        #GtkGestureStylus:motion, #GtkGestureStylus:up or #GtkGestureStylus:proximity
        signals.
        """
        ...

    def get_axis(self, axis: Gdk.AxisUse, value: float) -> bool:
        """
        Returns the current value for the requested @axis. This function
        must be called from either the #GtkGestureStylus:down,
        #GtkGestureStylus:motion, #GtkGestureStylus:up or #GtkGestureStylus:proximity
        signals.
        """
        ...

    def get_device_tool(self) -> Gdk.DeviceTool:
        """
        Returns the #GdkDeviceTool currently driving input through this gesture.
        This function must be called from either the #GtkGestureStylus::down,
        #GtkGestureStylus::motion, #GtkGestureStylus::up or #GtkGestureStylus::proximity
        signal handlers.
        """
        ...


    ...

class GestureSwipe(GestureSingle):
    """
    #GtkGestureSwipe is a #GtkGesture implementation able to recognize
    swipes, after a press/move/.../move/release sequence happens, the
    #GtkGestureSwipe::swipe signal will be emitted, providing the velocity
    and directionality of the sequence at the time it was lifted.

    If the velocity is desired in intermediate points,
    gtk_gesture_swipe_get_velocity() can be called on eg. a
    #GtkGesture::update handler.

    All velocities are reported in pixels/sec units.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> Gesture:
        """
        Returns a newly created #GtkGesture that recognizes swipes.
        """
        ...

    def get_velocity(self, velocity_x: float, velocity_y: float) -> bool:
        """
        If the gesture is recognized, this function returns %TRUE and fill in
        @velocity_x and @velocity_y with the recorded velocity, as per the
        last event(s) processed.
        """
        ...


    ...

class GestureZoom(Gesture):
    """
    #GtkGestureZoom is a #GtkGesture implementation able to recognize
    pinch/zoom gestures, whenever the distance between both tracked
    sequences changes, the #GtkGestureZoom::scale-changed signal is
    emitted to report the scale factor.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, widget: Widget) -> Gesture:
        """
        Returns a newly created #GtkGesture that recognizes zoom
        in/out gestures (usually known as pinch/zoom).
        """
        ...

    def get_scale_delta(self) -> float:
        """
        If @gesture is active, this function returns the zooming difference
        since the gesture was recognized (hence the starting point is
        considered 1:1). If @gesture is not active, 1 is returned.
        """
        ...


    ...

class Grid(Container, Atk.ImplementorIface, Buildable, Orientable):
    """
    GtkGrid is a container which arranges its child widgets in
    rows and columns, with arbitrary positions and horizontal/vertical spans.

    Children are added using gtk_grid_attach(). They can span multiple
    rows or columns. It is also possible to add a child next to an
    existing child, using gtk_grid_attach_next_to(). The behaviour of
    GtkGrid when several children occupy the same grid cell is undefined.

    GtkGrid can be used like a #GtkBox by just using gtk_container_add(),
    which will place children next to each other in the direction determined
    by the #GtkOrientable:orientation property. However, if all you want is a
    single row or column, then #GtkBox is the preferred widget.

    # CSS nodes

    GtkGrid uses a single CSS node with name grid.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new grid widget.
        """
        ...

    def attach(self, child: Widget, left: int, top: int, width: int, height: int) -> object:
        """
        Adds a widget to the grid.

        The position of @child is determined by @left and @top. The
        number of “cells” that @child will occupy is determined by
        @width and @height.
        """
        ...

    def attach_next_to(self, child: Widget, sibling: _T.Optional[Widget], side: PositionType, width: int, height: int) -> object:
        """
        Adds a widget to the grid.

        The widget is placed next to @sibling, on the side determined by
        @side. When @sibling is %NULL, the widget is placed in row (for
        left or right placement) or column 0 (for top or bottom placement),
        at the end indicated by @side.

        Attaching widgets labeled [1], [2], [3] with @sibling == %NULL and
        @side == %GTK_POS_LEFT yields a layout of [3][2][1].
        """
        ...

    def get_baseline_row(self) -> int:
        """
        Returns which row defines the global baseline of @grid.
        """
        ...

    def get_child_at(self, left: int, top: int) -> Widget:
        """
        Gets the child of @grid whose area covers the grid
        cell whose upper left corner is at @left, @top.
        """
        ...

    def get_column_homogeneous(self) -> bool:
        """
        Returns whether all columns of @grid have the same width.
        """
        ...

    def get_column_spacing(self) -> int:
        """
        Returns the amount of space between the columns of @grid.
        """
        ...

    def get_row_baseline_position(self, row: int) -> BaselinePosition:
        """
        Returns the baseline position of @row as set
        by gtk_grid_set_row_baseline_position() or the default value
        %GTK_BASELINE_POSITION_CENTER.
        """
        ...

    def get_row_homogeneous(self) -> bool:
        """
        Returns whether all rows of @grid have the same height.
        """
        ...

    def get_row_spacing(self) -> int:
        """
        Returns the amount of space between the rows of @grid.
        """
        ...

    def insert_column(self, position: int) -> object:
        """
        Inserts a column at the specified position.

        Children which are attached at or to the right of this position
        are moved one column to the right. Children which span across this
        position are grown to span the new column.
        """
        ...

    def insert_next_to(self, sibling: Widget, side: PositionType) -> object:
        """
        Inserts a row or column at the specified position.

        The new row or column is placed next to @sibling, on the side
        determined by @side. If @side is %GTK_POS_TOP or %GTK_POS_BOTTOM,
        a row is inserted. If @side is %GTK_POS_LEFT of %GTK_POS_RIGHT,
        a column is inserted.
        """
        ...

    def insert_row(self, position: int) -> object:
        """
        Inserts a row at the specified position.

        Children which are attached at or below this position
        are moved one row down. Children which span across this
        position are grown to span the new row.
        """
        ...

    def remove_column(self, position: int) -> object:
        """
        Removes a column from the grid.

        Children that are placed in this column are removed,
        spanning children that overlap this column have their
        width reduced by one, and children after the column
        are moved to the left.
        """
        ...

    def remove_row(self, position: int) -> object:
        """
        Removes a row from the grid.

        Children that are placed in this row are removed,
        spanning children that overlap this row have their
        height reduced by one, and children below the row
        are moved up.
        """
        ...

    def set_baseline_row(self, row: int) -> object:
        """
        Sets which row defines the global baseline for the entire grid.
        Each row in the grid can have its own local baseline, but only
        one of those is global, meaning it will be the baseline in the
        parent of the @grid.
        """
        ...

    def set_column_homogeneous(self, homogeneous: bool) -> object:
        """
        Sets whether all columns of @grid will have the same width.
        """
        ...

    def set_column_spacing(self, spacing: int) -> object:
        """
        Sets the amount of space between columns of @grid.
        """
        ...

    def set_row_baseline_position(self, row: int, pos: BaselinePosition) -> object:
        """
        Sets how the baseline should be positioned on @row of the
        grid, in case that row is assigned more space than is requested.
        """
        ...

    def set_row_homogeneous(self, homogeneous: bool) -> object:
        """
        Sets whether all rows of @grid will have the same height.
        """
        ...

    def set_row_spacing(self, spacing: int) -> object:
        """
        Sets the amount of space between rows of @grid.
        """
        ...


    ...

class HBox(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    #GtkHBox is a container that organizes child widgets into a single row.

    Use the #GtkBox packing interface to determine the arrangement,
    spacing, width, and alignment of #GtkHBox children.

    All children are allocated the same height.

    GtkHBox has been deprecated. You can use #GtkBox instead, which is a
    very quick and easy change. If you have derived your own classes from
    GtkHBox, you can simply change the inheritance to derive directly
    from #GtkBox. No further changes are needed, since the default
    value of the #GtkOrientable:orientation property is
    %GTK_ORIENTATION_HORIZONTAL.

    If you have a grid-like layout composed of nested boxes, and you don’t
    need first-child or last-child styling, the recommendation is to switch
    to #GtkGrid. For more information about migrating to #GtkGrid, see
    [Migrating from other containers to GtkGrid][gtk-migrating-GtkGrid].
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, homogeneous: bool, spacing: int) -> Widget:
        """
        Creates a new #GtkHBox.
        """
        ...


    ...

class HButtonBox(ButtonBox, Atk.ImplementorIface, Buildable, Orientable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new horizontal button box.
        """
        ...


    ...

class HPaned(Paned, Atk.ImplementorIface, Buildable, Orientable):
    """
    The HPaned widget is a container widget with two
    children arranged horizontally. The division between
    the two panes is adjustable by the user by dragging
    a handle. See #GtkPaned for details.

    GtkHPaned has been deprecated, use #GtkPaned instead.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Create a new #GtkHPaned
        """
        ...


    ...

class HSV(Widget, Atk.ImplementorIface, Buildable):
    """
    #GtkHSV is the “color wheel” part of a complete color selector widget.
    It allows to select a color by determining its HSV components in an
    intuitive way. Moving the selection around the outer ring changes the hue,
    and moving the selection point inside the inner triangle changes value and
    saturation.

    #GtkHSV has been deprecated together with #GtkColorSelection, where
    it was used.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new HSV color selector.
        """
        ...

    def get_color(self, h: float, s: float, v: float) -> object:
        """
        Queries the current color in an HSV color selector.
        Returned values will be in the [0.0, 1.0] range.
        """
        ...

    def get_metrics(self, size: int, ring_width: int) -> object:
        """
        Queries the size and ring width of an HSV color selector.
        """
        ...

    def is_adjusting(self) -> bool:
        """
        An HSV color selector can be said to be adjusting if multiple rapid
        changes are being made to its value, for example, when the user is
        adjusting the value with the mouse. This function queries whether
        the HSV color selector is being adjusted or not.
        """
        ...

    def set_color(self, h: float, s: float, v: float) -> object:
        """
        Sets the current color in an HSV color selector.
        Color component values must be in the [0.0, 1.0] range.
        """
        ...

    def set_metrics(self, size: int, ring_width: int) -> object:
        """
        Sets the size and ring width of an HSV color selector.
        """
        ...


    ...

class HScale(Scale, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkHScale widget is used to allow the user to select a value using
    a horizontal slider. To create one, use gtk_hscale_new_with_range().

    The position to show the current value, and the number of decimal places
    shown can be set using the parent #GtkScale class’s functions.

    GtkHScale has been deprecated, use #GtkScale instead.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, adjustment: _T.Optional[Adjustment]) -> Widget:
        """
        Creates a new #GtkHScale.
        """
        ...


    @classmethod
    def new_with_range(cls, min: float, max: float, step: float) -> Widget:
        """
        Creates a new horizontal scale widget that lets the user input a
        number between @min and @max (including @min and @max) with the
        increment @step.  @step must be nonzero; it’s the distance the
        slider moves when using the arrow keys to adjust the scale value.

        Note that the way in which the precision is derived works best if @step
        is a power of ten. If the resulting precision is not suitable for your
        needs, use gtk_scale_set_digits() to correct it.
        """
        ...


    ...

class HScrollbar(Scrollbar, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkHScrollbar widget is a widget arranged horizontally creating a
    scrollbar. See #GtkScrollbar for details on
    scrollbars. #GtkAdjustment pointers may be added to handle the
    adjustment of the scrollbar or it may be left %NULL in which case one
    will be created for you. See #GtkScrollbar for a description of what the
    fields in an adjustment represent for a scrollbar.

    GtkHScrollbar has been deprecated, use #GtkScrollbar instead.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, adjustment: _T.Optional[Adjustment]) -> Widget:
        """
        Creates a new horizontal scrollbar.
        """
        ...


    ...

class HSeparator(Separator, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkHSeparator widget is a horizontal separator, used to group the
    widgets within a window. It displays a horizontal line with a shadow to
    make it appear sunken into the interface.

    > The #GtkHSeparator widget is not used as a separator within menus.
    > To create a separator in a menu create an empty #GtkSeparatorMenuItem
    > widget using gtk_separator_menu_item_new() and add it to the menu with
    > gtk_menu_shell_append().

    GtkHSeparator has been deprecated, use #GtkSeparator instead.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkHSeparator.
        """
        ...


    ...

class HandleBox(Bin, Atk.ImplementorIface, Buildable):
    """
    The #GtkHandleBox widget allows a portion of a window to be "torn
    off". It is a bin widget which displays its child and a handle that
    the user can drag to tear off a separate window (the “float
    window”) containing the child widget. A thin
    “ghost” is drawn in the original location of the
    handlebox. By dragging the separate window back to its original
    location, it can be reattached.

    When reattaching, the ghost and float window, must be aligned
    along one of the edges, the “snap edge”.
    This either can be specified by the application programmer
    explicitly, or GTK+ will pick a reasonable default based
    on the handle position.

    To make detaching and reattaching the handlebox as minimally confusing
    as possible to the user, it is important to set the snap edge so that
    the snap edge does not move when the handlebox is deattached. For
    instance, if the handlebox is packed at the bottom of a VBox, then
    when the handlebox is detached, the bottom edge of the handlebox's
    allocation will remain fixed as the height of the handlebox shrinks,
    so the snap edge should be set to %GTK_POS_BOTTOM.

    > #GtkHandleBox has been deprecated. It is very specialized, lacks features
    > to make it useful and most importantly does not fit well into modern
    > application design. Do not use it. There is no replacement.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Create a new handle box.
        """
        ...

    def get_child_detached(self) -> bool:
        """
        Whether the handlebox’s child is currently detached.
        """
        ...

    def get_handle_position(self) -> PositionType:
        """
        Gets the handle position of the handle box. See
        gtk_handle_box_set_handle_position().
        """
        ...

    def get_shadow_type(self) -> ShadowType:
        """
        Gets the type of shadow drawn around the handle box. See
        gtk_handle_box_set_shadow_type().
        """
        ...

    def get_snap_edge(self) -> PositionType:
        """
        Gets the edge used for determining reattachment of the handle box.
        See gtk_handle_box_set_snap_edge().
        """
        ...

    def set_handle_position(self, position: PositionType) -> object:
        """
        Sets the side of the handlebox where the handle is drawn.
        """
        ...

    def set_shadow_type(self, type: ShadowType) -> object:
        """
        Sets the type of shadow to be drawn around the border
        of the handle box.
        """
        ...

    def set_snap_edge(self, edge: PositionType) -> object:
        """
        Sets the snap edge of a handlebox. The snap edge is
        the edge of the detached child that must be aligned
        with the corresponding edge of the “ghost” left
        behind when the child was detached to reattach
        the torn-off window. Usually, the snap edge should
        be chosen so that it stays in the same place on
        the screen when the handlebox is torn off.

        If the snap edge is not set, then an appropriate value
        will be guessed from the handle position. If the
        handle position is %GTK_POS_RIGHT or %GTK_POS_LEFT,
        then the snap edge will be %GTK_POS_TOP, otherwise
        it will be %GTK_POS_LEFT.
        """
        ...


    ...

class HeaderBar(Container, Atk.ImplementorIface, Buildable):
    """
    GtkHeaderBar is similar to a horizontal #GtkBox. It allows children to
    be placed at the start or the end. In addition, it allows a title and
    subtitle to be displayed. The title will be centered with respect to
    the width of the box, even if the children at either side take up
    different amounts of space. The height of the titlebar will be
    set to provide sufficient space for the subtitle, even if none is
    currently set. If a subtitle is not needed, the space reservation
    can be turned off with gtk_header_bar_set_has_subtitle().

    GtkHeaderBar can add typical window frame controls, such as minimize,
    maximize and close buttons, or the window icon.

    For these reasons, GtkHeaderBar is the natural choice for use as the custom
    titlebar widget of a #GtkWindow (see gtk_window_set_titlebar()), as it gives
    features typical of titlebars while allowing the addition of child widgets.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkHeaderBar widget.
        """
        ...

    def get_custom_title(self) -> Widget:
        """
        Retrieves the custom title widget of the header. See
        gtk_header_bar_set_custom_title().
        """
        ...

    def get_decoration_layout(self) -> str:
        """
        Gets the decoration layout set with
        gtk_header_bar_set_decoration_layout().
        """
        ...

    def get_has_subtitle(self) -> bool:
        """
        Retrieves whether the header bar reserves space for
        a subtitle, regardless if one is currently set or not.
        """
        ...

    def get_show_close_button(self) -> bool:
        """
        Returns whether this header bar shows the standard window
        decorations.
        """
        ...

    def get_subtitle(self) -> str:
        """
        Retrieves the subtitle of the header. See gtk_header_bar_set_subtitle().
        """
        ...

    def get_title(self) -> str:
        """
        Retrieves the title of the header. See gtk_header_bar_set_title().
        """
        ...

    def pack_end(self, child: Widget) -> object:
        """
        Adds @child to @bar, packed with reference to the
        end of the @bar.
        """
        ...

    def pack_start(self, child: Widget) -> object:
        """
        Adds @child to @bar, packed with reference to the
        start of the @bar.
        """
        ...

    def set_custom_title(self, title_widget: _T.Optional[Widget]) -> object:
        """
        Sets a custom title for the #GtkHeaderBar.

        The title should help a user identify the current view. This
        supersedes any title set by gtk_header_bar_set_title() or
        gtk_header_bar_set_subtitle(). To achieve the same style as
        the builtin title and subtitle, use the “title” and “subtitle”
        style classes.

        You should set the custom title to %NULL, for the header title
        label to be visible again.
        """
        ...

    def set_decoration_layout(self, layout: _T.Optional[str]) -> object:
        """
        Sets the decoration layout for this header bar, overriding
        the #GtkSettings:gtk-decoration-layout setting.

        There can be valid reasons for overriding the setting, such
        as a header bar design that does not allow for buttons to take
        room on the right, or only offers room for a single close button.
        Split header bars are another example for overriding the
        setting.

        The format of the string is button names, separated by commas.
        A colon separates the buttons that should appear on the left
        from those on the right. Recognized button names are minimize,
        maximize, close, icon (the window icon) and menu (a menu button
        for the fallback app menu).

        For example, “menu:minimize,maximize,close” specifies a menu
        on the left, and minimize, maximize and close buttons on the right.
        """
        ...

    def set_has_subtitle(self, setting: bool) -> object:
        """
        Sets whether the header bar should reserve space
        for a subtitle, even if none is currently set.
        """
        ...

    def set_show_close_button(self, setting: bool) -> object:
        """
        Sets whether this header bar shows the standard window decorations,
        including close, maximize, and minimize.
        """
        ...

    def set_subtitle(self, subtitle: _T.Optional[str]) -> object:
        """
        Sets the subtitle of the #GtkHeaderBar. The title should give a user
        an additional detail to help him identify the current view.

        Note that GtkHeaderBar by default reserves room for the subtitle,
        even if none is currently set. If this is not desired, set the
        #GtkHeaderBar:has-subtitle property to %FALSE.
        """
        ...

    def set_title(self, title: _T.Optional[str]) -> object:
        """
        Sets the title of the #GtkHeaderBar. The title should help a user
        identify the current view. A good title should not include the
        application name.
        """
        ...


    ...

class HeaderBarAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class IMContext(GObject.Object):
    """
    #GtkIMContext defines the interface for GTK+ input methods. An input method
    is used by GTK+ text input widgets like #GtkEntry to map from key events to
    Unicode character strings.

    The default input method can be set programmatically via the
    #GtkSettings:gtk-im-module GtkSettings property. Alternatively, you may set
    the GTK_IM_MODULE environment variable as documented in
    [Running GTK+ Applications][gtk-running].

    The #GtkEntry #GtkEntry:im-module and #GtkTextView #GtkTextView:im-module
    properties may also be used to set input methods for specific widget
    instances. For instance, a certain entry widget might be expected to contain
    certain characters which would be easier to input with a certain input
    method.

    An input method may consume multiple key events in sequence and finally
    output the composed result. This is called preediting, and an input method
    may provide feedback about this process by displaying the intermediate
    composition states as preedit text. For instance, the default GTK+ input
    method implements the input of arbitrary Unicode code points by holding down
    the Control and Shift keys and then typing “U” followed by the hexadecimal
    digits of the code point.  When releasing the Control and Shift keys,
    preediting ends and the character is inserted as text. Ctrl+Shift+u20AC for
    example results in the € sign.

    Additional input methods can be made available for use by GTK+ widgets as
    loadable modules. An input method module is a small shared library which
    implements a subclass of #GtkIMContext or #GtkIMContextSimple and exports
    these four functions:

    |[<!-- language="C" -->
    void im_module_init(GTypeModule *module);
    ]|
    This function should register the #GType of the #GtkIMContext subclass which
    implements the input method by means of g_type_module_register_type(). Note
    that g_type_register_static() cannot be used as the type needs to be
    registered dynamically.

    |[<!-- language="C" -->
    void im_module_exit(void);
    ]|
    Here goes any cleanup code your input method might require on module unload.

    |[<!-- language="C" -->
    void im_module_list(const GtkIMContextInfo ***contexts, int *n_contexts)
    {
      *contexts = info_list;
      *n_contexts = G_N_ELEMENTS (info_list);
    }
    ]|
    This function returns the list of input methods provided by the module. The
    example implementation above shows a common solution and simply returns a
    pointer to statically defined array of #GtkIMContextInfo items for each
    provided input method.

    |[<!-- language="C" -->
    GtkIMContext * im_module_create(const gchar *context_id);
    ]|
    This function should return a pointer to a newly created instance of the
    #GtkIMContext subclass identified by @context_id. The context ID is the same
    as specified in the #GtkIMContextInfo array returned by im_module_list().

    After a new loadable input method module has been installed on the system,
    the configuration file `gtk.immodules` needs to be
    regenerated by [gtk-query-immodules-3.0][gtk-query-immodules-3.0],
    in order for the new input method to become available to GTK+ applications.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def delete_surrounding(self, offset: int, n_chars: int) -> bool:
        """
        Asks the widget that the input context is attached to to delete
        characters around the cursor position by emitting the
        GtkIMContext::delete_surrounding signal. Note that @offset and @n_chars
        are in characters not in bytes which differs from the usage other
        places in #GtkIMContext.

        In order to use this function, you should first call
        gtk_im_context_get_surrounding() to get the current context, and
        call this function immediately afterwards to make sure that you
        know what you are deleting. You should also account for the fact
        that even if the signal was handled, the input context might not
        have deleted all the characters that were requested to be deleted.

        This function is used by an input method that wants to make
        subsitutions in the existing text in response to new input. It is
        not useful for applications.
        """
        ...

    def filter_keypress(self, event: Gdk.EventKey) -> bool:
        """
        Allow an input method to internally handle key press and release
        events. If this function returns %TRUE, then no further processing
        should be done for this key event.
        """
        ...

    def focus_in(self) -> object:
        """
        Notify the input method that the widget to which this
        input context corresponds has gained focus. The input method
        may, for example, change the displayed feedback to reflect
        this change.
        """
        ...

    def focus_out(self) -> object:
        """
        Notify the input method that the widget to which this
        input context corresponds has lost focus. The input method
        may, for example, change the displayed feedback or reset the contexts
        state to reflect this change.
        """
        ...

    def get_preedit_string(self, str: str, attrs: Pango.AttrList, cursor_pos: int) -> object:
        """
        Retrieve the current preedit string for the input context,
        and a list of attributes to apply to the string.
        This string should be displayed inserted at the insertion
        point.
        """
        ...

    def get_surrounding(self, text: str, cursor_index: int) -> bool:
        """
        Retrieves context around the insertion point. Input methods
        typically want context in order to constrain input text based on
        existing text; this is important for languages such as Thai where
        only some sequences of characters are allowed.

        This function is implemented by emitting the
        GtkIMContext::retrieve_surrounding signal on the input method; in
        response to this signal, a widget should provide as much context as
        is available, up to an entire paragraph, by calling
        gtk_im_context_set_surrounding(). Note that there is no obligation
        for a widget to respond to the ::retrieve_surrounding signal, so input
        methods must be prepared to function without context.
        """
        ...

    def reset(self) -> object:
        """
        Notify the input method that a change such as a change in cursor
        position has been made. This will typically cause the input
        method to clear the preedit state.
        """
        ...

    def set_client_window(self, window: _T.Optional[Gdk.Window]) -> object:
        """
        Set the client window for the input context; this is the
        #GdkWindow in which the input appears. This window is
        used in order to correctly position status windows, and may
        also be used for purposes internal to the input method.
        """
        ...

    def set_cursor_location(self, area: Gdk.Rectangle) -> object:
        """
        Notify the input method that a change in cursor
        position has been made. The location is relative to the client
        window.
        """
        ...

    def set_surrounding(self, text: str, len: int, cursor_index: int) -> object:
        """
        Sets surrounding context around the insertion point and preedit
        string. This function is expected to be called in response to the
        GtkIMContext::retrieve_surrounding signal, and will likely have no
        effect if called at other times.
        """
        ...

    def set_use_preedit(self, use_preedit: bool) -> object:
        """
        Sets whether the IM context should use the preedit string
        to display feedback. If @use_preedit is FALSE (default
        is TRUE), then the IM context may use some other method to display
        feedback, such as displaying it in a child of the root window.
        """
        ...


    ...

class IMContextSimple(IMContext):
    """
    GtkIMContextSimple is a simple input method context supporting table-based
    input methods. It has a built-in table of compose sequences that is derived
    from the X11 Compose files.

    GtkIMContextSimple reads additional compose sequences from the first of the
    following files that is found: ~/.config/gtk-3.0/Compose, ~/.XCompose,
    /usr/share/X11/locale/$locale/Compose (for locales that have a nontrivial
    Compose file). The syntax of these files is described in the Compose(5)
    manual page.

    ## Unicode characters

    GtkIMContextSimple also supports numeric entry of Unicode characters
    by typing Ctrl-Shift-u, followed by a hexadecimal Unicode codepoint.
    For example, Ctrl-Shift-u 1 2 3 Enter yields U+0123 LATIN SMALL LETTER
    G WITH CEDILLA, i.e. ģ.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> IMContext:
        """
        Creates a new #GtkIMContextSimple.
        """
        ...

    def add_compose_file(self, compose_file: str) -> object:
        """
        Adds an additional table from the X11 compose file.
        """
        ...

    def add_table(self, data: object, max_seq_len: int, n_seqs: int) -> object:
        """
        Adds an additional table to search to the input context.
        Each row of the table consists of @max_seq_len key symbols
        followed by two #guint16 interpreted as the high and low
        words of a #gunicode value. Tables are searched starting
        from the last added.

        The table must be sorted in dictionary order on the
        numeric value of the key symbol fields. (Values beyond
        the length of the sequence should be zero.)
        """
        ...


    ...

class IMMulticontext(IMContext):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> IMContext:
        """
        Creates a new #GtkIMMulticontext.
        """
        ...

    def append_menuitems(self, menushell: MenuShell) -> object:
        """
        Add menuitems for various available input methods to a menu;
        the menuitems, when selected, will switch the input method
        for the context and the global default input method.
        """
        ...

    def get_context_id(self) -> str:
        """
        Gets the id of the currently active slave of the @context.
        """
        ...

    def set_context_id(self, context_id: str) -> object:
        """
        Sets the context id for @context.

        This causes the currently active slave of @context to be
        replaced by the slave corresponding to the new context id.
        """
        ...


    ...

class IconFactory(GObject.Object, Buildable):
    """
    An icon factory manages a collection of #GtkIconSet; a #GtkIconSet manages a
    set of variants of a particular icon (i.e. a #GtkIconSet contains variants for
    different sizes and widget states). Icons in an icon factory are named by a
    stock ID, which is a simple string identifying the icon. Each #GtkStyle has a
    list of #GtkIconFactory derived from the current theme; those icon factories
    are consulted first when searching for an icon. If the theme doesn’t set a
    particular icon, GTK+ looks for the icon in a list of default icon factories,
    maintained by gtk_icon_factory_add_default() and
    gtk_icon_factory_remove_default(). Applications with icons should add a default
    icon factory with their icons, which will allow themes to override the icons
    for the application.

    To display an icon, always use gtk_style_lookup_icon_set() on the widget that
    will display the icon, or the convenience function
    gtk_widget_render_icon(). These functions take the theme into account when
    looking up the icon to use for a given stock ID.

    # GtkIconFactory as GtkBuildable # {#GtkIconFactory-BUILDER-UI}

    GtkIconFactory supports a custom `<sources>` element, which can contain
    multiple `<source>` elements. The following attributes are allowed:

    - stock-id

        The stock id of the source, a string. This attribute is
        mandatory

    - filename

        The filename of the source, a string.  This attribute is
        optional

    - icon-name

        The icon name for the source, a string.  This attribute is
        optional.

    - size

        Size of the icon, a #GtkIconSize enum value.  This attribute is
        optional.

    - direction

        Direction of the source, a #GtkTextDirection enum value.  This
        attribute is optional.

    - state

        State of the source, a #GtkStateType enum value.  This
        attribute is optional.


    ## A #GtkIconFactory UI definition fragment. ##

    |[
    <object class="GtkIconFactory" id="iconfactory1">
      <sources>
        <source stock-id="apple-red" filename="apple-red.png"/>
      </sources>
    </object>
    <object class="GtkWindow" id="window1">
      <child>
        <object class="GtkButton" id="apple_button">
          <property name="label">apple-red</property>
          <property name="use-stock">True</property>
        </object>
      </child>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> IconFactory:
        """
        Creates a new #GtkIconFactory. An icon factory manages a collection
        of #GtkIconSets; a #GtkIconSet manages a set of variants of a
        particular icon (i.e. a #GtkIconSet contains variants for different
        sizes and widget states). Icons in an icon factory are named by a
        stock ID, which is a simple string identifying the icon. Each
        #GtkStyle has a list of #GtkIconFactorys derived from the current
        theme; those icon factories are consulted first when searching for
        an icon. If the theme doesn’t set a particular icon, GTK+ looks for
        the icon in a list of default icon factories, maintained by
        gtk_icon_factory_add_default() and
        gtk_icon_factory_remove_default(). Applications with icons should
        add a default icon factory with their icons, which will allow
        themes to override the icons for the application.
        """
        ...

    def add(self, stock_id: str, icon_set: IconSet) -> object:
        """
        Adds the given @icon_set to the icon factory, under the name
        @stock_id.  @stock_id should be namespaced for your application,
        e.g. “myapp-whatever-icon”.  Normally applications create a
        #GtkIconFactory, then add it to the list of default factories with
        gtk_icon_factory_add_default(). Then they pass the @stock_id to
        widgets such as #GtkImage to display the icon. Themes can provide
        an icon with the same name (such as "myapp-whatever-icon") to
        override your application’s default icons. If an icon already
        existed in @factory for @stock_id, it is unreferenced and replaced
        with the new @icon_set.
        """
        ...

    def add_default(self) -> object:
        """
        Adds an icon factory to the list of icon factories searched by
        gtk_style_lookup_icon_set(). This means that, for example,
        gtk_image_new_from_stock() will be able to find icons in @factory.
        There will normally be an icon factory added for each library or
        application that comes with icons. The default icon factories
        can be overridden by themes.
        """
        ...

    def lookup(self, stock_id: str) -> IconSet:
        """
        Looks up @stock_id in the icon factory, returning an icon set
        if found, otherwise %NULL. For display to the user, you should
        use gtk_style_lookup_icon_set() on the #GtkStyle for the
        widget that will display the icon, instead of using this
        function directly, so that themes are taken into account.
        """
        ...

    def remove_default(self) -> object:
        """
        Removes an icon factory from the list of default icon
        factories. Not normally used; you might use it for a library that
        can be unloaded or shut down.
        """
        ...


    ...

class IconInfo(GObject.Object):
    """
    Contains information found when looking up an icon in
    an icon theme.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_for_pixbuf(cls, icon_theme: IconTheme, pixbuf: GdkPixbuf.Pixbuf) -> IconInfo:
        """
        Creates a #GtkIconInfo for a #GdkPixbuf.
        """
        ...

    def copy(self) -> IconInfo:
        """
        Make a copy of a #GtkIconInfo.
        """
        ...

    def free(self) -> object:
        """
        Free a #GtkIconInfo and associated information
        """
        ...

    def get_attach_points(self, points: object, n_points: int) -> bool:
        """
        This function is deprecated and always returns %FALSE.
        """
        ...

    def get_base_scale(self) -> int:
        """
        Gets the base scale for the icon. The base scale is a scale
        for the icon that was specified by the icon theme creator.
        For instance an icon drawn for a high-dpi screen with window
        scale 2 for a base size of 32 will be 64 pixels tall and have
        a base scale of 2.
        """
        ...

    def get_base_size(self) -> int:
        """
        Gets the base size for the icon. The base size
        is a size for the icon that was specified by
        the icon theme creator. This may be different
        than the actual size of image; an example of
        this is small emblem icons that can be attached
        to a larger icon. These icons will be given
        the same base size as the larger icons to which
        they are attached.

        Note that for scaled icons the base size does
        not include the base scale.
        """
        ...

    def get_builtin_pixbuf(self) -> GdkPixbuf.Pixbuf:
        """
        Gets the built-in image for this icon, if any. To allow GTK+ to use
        built in icon images, you must pass the %GTK_ICON_LOOKUP_USE_BUILTIN
        to gtk_icon_theme_lookup_icon().
        """
        ...

    def get_display_name(self) -> str:
        """
        This function is deprecated and always returns %NULL.
        """
        ...

    def get_embedded_rect(self, rectangle: Gdk.Rectangle) -> bool:
        """
        This function is deprecated and always returns %FALSE.
        """
        ...

    def get_filename(self) -> str:
        """
        Gets the filename for the icon. If the %GTK_ICON_LOOKUP_USE_BUILTIN
        flag was passed to gtk_icon_theme_lookup_icon(), there may be no
        filename if a builtin icon is returned; in this case, you should
        use gtk_icon_info_get_builtin_pixbuf().
        """
        ...

    def is_symbolic(self) -> bool:
        """
        Checks if the icon is symbolic or not. This currently uses only
        the file name and not the file contents for determining this.
        This behaviour may change in the future.
        """
        ...

    def load_icon(self) -> GdkPixbuf.Pixbuf:
        """
        Renders an icon previously looked up in an icon theme using
        gtk_icon_theme_lookup_icon(); the size will be based on the size
        passed to gtk_icon_theme_lookup_icon(). Note that the resulting
        pixbuf may not be exactly this size; an icon theme may have icons
        that differ slightly from their nominal sizes, and in addition GTK+
        will avoid scaling icons that it considers sufficiently close to the
        requested size or for which the source image would have to be scaled
        up too far. (This maintains sharpness.). This behaviour can be changed
        by passing the %GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining
        the #GtkIconInfo. If this flag has been specified, the pixbuf
        returned by this function will be scaled to the exact size.
        """
        ...

    def load_icon_async(self, cancellable: _T.Optional[Gio.Cancellable], callback: _T.Optional[Gio.AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously load, render and scale an icon previously looked up
        from the icon theme using gtk_icon_theme_lookup_icon().

        For more details, see gtk_icon_info_load_icon() which is the synchronous
        version of this call.
        """
        ...

    def load_icon_finish(self, res: Gio.AsyncResult) -> GdkPixbuf.Pixbuf:
        """
        Finishes an async icon load, see gtk_icon_info_load_icon_async().
        """
        ...

    def load_surface(self, for_window: _T.Optional[Gdk.Window]) -> cairo.Surface:
        """
        Renders an icon previously looked up in an icon theme using
        gtk_icon_theme_lookup_icon(); the size will be based on the size
        passed to gtk_icon_theme_lookup_icon(). Note that the resulting
        surface may not be exactly this size; an icon theme may have icons
        that differ slightly from their nominal sizes, and in addition GTK+
        will avoid scaling icons that it considers sufficiently close to the
        requested size or for which the source image would have to be scaled
        up too far. (This maintains sharpness.). This behaviour can be changed
        by passing the %GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining
        the #GtkIconInfo. If this flag has been specified, the pixbuf
        returned by this function will be scaled to the exact size.
        """
        ...

    def load_symbolic(self, fg: Gdk.RGBA, success_color: _T.Optional[Gdk.RGBA], warning_color: _T.Optional[Gdk.RGBA], error_color: _T.Optional[Gdk.RGBA], was_symbolic: bool) -> GdkPixbuf.Pixbuf:
        """
        Loads an icon, modifying it to match the system colours for the foreground,
        success, warning and error colors provided. If the icon is not a symbolic
        one, the function will return the result from gtk_icon_info_load_icon().

        This allows loading symbolic icons that will match the system theme.

        Unless you are implementing a widget, you will want to use
        g_themed_icon_new_with_default_fallbacks() to load the icon.

        As implementation details, the icon loaded needs to be of SVG type,
        contain the “symbolic” term as the last component of the icon name,
        and use the “fg”, “success”, “warning” and “error” CSS styles in the
        SVG file itself.

        See the [Symbolic Icons Specification](http://www.freedesktop.org/wiki/SymbolicIcons)
        for more information about symbolic icons.
        """
        ...

    def load_symbolic_async(self, fg: Gdk.RGBA, success_color: _T.Optional[Gdk.RGBA], warning_color: _T.Optional[Gdk.RGBA], error_color: _T.Optional[Gdk.RGBA], cancellable: _T.Optional[Gio.Cancellable], callback: _T.Optional[Gio.AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously load, render and scale a symbolic icon previously looked up
        from the icon theme using gtk_icon_theme_lookup_icon().

        For more details, see gtk_icon_info_load_symbolic() which is the synchronous
        version of this call.
        """
        ...

    def load_symbolic_finish(self, res: Gio.AsyncResult, was_symbolic: bool) -> GdkPixbuf.Pixbuf:
        """
        Finishes an async icon load, see gtk_icon_info_load_symbolic_async().
        """
        ...

    def load_symbolic_for_context(self, context: StyleContext, was_symbolic: bool) -> GdkPixbuf.Pixbuf:
        """
        Loads an icon, modifying it to match the system colors for the foreground,
        success, warning and error colors provided. If the icon is not a symbolic
        one, the function will return the result from gtk_icon_info_load_icon().
        This function uses the regular foreground color and the symbolic colors
        with the names “success_color”, “warning_color” and “error_color” from
        the context.

        This allows loading symbolic icons that will match the system theme.

        See gtk_icon_info_load_symbolic() for more details.
        """
        ...

    def load_symbolic_for_context_async(self, context: StyleContext, cancellable: _T.Optional[Gio.Cancellable], callback: _T.Optional[Gio.AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously load, render and scale a symbolic icon previously
        looked up from the icon theme using gtk_icon_theme_lookup_icon().

        For more details, see gtk_icon_info_load_symbolic_for_context()
        which is the synchronous version of this call.
        """
        ...

    def load_symbolic_for_context_finish(self, res: Gio.AsyncResult, was_symbolic: bool) -> GdkPixbuf.Pixbuf:
        """
        Finishes an async icon load, see gtk_icon_info_load_symbolic_for_context_async().
        """
        ...

    def load_symbolic_for_style(self, style: Style, state: StateType, was_symbolic: bool) -> GdkPixbuf.Pixbuf:
        """
        Loads an icon, modifying it to match the system colours for the foreground,
        success, warning and error colors provided. If the icon is not a symbolic
        one, the function will return the result from gtk_icon_info_load_icon().

        This allows loading symbolic icons that will match the system theme.

        See gtk_icon_info_load_symbolic() for more details.
        """
        ...

    def set_raw_coordinates(self, raw_coordinates: bool) -> object:
        """
        Sets whether the coordinates returned by gtk_icon_info_get_embedded_rect()
        and gtk_icon_info_get_attach_points() should be returned in their
        original form as specified in the icon theme, instead of scaled
        appropriately for the pixbuf returned by gtk_icon_info_load_icon().

        Raw coordinates are somewhat strange; they are specified to be with
        respect to the unscaled pixmap for PNG and XPM icons, but for SVG
        icons, they are in a 1000x1000 coordinate space that is scaled
        to the final size of the icon.  You can determine if the icon is an SVG
        icon by using gtk_icon_info_get_filename(), and seeing if it is non-%NULL
        and ends in “.svg”.

        This function is provided primarily to allow compatibility wrappers
        for older API's, and is not expected to be useful for applications.
        """
        ...


    ...

class IconTheme(GObject.Object):
    """
    #GtkIconTheme provides a facility for looking up icons by name
    and size. The main reason for using a name rather than simply
    providing a filename is to allow different icons to be used
    depending on what “icon theme” is selected
    by the user. The operation of icon themes on Linux and Unix
    follows the [Icon Theme Specification](http://www.freedesktop.org/Standards/icon-theme-spec)
    There is a fallback icon theme, named `hicolor`, where applications
    should install their icons, but additional icon themes can be installed
    as operating system vendors and users choose.

    Named icons are similar to the deprecated [Stock Items][gtkstock],
    and the distinction between the two may be a bit confusing.
    A few things to keep in mind:

    - Stock images usually are used in conjunction with
      [Stock Items][gtkstock], such as %GTK_STOCK_OK or
      %GTK_STOCK_OPEN. Named icons are easier to set up and therefore
      are more useful for new icons that an application wants to
      add, such as application icons or window icons.

    - Stock images can only be loaded at the symbolic sizes defined
      by the #GtkIconSize enumeration, or by custom sizes defined
      by gtk_icon_size_register(), while named icons are more flexible
      and any pixel size can be specified.

    - Because stock images are closely tied to stock items, and thus
      to actions in the user interface, stock images may come in
      multiple variants for different widget states or writing
      directions.

    A good rule of thumb is that if there is a stock image for what
    you want to use, use it, otherwise use a named icon. It turns
    out that internally stock images are generally defined in
    terms of one or more named icons. (An example of the
    more than one case is icons that depend on writing direction;
    %GTK_STOCK_GO_FORWARD uses the two themed icons
    “gtk-stock-go-forward-ltr” and “gtk-stock-go-forward-rtl”.)

    In many cases, named themes are used indirectly, via #GtkImage
    or stock items, rather than directly, but looking up icons
    directly is also simple. The #GtkIconTheme object acts
    as a database of all the icons in the current theme. You
    can create new #GtkIconTheme objects, but it’s much more
    efficient to use the standard icon theme for the #GdkScreen
    so that the icon information is shared with other people
    looking up icons.
    |[<!-- language="C" -->
    GError *error = NULL;
    GtkIconTheme *icon_theme;
    GdkPixbuf *pixbuf;

    icon_theme = gtk_icon_theme_get_default ();
    pixbuf = gtk_icon_theme_load_icon (icon_theme,
                                       "my-icon-name", // icon name
                                       48, // icon size
                                       0,  // flags
                                       &error);
    if (!pixbuf)
      {
        g_warning ("Couldn’t load icon: %s", error->message);
        g_error_free (error);
      }
    else
      {
        // Use the pixbuf
        g_object_unref (pixbuf);
      }
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> IconTheme:
        """
        Creates a new icon theme object. Icon theme objects are used
        to lookup up an icon by name in a particular icon theme.
        Usually, you’ll want to use gtk_icon_theme_get_default()
        or gtk_icon_theme_get_for_screen() rather than creating
        a new icon theme object for scratch.
        """
        ...

    def add_resource_path(self, path: str) -> object:
        """
        Adds a resource path that will be looked at when looking
        for icons, similar to search paths.

        This function should be used to make application-specific icons
        available as part of the icon theme.

        The resources are considered as part of the hicolor icon theme
        and must be located in subdirectories that are defined in the
        hicolor icon theme, such as `@path/16x16/actions/run.png`.
        Icons that are directly placed in the resource path instead
        of a subdirectory are also considered as ultimate fallback.
        """
        ...

    def append_search_path(self, path: str) -> object:
        """
        Appends a directory to the search path.
        See gtk_icon_theme_set_search_path().
        """
        ...

    def choose_icon(self, icon_names: object, size: int, flags: IconLookupFlags) -> IconInfo:
        """
        Looks up a named icon and returns a #GtkIconInfo containing
        information such as the filename of the icon. The icon
        can then be rendered into a pixbuf using
        gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
        combines these two steps if all you need is the pixbuf.)

        If @icon_names contains more than one name, this function
        tries them all in the given order before falling back to
        inherited icon themes.
        """
        ...

    def choose_icon_for_scale(self, icon_names: object, size: int, scale: int, flags: IconLookupFlags) -> IconInfo:
        """
        Looks up a named icon for a particular window scale and returns
        a #GtkIconInfo containing information such as the filename of the
        icon. The icon can then be rendered into a pixbuf using
        gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
        combines these two steps if all you need is the pixbuf.)

        If @icon_names contains more than one name, this function
        tries them all in the given order before falling back to
        inherited icon themes.
        """
        ...

    def get_example_icon_name(self) -> str:
        """
        Gets the name of an icon that is representative of the
        current theme (for instance, to use when presenting
        a list of themes to the user.)
        """
        ...

    def get_icon_sizes(self, icon_name: str) -> object:
        """
        Returns an array of integers describing the sizes at which
        the icon is available without scaling. A size of -1 means
        that the icon is available in a scalable format. The array
        is zero-terminated.
        """
        ...

    def get_search_path(self, path: object, n_elements: int) -> object:
        """
        Gets the current search path. See gtk_icon_theme_set_search_path().
        """
        ...

    def has_icon(self, icon_name: str) -> bool:
        """
        Checks whether an icon theme includes an icon
        for a particular name.
        """
        ...

    def list_contexts(self) -> GLib.List:
        """
        Gets the list of contexts available within the current
        hierarchy of icon themes.
        See gtk_icon_theme_list_icons() for details about contexts.
        """
        ...

    def list_icons(self, context: _T.Optional[str]) -> GLib.List:
        """
        Lists the icons in the current icon theme. Only a subset
        of the icons can be listed by providing a context string.
        The set of values for the context string is system dependent,
        but will typically include such values as “Applications” and
        “MimeTypes”. Contexts are explained in the
        [Icon Theme Specification](http://www.freedesktop.org/wiki/Specifications/icon-theme-spec).
        The standard contexts are listed in the
        [Icon Naming Specification](http://www.freedesktop.org/wiki/Specifications/icon-naming-spec).
        Also see gtk_icon_theme_list_contexts().
        """
        ...

    def load_icon(self, icon_name: str, size: int, flags: IconLookupFlags) -> GdkPixbuf.Pixbuf:
        """
        Looks up an icon in an icon theme, scales it to the given size
        and renders it into a pixbuf. This is a convenience function;
        if more details about the icon are needed, use
        gtk_icon_theme_lookup_icon() followed by gtk_icon_info_load_icon().

        Note that you probably want to listen for icon theme changes and
        update the icon. This is usually done by connecting to the
        GtkWidget::style-set signal. If for some reason you do not want to
        update the icon when the icon theme changes, you should consider
        using gdk_pixbuf_copy() to make a private copy of the pixbuf
        returned by this function. Otherwise GTK+ may need to keep the old
        icon theme loaded, which would be a waste of memory.
        """
        ...

    def load_icon_for_scale(self, icon_name: str, size: int, scale: int, flags: IconLookupFlags) -> GdkPixbuf.Pixbuf:
        """
        Looks up an icon in an icon theme for a particular window scale,
        scales it to the given size and renders it into a pixbuf. This is a
        convenience function; if more details about the icon are needed,
        use gtk_icon_theme_lookup_icon() followed by
        gtk_icon_info_load_icon().

        Note that you probably want to listen for icon theme changes and
        update the icon. This is usually done by connecting to the
        GtkWidget::style-set signal. If for some reason you do not want to
        update the icon when the icon theme changes, you should consider
        using gdk_pixbuf_copy() to make a private copy of the pixbuf
        returned by this function. Otherwise GTK+ may need to keep the old
        icon theme loaded, which would be a waste of memory.
        """
        ...

    def load_surface(self, icon_name: str, size: int, scale: int, for_window: _T.Optional[Gdk.Window], flags: IconLookupFlags) -> cairo.Surface:
        """
        Looks up an icon in an icon theme for a particular window scale,
        scales it to the given size and renders it into a cairo surface. This is a
        convenience function; if more details about the icon are needed,
        use gtk_icon_theme_lookup_icon() followed by
        gtk_icon_info_load_surface().

        Note that you probably want to listen for icon theme changes and
        update the icon. This is usually done by connecting to the
        GtkWidget::style-set signal.
        """
        ...

    def lookup_by_gicon(self, icon: Gio.Icon, size: int, flags: IconLookupFlags) -> IconInfo:
        """
        Looks up an icon and returns a #GtkIconInfo containing information
        such as the filename of the icon. The icon can then be rendered
        into a pixbuf using gtk_icon_info_load_icon().

        When rendering on displays with high pixel densities you should not
        use a @size multiplied by the scaling factor returned by functions
        like gdk_window_get_scale_factor(). Instead, you should use
        gtk_icon_theme_lookup_by_gicon_for_scale(), as the assets loaded
        for a given scaling factor may be different.
        """
        ...

    def lookup_by_gicon_for_scale(self, icon: Gio.Icon, size: int, scale: int, flags: IconLookupFlags) -> IconInfo:
        """
        Looks up an icon and returns a #GtkIconInfo containing information
        such as the filename of the icon. The icon can then be rendered into
        a pixbuf using gtk_icon_info_load_icon().
        """
        ...

    def lookup_icon(self, icon_name: str, size: int, flags: IconLookupFlags) -> IconInfo:
        """
        Looks up a named icon and returns a #GtkIconInfo containing
        information such as the filename of the icon. The icon
        can then be rendered into a pixbuf using
        gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
        combines these two steps if all you need is the pixbuf.)

        When rendering on displays with high pixel densities you should not
        use a @size multiplied by the scaling factor returned by functions
        like gdk_window_get_scale_factor(). Instead, you should use
        gtk_icon_theme_lookup_icon_for_scale(), as the assets loaded
        for a given scaling factor may be different.
        """
        ...

    def lookup_icon_for_scale(self, icon_name: str, size: int, scale: int, flags: IconLookupFlags) -> IconInfo:
        """
        Looks up a named icon for a particular window scale and returns a
        #GtkIconInfo containing information such as the filename of the
        icon. The icon can then be rendered into a pixbuf using
        gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon() combines
        these two steps if all you need is the pixbuf.)
        """
        ...

    def prepend_search_path(self, path: str) -> object:
        """
        Prepends a directory to the search path.
        See gtk_icon_theme_set_search_path().
        """
        ...

    def rescan_if_needed(self) -> bool:
        """
        Checks to see if the icon theme has changed; if it has, any
        currently cached information is discarded and will be reloaded
        next time @icon_theme is accessed.
        """
        ...

    def set_custom_theme(self, theme_name: _T.Optional[str]) -> object:
        """
        Sets the name of the icon theme that the #GtkIconTheme object uses
        overriding system configuration. This function cannot be called
        on the icon theme objects returned from gtk_icon_theme_get_default()
        and gtk_icon_theme_get_for_screen().
        """
        ...

    def set_screen(self, screen: Gdk.Screen) -> object:
        """
        Sets the screen for an icon theme; the screen is used
        to track the user’s currently configured icon theme,
        which might be different for different screens.
        """
        ...

    def set_search_path(self, path: object, n_elements: int) -> object:
        """
        Sets the search path for the icon theme object. When looking
        for an icon theme, GTK+ will search for a subdirectory of
        one or more of the directories in @path with the same name
        as the icon theme containing an index.theme file. (Themes from
        multiple of the path elements are combined to allow themes to be
        extended by adding icons in the user’s home directory.)

        In addition if an icon found isn’t found either in the current
        icon theme or the default icon theme, and an image file with
        the right name is found directly in one of the elements of
        @path, then that image will be used for the icon name.
        (This is legacy feature, and new icons should be put
        into the fallback icon theme, which is called hicolor,
        rather than directly on the icon path.)
        """
        ...


    ...

class IconView(Container, Atk.ImplementorIface, Buildable, CellLayout, Scrollable):
    """
    #GtkIconView provides an alternative view on a #GtkTreeModel.
    It displays the model as a grid of icons with labels. Like
    #GtkTreeView, it allows to select one or multiple items
    (depending on the selection mode, see gtk_icon_view_set_selection_mode()).
    In addition to selection with the arrow keys, #GtkIconView supports
    rubberband selection, which is controlled by dragging the pointer.

    Note that if the tree model is backed by an actual tree store (as
    opposed to a flat list where the mapping to icons is obvious),
    #GtkIconView will only display the first level of the tree and
    ignore the tree’s branches.

    # CSS nodes

    |[<!-- language="plain" -->
    iconview.view
    ╰── [rubberband]
    ]|

    GtkIconView has a single CSS node with name iconview and style class .view.
    For rubberband selection, a subnode with name rubberband is used.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkIconView widget
        """
        ...


    @classmethod
    def new_with_area(cls, area: CellArea) -> Widget:
        """
        Creates a new #GtkIconView widget using the
        specified @area to layout cells inside the icons.
        """
        ...


    @classmethod
    def new_with_model(cls, model: TreeModel) -> Widget:
        """
        Creates a new #GtkIconView widget with the model @model.
        """
        ...

    def convert_widget_to_bin_window_coords(self, wx: int, wy: int, bx: int, by: int) -> object:
        """
        Converts widget coordinates to coordinates for the bin_window,
        as expected by e.g. gtk_icon_view_get_path_at_pos().
        """
        ...

    def create_drag_icon(self, path: TreePath) -> cairo.Surface:
        """
        Creates a #cairo_surface_t representation of the item at @path.
        This image is used for a drag icon.
        """
        ...

    def enable_model_drag_dest(self, targets: object, n_targets: int, actions: Gdk.DragAction) -> object:
        """
        Turns @icon_view into a drop destination for automatic DND. Calling this
        method sets #GtkIconView:reorderable to %FALSE.
        """
        ...

    def enable_model_drag_source(self, start_button_mask: Gdk.ModifierType, targets: object, n_targets: int, actions: Gdk.DragAction) -> object:
        """
        Turns @icon_view into a drag source for automatic DND. Calling this
        method sets #GtkIconView:reorderable to %FALSE.
        """
        ...

    def get_activate_on_single_click(self) -> bool:
        """
        Gets the setting set by gtk_icon_view_set_activate_on_single_click().
        """
        ...

    def get_cell_rect(self, path: TreePath, cell: _T.Optional[CellRenderer], rect: Gdk.Rectangle) -> bool:
        """
        Fills the bounding rectangle in widget coordinates for the cell specified by
        @path and @cell. If @cell is %NULL the main cell area is used.

        This function is only valid if @icon_view is realized.
        """
        ...

    def get_column_spacing(self) -> int:
        """
        Returns the value of the ::column-spacing property.
        """
        ...

    def get_columns(self) -> int:
        """
        Returns the value of the ::columns property.
        """
        ...

    def get_cursor(self, path: TreePath, cell: CellRenderer) -> bool:
        """
        Fills in @path and @cell with the current cursor path and cell.
        If the cursor isn’t currently set, then *@path will be %NULL.
        If no cell currently has focus, then *@cell will be %NULL.

        The returned #GtkTreePath must be freed with gtk_tree_path_free().
        """
        ...

    def get_dest_item_at_pos(self, drag_x: int, drag_y: int, path: TreePath, pos: IconViewDropPosition) -> bool:
        """
        Determines the destination item for a given position.
        """
        ...

    def get_drag_dest_item(self, path: TreePath, pos: IconViewDropPosition) -> object:
        """
        Gets information about the item that is highlighted for feedback.
        """
        ...

    def get_item_at_pos(self, x: int, y: int, path: TreePath, cell: CellRenderer) -> bool:
        """
        Finds the path at the point (@x, @y), relative to bin_window coordinates.
        In contrast to gtk_icon_view_get_path_at_pos(), this function also
        obtains the cell at the specified position. The returned path should
        be freed with gtk_tree_path_free().
        See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
        widget coordinates to bin_window coordinates.
        """
        ...

    def get_item_column(self, path: TreePath) -> int:
        """
        Gets the column in which the item @path is currently
        displayed. Column numbers start at 0.
        """
        ...

    def get_item_orientation(self) -> Orientation:
        """
        Returns the value of the ::item-orientation property which determines
        whether the labels are drawn beside the icons instead of below.
        """
        ...

    def get_item_padding(self) -> int:
        """
        Returns the value of the ::item-padding property.
        """
        ...

    def get_item_row(self, path: TreePath) -> int:
        """
        Gets the row in which the item @path is currently
        displayed. Row numbers start at 0.
        """
        ...

    def get_item_width(self) -> int:
        """
        Returns the value of the ::item-width property.
        """
        ...

    def get_margin(self) -> int:
        """
        Returns the value of the ::margin property.
        """
        ...

    def get_markup_column(self) -> int:
        """
        Returns the column with markup text for @icon_view.
        """
        ...

    def get_model(self) -> TreeModel:
        """
        Returns the model the #GtkIconView is based on.  Returns %NULL if the
        model is unset.
        """
        ...

    def get_path_at_pos(self, x: int, y: int) -> TreePath:
        """
        Finds the path at the point (@x, @y), relative to bin_window coordinates.
        See gtk_icon_view_get_item_at_pos(), if you are also interested in
        the cell at the specified position.
        See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
        widget coordinates to bin_window coordinates.
        """
        ...

    def get_pixbuf_column(self) -> int:
        """
        Returns the column with pixbufs for @icon_view.
        """
        ...

    def get_reorderable(self) -> bool:
        """
        Retrieves whether the user can reorder the list via drag-and-drop.
        See gtk_icon_view_set_reorderable().
        """
        ...

    def get_row_spacing(self) -> int:
        """
        Returns the value of the ::row-spacing property.
        """
        ...

    def get_selected_items(self) -> GLib.List:
        """
        Creates a list of paths of all selected items. Additionally, if you are
        planning on modifying the model after calling this function, you may
        want to convert the returned list into a list of #GtkTreeRowReferences.
        To do this, you can use gtk_tree_row_reference_new().

        To free the return value, use:
        |[<!-- language="C" -->
        g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
        ]|
        """
        ...

    def get_selection_mode(self) -> SelectionMode:
        """
        Gets the selection mode of the @icon_view.
        """
        ...

    def get_spacing(self) -> int:
        """
        Returns the value of the ::spacing property.
        """
        ...

    def get_text_column(self) -> int:
        """
        Returns the column with text for @icon_view.
        """
        ...

    def get_tooltip_column(self) -> int:
        """
        Returns the column of @icon_view’s model which is being used for
        displaying tooltips on @icon_view’s rows.
        """
        ...

    def get_tooltip_context(self, x: int, y: int, keyboard_tip: bool, model: TreeModel, path: TreePath, iter: TreeIter) -> bool:
        """
        This function is supposed to be used in a #GtkWidget::query-tooltip
        signal handler for #GtkIconView.  The @x, @y and @keyboard_tip values
        which are received in the signal handler, should be passed to this
        function without modification.

        The return value indicates whether there is an icon view item at the given
        coordinates (%TRUE) or not (%FALSE) for mouse tooltips. For keyboard
        tooltips the item returned will be the cursor item. When %TRUE, then any of
        @model, @path and @iter which have been provided will be set to point to
        that row and the corresponding model. @x and @y will always be converted
        to be relative to @icon_view’s bin_window if @keyboard_tooltip is %FALSE.
        """
        ...

    def get_visible_range(self, start_path: TreePath, end_path: TreePath) -> bool:
        """
        Sets @start_path and @end_path to be the first and last visible path.
        Note that there may be invisible paths in between.

        Both paths should be freed with gtk_tree_path_free() after use.
        """
        ...

    def item_activated(self, path: TreePath) -> object:
        """
        Activates the item determined by @path.
        """
        ...

    def path_is_selected(self, path: TreePath) -> bool:
        """
        Returns %TRUE if the icon pointed to by @path is currently
        selected. If @path does not point to a valid location, %FALSE is returned.
        """
        ...

    def scroll_to_path(self, path: TreePath, use_align: bool, row_align: float, col_align: float) -> object:
        """
        Moves the alignments of @icon_view to the position specified by @path.
        @row_align determines where the row is placed, and @col_align determines
        where @column is placed.  Both are expected to be between 0.0 and 1.0.
        0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means
        center.

        If @use_align is %FALSE, then the alignment arguments are ignored, and the
        tree does the minimum amount of work to scroll the item onto the screen.
        This means that the item will be scrolled to the edge closest to its current
        position.  If the item is currently visible on the screen, nothing is done.

        This function only works if the model is set, and @path is a valid row on
        the model. If the model changes before the @icon_view is realized, the
        centered path will be modified to reflect this change.
        """
        ...

    def select_all(self) -> object:
        """
        Selects all the icons. @icon_view must has its selection mode set
        to #GTK_SELECTION_MULTIPLE.
        """
        ...

    def select_path(self, path: TreePath) -> object:
        """
        Selects the row at @path.
        """
        ...

    def selected_foreach(self, func: IconViewForeachFunc, data: _T.Optional[object]) -> object:
        """
        Calls a function for each selected icon. Note that the model or
        selection cannot be modified from within this function.
        """
        ...

    def set_activate_on_single_click(self, single: bool) -> object:
        """
        Causes the #GtkIconView::item-activated signal to be emitted on
        a single click instead of a double click.
        """
        ...

    def set_column_spacing(self, column_spacing: int) -> object:
        """
        Sets the ::column-spacing property which specifies the space
        which is inserted between the columns of the icon view.
        """
        ...

    def set_columns(self, columns: int) -> object:
        """
        Sets the ::columns property which determines in how
        many columns the icons are arranged. If @columns is
        -1, the number of columns will be chosen automatically
        to fill the available area.
        """
        ...

    def set_cursor(self, path: TreePath, cell: _T.Optional[CellRenderer], start_editing: bool) -> object:
        """
        Sets the current keyboard focus to be at @path, and selects it.  This is
        useful when you want to focus the user’s attention on a particular item.
        If @cell is not %NULL, then focus is given to the cell specified by
        it. Additionally, if @start_editing is %TRUE, then editing should be
        started in the specified cell.

        This function is often followed by `gtk_widget_grab_focus
        (icon_view)` in order to give keyboard focus to the widget.
        Please note that editing can only happen when the widget is realized.
        """
        ...

    def set_drag_dest_item(self, path: _T.Optional[TreePath], pos: IconViewDropPosition) -> object:
        """
        Sets the item that is highlighted for feedback.
        """
        ...

    def set_item_orientation(self, orientation: Orientation) -> object:
        """
        Sets the ::item-orientation property which determines whether the labels
        are drawn beside the icons instead of below.
        """
        ...

    def set_item_padding(self, item_padding: int) -> object:
        """
        Sets the #GtkIconView:item-padding property which specifies the padding
        around each of the icon view’s items.
        """
        ...

    def set_item_width(self, item_width: int) -> object:
        """
        Sets the ::item-width property which specifies the width
        to use for each item. If it is set to -1, the icon view will
        automatically determine a suitable item size.
        """
        ...

    def set_margin(self, margin: int) -> object:
        """
        Sets the ::margin property which specifies the space
        which is inserted at the top, bottom, left and right
        of the icon view.
        """
        ...

    def set_markup_column(self, column: int) -> object:
        """
        Sets the column with markup information for @icon_view to be
        @column. The markup column must be of type #G_TYPE_STRING.
        If the markup column is set to something, it overrides
        the text column set by gtk_icon_view_set_text_column().
        """
        ...

    def set_model(self, model: _T.Optional[TreeModel]) -> object:
        """
        Sets the model for a #GtkIconView.
        If the @icon_view already has a model set, it will remove
        it before setting the new model.  If @model is %NULL, then
        it will unset the old model.
        """
        ...

    def set_pixbuf_column(self, column: int) -> object:
        """
        Sets the column with pixbufs for @icon_view to be @column. The pixbuf
        column must be of type #GDK_TYPE_PIXBUF
        """
        ...

    def set_reorderable(self, reorderable: bool) -> object:
        """
        This function is a convenience function to allow you to reorder models that
        support the #GtkTreeDragSourceIface and the #GtkTreeDragDestIface.  Both
        #GtkTreeStore and #GtkListStore support these.  If @reorderable is %TRUE, then
        the user can reorder the model by dragging and dropping rows.  The
        developer can listen to these changes by connecting to the model's
        row_inserted and row_deleted signals. The reordering is implemented by setting up
        the icon view as a drag source and destination. Therefore, drag and
        drop can not be used in a reorderable view for any other purpose.

        This function does not give you any degree of control over the order -- any
        reordering is allowed.  If more control is needed, you should probably
        handle drag and drop manually.
        """
        ...

    def set_row_spacing(self, row_spacing: int) -> object:
        """
        Sets the ::row-spacing property which specifies the space
        which is inserted between the rows of the icon view.
        """
        ...

    def set_selection_mode(self, mode: SelectionMode) -> object:
        """
        Sets the selection mode of the @icon_view.
        """
        ...

    def set_spacing(self, spacing: int) -> object:
        """
        Sets the ::spacing property which specifies the space
        which is inserted between the cells (i.e. the icon and
        the text) of an item.
        """
        ...

    def set_text_column(self, column: int) -> object:
        """
        Sets the column with text for @icon_view to be @column. The text
        column must be of type #G_TYPE_STRING.
        """
        ...

    def set_tooltip_cell(self, tooltip: Tooltip, path: TreePath, cell: _T.Optional[CellRenderer]) -> object:
        """
        Sets the tip area of @tooltip to the area which @cell occupies in
        the item pointed to by @path. See also gtk_tooltip_set_tip_area().

        See also gtk_icon_view_set_tooltip_column() for a simpler alternative.
        """
        ...

    def set_tooltip_column(self, column: int) -> object:
        """
        If you only plan to have simple (text-only) tooltips on full items, you
        can use this function to have #GtkIconView handle these automatically
        for you. @column should be set to the column in @icon_view’s model
        containing the tooltip texts, or -1 to disable this feature.

        When enabled, #GtkWidget:has-tooltip will be set to %TRUE and
        @icon_view will connect a #GtkWidget::query-tooltip signal handler.

        Note that the signal handler sets the text with gtk_tooltip_set_markup(),
        so &, <, etc have to be escaped in the text.
        """
        ...

    def set_tooltip_item(self, tooltip: Tooltip, path: TreePath) -> object:
        """
        Sets the tip area of @tooltip to be the area covered by the item at @path.
        See also gtk_icon_view_set_tooltip_column() for a simpler alternative.
        See also gtk_tooltip_set_tip_area().
        """
        ...

    def unselect_all(self) -> object:
        """
        Unselects all the icons.
        """
        ...

    def unselect_path(self, path: TreePath) -> object:
        """
        Unselects the row at @path.
        """
        ...

    def unset_model_drag_dest(self) -> object:
        """
        Undoes the effect of gtk_icon_view_enable_model_drag_dest(). Calling this
        method sets #GtkIconView:reorderable to %FALSE.
        """
        ...

    def unset_model_drag_source(self) -> object:
        """
        Undoes the effect of gtk_icon_view_enable_model_drag_source(). Calling this
        method sets #GtkIconView:reorderable to %FALSE.
        """
        ...


    ...

class IconViewAccessible(ContainerAccessible, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Image(Misc, Atk.ImplementorIface, Buildable):
    """
    The #GtkImage widget displays an image. Various kinds of object
    can be displayed as an image; most typically, you would load a
    #GdkPixbuf ("pixel buffer") from a file, and then display that.
    There’s a convenience function to do this, gtk_image_new_from_file(),
    used as follows:
    |[<!-- language="C" -->
      GtkWidget *image;
      image = gtk_image_new_from_file ("myfile.png");
    ]|
    If the file isn’t loaded successfully, the image will contain a
    “broken image” icon similar to that used in many web browsers.
    If you want to handle errors in loading the file yourself,
    for example by displaying an error message, then load the image with
    gdk_pixbuf_new_from_file(), then create the #GtkImage with
    gtk_image_new_from_pixbuf().

    The image file may contain an animation, if so the #GtkImage will
    display an animation (#GdkPixbufAnimation) instead of a static image.

    #GtkImage is a subclass of #GtkMisc, which implies that you can
    align it (center, left, right) and add padding to it, using
    #GtkMisc methods.

    #GtkImage is a “no window” widget (has no #GdkWindow of its own),
    so by default does not receive events. If you want to receive events
    on the image, such as button clicks, place the image inside a
    #GtkEventBox, then connect to the event signals on the event box.

    ## Handling button press events on a #GtkImage.

    |[<!-- language="C" -->
      static gboolean
      button_press_callback (GtkWidget      *event_box,
                             GdkEventButton *event,
                             gpointer        data)
      {
        g_print ("Event box clicked at coordinates %f,%f\n",
                 event->x, event->y);

        // Returning TRUE means we handled the event, so the signal
        // emission should be stopped (don’t call any further callbacks
        // that may be connected). Return FALSE to continue invoking callbacks.
        return TRUE;
      }

      static GtkWidget*
      create_image (void)
      {
        GtkWidget *image;
        GtkWidget *event_box;

        image = gtk_image_new_from_file ("myfile.png");

        event_box = gtk_event_box_new ();

        gtk_container_add (GTK_CONTAINER (event_box), image);

        g_signal_connect (G_OBJECT (event_box),
                          "button_press_event",
                          G_CALLBACK (button_press_callback),
                          image);

        return image;
      }
    ]|

    When handling events on the event box, keep in mind that coordinates
    in the image may be different from event box coordinates due to
    the alignment and padding settings on the image (see #GtkMisc).
    The simplest way to solve this is to set the alignment to 0.0
    (left/top), and set the padding to zero. Then the origin of
    the image will be the same as the origin of the event box.

    Sometimes an application will want to avoid depending on external data
    files, such as image files. GTK+ comes with a program to avoid this,
    called “gdk-pixbuf-csource”. This library
    allows you to convert an image into a C variable declaration, which
    can then be loaded into a #GdkPixbuf using
    gdk_pixbuf_new_from_inline().

    # CSS nodes

    GtkImage has a single CSS node with the name image. The style classes
    may appear on image CSS nodes: .icon-dropshadow, .lowres-icon.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new empty #GtkImage widget.
        """
        ...


    @classmethod
    def new_from_animation(cls, animation: GdkPixbuf.PixbufAnimation) -> Widget:
        """
        Creates a #GtkImage displaying the given animation.
        The #GtkImage does not assume a reference to the
        animation; you still need to unref it if you own references.
        #GtkImage will add its own reference rather than adopting yours.

        Note that the animation frames are shown using a timeout with
        #G_PRIORITY_DEFAULT. When using animations to indicate busyness,
        keep in mind that the animation will only be shown if the main loop
        is not busy with something that has a higher priority.
        """
        ...


    @classmethod
    def new_from_file(cls, filename: str) -> Widget:
        """
        Creates a new #GtkImage displaying the file @filename. If the file
        isn’t found or can’t be loaded, the resulting #GtkImage will
        display a “broken image” icon. This function never returns %NULL,
        it always returns a valid #GtkImage widget.

        If the file contains an animation, the image will contain an
        animation.

        If you need to detect failures to load the file, use
        gdk_pixbuf_new_from_file() to load the file yourself, then create
        the #GtkImage from the pixbuf. (Or for animations, use
        gdk_pixbuf_animation_new_from_file()).

        The storage type (gtk_image_get_storage_type()) of the returned
        image is not defined, it will be whatever is appropriate for
        displaying the file.
        """
        ...


    @classmethod
    def new_from_gicon(cls, icon: Gio.Icon, size: int) -> Widget:
        """
        Creates a #GtkImage displaying an icon from the current icon theme.
        If the icon name isn’t known, a “broken image” icon will be
        displayed instead.  If the current icon theme is changed, the icon
        will be updated appropriately.
        """
        ...


    @classmethod
    def new_from_icon_name(cls, icon_name: _T.Optional[str], size: int) -> Widget:
        """
        Creates a #GtkImage displaying an icon from the current icon theme.
        If the icon name isn’t known, a “broken image” icon will be
        displayed instead.  If the current icon theme is changed, the icon
        will be updated appropriately.
        """
        ...


    @classmethod
    def new_from_icon_set(cls, icon_set: IconSet, size: int) -> Widget:
        """
        Creates a #GtkImage displaying an icon set. Sample stock sizes are
        #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. Instead of using
        this function, usually it’s better to create a #GtkIconFactory, put
        your icon sets in the icon factory, add the icon factory to the
        list of default factories with gtk_icon_factory_add_default(), and
        then use gtk_image_new_from_stock(). This will allow themes to
        override the icon you ship with your application.

        The #GtkImage does not assume a reference to the
        icon set; you still need to unref it if you own references.
        #GtkImage will add its own reference rather than adopting yours.
        """
        ...


    @classmethod
    def new_from_pixbuf(cls, pixbuf: _T.Optional[GdkPixbuf.Pixbuf]) -> Widget:
        """
        Creates a new #GtkImage displaying @pixbuf.
        The #GtkImage does not assume a reference to the
        pixbuf; you still need to unref it if you own references.
        #GtkImage will add its own reference rather than adopting yours.

        Note that this function just creates an #GtkImage from the pixbuf. The
        #GtkImage created will not react to state changes. Should you want that,
        you should use gtk_image_new_from_icon_name().
        """
        ...


    @classmethod
    def new_from_resource(cls, resource_path: str) -> Widget:
        """
        Creates a new #GtkImage displaying the resource file @resource_path. If the file
        isn’t found or can’t be loaded, the resulting #GtkImage will
        display a “broken image” icon. This function never returns %NULL,
        it always returns a valid #GtkImage widget.

        If the file contains an animation, the image will contain an
        animation.

        If you need to detect failures to load the file, use
        gdk_pixbuf_new_from_file() to load the file yourself, then create
        the #GtkImage from the pixbuf. (Or for animations, use
        gdk_pixbuf_animation_new_from_file()).

        The storage type (gtk_image_get_storage_type()) of the returned
        image is not defined, it will be whatever is appropriate for
        displaying the file.
        """
        ...


    @classmethod
    def new_from_stock(cls, stock_id: str, size: int) -> Widget:
        """
        Creates a #GtkImage displaying a stock icon. Sample stock icon
        names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. Sample stock sizes
        are #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock
        icon name isn’t known, the image will be empty.
        You can register your own stock icon names, see
        gtk_icon_factory_add_default() and gtk_icon_factory_add().
        """
        ...


    @classmethod
    def new_from_surface(cls, surface: _T.Optional[cairo.Surface]) -> Widget:
        """
        Creates a new #GtkImage displaying @surface.
        The #GtkImage does not assume a reference to the
        surface; you still need to unref it if you own references.
        #GtkImage will add its own reference rather than adopting yours.
        """
        ...

    def clear(self) -> object:
        """
        Resets the image to be empty.
        """
        ...

    def get_animation(self) -> GdkPixbuf.PixbufAnimation:
        """
        Gets the #GdkPixbufAnimation being displayed by the #GtkImage.
        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()).
        The caller of this function does not own a reference to the
        returned animation.
        """
        ...

    def get_gicon(self, gicon: Gio.Icon, size: int) -> object:
        """
        Gets the #GIcon and size being displayed by the #GtkImage.
        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_GICON (see gtk_image_get_storage_type()).
        The caller of this function does not own a reference to the
        returned #GIcon.
        """
        ...

    def get_icon_name(self, icon_name: str, size: int) -> object:
        """
        Gets the icon name and size being displayed by the #GtkImage.
        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type()).
        The returned string is owned by the #GtkImage and should not
        be freed.
        """
        ...

    def get_icon_set(self, icon_set: IconSet, size: int) -> object:
        """
        Gets the icon set and size being displayed by the #GtkImage.
        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type()).
        """
        ...

    def get_pixbuf(self) -> GdkPixbuf.Pixbuf:
        """
        Gets the #GdkPixbuf being displayed by the #GtkImage.
        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()).
        The caller of this function does not own a reference to the
        returned pixbuf.
        """
        ...

    def get_pixel_size(self) -> int:
        """
        Gets the pixel size used for named icons.
        """
        ...

    def get_stock(self, stock_id: str, size: int) -> object:
        """
        Gets the stock icon name and size being displayed by the #GtkImage.
        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_STOCK (see gtk_image_get_storage_type()).
        The returned string is owned by the #GtkImage and should not
        be freed.
        """
        ...

    def get_storage_type(self) -> ImageType:
        """
        Gets the type of representation being used by the #GtkImage
        to store image data. If the #GtkImage has no image data,
        the return value will be %GTK_IMAGE_EMPTY.
        """
        ...

    def set_from_animation(self, animation: GdkPixbuf.PixbufAnimation) -> object:
        """
        Causes the #GtkImage to display the given animation (or display
        nothing, if you set the animation to %NULL).
        """
        ...

    def set_from_file(self, filename: _T.Optional[str]) -> object:
        """
        See gtk_image_new_from_file() for details.
        """
        ...

    def set_from_gicon(self, icon: Gio.Icon, size: int) -> object:
        """
        See gtk_image_new_from_gicon() for details.
        """
        ...

    def set_from_icon_name(self, icon_name: _T.Optional[str], size: int) -> object:
        """
        See gtk_image_new_from_icon_name() for details.
        """
        ...

    def set_from_icon_set(self, icon_set: IconSet, size: int) -> object:
        """
        See gtk_image_new_from_icon_set() for details.
        """
        ...

    def set_from_pixbuf(self, pixbuf: _T.Optional[GdkPixbuf.Pixbuf]) -> object:
        """
        See gtk_image_new_from_pixbuf() for details.
        """
        ...

    def set_from_resource(self, resource_path: _T.Optional[str]) -> object:
        """
        See gtk_image_new_from_resource() for details.
        """
        ...

    def set_from_stock(self, stock_id: str, size: int) -> object:
        """
        See gtk_image_new_from_stock() for details.
        """
        ...

    def set_from_surface(self, surface: _T.Optional[cairo.Surface]) -> object:
        """
        See gtk_image_new_from_surface() for details.
        """
        ...

    def set_pixel_size(self, pixel_size: int) -> object:
        """
        Sets the pixel size to use for named icons. If the pixel size is set
        to a value != -1, it is used instead of the icon size set by
        gtk_image_set_from_icon_name().
        """
        ...


    ...

class ImageAccessible(WidgetAccessible, Atk.Component, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ImageCellAccessible(RendererCellAccessible, Atk.Action, Atk.Component, Atk.Image, Atk.TableCell):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ImageMenuItem(MenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A GtkImageMenuItem is a menu item which has an icon next to the text label.

    This is functionally equivalent to:

    |[<!-- language="C" -->
      GtkWidget *box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
      GtkWidget *icon = gtk_image_new_from_icon_name ("folder-music-symbolic", GTK_ICON_SIZE_MENU);
      GtkWidget *label = gtk_label_new ("Music");
      GtkWidget *menu_item = gtk_menu_item_new ();

      gtk_container_add (GTK_CONTAINER (box), icon);
      gtk_container_add (GTK_CONTAINER (box), label);

      gtk_container_add (GTK_CONTAINER (menu_item), box);

      gtk_widget_show_all (menu_item);
    ]|

    Note that the user may disable display of menu icons using
    the #GtkSettings:gtk-menu-images setting, so make sure to still
    fill in the text label. If you want to ensure that your menu items
    show an icon you are strongly encouraged to use a #GtkMenuItem
    with a #GtkImage instead.

    #GtkImageMenuItem has been deprecated since GTK+ 3.10. If you want to
    display an icon in a menu item, you should use #GtkMenuItem and pack a
    #GtkBox with a #GtkImage and a #GtkLabel instead. You should also consider
    using #GtkBuilder and the XML #GMenu description for creating menus, by
    following the [GMenu guide][https://developer.gnome.org/GMenu/]. You should
    consider using icons in menu items only sparingly, and for "objects" (or
    "nouns") elements only, like bookmarks, files, and links; "actions" (or
    "verbs") should not have icons.

    Furthermore, if you would like to display keyboard accelerator, you must
    pack the accel label into the box using gtk_box_pack_end() and align the
    label, otherwise the accelerator will not display correctly. The following
    code snippet adds a keyboard accelerator to the menu item, with a key
    binding of Ctrl+M:

    |[<!-- language="C" -->
      GtkWidget *box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
      GtkWidget *icon = gtk_image_new_from_icon_name ("folder-music-symbolic", GTK_ICON_SIZE_MENU);
      GtkWidget *label = gtk_accel_label_new ("Music");
      GtkWidget *menu_item = gtk_menu_item_new ();
      GtkAccelGroup *accel_group = gtk_accel_group_new ();

      gtk_container_add (GTK_CONTAINER (box), icon);

      gtk_label_set_use_underline (GTK_LABEL (label), TRUE);
      gtk_label_set_xalign (GTK_LABEL (label), 0.0);

      gtk_widget_add_accelerator (menu_item, "activate", accel_group,
                                  GDK_KEY_m, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);
      gtk_accel_label_set_accel_widget (GTK_ACCEL_LABEL (label), menu_item);

      gtk_box_pack_end (GTK_BOX (box), label, TRUE, TRUE, 0);

      gtk_container_add (GTK_CONTAINER (menu_item), box);

      gtk_widget_show_all (menu_item);
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkImageMenuItem with an empty label.
        """
        ...


    @classmethod
    def new_from_stock(cls, stock_id: str, accel_group: _T.Optional[AccelGroup]) -> Widget:
        """
        Creates a new #GtkImageMenuItem containing the image and text from a
        stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
        and #GTK_STOCK_APPLY.

        If you want this menu item to have changeable accelerators, then pass in
        %NULL for accel_group. Next call gtk_menu_item_set_accel_path() with an
        appropriate path for the menu item, use gtk_stock_lookup() to look up the
        standard accelerator for the stock item, and if one is found, call
        gtk_accel_map_add_entry() to register it.
        """
        ...


    @classmethod
    def new_with_label(cls, label: str) -> Widget:
        """
        Creates a new #GtkImageMenuItem containing a label.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, label: str) -> Widget:
        """
        Creates a new #GtkImageMenuItem containing a label. The label
        will be created using gtk_label_new_with_mnemonic(), so underscores
        in @label indicate the mnemonic for the menu item.
        """
        ...

    def get_always_show_image(self) -> bool:
        """
        Returns whether the menu item will ignore the #GtkSettings:gtk-menu-images
        setting and always show the image, if available.
        """
        ...

    def get_image(self) -> Widget:
        """
        Gets the widget that is currently set as the image of @image_menu_item.
        See gtk_image_menu_item_set_image().
        """
        ...

    def get_use_stock(self) -> bool:
        """
        Checks whether the label set in the menuitem is used as a
        stock id to select the stock item for the item.
        """
        ...

    def set_accel_group(self, accel_group: AccelGroup) -> object:
        """
        Specifies an @accel_group to add the menu items accelerator to
        (this only applies to stock items so a stock item must already
        be set, make sure to call gtk_image_menu_item_set_use_stock()
        and gtk_menu_item_set_label() with a valid stock item first).

        If you want this menu item to have changeable accelerators then
        you shouldnt need this (see gtk_image_menu_item_new_from_stock()).
        """
        ...

    def set_always_show_image(self, always_show: bool) -> object:
        """
        If %TRUE, the menu item will ignore the #GtkSettings:gtk-menu-images
        setting and always show the image, if available.

        Use this property if the menuitem would be useless or hard to use
        without the image.
        """
        ...

    def set_image(self, image: _T.Optional[Widget]) -> object:
        """
        Sets the image of @image_menu_item to the given widget.
        Note that it depends on the show-menu-images setting whether
        the image will be displayed or not.
        """
        ...

    def set_use_stock(self, use_stock: bool) -> object:
        """
        If %TRUE, the label set in the menuitem is used as a
        stock id to select the stock item for the item.
        """
        ...


    ...

class InfoBar(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    #GtkInfoBar is a widget that can be used to show messages to
    the user without showing a dialog. It is often temporarily shown
    at the top or bottom of a document. In contrast to #GtkDialog, which
    has a action area at the bottom, #GtkInfoBar has an action area
    at the side.

    The API of #GtkInfoBar is very similar to #GtkDialog, allowing you
    to add buttons to the action area with gtk_info_bar_add_button() or
    gtk_info_bar_new_with_buttons(). The sensitivity of action widgets
    can be controlled with gtk_info_bar_set_response_sensitive().
    To add widgets to the main content area of a #GtkInfoBar, use
    gtk_info_bar_get_content_area() and add your widgets to the container.

    Similar to #GtkMessageDialog, the contents of a #GtkInfoBar can by
    classified as error message, warning, informational message, etc,
    by using gtk_info_bar_set_message_type(). GTK+ may use the message type
    to determine how the message is displayed.

    A simple example for using a #GtkInfoBar:
    |[<!-- language="C" -->
    GtkWidget *widget, *message_label, *content_area;
    GtkWidget *grid;
    GtkInfoBar *bar;

    // set up info bar
    widget = gtk_info_bar_new ();
    bar = GTK_INFO_BAR (widget);
    grid = gtk_grid_new ();

    gtk_widget_set_no_show_all (widget, TRUE);
    message_label = gtk_label_new ("");
    content_area = gtk_info_bar_get_content_area (bar);
    gtk_container_add (GTK_CONTAINER (content_area),
                       message_label);
    gtk_info_bar_add_button (bar,
                             _("_OK"),
                             GTK_RESPONSE_OK);
    g_signal_connect (bar,
                      "response",
                      G_CALLBACK (gtk_widget_hide),
                      NULL);
    gtk_grid_attach (GTK_GRID (grid),
                     widget,
                     0, 2, 1, 1);

    // ...

    // show an error message
    gtk_label_set_text (GTK_LABEL (message_label), "An error occurred!");
    gtk_info_bar_set_message_type (bar,
                                   GTK_MESSAGE_ERROR);
    gtk_widget_show (bar);
    ]|

    # GtkInfoBar as GtkBuildable

    The GtkInfoBar implementation of the GtkBuildable interface exposes
    the content area and action area as internal children with the names
    “content_area” and “action_area”.

    GtkInfoBar supports a custom `<action-widgets>` element, which can contain
    multiple `<action-widget>` elements. The “response” attribute specifies a
    numeric response, and the content of the element is the id of widget
    (which should be a child of the dialogs @action_area).

    # CSS nodes

    GtkInfoBar has a single CSS node with name infobar. The node may get
    one of the style classes .info, .warning, .error or .question, depending
    on the message type.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkInfoBar object.
        """
        ...


    @classmethod
    def new_with_buttons(cls, first_button_text: _T.Optional[str], *args: object) -> Widget:
        """
        Creates a new #GtkInfoBar with buttons. Button text/response ID
        pairs should be listed, with a %NULL pointer ending the list.
        Button text can be either a stock ID such as %GTK_STOCK_OK, or
        some arbitrary text. A response ID can be any positive number,
        or one of the values in the #GtkResponseType enumeration. If the
        user clicks one of these dialog buttons, GtkInfoBar will emit
        the “response” signal with the corresponding response ID.
        """
        ...

    def add_action_widget(self, child: Widget, response_id: int) -> object:
        """
        Add an activatable widget to the action area of a #GtkInfoBar,
        connecting a signal handler that will emit the #GtkInfoBar::response
        signal on the message area when the widget is activated. The widget
        is appended to the end of the message areas action area.
        """
        ...

    def add_button(self, button_text: str, response_id: int) -> Button:
        """
        Adds a button with the given text and sets things up so that
        clicking the button will emit the “response” signal with the given
        response_id. The button is appended to the end of the info bars's
        action area. The button widget is returned, but usually you don't
        need it.
        """
        ...

    def add_buttons(self, first_button_text: str, *args: object) -> object:
        """
        Adds more buttons, same as calling gtk_info_bar_add_button()
        repeatedly. The variable argument list should be %NULL-terminated
        as with gtk_info_bar_new_with_buttons(). Each button must have both
        text and response ID.
        """
        ...

    def get_action_area(self) -> Box:
        """
        Returns the action area of @info_bar.
        """
        ...

    def get_content_area(self) -> Box:
        """
        Returns the content area of @info_bar.
        """
        ...

    def get_message_type(self) -> MessageType:
        """
        Returns the message type of the message area.
        """
        ...

    def get_revealed(self) -> bool:
        ...

    def get_show_close_button(self) -> bool:
        """
        Returns whether the widget will display a standard close button.
        """
        ...

    def response(self, response_id: int) -> object:
        """
        Emits the “response” signal with the given @response_id.
        """
        ...

    def set_default_response(self, response_id: int) -> object:
        """
        Sets the last widget in the info bar’s action area with
        the given response_id as the default widget for the dialog.
        Pressing “Enter” normally activates the default widget.

        Note that this function currently requires @info_bar to
        be added to a widget hierarchy.
        """
        ...

    def set_message_type(self, message_type: MessageType) -> object:
        """
        Sets the message type of the message area.

        GTK+ uses this type to determine how the message is displayed.
        """
        ...

    def set_response_sensitive(self, response_id: int, setting: bool) -> object:
        """
        Calls gtk_widget_set_sensitive (widget, setting) for each
        widget in the info bars’s action area with the given response_id.
        A convenient way to sensitize/desensitize dialog buttons.
        """
        ...

    def set_revealed(self, revealed: bool) -> object:
        """
        Sets the GtkInfoBar:revealed property to @revealed. This will cause
        @info_bar to show up with a slide-in transition.

        Note that this property does not automatically show @info_bar and thus won’t
        have any effect if it is invisible.
        """
        ...

    def set_show_close_button(self, setting: bool) -> object:
        """
        If true, a standard close button is shown. When clicked it emits
        the response %GTK_RESPONSE_CLOSE.
        """
        ...


    ...

class Invisible(Widget, Atk.ImplementorIface, Buildable):
    """
    The #GtkInvisible widget is used internally in GTK+, and is probably not
    very useful for application developers.

    It is used for reliable pointer grabs and selection handling in the code
    for drag-and-drop.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkInvisible.
        """
        ...


    @classmethod
    def new_for_screen(cls, screen: Gdk.Screen) -> Widget:
        """
        Creates a new #GtkInvisible object for a specified screen
        """
        ...

    def get_screen(self) -> Gdk.Screen:
        """
        Returns the #GdkScreen object associated with @invisible
        """
        ...

    def set_screen(self, screen: Gdk.Screen) -> object:
        """
        Sets the #GdkScreen where the #GtkInvisible object will be displayed.
        """
        ...


    ...

class Label(Misc, Atk.ImplementorIface, Buildable):
    """
    The #GtkLabel widget displays a small amount of text. As the name
    implies, most labels are used to label another widget such as a
    #GtkButton, a #GtkMenuItem, or a #GtkComboBox.

    # CSS nodes

    |[<!-- language="plain" -->
    label
    ├── [selection]
    ├── [link]
    ┊
    ╰── [link]
    ]|

    GtkLabel has a single CSS node with the name label. A wide variety
    of style classes may be applied to labels, such as .title, .subtitle,
    .dim-label, etc. In the #GtkShortcutsWindow, labels are used wth the
    .keycap style class.

    If the label has a selection, it gets a subnode with name selection.

    If the label has links, there is one subnode per link. These subnodes
    carry the link or visited state depending on whether they have been
    visited.

    # GtkLabel as GtkBuildable

    The GtkLabel implementation of the GtkBuildable interface supports a
    custom `<attributes>` element, which supports any number of `<attribute>`
    elements. The `<attribute>` element has attributes named “name“, “value“,
    “start“ and “end“ and allows you to specify #PangoAttribute values for
    this label.

    An example of a UI definition fragment specifying Pango attributes:

    |[<!-- language="xml" -->
    <object class="GtkLabel">
      <attributes>
        <attribute name="weight" value="PANGO_WEIGHT_BOLD"/>
        <attribute name="background" value="red" start="5" end="10"/>
      </attributes>
    </object>
    ]|

    The start and end attributes specify the range of characters to which the
    Pango attribute applies. If start and end are not specified, the attribute is
    applied to the whole text. Note that specifying ranges does not make much
    sense with translatable attributes. Use markup embedded in the translatable
    content instead.

    # Mnemonics

    Labels may contain “mnemonics”. Mnemonics are
    underlined characters in the label, used for keyboard navigation.
    Mnemonics are created by providing a string with an underscore before
    the mnemonic character, such as `"_File"`, to the
    functions gtk_label_new_with_mnemonic() or
    gtk_label_set_text_with_mnemonic().

    Mnemonics automatically activate any activatable widget the label is
    inside, such as a #GtkButton; if the label is not inside the
    mnemonic’s target widget, you have to tell the label about the target
    using gtk_label_set_mnemonic_widget(). Here’s a simple example where
    the label is inside a button:

    |[<!-- language="C" -->
      // Pressing Alt+H will activate this button
      GtkWidget *button = gtk_button_new ();
      GtkWidget *label = gtk_label_new_with_mnemonic ("_Hello");
      gtk_container_add (GTK_CONTAINER (button), label);
    ]|

    There’s a convenience function to create buttons with a mnemonic label
    already inside:

    |[<!-- language="C" -->
      // Pressing Alt+H will activate this button
      GtkWidget *button = gtk_button_new_with_mnemonic ("_Hello");
    ]|

    To create a mnemonic for a widget alongside the label, such as a
    #GtkEntry, you have to point the label at the entry with
    gtk_label_set_mnemonic_widget():

    |[<!-- language="C" -->
      // Pressing Alt+H will focus the entry
      GtkWidget *entry = gtk_entry_new ();
      GtkWidget *label = gtk_label_new_with_mnemonic ("_Hello");
      gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);
    ]|

    # Markup (styled text)

    To make it easy to format text in a label (changing colors,
    fonts, etc.), label text can be provided in a simple
    [markup format][PangoMarkupFormat].

    Here’s how to create a label with a small font:
    |[<!-- language="C" -->
      GtkWidget *label = gtk_label_new (NULL);
      gtk_label_set_markup (GTK_LABEL (label), "<small>Small text</small>");
    ]|

    (See [complete documentation][PangoMarkupFormat] of available
    tags in the Pango manual.)

    The markup passed to gtk_label_set_markup() must be valid; for example,
    literal <, > and & characters must be escaped as &lt;, &gt;, and &amp;.
    If you pass text obtained from the user, file, or a network to
    gtk_label_set_markup(), you’ll want to escape it with
    g_markup_escape_text() or g_markup_printf_escaped().

    Markup strings are just a convenient way to set the #PangoAttrList on
    a label; gtk_label_set_attributes() may be a simpler way to set
    attributes in some cases. Be careful though; #PangoAttrList tends to
    cause internationalization problems, unless you’re applying attributes
    to the entire string (i.e. unless you set the range of each attribute
    to [0, %G_MAXINT)). The reason is that specifying the start_index and
    end_index for a #PangoAttribute requires knowledge of the exact string
    being displayed, so translations will cause problems.

    # Selectable labels

    Labels can be made selectable with gtk_label_set_selectable().
    Selectable labels allow the user to copy the label contents to
    the clipboard. Only labels that contain useful-to-copy information
    — such as error messages — should be made selectable.

    # Text layout # {#label-text-layout}

    A label can contain any number of paragraphs, but will have
    performance problems if it contains more than a small number.
    Paragraphs are separated by newlines or other paragraph separators
    understood by Pango.

    Labels can automatically wrap text if you call
    gtk_label_set_line_wrap().

    gtk_label_set_justify() sets how the lines in a label align
    with one another. If you want to set how the label as a whole
    aligns in its available space, see the #GtkWidget:halign and
    #GtkWidget:valign properties.

    The #GtkLabel:width-chars and #GtkLabel:max-width-chars properties
    can be used to control the size allocation of ellipsized or wrapped
    labels. For ellipsizing labels, if either is specified (and less
    than the actual text size), it is used as the minimum width, and the actual
    text size is used as the natural width of the label. For wrapping labels,
    width-chars is used as the minimum width, if specified, and max-width-chars
    is used as the natural width. Even if max-width-chars specified, wrapping
    labels will be rewrapped to use all of the available width.

    Note that the interpretation of #GtkLabel:width-chars and
    #GtkLabel:max-width-chars has changed a bit with the introduction of
    [width-for-height geometry management.][geometry-management]

    # Links

    Since 2.18, GTK+ supports markup for clickable hyperlinks in addition
    to regular Pango markup. The markup for links is borrowed from HTML,
    using the `<a>` with “href“ and “title“ attributes. GTK+ renders links
    similar to the way they appear in web browsers, with colored, underlined
    text. The “title“ attribute is displayed as a tooltip on the link.

    An example looks like this:

    |[<!-- language="C" -->
    const gchar *text =
    "Go to the"
    "<a href=\"http://www.gtk.org title=\"&lt;i&gt;Our&lt;/i&gt; website\">"
    "GTK+ website</a> for more...";
    GtkWidget *label = gtk_label_new (NULL);
    gtk_label_set_markup (GTK_LABEL (label), text);
    ]|

    It is possible to implement custom handling for links and their tooltips with
    the #GtkLabel::activate-link signal and the gtk_label_get_current_uri() function.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, str: _T.Optional[str]) -> Widget:
        """
        Creates a new label with the given text inside it. You can
        pass %NULL to get an empty label widget.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, str: _T.Optional[str]) -> Widget:
        """
        Creates a new #GtkLabel, containing the text in @str.

        If characters in @str are preceded by an underscore, they are
        underlined. If you need a literal underscore character in a label, use
        '__' (two underscores). The first underlined character represents a
        keyboard accelerator called a mnemonic. The mnemonic key can be used
        to activate another widget, chosen automatically, or explicitly using
        gtk_label_set_mnemonic_widget().

        If gtk_label_set_mnemonic_widget() is not called, then the first
        activatable ancestor of the #GtkLabel will be chosen as the mnemonic
        widget. For instance, if the label is inside a button or menu item,
        the button or menu item will automatically become the mnemonic widget
        and be activated by the mnemonic.
        """
        ...

    def get_angle(self) -> float:
        """
        Gets the angle of rotation for the label. See
        gtk_label_set_angle().
        """
        ...

    def get_attributes(self) -> Pango.AttrList:
        """
        Gets the attribute list that was set on the label using
        gtk_label_set_attributes(), if any. This function does
        not reflect attributes that come from the labels markup
        (see gtk_label_set_markup()). If you want to get the
        effective attributes for the label, use
        pango_layout_get_attribute (gtk_label_get_layout (label)).
        """
        ...

    def get_current_uri(self) -> str:
        """
        Returns the URI for the currently active link in the label.
        The active link is the one under the mouse pointer or, in a
        selectable label, the link in which the text cursor is currently
        positioned.

        This function is intended for use in a #GtkLabel::activate-link handler
        or for use in a #GtkWidget::query-tooltip handler.
        """
        ...

    def get_ellipsize(self) -> Pango.EllipsizeMode:
        """
        Returns the ellipsizing position of the label. See gtk_label_set_ellipsize().
        """
        ...

    def get_justify(self) -> Justification:
        """
        Returns the justification of the label. See gtk_label_set_justify().
        """
        ...

    def get_label(self) -> str:
        """
        Fetches the text from a label widget including any embedded
        underlines indicating mnemonics and Pango markup. (See
        gtk_label_get_text()).
        """
        ...

    def get_layout(self) -> Pango.Layout:
        """
        Gets the #PangoLayout used to display the label.
        The layout is useful to e.g. convert text positions to
        pixel positions, in combination with gtk_label_get_layout_offsets().
        The returned layout is owned by the @label so need not be
        freed by the caller. The @label is free to recreate its layout at
        any time, so it should be considered read-only.
        """
        ...

    def get_layout_offsets(self, x: int, y: int) -> object:
        """
        Obtains the coordinates where the label will draw the #PangoLayout
        representing the text in the label; useful to convert mouse events
        into coordinates inside the #PangoLayout, e.g. to take some action
        if some part of the label is clicked. Of course you will need to
        create a #GtkEventBox to receive the events, and pack the label
        inside it, since labels are windowless (they return %FALSE from
        gtk_widget_get_has_window()). Remember
        when using the #PangoLayout functions you need to convert to
        and from pixels using PANGO_PIXELS() or #PANGO_SCALE.
        """
        ...

    def get_line_wrap(self) -> bool:
        """
        Returns whether lines in the label are automatically wrapped.
        See gtk_label_set_line_wrap().
        """
        ...

    def get_line_wrap_mode(self) -> Pango.WrapMode:
        """
        Returns line wrap mode used by the label. See gtk_label_set_line_wrap_mode().
        """
        ...

    def get_lines(self) -> int:
        """
        Gets the number of lines to which an ellipsized, wrapping
        label should be limited. See gtk_label_set_lines().
        """
        ...

    def get_max_width_chars(self) -> int:
        """
        Retrieves the desired maximum width of @label, in characters. See
        gtk_label_set_width_chars().
        """
        ...

    def get_mnemonic_keyval(self) -> int:
        """
        If the label has been set so that it has an mnemonic key this function
        returns the keyval used for the mnemonic accelerator. If there is no
        mnemonic set up it returns #GDK_KEY_VoidSymbol.
        """
        ...

    def get_mnemonic_widget(self) -> Widget:
        """
        Retrieves the target of the mnemonic (keyboard shortcut) of this
        label. See gtk_label_set_mnemonic_widget().
        """
        ...

    def get_selectable(self) -> bool:
        """
        Gets the value set by gtk_label_set_selectable().
        """
        ...

    def get_selection_bounds(self, start: int, end: int) -> bool:
        """
        Gets the selected range of characters in the label, returning %TRUE
        if there’s a selection.
        """
        ...

    def get_single_line_mode(self) -> bool:
        """
        Returns whether the label is in single line mode.
        """
        ...

    def get_text(self) -> str:
        """
        Fetches the text from a label widget, as displayed on the
        screen. This does not include any embedded underlines
        indicating mnemonics or Pango markup. (See gtk_label_get_label())
        """
        ...

    def get_track_visited_links(self) -> bool:
        """
        Returns whether the label is currently keeping track
        of clicked links.
        """
        ...

    def get_use_markup(self) -> bool:
        """
        Returns whether the label’s text is interpreted as marked up with
        the [Pango text markup language][PangoMarkupFormat].
        See gtk_label_set_use_markup ().
        """
        ...

    def get_use_underline(self) -> bool:
        """
        Returns whether an embedded underline in the label indicates a
        mnemonic. See gtk_label_set_use_underline().
        """
        ...

    def get_width_chars(self) -> int:
        """
        Retrieves the desired width of @label, in characters. See
        gtk_label_set_width_chars().
        """
        ...

    def get_xalign(self) -> float:
        """
        Gets the #GtkLabel:xalign property for @label.
        """
        ...

    def get_yalign(self) -> float:
        """
        Gets the #GtkLabel:yalign property for @label.
        """
        ...

    def select_region(self, start_offset: int, end_offset: int) -> object:
        """
        Selects a range of characters in the label, if the label is selectable.
        See gtk_label_set_selectable(). If the label is not selectable,
        this function has no effect. If @start_offset or
        @end_offset are -1, then the end of the label will be substituted.
        """
        ...

    def set_angle(self, angle: float) -> object:
        """
        Sets the angle of rotation for the label. An angle of 90 reads from
        from bottom to top, an angle of 270, from top to bottom. The angle
        setting for the label is ignored if the label is selectable,
        wrapped, or ellipsized.
        """
        ...

    def set_attributes(self, attrs: _T.Optional[Pango.AttrList]) -> object:
        """
        Sets a #PangoAttrList; the attributes in the list are applied to the
        label text.

        The attributes set with this function will be applied
        and merged with any other attributes previously effected by way
        of the #GtkLabel:use-underline or #GtkLabel:use-markup properties.
        While it is not recommended to mix markup strings with manually set
        attributes, if you must; know that the attributes will be applied
        to the label after the markup string is parsed.
        """
        ...

    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> object:
        """
        Sets the mode used to ellipsize (add an ellipsis: "...") to the text
        if there is not enough space to render the entire string.
        """
        ...

    def set_justify(self, jtype: Justification) -> object:
        """
        Sets the alignment of the lines in the text of the label relative to
        each other. %GTK_JUSTIFY_LEFT is the default value when the widget is
        first created with gtk_label_new(). If you instead want to set the
        alignment of the label as a whole, use gtk_widget_set_halign() instead.
        gtk_label_set_justify() has no effect on labels containing only a
        single line.
        """
        ...

    def set_label(self, str: str) -> object:
        """
        Sets the text of the label. The label is interpreted as
        including embedded underlines and/or Pango markup depending
        on the values of the #GtkLabel:use-underline and
        #GtkLabel:use-markup properties.
        """
        ...

    def set_line_wrap(self, wrap: bool) -> object:
        """
        Toggles line wrapping within the #GtkLabel widget. %TRUE makes it break
        lines if text exceeds the widget’s size. %FALSE lets the text get cut off
        by the edge of the widget if it exceeds the widget size.

        Note that setting line wrapping to %TRUE does not make the label
        wrap at its parent container’s width, because GTK+ widgets
        conceptually can’t make their requisition depend on the parent
        container’s size. For a label that wraps at a specific position,
        set the label’s width using gtk_widget_set_size_request().
        """
        ...

    def set_line_wrap_mode(self, wrap_mode: Pango.WrapMode) -> object:
        """
        If line wrapping is on (see gtk_label_set_line_wrap()) this controls how
        the line wrapping is done. The default is %PANGO_WRAP_WORD which means
        wrap on word boundaries.
        """
        ...

    def set_lines(self, lines: int) -> object:
        """
        Sets the number of lines to which an ellipsized, wrapping label
        should be limited. This has no effect if the label is not wrapping
        or ellipsized. Set this to -1 if you don’t want to limit the
        number of lines.
        """
        ...

    def set_markup(self, str: str) -> object:
        """
        Parses @str which is marked up with the
        [Pango text markup language][PangoMarkupFormat], setting the
        label’s text and attribute list based on the parse results.

        If the @str is external data, you may need to escape it with
        g_markup_escape_text() or g_markup_printf_escaped():

        |[<!-- language="C" -->
        GtkWidget *label = gtk_label_new (NULL);
        const char *str = "some text";
        const char *format = "<span style=\"italic\">\%s</span>";
        char *markup;

        markup = g_markup_printf_escaped (format, str);
        gtk_label_set_markup (GTK_LABEL (label), markup);
        g_free (markup);
        ]|

        This function will set the #GtkLabel:use-markup property to %TRUE as
        a side effect.

        If you set the label contents using the #GtkLabel:label property you
        should also ensure that you set the #GtkLabel:use-markup property
        accordingly.

        See also: gtk_label_set_text()
        """
        ...

    def set_markup_with_mnemonic(self, str: str) -> object:
        """
        Parses @str which is marked up with the
        [Pango text markup language][PangoMarkupFormat],
        setting the label’s text and attribute list based on the parse results.
        If characters in @str are preceded by an underscore, they are underlined
        indicating that they represent a keyboard accelerator called a mnemonic.

        The mnemonic key can be used to activate another widget, chosen
        automatically, or explicitly using gtk_label_set_mnemonic_widget().
        """
        ...

    def set_max_width_chars(self, n_chars: int) -> object:
        """
        Sets the desired maximum width in characters of @label to @n_chars.
        """
        ...

    def set_mnemonic_widget(self, widget: _T.Optional[Widget]) -> object:
        """
        If the label has been set so that it has an mnemonic key (using
        i.e. gtk_label_set_markup_with_mnemonic(),
        gtk_label_set_text_with_mnemonic(), gtk_label_new_with_mnemonic()
        or the “use_underline” property) the label can be associated with a
        widget that is the target of the mnemonic. When the label is inside
        a widget (like a #GtkButton or a #GtkNotebook tab) it is
        automatically associated with the correct widget, but sometimes
        (i.e. when the target is a #GtkEntry next to the label) you need to
        set it explicitly using this function.

        The target widget will be accelerated by emitting the
        GtkWidget::mnemonic-activate signal on it. The default handler for
        this signal will activate the widget if there are no mnemonic collisions
        and toggle focus between the colliding widgets otherwise.
        """
        ...

    def set_pattern(self, pattern: str) -> object:
        """
        The pattern of underlines you want under the existing text within the
        #GtkLabel widget.  For example if the current text of the label says
        “FooBarBaz” passing a pattern of “___   ___” will underline
        “Foo” and “Baz” but not “Bar”.
        """
        ...

    def set_selectable(self, setting: bool) -> object:
        """
        Selectable labels allow the user to select text from the label, for
        copy-and-paste.
        """
        ...

    def set_single_line_mode(self, single_line_mode: bool) -> object:
        """
        Sets whether the label is in single line mode.
        """
        ...

    def set_text(self, str: str) -> object:
        """
        Sets the text within the #GtkLabel widget. It overwrites any text that
        was there before.

        This function will clear any previously set mnemonic accelerators, and
        set the #GtkLabel:use-underline property to %FALSE as a side effect.

        This function will set the #GtkLabel:use-markup property to %FALSE
        as a side effect.

        See also: gtk_label_set_markup()
        """
        ...

    def set_text_with_mnemonic(self, str: str) -> object:
        """
        Sets the label’s text from the string @str.
        If characters in @str are preceded by an underscore, they are underlined
        indicating that they represent a keyboard accelerator called a mnemonic.
        The mnemonic key can be used to activate another widget, chosen
        automatically, or explicitly using gtk_label_set_mnemonic_widget().
        """
        ...

    def set_track_visited_links(self, track_links: bool) -> object:
        """
        Sets whether the label should keep track of clicked
        links (and use a different color for them).
        """
        ...

    def set_use_markup(self, setting: bool) -> object:
        """
        Sets whether the text of the label contains markup in
        [Pango’s text markup language][PangoMarkupFormat].
        See gtk_label_set_markup().
        """
        ...

    def set_use_underline(self, setting: bool) -> object:
        """
        If true, an underline in the text indicates the next character should be
        used for the mnemonic accelerator key.
        """
        ...

    def set_width_chars(self, n_chars: int) -> object:
        """
        Sets the desired width in characters of @label to @n_chars.
        """
        ...

    def set_xalign(self, xalign: float) -> object:
        """
        Sets the #GtkLabel:xalign property for @label.
        """
        ...

    def set_yalign(self, yalign: float) -> object:
        """
        Sets the #GtkLabel:yalign property for @label.
        """
        ...


    ...

class LabelAccessible(WidgetAccessible, Atk.Component, Atk.Hypertext, Atk.Text):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Layout(Container, Atk.ImplementorIface, Buildable, Scrollable):
    """
    #GtkLayout is similar to #GtkDrawingArea in that it’s a “blank slate” and
    doesn’t do anything except paint a blank background by default. It’s
    different in that it supports scrolling natively due to implementing
    #GtkScrollable, and can contain child widgets since it’s a #GtkContainer.

    If you just want to draw, a #GtkDrawingArea is a better choice since it has
    lower overhead. If you just need to position child widgets at specific
    points, then #GtkFixed provides that functionality on its own.

    When handling expose events on a #GtkLayout, you must draw to the #GdkWindow
    returned by gtk_layout_get_bin_window(), rather than to the one returned by
    gtk_widget_get_window() as you would for a #GtkDrawingArea.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, hadjustment: _T.Optional[Adjustment], vadjustment: _T.Optional[Adjustment]) -> Widget:
        """
        Creates a new #GtkLayout. Unless you have a specific adjustment
        you’d like the layout to use for scrolling, pass %NULL for
        @hadjustment and @vadjustment.
        """
        ...

    def get_bin_window(self) -> Gdk.Window:
        """
        Retrieve the bin window of the layout used for drawing operations.
        """
        ...

    def get_hadjustment(self) -> Adjustment:
        """
        This function should only be called after the layout has been
        placed in a #GtkScrolledWindow or otherwise configured for
        scrolling. It returns the #GtkAdjustment used for communication
        between the horizontal scrollbar and @layout.

        See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
        """
        ...

    def get_size(self, width: int, height: int) -> object:
        """
        Gets the size that has been set on the layout, and that determines
        the total extents of the layout’s scrollbar area. See
        gtk_layout_set_size ().
        """
        ...

    def get_vadjustment(self) -> Adjustment:
        """
        This function should only be called after the layout has been
        placed in a #GtkScrolledWindow or otherwise configured for
        scrolling. It returns the #GtkAdjustment used for communication
        between the vertical scrollbar and @layout.

        See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
        """
        ...

    def move(self, child_widget: Widget, x: int, y: int) -> object:
        """
        Moves a current child of @layout to a new position.
        """
        ...

    def put(self, child_widget: Widget, x: int, y: int) -> object:
        """
        Adds @child_widget to @layout, at position (@x,@y).
        @layout becomes the new parent container of @child_widget.
        """
        ...

    def set_hadjustment(self, adjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the horizontal scroll adjustment for the layout.

        See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
        """
        ...

    def set_size(self, width: int, height: int) -> object:
        """
        Sets the size of the scrollable area of the layout.
        """
        ...

    def set_vadjustment(self, adjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the vertical scroll adjustment for the layout.

        See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
        """
        ...


    ...

class LevelBar(Widget, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkLevelBar is a bar widget that can be used
    as a level indicator. Typical use cases are displaying the strength
    of a password, or showing the charge level of a battery.

    Use gtk_level_bar_set_value() to set the current value, and
    gtk_level_bar_add_offset_value() to set the value offsets at which
    the bar will be considered in a different state. GTK will add a few
    offsets by default on the level bar: #GTK_LEVEL_BAR_OFFSET_LOW,
    #GTK_LEVEL_BAR_OFFSET_HIGH and #GTK_LEVEL_BAR_OFFSET_FULL, with
    values 0.25, 0.75 and 1.0 respectively.

    Note that it is your responsibility to update preexisting offsets
    when changing the minimum or maximum value. GTK+ will simply clamp
    them to the new range.

    ## Adding a custom offset on the bar

    |[<!-- language="C" -->

    static GtkWidget *
    create_level_bar (void)
    {
      GtkWidget *widget;
      GtkLevelBar *bar;

      widget = gtk_level_bar_new ();
      bar = GTK_LEVEL_BAR (widget);

      // This changes the value of the default low offset

      gtk_level_bar_add_offset_value (bar,
                                      GTK_LEVEL_BAR_OFFSET_LOW,
                                      0.10);

      // This adds a new offset to the bar; the application will
      // be able to change its color CSS like this:
      //
      // levelbar block.my-offset {
      //   background-color: magenta;
      //   border-style: solid;
      //   border-color: black;
      //   border-style: 1px;
      // }

      gtk_level_bar_add_offset_value (bar, "my-offset", 0.60);

      return widget;
    }
    ]|

    The default interval of values is between zero and one, but it’s possible to
    modify the interval using gtk_level_bar_set_min_value() and
    gtk_level_bar_set_max_value(). The value will be always drawn in proportion to
    the admissible interval, i.e. a value of 15 with a specified interval between
    10 and 20 is equivalent to a value of 0.5 with an interval between 0 and 1.
    When #GTK_LEVEL_BAR_MODE_DISCRETE is used, the bar level is rendered
    as a finite number of separated blocks instead of a single one. The number
    of blocks that will be rendered is equal to the number of units specified by
    the admissible interval.

    For instance, to build a bar rendered with five blocks, it’s sufficient to
    set the minimum value to 0 and the maximum value to 5 after changing the indicator
    mode to discrete.

    GtkLevelBar was introduced in GTK+ 3.6.

    # GtkLevelBar as GtkBuildable

    The GtkLevelBar implementation of the GtkBuildable interface supports a
    custom `<offsets>` element, which can contain any number of `<offset>` elements,
    each of which must have "name" and "value" attributes.

    # CSS nodes

    |[<!-- language="plain" -->
    levelbar[.discrete]
    ╰── trough
        ├── block.filled.level-name
        ┊
        ├── block.empty
        ┊
    ]|

    GtkLevelBar has a main CSS node with name levelbar and one of the style
    classes .discrete or .continuous and a subnode with name trough. Below the
    trough node are a number of nodes with name block and style class .filled
    or .empty. In continuous mode, there is exactly one node of each, in discrete
    mode, the number of filled and unfilled nodes corresponds to blocks that are
    drawn. The block.filled nodes also get a style class .level-name corresponding
    to the level for the current value.

    In horizontal orientation, the nodes are always arranged from left to right,
    regardless of text direction.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkLevelBar.
        """
        ...


    @classmethod
    def new_for_interval(cls, min_value: float, max_value: float) -> Widget:
        """
        Utility constructor that creates a new #GtkLevelBar for the specified
        interval.
        """
        ...

    def add_offset_value(self, name: str, value: float) -> object:
        """
        Adds a new offset marker on @self at the position specified by @value.
        When the bar value is in the interval topped by @value (or between @value
        and #GtkLevelBar:max-value in case the offset is the last one on the bar)
        a style class named `level-`@name will be applied
        when rendering the level bar fill.
        If another offset marker named @name exists, its value will be
        replaced by @value.
        """
        ...

    def get_inverted(self) -> bool:
        """
        Return the value of the #GtkLevelBar:inverted property.
        """
        ...

    def get_max_value(self) -> float:
        """
        Returns the value of the #GtkLevelBar:max-value property.
        """
        ...

    def get_min_value(self) -> float:
        """
        Returns the value of the #GtkLevelBar:min-value property.
        """
        ...

    def get_mode(self) -> LevelBarMode:
        """
        Returns the value of the #GtkLevelBar:mode property.
        """
        ...

    def get_offset_value(self, name: _T.Optional[str], value: float) -> bool:
        """
        Fetches the value specified for the offset marker @name in @self,
        returning %TRUE in case an offset named @name was found.
        """
        ...

    def get_value(self) -> float:
        """
        Returns the value of the #GtkLevelBar:value property.
        """
        ...

    def remove_offset_value(self, name: _T.Optional[str]) -> object:
        """
        Removes an offset marker previously added with
        gtk_level_bar_add_offset_value().
        """
        ...

    def set_inverted(self, inverted: bool) -> object:
        """
        Sets the value of the #GtkLevelBar:inverted property.
        """
        ...

    def set_max_value(self, value: float) -> object:
        """
        Sets the value of the #GtkLevelBar:max-value property.

        You probably want to update preexisting level offsets after calling
        this function.
        """
        ...

    def set_min_value(self, value: float) -> object:
        """
        Sets the value of the #GtkLevelBar:min-value property.

        You probably want to update preexisting level offsets after calling
        this function.
        """
        ...

    def set_mode(self, mode: LevelBarMode) -> object:
        """
        Sets the value of the #GtkLevelBar:mode property.
        """
        ...

    def set_value(self, value: float) -> object:
        """
        Sets the value of the #GtkLevelBar:value property.
        """
        ...


    ...

class LevelBarAccessible(WidgetAccessible, Atk.Component, Atk.Value):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class LinkButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A GtkLinkButton is a #GtkButton with a hyperlink, similar to the one
    used by web browsers, which triggers an action when clicked. It is useful
    to show quick links to resources.

    A link button is created by calling either gtk_link_button_new() or
    gtk_link_button_new_with_label(). If using the former, the URI you pass
    to the constructor is used as a label for the widget.

    The URI bound to a GtkLinkButton can be set specifically using
    gtk_link_button_set_uri(), and retrieved using gtk_link_button_get_uri().

    By default, GtkLinkButton calls gtk_show_uri_on_window() when the button is
    clicked. This behaviour can be overridden by connecting to the
    #GtkLinkButton::activate-link signal and returning %TRUE from the
    signal handler.

    # CSS nodes

    GtkLinkButton has a single CSS node with name button. To differentiate
    it from a plain #GtkButton, it gets the .link style class.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, uri: str) -> Widget:
        """
        Creates a new #GtkLinkButton with the URI as its text.
        """
        ...


    @classmethod
    def new_with_label(cls, uri: str, label: _T.Optional[str]) -> Widget:
        """
        Creates a new #GtkLinkButton containing a label.
        """
        ...

    def get_uri(self) -> str:
        """
        Retrieves the URI set using gtk_link_button_set_uri().
        """
        ...

    def get_visited(self) -> bool:
        """
        Retrieves the “visited” state of the URI where the #GtkLinkButton
        points. The button becomes visited when it is clicked. If the URI
        is changed on the button, the “visited” state is unset again.

        The state may also be changed using gtk_link_button_set_visited().
        """
        ...

    def set_uri(self, uri: str) -> object:
        """
        Sets @uri as the URI where the #GtkLinkButton points. As a side-effect
        this unsets the “visited” state of the button.
        """
        ...

    def set_visited(self, visited: bool) -> object:
        """
        Sets the “visited” state of the URI where the #GtkLinkButton
        points.  See gtk_link_button_get_visited() for more details.
        """
        ...


    ...

class LinkButtonAccessible(ButtonAccessible, Atk.Action, Atk.Component, Atk.HyperlinkImpl, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ListBox(Container, Atk.ImplementorIface, Buildable):
    """
    A GtkListBox is a vertical container that contains GtkListBoxRow
    children. These rows can be dynamically sorted and filtered, and
    headers can be added dynamically depending on the row content.
    It also allows keyboard and mouse navigation and selection like
    a typical list.

    Using GtkListBox is often an alternative to #GtkTreeView, especially
    when the list contents has a more complicated layout than what is allowed
    by a #GtkCellRenderer, or when the contents is interactive (i.e. has a
    button in it).

    Although a #GtkListBox must have only #GtkListBoxRow children you can
    add any kind of widget to it via gtk_container_add(), and a #GtkListBoxRow
    widget will automatically be inserted between the list and the widget.

    #GtkListBoxRows can be marked as activatable or selectable. If a row
    is activatable, #GtkListBox::row-activated will be emitted for it when
    the user tries to activate it. If it is selectable, the row will be marked
    as selected when the user tries to select it.

    The GtkListBox widget was added in GTK+ 3.10.

    # GtkListBox as GtkBuildable

    The GtkListBox implementation of the #GtkBuildable interface supports
    setting a child as the placeholder by specifying “placeholder” as the “type”
    attribute of a `<child>` element. See gtk_list_box_set_placeholder() for info.

    # CSS nodes

    |[<!-- language="plain" -->
    list
    ╰── row[.activatable]
    ]|

    GtkListBox uses a single CSS node named list. Each GtkListBoxRow uses
    a single CSS node named row. The row nodes get the .activatable
    style class added when appropriate.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkListBox container.
        """
        ...

    def bind_model(self, model: _T.Optional[Gio.ListModel], create_widget_func: _T.Optional[ListBoxCreateWidgetFunc], user_data: _T.Optional[object], user_data_free_func: GLib.DestroyNotify) -> object:
        """
        Binds @model to @box.

        If @box was already bound to a model, that previous binding is
        destroyed.

        The contents of @box are cleared and then filled with widgets that
        represent items from @model. @box is updated whenever @model changes.
        If @model is %NULL, @box is left empty.

        It is undefined to add or remove widgets directly (for example, with
        gtk_list_box_insert() or gtk_container_add()) while @box is bound to a
        model.

        Note that using a model is incompatible with the filtering and sorting
        functionality in GtkListBox. When using a model, filtering and sorting
        should be implemented by the model.
        """
        ...

    def drag_highlight_row(self, row: ListBoxRow) -> object:
        """
        This is a helper function for implementing DnD onto a #GtkListBox.
        The passed in @row will be highlighted via gtk_drag_highlight(),
        and any previously highlighted row will be unhighlighted.

        The row will also be unhighlighted when the widget gets
        a drag leave event.
        """
        ...

    def drag_unhighlight_row(self) -> object:
        """
        If a row has previously been highlighted via gtk_list_box_drag_highlight_row()
        it will have the highlight removed.
        """
        ...

    def get_activate_on_single_click(self) -> bool:
        """
        Returns whether rows activate on single clicks.
        """
        ...

    def get_adjustment(self) -> Adjustment:
        """
        Gets the adjustment (if any) that the widget uses to
        for vertical scrolling.
        """
        ...

    def get_row_at_index(self, index_: int) -> ListBoxRow:
        """
        Gets the n-th child in the list (not counting headers).
        If @_index is negative or larger than the number of items in the
        list, %NULL is returned.
        """
        ...

    def get_row_at_y(self, y: int) -> ListBoxRow:
        """
        Gets the row at the @y position.
        """
        ...

    def get_selected_row(self) -> ListBoxRow:
        """
        Gets the selected row.

        Note that the box may allow multiple selection, in which
        case you should use gtk_list_box_selected_foreach() to
        find all selected rows.
        """
        ...

    def get_selected_rows(self) -> GLib.List:
        """
        Creates a list of all selected children.
        """
        ...

    def get_selection_mode(self) -> SelectionMode:
        """
        Gets the selection mode of the listbox.
        """
        ...

    def insert(self, child: Widget, position: int) -> object:
        """
        Insert the @child into the @box at @position. If a sort function is
        set, the widget will actually be inserted at the calculated position and
        this function has the same effect of gtk_container_add().

        If @position is -1, or larger than the total number of items in the
        @box, then the @child will be appended to the end.
        """
        ...

    def invalidate_filter(self) -> object:
        """
        Update the filtering for all rows. Call this when result
        of the filter function on the @box is changed due
        to an external factor. For instance, this would be used
        if the filter function just looked for a specific search
        string and the entry with the search string has changed.
        """
        ...

    def invalidate_headers(self) -> object:
        """
        Update the separators for all rows. Call this when result
        of the header function on the @box is changed due
        to an external factor.
        """
        ...

    def invalidate_sort(self) -> object:
        """
        Update the sorting for all rows. Call this when result
        of the sort function on the @box is changed due
        to an external factor.
        """
        ...

    def prepend(self, child: Widget) -> object:
        """
        Prepend a widget to the list. If a sort function is set, the widget will
        actually be inserted at the calculated position and this function has the
        same effect of gtk_container_add().
        """
        ...

    def select_all(self) -> object:
        """
        Select all children of @box, if the selection mode allows it.
        """
        ...

    def select_row(self, row: _T.Optional[ListBoxRow]) -> object:
        """
        Make @row the currently selected row.
        """
        ...

    def selected_foreach(self, func: ListBoxForeachFunc, data: _T.Optional[object]) -> object:
        """
        Calls a function for each selected child.

        Note that the selection cannot be modified from within this function.
        """
        ...

    def set_activate_on_single_click(self, single: bool) -> object:
        """
        If @single is %TRUE, rows will be activated when you click on them,
        otherwise you need to double-click.
        """
        ...

    def set_adjustment(self, adjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the adjustment (if any) that the widget uses to
        for vertical scrolling. For instance, this is used
        to get the page size for PageUp/Down key handling.

        In the normal case when the @box is packed inside
        a #GtkScrolledWindow the adjustment from that will
        be picked up automatically, so there is no need
        to manually do that.
        """
        ...

    def set_filter_func(self, filter_func: _T.Optional[ListBoxFilterFunc], user_data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        By setting a filter function on the @box one can decide dynamically which
        of the rows to show. For instance, to implement a search function on a list that
        filters the original list to only show the matching rows.

        The @filter_func will be called for each row after the call, and it will
        continue to be called each time a row changes (via gtk_list_box_row_changed()) or
        when gtk_list_box_invalidate_filter() is called.

        Note that using a filter function is incompatible with using a model
        (see gtk_list_box_bind_model()).
        """
        ...

    def set_header_func(self, update_header: _T.Optional[ListBoxUpdateHeaderFunc], user_data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        By setting a header function on the @box one can dynamically add headers
        in front of rows, depending on the contents of the row and its position in the list.
        For instance, one could use it to add headers in front of the first item of a
        new kind, in a list sorted by the kind.

        The @update_header can look at the current header widget using gtk_list_box_row_get_header()
        and either update the state of the widget as needed, or set a new one using
        gtk_list_box_row_set_header(). If no header is needed, set the header to %NULL.

        Note that you may get many calls @update_header to this for a particular row when e.g.
        changing things that don’t affect the header. In this case it is important for performance
        to not blindly replace an existing header with an identical one.

        The @update_header function will be called for each row after the call, and it will
        continue to be called each time a row changes (via gtk_list_box_row_changed()) and when
        the row before changes (either by gtk_list_box_row_changed() on the previous row, or when
        the previous row becomes a different row). It is also called for all rows when
        gtk_list_box_invalidate_headers() is called.
        """
        ...

    def set_placeholder(self, placeholder: _T.Optional[Widget]) -> object:
        """
        Sets the placeholder widget that is shown in the list when
        it doesn't display any visible children.
        """
        ...

    def set_selection_mode(self, mode: SelectionMode) -> object:
        """
        Sets how selection works in the listbox.
        See #GtkSelectionMode for details.
        """
        ...

    def set_sort_func(self, sort_func: _T.Optional[ListBoxSortFunc], user_data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        By setting a sort function on the @box one can dynamically reorder the rows
        of the list, based on the contents of the rows.

        The @sort_func will be called for each row after the call, and will continue to
        be called each time a row changes (via gtk_list_box_row_changed()) and when
        gtk_list_box_invalidate_sort() is called.

        Note that using a sort function is incompatible with using a model
        (see gtk_list_box_bind_model()).
        """
        ...

    def unselect_all(self) -> object:
        """
        Unselect all children of @box, if the selection mode allows it.
        """
        ...

    def unselect_row(self, row: ListBoxRow) -> object:
        """
        Unselects a single row of @box, if the selection mode allows it.
        """
        ...


    ...

class ListBoxAccessible(ContainerAccessible, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ListBoxRow(Bin, Atk.ImplementorIface, Actionable, Buildable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkListBoxRow, to be used as a child of a #GtkListBox.
        """
        ...

    def changed(self) -> object:
        """
        Marks @row as changed, causing any state that depends on this
        to be updated. This affects sorting, filtering and headers.

        Note that calls to this method must be in sync with the data
        used for the row functions. For instance, if the list is
        mirroring some external data set, and *two* rows changed in the
        external data set then when you call gtk_list_box_row_changed()
        on the first row the sort function must only read the new data
        for the first of the two changed rows, otherwise the resorting
        of the rows will be wrong.

        This generally means that if you don’t fully control the data
        model you have to duplicate the data that affects the listbox
        row functions into the row widgets themselves. Another alternative
        is to call gtk_list_box_invalidate_sort() on any model change,
        but that is more expensive.
        """
        ...

    def get_activatable(self) -> bool:
        """
        Gets the value of the #GtkListBoxRow:activatable property
        for this row.
        """
        ...

    def get_header(self) -> Widget:
        """
        Returns the current header of the @row. This can be used
        in a #GtkListBoxUpdateHeaderFunc to see if there is a header
        set already, and if so to update the state of it.
        """
        ...

    def get_index(self) -> int:
        """
        Gets the current index of the @row in its #GtkListBox container.
        """
        ...

    def get_selectable(self) -> bool:
        """
        Gets the value of the #GtkListBoxRow:selectable property
        for this row.
        """
        ...

    def is_selected(self) -> bool:
        """
        Returns whether the child is currently selected in its
        #GtkListBox container.
        """
        ...

    def set_activatable(self, activatable: bool) -> object:
        """
        Set the #GtkListBoxRow:activatable property for this row.
        """
        ...

    def set_header(self, header: _T.Optional[Widget]) -> object:
        """
        Sets the current header of the @row. This is only allowed to be called
        from a #GtkListBoxUpdateHeaderFunc. It will replace any existing
        header in the row, and be shown in front of the row in the listbox.
        """
        ...

    def set_selectable(self, selectable: bool) -> object:
        """
        Set the #GtkListBoxRow:selectable property for this row.
        """
        ...


    ...

class ListBoxRowAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ListStore(GObject.Object, Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable):
    """
    The #GtkListStore object is a list model for use with a #GtkTreeView
    widget.  It implements the #GtkTreeModel interface, and consequentialy,
    can use all of the methods available there.  It also implements the
    #GtkTreeSortable interface so it can be sorted by the view.
    Finally, it also implements the tree
    [drag and drop][gtk3-GtkTreeView-drag-and-drop]
    interfaces.

    The #GtkListStore can accept most GObject types as a column type, though
    it can’t accept all custom types.  Internally, it will keep a copy of
    data passed in (such as a string or a boxed pointer).  Columns that
    accept #GObjects are handled a little differently.  The
    #GtkListStore will keep a reference to the object instead of copying the
    value.  As a result, if the object is modified, it is up to the
    application writer to call gtk_tree_model_row_changed() to emit the
    #GtkTreeModel::row_changed signal.  This most commonly affects lists with
    #GdkPixbufs stored.

    An example for creating a simple list store:

    |[<!-- language="C" -->
    enum {
      COLUMN_STRING,
      COLUMN_INT,
      COLUMN_BOOLEAN,
      N_COLUMNS
    };

    {
      GtkListStore *list_store;
      GtkTreePath *path;
      GtkTreeIter iter;
      gint i;

      list_store = gtk_list_store_new (N_COLUMNS,
                                       G_TYPE_STRING,
                                       G_TYPE_INT,
                                       G_TYPE_BOOLEAN);

      for (i = 0; i < 10; i++)
        {
          gchar *some_data;

          some_data = get_some_data (i);

          // Add a new row to the model
          gtk_list_store_append (list_store, &iter);
          gtk_list_store_set (list_store, &iter,
                              COLUMN_STRING, some_data,
                              COLUMN_INT, i,
                              COLUMN_BOOLEAN,  FALSE,
                              -1);

          // As the store will keep a copy of the string internally,
          // we free some_data.
          g_free (some_data);
        }

      // Modify a particular row
      path = gtk_tree_path_new_from_string ("4");
      gtk_tree_model_get_iter (GTK_TREE_MODEL (list_store),
                               &iter,
                               path);
      gtk_tree_path_free (path);
      gtk_list_store_set (list_store, &iter,
                          COLUMN_BOOLEAN, TRUE,
                          -1);
    }
    ]|

    # Performance Considerations

    Internally, the #GtkListStore was implemented with a linked list with
    a tail pointer prior to GTK+ 2.6.  As a result, it was fast at data
    insertion and deletion, and not fast at random data access.  The
    #GtkListStore sets the #GTK_TREE_MODEL_ITERS_PERSIST flag, which means
    that #GtkTreeIters can be cached while the row exists.  Thus, if
    access to a particular row is needed often and your code is expected to
    run on older versions of GTK+, it is worth keeping the iter around.

    # Atomic Operations

    It is important to note that only the methods
    gtk_list_store_insert_with_values() and gtk_list_store_insert_with_valuesv()
    are atomic, in the sense that the row is being appended to the store and the
    values filled in in a single operation with regard to #GtkTreeModel signaling.
    In contrast, using e.g. gtk_list_store_append() and then gtk_list_store_set()
    will first create a row, which triggers the #GtkTreeModel::row-inserted signal
    on #GtkListStore. The row, however, is still empty, and any signal handler
    connecting to #GtkTreeModel::row-inserted on this particular store should be prepared
    for the situation that the row might be empty. This is especially important
    if you are wrapping the #GtkListStore inside a #GtkTreeModelFilter and are
    using a #GtkTreeModelFilterVisibleFunc. Using any of the non-atomic operations
    to append rows to the #GtkListStore will cause the
    #GtkTreeModelFilterVisibleFunc to be visited with an empty row first; the
    function must be prepared for that.

    # GtkListStore as GtkBuildable

    The GtkListStore implementation of the GtkBuildable interface allows
    to specify the model columns with a `<columns>` element that may contain
    multiple `<column>` elements, each specifying one model column. The “type”
    attribute specifies the data type for the column.

    Additionally, it is possible to specify content for the list store
    in the UI definition, with the `<data>` element. It can contain multiple
    `<row>` elements, each specifying to content for one row of the list model.
    Inside a `<row>`, the `<col>` elements specify the content for individual cells.

    Note that it is probably more common to define your models in the code,
    and one might consider it a layering violation to specify the content of
    a list store in a UI definition, data, not presentation, and common wisdom
    is to separate the two, as far as possible.

    An example of a UI Definition fragment for a list store:

    |[<!-- language="xml" -->
    <object class="GtkListStore">
      <columns>
        <column type="gchararray"/>
        <column type="gchararray"/>
        <column type="gint"/>
      </columns>
      <data>
        <row>
          <col id="0">John</col>
          <col id="1">Doe</col>
          <col id="2">25</col>
        </row>
        <row>
          <col id="0">Johan</col>
          <col id="1">Dahlin</col>
          <col id="2">50</col>
        </row>
      </data>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, n_columns: int, *args: object) -> ListStore:
        """
        Creates a new list store as with @n_columns columns each of the types passed
        in.  Note that only types derived from standard GObject fundamental types
        are supported.

        As an example, `gtk_list_store_new (3, G_TYPE_INT, G_TYPE_STRING,
        GDK_TYPE_PIXBUF);` will create a new #GtkListStore with three columns, of type
        int, string and #GdkPixbuf respectively.
        """
        ...


    @classmethod
    def newv(cls, n_columns: int, types: object) -> ListStore:
        """
        Non-vararg creation function.  Used primarily by language bindings.
        """
        ...

    def append(self, iter: TreeIter) -> object:
        """
        Appends a new row to @list_store.  @iter will be changed to point to this new
        row.  The row will be empty after this function is called.  To fill in
        values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
        """
        ...

    def clear(self) -> object:
        """
        Removes all rows from the list store.
        """
        ...

    def insert(self, iter: TreeIter, position: int) -> object:
        """
        Creates a new row at @position.  @iter will be changed to point to this new
        row.  If @position is -1 or is larger than the number of rows on the list,
        then the new row will be appended to the list. The row will be empty after
        this function is called.  To fill in values, you need to call
        gtk_list_store_set() or gtk_list_store_set_value().
        """
        ...

    def insert_after(self, iter: TreeIter, sibling: _T.Optional[TreeIter]) -> object:
        """
        Inserts a new row after @sibling. If @sibling is %NULL, then the row will be
        prepended to the beginning of the list. @iter will be changed to point to
        this new row. The row will be empty after this function is called. To fill
        in values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
        """
        ...

    def insert_before(self, iter: TreeIter, sibling: _T.Optional[TreeIter]) -> object:
        """
        Inserts a new row before @sibling. If @sibling is %NULL, then the row will
        be appended to the end of the list. @iter will be changed to point to this
        new row. The row will be empty after this function is called. To fill in
        values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
        """
        ...

    def insert_with_values(self, iter: TreeIter, position: int, *args: object) -> object:
        """
        Creates a new row at @position. @iter will be changed to point to this new
        row. If @position is -1, or larger than the number of rows in the list, then
        the new row will be appended to the list. The row will be filled with the
        values given to this function.

        Calling
        `gtk_list_store_insert_with_values (list_store, iter, position...)`
        has the same effect as calling
        |[<!-- language="C" -->
        static void
        insert_value (GtkListStore *list_store,
                      GtkTreeIter  *iter,
                      int           position)
        {
          gtk_list_store_insert (list_store, iter, position);
          gtk_list_store_set (list_store,
                              iter
                              // ...
                              );
        }
        ]|
        with the difference that the former will only emit a row_inserted signal,
        while the latter will emit row_inserted, row_changed and, if the list store
        is sorted, rows_reordered. Since emitting the rows_reordered signal
        repeatedly can affect the performance of the program,
        gtk_list_store_insert_with_values() should generally be preferred when
        inserting rows in a sorted list store.
        """
        ...

    def insert_with_valuesv(self, iter: TreeIter, position: int, columns: object, values: object, n_values: int) -> object:
        """
        A variant of gtk_list_store_insert_with_values() which
        takes the columns and values as two arrays, instead of
        varargs. This function is mainly intended for
        language-bindings.
        """
        ...

    def iter_is_valid(self, iter: TreeIter) -> bool:
        """
        > This function is slow. Only use it for debugging and/or testing
        > purposes.

        Checks if the given iter is a valid iter for this #GtkListStore.
        """
        ...

    def move_after(self, iter: TreeIter, position: _T.Optional[TreeIter]) -> object:
        """
        Moves @iter in @store to the position after @position. Note that this
        function only works with unsorted stores. If @position is %NULL, @iter
        will be moved to the start of the list.
        """
        ...

    def move_before(self, iter: TreeIter, position: _T.Optional[TreeIter]) -> object:
        """
        Moves @iter in @store to the position before @position. Note that this
        function only works with unsorted stores. If @position is %NULL, @iter
        will be moved to the end of the list.
        """
        ...

    def prepend(self, iter: TreeIter) -> object:
        """
        Prepends a new row to @list_store. @iter will be changed to point to this new
        row. The row will be empty after this function is called. To fill in
        values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
        """
        ...

    def remove(self, iter: TreeIter) -> bool:
        """
        Removes the given row from the list store.  After being removed,
        @iter is set to be the next valid row, or invalidated if it pointed
        to the last row in @list_store.
        """
        ...

    def reorder(self, new_order: object) -> object:
        """
        Reorders @store to follow the order indicated by @new_order. Note that
        this function only works with unsorted stores.
        """
        ...

    def set(self, iter: TreeIter, *args: object) -> object:
        """
        Sets the value of one or more cells in the row referenced by @iter.
        The variable argument list should contain integer column numbers,
        each column number followed by the value to be set.
        The list is terminated by a -1. For example, to set column 0 with type
        %G_TYPE_STRING to “Foo”, you would write `gtk_list_store_set (store, iter,
        0, "Foo", -1)`.

        The value will be referenced by the store if it is a %G_TYPE_OBJECT, and it
        will be copied if it is a %G_TYPE_STRING or %G_TYPE_BOXED.
        """
        ...

    def set_column_types(self, n_columns: int, types: object) -> object:
        """
        This function is meant primarily for #GObjects that inherit from #GtkListStore,
        and should only be used when constructing a new #GtkListStore.  It will not
        function after a row has been added, or a method on the #GtkTreeModel
        interface is called.
        """
        ...

    def set_valist(self, iter: TreeIter, var_args: list) -> object:
        """
        See gtk_list_store_set(); this version takes a va_list for use by language
        bindings.
        """
        ...

    def set_value(self, iter: TreeIter, column: int, value: GObject.Value) -> object:
        """
        Sets the data in the cell specified by @iter and @column.
        The type of @value must be convertible to the type of the
        column.
        """
        ...

    def set_valuesv(self, iter: TreeIter, columns: object, values: object, n_values: int) -> object:
        """
        A variant of gtk_list_store_set_valist() which
        takes the columns and values as two arrays, instead of
        varargs. This function is mainly intended for
        language-bindings and in case the number of columns to
        change is not known until run-time.
        """
        ...

    def swap(self, a: TreeIter, b: TreeIter) -> object:
        """
        Swaps @a and @b in @store. Note that this function only works with
        unsorted stores.
        """
        ...


    ...

class LockButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    GtkLockButton is a widget that can be used in control panels or
    preference dialogs to allow users to obtain and revoke authorizations
    needed to operate the controls. The required authorization is represented
    by a #GPermission object. Concrete implementations of #GPermission may use
    PolicyKit or some other authorization framework. To obtain a PolicyKit-based
    #GPermission, use polkit_permission_new().

    If the user is not currently allowed to perform the action, but can obtain
    the permission, the widget looks like this:

    ![](lockbutton-locked.png)

    and the user can click the button to request the permission. Depending
    on the platform, this may pop up an authentication dialog or ask the user
    to authenticate in some other way. Once the user has obtained the permission,
    the widget changes to this:

    ![](lockbutton-unlocked.png)

    and the permission can be dropped again by clicking the button. If the user
    is not able to obtain the permission at all, the widget looks like this:

    ![](lockbutton-sorry.png)

    If the user has the permission and cannot drop it, the button is hidden.

    The text (and tooltips) that are shown in the various cases can be adjusted
    with the #GtkLockButton:text-lock, #GtkLockButton:text-unlock,
    #GtkLockButton:tooltip-lock, #GtkLockButton:tooltip-unlock and
    #GtkLockButton:tooltip-not-authorized properties.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, permission: _T.Optional[Gio.Permission]) -> Widget:
        """
        Creates a new lock button which reflects the @permission.
        """
        ...

    def get_permission(self) -> Gio.Permission:
        """
        Obtains the #GPermission object that controls @button.
        """
        ...

    def set_permission(self, permission: _T.Optional[Gio.Permission]) -> object:
        """
        Sets the #GPermission object that controls @button.
        """
        ...


    ...

class LockButtonAccessible(ButtonAccessible, Atk.Action, Atk.Component, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Menu(MenuShell, Atk.ImplementorIface, Buildable):
    """
    A #GtkMenu is a #GtkMenuShell that implements a drop down menu
    consisting of a list of #GtkMenuItem objects which can be navigated
    and activated by the user to perform application functions.

    A #GtkMenu is most commonly dropped down by activating a
    #GtkMenuItem in a #GtkMenuBar or popped up by activating a
    #GtkMenuItem in another #GtkMenu.

    A #GtkMenu can also be popped up by activating a #GtkComboBox.
    Other composite widgets such as the #GtkNotebook can pop up a
    #GtkMenu as well.

    Applications can display a #GtkMenu as a popup menu by calling the
    gtk_menu_popup() function.  The example below shows how an application
    can pop up a menu when the 3rd mouse button is pressed.

    ## Connecting the popup signal handler.

    |[<!-- language="C" -->
      // connect our handler which will popup the menu
      g_signal_connect_swapped (window, "button_press_event",
    G_CALLBACK (my_popup_handler), menu);
    ]|

    ## Signal handler which displays a popup menu.

    |[<!-- language="C" -->
    static gint
    my_popup_handler (GtkWidget *widget, GdkEvent *event)
    {
      GtkMenu *menu;
      GdkEventButton *event_button;

      g_return_val_if_fail (widget != NULL, FALSE);
      g_return_val_if_fail (GTK_IS_MENU (widget), FALSE);
      g_return_val_if_fail (event != NULL, FALSE);

      // The "widget" is the menu that was supplied when
      // g_signal_connect_swapped() was called.
      menu = GTK_MENU (widget);

      if (event->type == GDK_BUTTON_PRESS)
        {
          event_button = (GdkEventButton *) event;
          if (event_button->button == GDK_BUTTON_SECONDARY)
            {
              gtk_menu_popup (menu, NULL, NULL, NULL, NULL,
                              event_button->button, event_button->time);
              return TRUE;
            }
        }

      return FALSE;
    }
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    menu
    ├── arrow.top
    ├── <child>
    ┊
    ├── <child>
    ╰── arrow.bottom
    ]|

    The main CSS node of GtkMenu has name menu, and there are two subnodes
    with name arrow, for scrolling menu arrows. These subnodes get the
    .top and .bottom style classes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkMenu
        """
        ...


    @classmethod
    def new_from_model(cls, model: Gio.MenuModel) -> Widget:
        """
        Creates a #GtkMenu and populates it with menu items and
        submenus according to @model.

        The created menu items are connected to actions found in the
        #GtkApplicationWindow to which the menu belongs - typically
        by means of being attached to a widget (see gtk_menu_attach_to_widget())
        that is contained within the #GtkApplicationWindows widget hierarchy.

        Actions can also be added using gtk_widget_insert_action_group() on the menu's
        attach widget or on any of its parent widgets.
        """
        ...

    def attach(self, child: Widget, left_attach: int, right_attach: int, top_attach: int, bottom_attach: int) -> object:
        """
        Adds a new #GtkMenuItem to a (table) menu. The number of “cells” that
        an item will occupy is specified by @left_attach, @right_attach,
        @top_attach and @bottom_attach. These each represent the leftmost,
        rightmost, uppermost and lower column and row numbers of the table.
        (Columns and rows are indexed from zero).

        Note that this function is not related to gtk_menu_detach().
        """
        ...

    def attach_to_widget(self, attach_widget: Widget, detacher: _T.Optional[MenuDetachFunc]) -> object:
        """
        Attaches the menu to the widget and provides a callback function
        that will be invoked when the menu calls gtk_menu_detach() during
        its destruction.

        If the menu is attached to the widget then it will be destroyed
        when the widget is destroyed, as if it was a child widget.
        An attached menu will also move between screens correctly if the
        widgets moves between screens.
        """
        ...

    def detach(self) -> object:
        """
        Detaches the menu from the widget to which it had been attached.
        This function will call the callback function, @detacher, provided
        when the gtk_menu_attach_to_widget() function was called.
        """
        ...

    def get_accel_group(self) -> AccelGroup:
        """
        Gets the #GtkAccelGroup which holds global accelerators for the
        menu. See gtk_menu_set_accel_group().
        """
        ...

    def get_accel_path(self) -> str:
        """
        Retrieves the accelerator path set on the menu.
        """
        ...

    def get_active(self) -> Widget:
        """
        Returns the selected menu item from the menu.  This is used by the
        #GtkComboBox.
        """
        ...

    def get_attach_widget(self) -> Widget:
        """
        Returns the #GtkWidget that the menu is attached to.
        """
        ...

    def get_monitor(self) -> int:
        """
        Retrieves the number of the monitor on which to show the menu.
        """
        ...

    def get_reserve_toggle_size(self) -> bool:
        """
        Returns whether the menu reserves space for toggles and
        icons, regardless of their actual presence.
        """
        ...

    def get_tearoff_state(self) -> bool:
        """
        Returns whether the menu is torn off.
        See gtk_menu_set_tearoff_state().
        """
        ...

    def get_title(self) -> str:
        """
        Returns the title of the menu. See gtk_menu_set_title().
        """
        ...

    def place_on_monitor(self, monitor: Gdk.Monitor) -> object:
        """
        Places @menu on the given monitor.
        """
        ...

    def popdown(self) -> object:
        """
        Removes the menu from the screen.
        """
        ...

    def popup(self, parent_menu_shell: _T.Optional[Widget], parent_menu_item: _T.Optional[Widget], func: _T.Optional[MenuPositionFunc], data: _T.Optional[object], button: int, activate_time: int) -> object:
        """
        Displays a menu and makes it available for selection.

        Applications can use this function to display context-sensitive
        menus, and will typically supply %NULL for the @parent_menu_shell,
        @parent_menu_item, @func and @data parameters. The default menu
        positioning function will position the menu at the current mouse
        cursor position.

        The @button parameter should be the mouse button pressed to initiate
        the menu popup. If the menu popup was initiated by something other
        than a mouse button press, such as a mouse button release or a keypress,
        @button should be 0.

        The @activate_time parameter is used to conflict-resolve initiation
        of concurrent requests for mouse/keyboard grab requests. To function
        properly, this needs to be the timestamp of the user event (such as
        a mouse click or key press) that caused the initiation of the popup.
        Only if no such event is available, gtk_get_current_event_time() can
        be used instead.

        Note that this function does not work very well on GDK backends that
        do not have global coordinates, such as Wayland or Mir. You should
        probably use one of the gtk_menu_popup_at_ variants, which do not
        have this problem.
        """
        ...

    def popup_at_pointer(self, trigger_event: _T.Optional[Gdk.Event]) -> object:
        """
        Displays @menu and makes it available for selection.

        See gtk_menu_popup_at_widget () to pop up a menu at a widget.
        gtk_menu_popup_at_rect () also allows you to position a menu at an arbitrary
        rectangle.

        @menu will be positioned at the pointer associated with @trigger_event.

        Properties that influence the behaviour of this function are
        #GtkMenu:anchor-hints, #GtkMenu:rect-anchor-dx, #GtkMenu:rect-anchor-dy, and
        #GtkMenu:menu-type-hint. Connect to the #GtkMenu::popped-up signal to find
        out how it was actually positioned.
        """
        ...

    def popup_at_rect(self, rect_window: Gdk.Window, rect: Gdk.Rectangle, rect_anchor: Gdk.Gravity, menu_anchor: Gdk.Gravity, trigger_event: _T.Optional[Gdk.Event]) -> object:
        """
        Displays @menu and makes it available for selection.

        See gtk_menu_popup_at_widget () and gtk_menu_popup_at_pointer (), which
        handle more common cases for popping up menus.

        @menu will be positioned at @rect, aligning their anchor points. @rect is
        relative to the top-left corner of @rect_window. @rect_anchor and
        @menu_anchor determine anchor points on @rect and @menu to pin together.
        @menu can optionally be offset by #GtkMenu:rect-anchor-dx and
        #GtkMenu:rect-anchor-dy.

        Anchors should be specified under the assumption that the text direction is
        left-to-right; they will be flipped horizontally automatically if the text
        direction is right-to-left.

        Other properties that influence the behaviour of this function are
        #GtkMenu:anchor-hints and #GtkMenu:menu-type-hint. Connect to the
        #GtkMenu::popped-up signal to find out how it was actually positioned.
        """
        ...

    def popup_at_widget(self, widget: Widget, widget_anchor: Gdk.Gravity, menu_anchor: Gdk.Gravity, trigger_event: _T.Optional[Gdk.Event]) -> object:
        """
        Displays @menu and makes it available for selection.

        See gtk_menu_popup_at_pointer () to pop up a menu at the master pointer.
        gtk_menu_popup_at_rect () also allows you to position a menu at an arbitrary
        rectangle.

        ![](popup-anchors.png)

        @menu will be positioned at @widget, aligning their anchor points.
        @widget_anchor and @menu_anchor determine anchor points on @widget and @menu
        to pin together. @menu can optionally be offset by #GtkMenu:rect-anchor-dx
        and #GtkMenu:rect-anchor-dy.

        Anchors should be specified under the assumption that the text direction is
        left-to-right; they will be flipped horizontally automatically if the text
        direction is right-to-left.

        Other properties that influence the behaviour of this function are
        #GtkMenu:anchor-hints and #GtkMenu:menu-type-hint. Connect to the
        #GtkMenu::popped-up signal to find out how it was actually positioned.
        """
        ...

    def popup_for_device(self, device: _T.Optional[Gdk.Device], parent_menu_shell: _T.Optional[Widget], parent_menu_item: _T.Optional[Widget], func: _T.Optional[MenuPositionFunc], data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify], button: int, activate_time: int) -> object:
        """
        Displays a menu and makes it available for selection.

        Applications can use this function to display context-sensitive menus,
        and will typically supply %NULL for the @parent_menu_shell,
        @parent_menu_item, @func, @data and @destroy parameters. The default
        menu positioning function will position the menu at the current position
        of @device (or its corresponding pointer).

        The @button parameter should be the mouse button pressed to initiate
        the menu popup. If the menu popup was initiated by something other than
        a mouse button press, such as a mouse button release or a keypress,
        @button should be 0.

        The @activate_time parameter is used to conflict-resolve initiation of
        concurrent requests for mouse/keyboard grab requests. To function
        properly, this needs to be the time stamp of the user event (such as
        a mouse click or key press) that caused the initiation of the popup.
        Only if no such event is available, gtk_get_current_event_time() can
        be used instead.

        Note that this function does not work very well on GDK backends that
        do not have global coordinates, such as Wayland or Mir. You should
        probably use one of the gtk_menu_popup_at_ variants, which do not
        have this problem.
        """
        ...

    def reorder_child(self, child: Widget, position: int) -> object:
        """
        Moves @child to a new @position in the list of @menu
        children.
        """
        ...

    def reposition(self) -> object:
        """
        Repositions the menu according to its position function.
        """
        ...

    def set_accel_group(self, accel_group: _T.Optional[AccelGroup]) -> object:
        """
        Set the #GtkAccelGroup which holds global accelerators for the
        menu.  This accelerator group needs to also be added to all windows
        that this menu is being used in with gtk_window_add_accel_group(),
        in order for those windows to support all the accelerators
        contained in this group.
        """
        ...

    def set_accel_path(self, accel_path: _T.Optional[str]) -> object:
        """
        Sets an accelerator path for this menu from which accelerator paths
        for its immediate children, its menu items, can be constructed.
        The main purpose of this function is to spare the programmer the
        inconvenience of having to call gtk_menu_item_set_accel_path() on
        each menu item that should support runtime user changable accelerators.
        Instead, by just calling gtk_menu_set_accel_path() on their parent,
        each menu item of this menu, that contains a label describing its
        purpose, automatically gets an accel path assigned.

        For example, a menu containing menu items “New” and “Exit”, will, after
        `gtk_menu_set_accel_path (menu, "<Gnumeric-Sheet>/File");` has been
        called, assign its items the accel paths: `"<Gnumeric-Sheet>/File/New"`
        and `"<Gnumeric-Sheet>/File/Exit"`.

        Assigning accel paths to menu items then enables the user to change
        their accelerators at runtime. More details about accelerator paths
        and their default setups can be found at gtk_accel_map_add_entry().

        Note that @accel_path string will be stored in a #GQuark. Therefore,
        if you pass a static string, you can save some memory by interning
        it first with g_intern_static_string().
        """
        ...

    def set_active(self, index: int) -> object:
        """
        Selects the specified menu item within the menu.  This is used by
        the #GtkComboBox and should not be used by anyone else.
        """
        ...

    def set_monitor(self, monitor_num: int) -> object:
        """
        Informs GTK+ on which monitor a menu should be popped up.
        See gdk_monitor_get_geometry().

        This function should be called from a #GtkMenuPositionFunc
        if the menu should not appear on the same monitor as the pointer.
        This information can’t be reliably inferred from the coordinates
        returned by a #GtkMenuPositionFunc, since, for very long menus,
        these coordinates may extend beyond the monitor boundaries or even
        the screen boundaries.
        """
        ...

    def set_reserve_toggle_size(self, reserve_toggle_size: bool) -> object:
        """
        Sets whether the menu should reserve space for drawing toggles
        or icons, regardless of their actual presence.
        """
        ...

    def set_screen(self, screen: _T.Optional[Gdk.Screen]) -> object:
        """
        Sets the #GdkScreen on which the menu will be displayed.
        """
        ...

    def set_tearoff_state(self, torn_off: bool) -> object:
        """
        Changes the tearoff state of the menu.  A menu is normally
        displayed as drop down menu which persists as long as the menu is
        active.  It can also be displayed as a tearoff menu which persists
        until it is closed or reattached.
        """
        ...

    def set_title(self, title: _T.Optional[str]) -> object:
        """
        Sets the title string for the menu.

        The title is displayed when the menu is shown as a tearoff
        menu. If @title is %NULL, the menu will see if it is attached
        to a parent menu item, and if so it will try to use the same
        text as that menu item’s label.
        """
        ...


    ...

class MenuAccessible(MenuShellAccessible, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class MenuBar(MenuShell, Atk.ImplementorIface, Buildable):
    """
    The #GtkMenuBar is a subclass of #GtkMenuShell which contains one or
    more #GtkMenuItems. The result is a standard menu bar which can hold
    many menu items.

    # CSS nodes

    GtkMenuBar has a single CSS node with name menubar.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkMenuBar
        """
        ...


    @classmethod
    def new_from_model(cls, model: Gio.MenuModel) -> Widget:
        """
        Creates a new #GtkMenuBar and populates it with menu items
        and submenus according to @model.

        The created menu items are connected to actions found in the
        #GtkApplicationWindow to which the menu bar belongs - typically
        by means of being contained within the #GtkApplicationWindows
        widget hierarchy.
        """
        ...

    def get_child_pack_direction(self) -> PackDirection:
        """
        Retrieves the current child pack direction of the menubar.
        See gtk_menu_bar_set_child_pack_direction().
        """
        ...

    def get_pack_direction(self) -> PackDirection:
        """
        Retrieves the current pack direction of the menubar.
        See gtk_menu_bar_set_pack_direction().
        """
        ...

    def set_child_pack_direction(self, child_pack_dir: PackDirection) -> object:
        """
        Sets how widgets should be packed inside the children of a menubar.
        """
        ...

    def set_pack_direction(self, pack_dir: PackDirection) -> object:
        """
        Sets how items should be packed inside a menubar.
        """
        ...


    ...

class MenuButton(ToggleButton, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    The #GtkMenuButton widget is used to display a popup when clicked on.
    This popup can be provided either as a #GtkMenu, a #GtkPopover or an
    abstract #GMenuModel.

    The #GtkMenuButton widget can hold any valid child widget. That is, it
    can hold almost any other standard #GtkWidget. The most commonly used
    child is #GtkImage. If no widget is explicitely added to the #GtkMenuButton,
    a #GtkImage is automatically created, using an arrow image oriented
    according to #GtkMenuButton:direction or the generic “open-menu-symbolic”
    icon if the direction is not set.

    The positioning of the popup is determined by the #GtkMenuButton:direction
    property of the menu button.

    For menus, the #GtkWidget:halign and #GtkWidget:valign properties of the
    menu are also taken into account. For example, when the direction is
    %GTK_ARROW_DOWN and the horizontal alignment is %GTK_ALIGN_START, the
    menu will be positioned below the button, with the starting edge
    (depending on the text direction) of the menu aligned with the starting
    edge of the button. If there is not enough space below the button, the
    menu is popped up above the button instead. If the alignment would move
    part of the menu offscreen, it is “pushed in”.

    ## Direction = Down

    - halign = start

        ![](down-start.png)

    - halign = center

        ![](down-center.png)

    - halign = end

        ![](down-end.png)

    ## Direction = Up

    - halign = start

        ![](up-start.png)

    - halign = center

        ![](up-center.png)

    - halign = end

        ![](up-end.png)

    ## Direction = Left

    - valign = start

        ![](left-start.png)

    - valign = center

        ![](left-center.png)

    - valign = end

        ![](left-end.png)

    ## Direction = Right

    - valign = start

        ![](right-start.png)

    - valign = center

        ![](right-center.png)

    - valign = end

        ![](right-end.png)

    # CSS nodes

    GtkMenuButton has a single CSS node with name button. To differentiate
    it from a plain #GtkButton, it gets the .popup style class.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkMenuButton widget with downwards-pointing
        arrow as the only child. You can replace the child widget
        with another #GtkWidget should you wish to.
        """
        ...

    def get_align_widget(self) -> Widget:
        """
        Returns the parent #GtkWidget to use to line up with menu.
        """
        ...

    def get_direction(self) -> ArrowType:
        """
        Returns the direction the popup will be pointing at when popped up.
        """
        ...

    def get_menu_model(self) -> Gio.MenuModel:
        """
        Returns the #GMenuModel used to generate the popup.
        """
        ...

    def get_popover(self) -> Popover:
        """
        Returns the #GtkPopover that pops out of the button.
        If the button is not using a #GtkPopover, this function
        returns %NULL.
        """
        ...

    def get_popup(self) -> Menu:
        """
        Returns the #GtkMenu that pops out of the button.
        If the button does not use a #GtkMenu, this function
        returns %NULL.
        """
        ...

    def get_use_popover(self) -> bool:
        """
        Returns whether a #GtkPopover or a #GtkMenu will be constructed
        from the menu model.
        """
        ...

    def set_align_widget(self, align_widget: _T.Optional[Widget]) -> object:
        """
        Sets the #GtkWidget to use to line the menu with when popped up.
        Note that the @align_widget must contain the #GtkMenuButton itself.

        Setting it to %NULL means that the menu will be aligned with the
        button itself.

        Note that this property is only used with menus currently,
        and not for popovers.
        """
        ...

    def set_direction(self, direction: ArrowType) -> object:
        """
        Sets the direction in which the popup will be popped up, as
        well as changing the arrow’s direction. The child will not
        be changed to an arrow if it was customized.

        If the does not fit in the available space in the given direction,
        GTK+ will its best to keep it inside the screen and fully visible.

        If you pass %GTK_ARROW_NONE for a @direction, the popup will behave
        as if you passed %GTK_ARROW_DOWN (although you won’t see any arrows).
        """
        ...

    def set_menu_model(self, menu_model: _T.Optional[Gio.MenuModel]) -> object:
        """
        Sets the #GMenuModel from which the popup will be constructed,
        or %NULL to dissociate any existing menu model and disable the button.

        Depending on the value of #GtkMenuButton:use-popover, either a
        #GtkMenu will be created with gtk_menu_new_from_model(), or a
        #GtkPopover with gtk_popover_new_from_model(). In either case,
        actions will be connected as documented for these functions.

        If #GtkMenuButton:popup or #GtkMenuButton:popover are already set, those
        widgets are dissociated from the @menu_button, and those properties are set
        to %NULL.
        """
        ...

    def set_popover(self, popover: _T.Optional[Widget]) -> object:
        """
        Sets the #GtkPopover that will be popped up when the @menu_button is clicked,
        or %NULL to dissociate any existing popover and disable the button.

        If #GtkMenuButton:menu-model or #GtkMenuButton:popup are set, those objects
        are dissociated from the @menu_button, and those properties are set to %NULL.
        """
        ...

    def set_popup(self, menu: _T.Optional[Widget]) -> object:
        """
        Sets the #GtkMenu that will be popped up when the @menu_button is clicked, or
        %NULL to dissociate any existing menu and disable the button.

        If #GtkMenuButton:menu-model or #GtkMenuButton:popover are set, those objects
        are dissociated from the @menu_button, and those properties are set to %NULL.
        """
        ...

    def set_use_popover(self, use_popover: bool) -> object:
        """
        Sets whether to construct a #GtkPopover instead of #GtkMenu
        when gtk_menu_button_set_menu_model() is called. Note that
        this property is only consulted when a new menu model is set.
        """
        ...


    ...

class MenuButtonAccessible(ToggleButtonAccessible, Atk.Action, Atk.Component, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class MenuItem(Bin, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    The #GtkMenuItem widget and the derived widgets are the only valid
    children for menus. Their function is to correctly handle highlighting,
    alignment, events and submenus.

    As a GtkMenuItem derives from #GtkBin it can hold any valid child widget,
    although only a few are really useful.

    By default, a GtkMenuItem sets a #GtkAccelLabel as its child.
    GtkMenuItem has direct functions to set the label and its mnemonic.
    For more advanced label settings, you can fetch the child widget from the GtkBin.

    An example for setting markup and accelerator on a MenuItem:

    |[<!-- language="C" -->
    GtkWidget *menu_item = gtk_menu_item_new_with_label ("Example Menu Item");

    GtkWidget *child = gtk_bin_get_child (GTK_BIN (menu_item));
    gtk_label_set_markup (GTK_LABEL (child), "<i>new label</i> with <b>markup</b>");
    gtk_accel_label_set_accel (GTK_ACCEL_LABEL (child), GDK_KEY_1, 0);
    ]|

    # GtkMenuItem as GtkBuildable

    The GtkMenuItem implementation of the #GtkBuildable interface supports
    adding a submenu by specifying “submenu” as the “type” attribute of
    a `<child>` element.

    An example of UI definition fragment with submenus:

    |[<!-- language="xml" -->
    <object class="GtkMenuItem">
      <child type="submenu">
        <object class="GtkMenu"/>
      </child>
    </object>
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    menuitem
    ├── <child>
    ╰── [arrow.right]
    ]|

    GtkMenuItem has a single CSS node with name menuitem. If the menuitem
    has a submenu, it gets another CSS node with name arrow, which has
    the .left or .right style class.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkMenuItem.
        """
        ...


    @classmethod
    def new_with_label(cls, label: str) -> Widget:
        """
        Creates a new #GtkMenuItem whose child is a #GtkLabel.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, label: str) -> Widget:
        """
        Creates a new #GtkMenuItem containing a label.

        The label will be created using gtk_label_new_with_mnemonic(),
        so underscores in @label indicate the mnemonic for the menu item.
        """
        ...

    def activate(self) -> object:
        """
        Emits the #GtkMenuItem::activate signal on the given item
        """
        ...

    def deselect(self) -> object:
        """
        Emits the #GtkMenuItem::deselect signal on the given item.
        """
        ...

    def get_accel_path(self) -> str:
        """
        Retrieve the accelerator path that was previously set on @menu_item.

        See gtk_menu_item_set_accel_path() for details.
        """
        ...

    def get_label(self) -> str:
        """
        Sets @text on the @menu_item label
        """
        ...

    def get_reserve_indicator(self) -> bool:
        """
        Returns whether the @menu_item reserves space for
        the submenu indicator, regardless if it has a submenu
        or not.
        """
        ...

    def get_right_justified(self) -> bool:
        """
        Gets whether the menu item appears justified at the right
        side of the menu bar.
        """
        ...

    def get_submenu(self) -> Widget:
        """
        Gets the submenu underneath this menu item, if any.
        See gtk_menu_item_set_submenu().
        """
        ...

    def get_use_underline(self) -> bool:
        """
        Checks if an underline in the text indicates the next character
        should be used for the mnemonic accelerator key.
        """
        ...

    def select(self) -> object:
        """
        Emits the #GtkMenuItem::select signal on the given item.
        """
        ...

    def set_accel_path(self, accel_path: _T.Optional[str]) -> object:
        """
        Set the accelerator path on @menu_item, through which runtime
        changes of the menu item’s accelerator caused by the user can be
        identified and saved to persistent storage (see gtk_accel_map_save()
        on this). To set up a default accelerator for this menu item, call
        gtk_accel_map_add_entry() with the same @accel_path. See also
        gtk_accel_map_add_entry() on the specifics of accelerator paths,
        and gtk_menu_set_accel_path() for a more convenient variant of
        this function.

        This function is basically a convenience wrapper that handles
        calling gtk_widget_set_accel_path() with the appropriate accelerator
        group for the menu item.

        Note that you do need to set an accelerator on the parent menu with
        gtk_menu_set_accel_group() for this to work.

        Note that @accel_path string will be stored in a #GQuark.
        Therefore, if you pass a static string, you can save some memory
        by interning it first with g_intern_static_string().
        """
        ...

    def set_label(self, label: str) -> object:
        """
        Sets @text on the @menu_item label
        """
        ...

    def set_reserve_indicator(self, reserve: bool) -> object:
        """
        Sets whether the @menu_item should reserve space for
        the submenu indicator, regardless if it actually has
        a submenu or not.

        There should be little need for applications to call
        this functions.
        """
        ...

    def set_right_justified(self, right_justified: bool) -> object:
        """
        Sets whether the menu item appears justified at the right
        side of a menu bar. This was traditionally done for “Help”
        menu items, but is now considered a bad idea. (If the widget
        layout is reversed for a right-to-left language like Hebrew
        or Arabic, right-justified-menu-items appear at the left.)
        """
        ...

    def set_submenu(self, submenu: _T.Optional[Menu]) -> object:
        """
        Sets or replaces the menu item’s submenu, or removes it when a %NULL
        submenu is passed.
        """
        ...

    def set_use_underline(self, setting: bool) -> object:
        """
        If true, an underline in the text indicates the next character
        should be used for the mnemonic accelerator key.
        """
        ...

    def toggle_size_allocate(self, allocation: int) -> object:
        """
        Emits the #GtkMenuItem::toggle-size-allocate signal on the given item.
        """
        ...

    def toggle_size_request(self, requisition: int) -> object:
        """
        Emits the #GtkMenuItem::toggle-size-request signal on the given item.
        """
        ...


    ...

class MenuItemAccessible(ContainerAccessible, Atk.Action, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class MenuShell(Container, Atk.ImplementorIface, Buildable):
    """
    A #GtkMenuShell is the abstract base class used to derive the
    #GtkMenu and #GtkMenuBar subclasses.

    A #GtkMenuShell is a container of #GtkMenuItem objects arranged
    in a list which can be navigated, selected, and activated by the
    user to perform application functions. A #GtkMenuItem can have a
    submenu associated with it, allowing for nested hierarchical menus.

    # Terminology

    A menu item can be “selected”, this means that it is displayed
    in the prelight state, and if it has a submenu, that submenu
    will be popped up.

    A menu is “active” when it is visible onscreen and the user
    is selecting from it. A menubar is not active until the user
    clicks on one of its menuitems. When a menu is active,
    passing the mouse over a submenu will pop it up.

    There is also is a concept of the current menu and a current
    menu item. The current menu item is the selected menu item
    that is furthest down in the hierarchy. (Every active menu shell
    does not necessarily contain a selected menu item, but if
    it does, then the parent menu shell must also contain
    a selected menu item.) The current menu is the menu that
    contains the current menu item. It will always have a GTK
    grab and receive all key presses.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def activate_item(self, menu_item: Widget, force_deactivate: bool) -> object:
        """
        Activates the menu item within the menu shell.
        """
        ...

    def append(self, child: MenuItem) -> object:
        """
        Adds a new #GtkMenuItem to the end of the menu shell's
        item list.
        """
        ...

    def bind_model(self, model: _T.Optional[Gio.MenuModel], action_namespace: _T.Optional[str], with_separators: bool) -> object:
        """
        Establishes a binding between a #GtkMenuShell and a #GMenuModel.

        The contents of @shell are removed and then refilled with menu items
        according to @model.  When @model changes, @shell is updated.
        Calling this function twice on @shell with different @model will
        cause the first binding to be replaced with a binding to the new
        model. If @model is %NULL then any previous binding is undone and
        all children are removed.

        @with_separators determines if toplevel items (eg: sections) have
        separators inserted between them.  This is typically desired for
        menus but doesn’t make sense for menubars.

        If @action_namespace is non-%NULL then the effect is as if all
        actions mentioned in the @model have their names prefixed with the
        namespace, plus a dot.  For example, if the action “quit” is
        mentioned and @action_namespace is “app” then the effective action
        name is “app.quit”.

        This function uses #GtkActionable to define the action name and
        target values on the created menu items.  If you want to use an
        action group other than “app” and “win”, or if you want to use a
        #GtkMenuShell outside of a #GtkApplicationWindow, then you will need
        to attach your own action group to the widget hierarchy using
        gtk_widget_insert_action_group().  As an example, if you created a
        group with a “quit” action and inserted it with the name “mygroup”
        then you would use the action name “mygroup.quit” in your
        #GMenuModel.

        For most cases you are probably better off using
        gtk_menu_new_from_model() or gtk_menu_bar_new_from_model() or just
        directly passing the #GMenuModel to gtk_application_set_app_menu() or
        gtk_application_set_menubar().
        """
        ...

    def cancel(self) -> object:
        """
        Cancels the selection within the menu shell.
        """
        ...

    def deactivate(self) -> object:
        """
        Deactivates the menu shell.

        Typically this results in the menu shell being erased
        from the screen.
        """
        ...

    def deselect(self) -> object:
        """
        Deselects the currently selected item from the menu shell,
        if any.
        """
        ...

    def get_parent_shell(self) -> Widget:
        """
        Gets the parent menu shell.

        The parent menu shell of a submenu is the #GtkMenu or #GtkMenuBar
        from which it was opened up.
        """
        ...

    def get_selected_item(self) -> Widget:
        """
        Gets the currently selected item.
        """
        ...

    def get_take_focus(self) -> bool:
        """
        Returns %TRUE if the menu shell will take the keyboard focus on popup.
        """
        ...

    def insert(self, child: Widget, position: int) -> object:
        """
        Adds a new #GtkMenuItem to the menu shell’s item list
        at the position indicated by @position.
        """
        ...

    def prepend(self, child: Widget) -> object:
        """
        Adds a new #GtkMenuItem to the beginning of the menu shell's
        item list.
        """
        ...

    def select_first(self, search_sensitive: bool) -> object:
        """
        Select the first visible or selectable child of the menu shell;
        don’t select tearoff items unless the only item is a tearoff
        item.
        """
        ...

    def select_item(self, menu_item: Widget) -> object:
        """
        Selects the menu item from the menu shell.
        """
        ...

    def set_take_focus(self, take_focus: bool) -> object:
        """
        If @take_focus is %TRUE (the default) the menu shell will take
        the keyboard focus so that it will receive all keyboard events
        which is needed to enable keyboard navigation in menus.

        Setting @take_focus to %FALSE is useful only for special applications
        like virtual keyboard implementations which should not take keyboard
        focus.

        The @take_focus state of a menu or menu bar is automatically
        propagated to submenus whenever a submenu is popped up, so you
        don’t have to worry about recursively setting it for your entire
        menu hierarchy. Only when programmatically picking a submenu and
        popping it up manually, the @take_focus property of the submenu
        needs to be set explicitly.

        Note that setting it to %FALSE has side-effects:

        If the focus is in some other app, it keeps the focus and keynav in
        the menu doesn’t work. Consequently, keynav on the menu will only
        work if the focus is on some toplevel owned by the onscreen keyboard.

        To avoid confusing the user, menus with @take_focus set to %FALSE
        should not display mnemonics or accelerators, since it cannot be
        guaranteed that they will work.

        See also gdk_keyboard_grab()
        """
        ...


    ...

class MenuShellAccessible(ContainerAccessible, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class MenuToolButton(ToolButton, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A #GtkMenuToolButton is a #GtkToolItem that contains a button and
    a small additional button with an arrow. When clicked, the arrow
    button pops up a dropdown menu.

    Use gtk_menu_tool_button_new() to create a new
    #GtkMenuToolButton.

    # GtkMenuToolButton as GtkBuildable

    The GtkMenuToolButton implementation of the GtkBuildable interface
    supports adding a menu by specifying “menu” as the “type” attribute
    of a `<child>` element.

    An example for a UI definition fragment with menus:

    |[<!-- language="xml" -->
    <object class="GtkMenuToolButton">
      <child type="menu">
        <object class="GtkMenu"/>
      </child>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, icon_widget: _T.Optional[Widget], label: _T.Optional[str]) -> ToolItem:
        """
        Creates a new #GtkMenuToolButton using @icon_widget as icon and
        @label as label.
        """
        ...


    @classmethod
    def new_from_stock(cls, stock_id: str) -> ToolItem:
        """
        Creates a new #GtkMenuToolButton.
        The new #GtkMenuToolButton will contain an icon and label from
        the stock item indicated by @stock_id.
        """
        ...

    def get_menu(self) -> Widget:
        """
        Gets the #GtkMenu associated with #GtkMenuToolButton.
        """
        ...

    def set_arrow_tooltip_markup(self, markup: str) -> object:
        """
        Sets the tooltip markup text to be used as tooltip for the arrow button
        which pops up the menu.  See gtk_tool_item_set_tooltip_text() for setting
        a tooltip on the whole #GtkMenuToolButton.
        """
        ...

    def set_arrow_tooltip_text(self, text: str) -> object:
        """
        Sets the tooltip text to be used as tooltip for the arrow button which
        pops up the menu.  See gtk_tool_item_set_tooltip_text() for setting a tooltip
        on the whole #GtkMenuToolButton.
        """
        ...

    def set_menu(self, menu: Widget) -> object:
        """
        Sets the #GtkMenu that is popped up when the user clicks on the arrow.
        If @menu is NULL, the arrow button becomes insensitive.
        """
        ...


    ...

class MessageDialog(Dialog, Atk.ImplementorIface, Buildable):
    """
    #GtkMessageDialog presents a dialog with some message text. It’s simply a
    convenience widget; you could construct the equivalent of #GtkMessageDialog
    from #GtkDialog without too much effort, but #GtkMessageDialog saves typing.

    One difference from #GtkDialog is that #GtkMessageDialog sets the
    #GtkWindow:skip-taskbar-hint property to %TRUE, so that the dialog is hidden
    from the taskbar by default.

    The easiest way to do a modal message dialog is to use gtk_dialog_run(), though
    you can also pass in the %GTK_DIALOG_MODAL flag, gtk_dialog_run() automatically
    makes the dialog modal and waits for the user to respond to it. gtk_dialog_run()
    returns when any dialog button is clicked.

    An example for using a modal dialog:
    |[<!-- language="C" -->
     GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
     dialog = gtk_message_dialog_new (parent_window,
                                      flags,
                                      GTK_MESSAGE_ERROR,
                                      GTK_BUTTONS_CLOSE,
                                      "Error reading “%s”: %s",
                                      filename,
                                      g_strerror (errno));
     gtk_dialog_run (GTK_DIALOG (dialog));
     gtk_widget_destroy (dialog);
    ]|

    You might do a non-modal #GtkMessageDialog as follows:

    An example for a non-modal dialog:
    |[<!-- language="C" -->
     GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
     dialog = gtk_message_dialog_new (parent_window,
                                      flags,
                                      GTK_MESSAGE_ERROR,
                                      GTK_BUTTONS_CLOSE,
                                      "Error reading “%s”: %s",
                                      filename,
                                      g_strerror (errno));

     // Destroy the dialog when the user responds to it
     // (e.g. clicks a button)

     g_signal_connect_swapped (dialog, "response",
                               G_CALLBACK (gtk_widget_destroy),
                               dialog);
    ]|

    # GtkMessageDialog as GtkBuildable

    The GtkMessageDialog implementation of the GtkBuildable interface exposes
    the message area as an internal child with the name “message_area”.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, parent: _T.Optional[Window], flags: DialogFlags, type: MessageType, buttons: ButtonsType, message_format: _T.Optional[str], *args: object) -> Widget:
        """
        Creates a new message dialog, which is a simple dialog with some text
        the user may want to see. When the user clicks a button a “response”
        signal is emitted with response IDs from #GtkResponseType. See
        #GtkDialog for more details.
        """
        ...


    @classmethod
    def new_with_markup(cls, parent: _T.Optional[Window], flags: DialogFlags, type: MessageType, buttons: ButtonsType, message_format: _T.Optional[str], *args: object) -> Widget:
        """
        Creates a new message dialog, which is a simple dialog with some text that
        is marked up with the [Pango text markup language][PangoMarkupFormat].
        When the user clicks a button a “response” signal is emitted with
        response IDs from #GtkResponseType. See #GtkDialog for more details.

        Special XML characters in the printf() arguments passed to this
        function will automatically be escaped as necessary.
        (See g_markup_printf_escaped() for how this is implemented.)
        Usually this is what you want, but if you have an existing
        Pango markup string that you want to use literally as the
        label, then you need to use gtk_message_dialog_set_markup()
        instead, since you can’t pass the markup string either
        as the format (it might contain “%” characters) or as a string
        argument.
        |[<!-- language="C" -->
         GtkWidget *dialog;
         GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
         dialog = gtk_message_dialog_new (parent_window,
                                          flags,
                                          GTK_MESSAGE_ERROR,
                                          GTK_BUTTONS_CLOSE,
                                          NULL);
         gtk_message_dialog_set_markup (GTK_MESSAGE_DIALOG (dialog),
                                        markup);
        ]|
        """
        ...

    def format_secondary_markup(self, message_format: str, *args: object) -> object:
        """
        Sets the secondary text of the message dialog to be @message_format (with
        printf()-style), which is marked up with the
        [Pango text markup language][PangoMarkupFormat].

        Due to an oversight, this function does not escape special XML characters
        like gtk_message_dialog_new_with_markup() does. Thus, if the arguments
        may contain special XML characters, you should use g_markup_printf_escaped()
        to escape it.

        |[<!-- language="C" -->
        gchar *msg;

        msg = g_markup_printf_escaped (message_format, ...);
        gtk_message_dialog_format_secondary_markup (message_dialog,
                                                    "%s", msg);
        g_free (msg);
        ]|
        """
        ...

    def format_secondary_text(self, message_format: _T.Optional[str], *args: object) -> object:
        """
        Sets the secondary text of the message dialog to be @message_format
        (with printf()-style).
        """
        ...

    def get_image(self) -> Widget:
        """
        Gets the dialog’s image.
        """
        ...

    def get_message_area(self) -> Widget:
        """
        Returns the message area of the dialog. This is the box where the
        dialog’s primary and secondary labels are packed. You can add your
        own extra content to that box and it will appear below those labels.
        See gtk_dialog_get_content_area() for the corresponding
        function in the parent #GtkDialog.
        """
        ...

    def set_image(self, image: Widget) -> object:
        """
        Sets the dialog’s image to @image.
        """
        ...

    def set_markup(self, str: str) -> object:
        """
        Sets the text of the message dialog to be @str, which is marked
        up with the [Pango text markup language][PangoMarkupFormat].
        """
        ...


    ...

class Misc(Widget, Atk.ImplementorIface, Buildable):
    """
    The #GtkMisc widget is an abstract widget which is not useful itself, but
    is used to derive subclasses which have alignment and padding attributes.

    The horizontal and vertical padding attributes allows extra space to be
    added around the widget.

    The horizontal and vertical alignment attributes enable the widget to be
    positioned within its allocated area. Note that if the widget is added to
    a container in such a way that it expands automatically to fill its
    allocated area, the alignment settings will not alter the widget's position.

    Note that the desired effect can in most cases be achieved by using the
    #GtkWidget:halign, #GtkWidget:valign and #GtkWidget:margin properties
    on the child widget, so GtkMisc should not be used in new code. To reflect
    this fact, all #GtkMisc API has been deprecated.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_alignment(self, xalign: float, yalign: float) -> object:
        """
        Gets the X and Y alignment of the widget within its allocation.
        See gtk_misc_set_alignment().
        """
        ...

    def get_padding(self, xpad: int, ypad: int) -> object:
        """
        Gets the padding in the X and Y directions of the widget.
        See gtk_misc_set_padding().
        """
        ...

    def set_alignment(self, xalign: float, yalign: float) -> object:
        """
        Sets the alignment of the widget.
        """
        ...

    def set_padding(self, xpad: int, ypad: int) -> object:
        """
        Sets the amount of space to add around the widget.
        """
        ...


    ...

class ModelButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    GtkModelButton is a button class that can use a #GAction as its model.
    In contrast to #GtkToggleButton or #GtkRadioButton, which can also
    be backed by a #GAction via the #GtkActionable:action-name property,
    GtkModelButton will adapt its appearance according to the kind of
    action it is backed by, and appear either as a plain, check or
    radio button.

    Model buttons are used when popovers from a menu model with
    gtk_popover_new_from_model(); they can also be used manually in
    a #GtkPopoverMenu.

    When the action is specified via the #GtkActionable:action-name
    and #GtkActionable:action-target properties, the role of the button
    (i.e. whether it is a plain, check or radio button) is determined by
    the type of the action and doesn't have to be explicitly specified
    with the #GtkModelButton:role property.

    The content of the button is specified by the #GtkModelButton:text
    and #GtkModelButton:icon properties.

    The appearance of model buttons can be influenced with the
    #GtkModelButton:centered and #GtkModelButton:iconic properties.

    Model buttons have built-in support for submenus in #GtkPopoverMenu.
    To make a GtkModelButton that opens a submenu when activated, set
    the #GtkModelButton:menu-name property. To make a button that goes
    back to the parent menu, you should set the #GtkModelButton:inverted
    property to place the submenu indicator at the opposite side.

    # Example

    |[
    <object class="GtkPopoverMenu">
      <child>
        <object class="GtkBox">
          <property name="visible">True</property>
          <property name="margin">10</property>
          <child>
            <object class="GtkModelButton">
              <property name="visible">True</property>
              <property name="action-name">view.cut</property>
              <property name="text" translatable="yes">Cut</property>
            </object>
          </child>
          <child>
            <object class="GtkModelButton">
              <property name="visible">True</property>
              <property name="action-name">view.copy</property>
              <property name="text" translatable="yes">Copy</property>
            </object>
          </child>
          <child>
            <object class="GtkModelButton">
              <property name="visible">True</property>
              <property name="action-name">view.paste</property>
              <property name="text" translatable="yes">Paste</property>
            </object>
          </child>
        </object>
      </child>
    </object>
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    modelbutton
    ├── <child>
    ╰── check
    ]|

    |[<!-- language="plain" -->
    modelbutton
    ├── <child>
    ╰── radio
    ]|

    |[<!-- language="plain" -->
    modelbutton
    ├── <child>
    ╰── arrow
    ]|

    GtkModelButton has a main CSS node with name modelbutton, and a subnode,
    which will have the name check, radio or arrow, depending on the role
    of the button and whether it has a menu name set.

    The subnode is positioned before or after the content nodes and gets the
    .left or .right style class, depending on where it is located.

    |[<!-- language="plain" -->
    button.model
    ├── <child>
    ╰── check
    ]|

    Iconic model buttons (see #GtkModelButton:iconic) change the name of
    their main node to button and add a .model style class to it. The indicator
    subnode is invisible in this case.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new GtkModelButton.
        """
        ...


    ...

class MountOperation(Gio.MountOperation):
    """
    This should not be accessed directly. Use the accessor functions below.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, parent: _T.Optional[Window]) -> Gio.MountOperation:
        """
        Creates a new #GtkMountOperation
        """
        ...

    def get_parent(self) -> Window:
        """
        Gets the transient parent used by the #GtkMountOperation
        """
        ...

    def get_screen(self) -> Gdk.Screen:
        """
        Gets the screen on which windows of the #GtkMountOperation
        will be shown.
        """
        ...

    def is_showing(self) -> bool:
        """
        Returns whether the #GtkMountOperation is currently displaying
        a window.
        """
        ...

    def set_parent(self, parent: _T.Optional[Window]) -> object:
        """
        Sets the transient parent for windows shown by the
        #GtkMountOperation.
        """
        ...

    def set_screen(self, screen: Gdk.Screen) -> object:
        """
        Sets the screen to show windows of the #GtkMountOperation on.
        """
        ...


    ...

class NativeDialog(GObject.Object):
    """
    Native dialogs are platform dialogs that don't use #GtkDialog or
    #GtkWindow. They are used in order to integrate better with a
    platform, by looking the same as other native applications and
    supporting platform specific features.

    The #GtkDialog functions cannot be used on such objects, but we
    need a similar API in order to drive them. The #GtkNativeDialog
    object is an API that allows you to do this. It allows you to set
    various common properties on the dialog, as well as show and hide
    it and get a #GtkNativeDialog::response signal when the user finished
    with the dialog.

    There is also a gtk_native_dialog_run() helper that makes it easy
    to run any native dialog in a modal way with a recursive mainloop,
    similar to gtk_dialog_run().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def destroy(self) -> object:
        """
        Destroys a dialog.

        When a dialog is destroyed, it will break any references it holds
        to other objects. If it is visible it will be hidden and any underlying
        window system resources will be destroyed.

        Note that this does not release any reference to the object (as opposed to
        destroying a GtkWindow) because there is no reference from the windowing
        system to the #GtkNativeDialog.
        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the dialog is modal. See gtk_native_dialog_set_modal().
        """
        ...

    def get_title(self) -> str:
        """
        Gets the title of the #GtkNativeDialog.
        """
        ...

    def get_transient_for(self) -> Window:
        """
        Fetches the transient parent for this window. See
        gtk_native_dialog_set_transient_for().
        """
        ...

    def get_visible(self) -> bool:
        """
        Determines whether the dialog is visible.
        """
        ...

    def hide(self) -> object:
        """
        Hides the dialog if it is visilbe, aborting any interaction. Once this
        is called the  #GtkNativeDialog::response signal will not be emitted
        until after the next call to gtk_native_dialog_show().

        If the dialog is not visible this does nothing.
        """
        ...

    def run(self) -> int:
        """
        Blocks in a recursive main loop until @self emits the
        #GtkNativeDialog::response signal. It then returns the response ID
        from the ::response signal emission.

        Before entering the recursive main loop, gtk_native_dialog_run()
        calls gtk_native_dialog_show() on the dialog for you.

        After gtk_native_dialog_run() returns, then dialog will be hidden.

        Typical usage of this function might be:
        |[<!-- language="C" -->
          gint result = gtk_native_dialog_run (GTK_NATIVE_DIALOG (dialog));
          switch (result)
            {
              case GTK_RESPONSE_ACCEPT:
                 do_application_specific_something ();
                 break;
              default:
                 do_nothing_since_dialog_was_cancelled ();
                 break;
            }
          g_object_unref (dialog);
        ]|

        Note that even though the recursive main loop gives the effect of a
        modal dialog (it prevents the user from interacting with other
        windows in the same window group while the dialog is run), callbacks
        such as timeouts, IO channel watches, DND drops, etc, will
        be triggered during a gtk_native_dialog_run() call.
        """
        ...

    def set_modal(self, modal: bool) -> object:
        """
        Sets a dialog modal or non-modal. Modal dialogs prevent interaction
        with other windows in the same application. To keep modal dialogs
        on top of main application windows, use
        gtk_native_dialog_set_transient_for() to make the dialog transient for the
        parent; most [window managers][gtk-X11-arch]
        will then disallow lowering the dialog below the parent.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the title of the #GtkNativeDialog.
        """
        ...

    def set_transient_for(self, parent: _T.Optional[Window]) -> object:
        """
        Dialog windows should be set transient for the main application
        window they were spawned from. This allows
        [window managers][gtk-X11-arch] to e.g. keep the
        dialog on top of the main window, or center the dialog over the
        main window.

        Passing %NULL for @parent unsets the current transient window.
        """
        ...

    def show(self) -> object:
        """
        Shows the dialog on the display, allowing the user to interact with
        it. When the user accepts the state of the dialog the dialog will
        be automatically hidden and the #GtkNativeDialog::response signal
        will be emitted.

        Multiple calls while the dialog is visible will be ignored.
        """
        ...


    ...

class Notebook(Container, Atk.ImplementorIface, Buildable):
    """
    The #GtkNotebook widget is a #GtkContainer whose children are pages that
    can be switched between using tab labels along one edge.

    There are many configuration options for GtkNotebook. Among other
    things, you can choose on which edge the tabs appear
    (see gtk_notebook_set_tab_pos()), whether, if there are too many
    tabs to fit the notebook should be made bigger or scrolling
    arrows added (see gtk_notebook_set_scrollable()), and whether there
    will be a popup menu allowing the users to switch pages.
    (see gtk_notebook_popup_enable(), gtk_notebook_popup_disable())

    # GtkNotebook as GtkBuildable

    The GtkNotebook implementation of the #GtkBuildable interface
    supports placing children into tabs by specifying “tab” as the
    “type” attribute of a `<child>` element. Note that the content
    of the tab must be created before the tab can be filled.
    A tab child can be specified without specifying a `<child>`
    type attribute.

    To add a child widget in the notebooks action area, specify
    "action-start" or “action-end” as the “type” attribute of the
    `<child>` element.

    An example of a UI definition fragment with GtkNotebook:

    |[<!-- language="xml" -->
    <object class="GtkNotebook">
      <child>
        <object class="GtkLabel" id="notebook-content">
          <property name="label">Content</property>
        </object>
      </child>
      <child type="tab">
        <object class="GtkLabel" id="notebook-tab">
          <property name="label">Tab</property>
        </object>
      </child>
    </object>
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    notebook
    ├── header.top
    │   ├── [<action widget>]
    │   ├── tabs
    │   │   ├── [arrow]
    │   │   ├── tab
    │   │   │   ╰── <tab label>
    ┊   ┊   ┊
    │   │   ├── tab[.reorderable-page]
    │   │   │   ╰── <tab label>
    │   │   ╰── [arrow]
    │   ╰── [<action widget>]
    │
    ╰── stack
        ├── <child>
        ┊
        ╰── <child>
    ]|

    GtkNotebook has a main CSS node with name notebook, a subnode
    with name header and below that a subnode with name tabs which
    contains one subnode per tab with name tab.

    If action widgets are present, their CSS nodes are placed next
    to the tabs node. If the notebook is scrollable, CSS nodes with
    name arrow are placed as first and last child of the tabs node.

    The main node gets the .frame style class when the notebook
    has a border (see gtk_notebook_set_show_border()).

    The header node gets one of the style class .top, .bottom,
    .left or .right, depending on where the tabs are placed. For
    reorderable pages, the tab node gets the .reorderable-page class.

    A tab node gets the .dnd style class while it is moved with drag-and-drop.

    The nodes are always arranged from left-to-right, regarldess of text direction.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkNotebook widget with no pages.
        """
        ...

    def append_page(self, child: Widget, tab_label: _T.Optional[Widget]) -> int:
        """
        Appends a page to @notebook.
        """
        ...

    def append_page_menu(self, child: Widget, tab_label: _T.Optional[Widget], menu_label: _T.Optional[Widget]) -> int:
        """
        Appends a page to @notebook, specifying the widget to use as the
        label in the popup menu.
        """
        ...

    def detach_tab(self, child: Widget) -> object:
        """
        Removes the child from the notebook.

        This function is very similar to gtk_container_remove(),
        but additionally informs the notebook that the removal
        is happening as part of a tab DND operation, which should
        not be cancelled.
        """
        ...

    def get_action_widget(self, pack_type: PackType) -> Widget:
        """
        Gets one of the action widgets. See gtk_notebook_set_action_widget().
        """
        ...

    def get_current_page(self) -> int:
        """
        Returns the page number of the current page.
        """
        ...

    def get_group_name(self) -> str:
        """
        Gets the current group name for @notebook.
        """
        ...

    def get_menu_label(self, child: Widget) -> Widget:
        """
        Retrieves the menu label widget of the page containing @child.
        """
        ...

    def get_menu_label_text(self, child: Widget) -> str:
        """
        Retrieves the text of the menu label for the page containing
        @child.
        """
        ...

    def get_n_pages(self) -> int:
        """
        Gets the number of pages in a notebook.
        """
        ...

    def get_nth_page(self, page_num: int) -> Widget:
        """
        Returns the child widget contained in page number @page_num.
        """
        ...

    def get_scrollable(self) -> bool:
        """
        Returns whether the tab label area has arrows for scrolling.
        See gtk_notebook_set_scrollable().
        """
        ...

    def get_show_border(self) -> bool:
        """
        Returns whether a bevel will be drawn around the notebook pages.
        See gtk_notebook_set_show_border().
        """
        ...

    def get_show_tabs(self) -> bool:
        """
        Returns whether the tabs of the notebook are shown.
        See gtk_notebook_set_show_tabs().
        """
        ...

    def get_tab_detachable(self, child: Widget) -> bool:
        """
        Returns whether the tab contents can be detached from @notebook.
        """
        ...

    def get_tab_hborder(self) -> int:
        """
        Returns the horizontal width of a tab border.
        """
        ...

    def get_tab_label(self, child: Widget) -> Widget:
        """
        Returns the tab label widget for the page @child.
        %NULL is returned if @child is not in @notebook or
        if no tab label has specifically been set for @child.
        """
        ...

    def get_tab_label_text(self, child: Widget) -> str:
        """
        Retrieves the text of the tab label for the page containing
        @child.
        """
        ...

    def get_tab_pos(self) -> PositionType:
        """
        Gets the edge at which the tabs for switching pages in the
        notebook are drawn.
        """
        ...

    def get_tab_reorderable(self, child: Widget) -> bool:
        """
        Gets whether the tab can be reordered via drag and drop or not.
        """
        ...

    def get_tab_vborder(self) -> int:
        """
        Returns the vertical width of a tab border.
        """
        ...

    def insert_page(self, child: Widget, tab_label: _T.Optional[Widget], position: int) -> int:
        """
        Insert a page into @notebook at the given position.
        """
        ...

    def insert_page_menu(self, child: Widget, tab_label: _T.Optional[Widget], menu_label: _T.Optional[Widget], position: int) -> int:
        """
        Insert a page into @notebook at the given position, specifying
        the widget to use as the label in the popup menu.
        """
        ...

    def next_page(self) -> object:
        """
        Switches to the next page. Nothing happens if the current page is
        the last page.
        """
        ...

    def page_num(self, child: Widget) -> int:
        """
        Finds the index of the page which contains the given child
        widget.
        """
        ...

    def popup_disable(self) -> object:
        """
        Disables the popup menu.
        """
        ...

    def popup_enable(self) -> object:
        """
        Enables the popup menu: if the user clicks with the right
        mouse button on the tab labels, a menu with all the pages
        will be popped up.
        """
        ...

    def prepend_page(self, child: Widget, tab_label: _T.Optional[Widget]) -> int:
        """
        Prepends a page to @notebook.
        """
        ...

    def prepend_page_menu(self, child: Widget, tab_label: _T.Optional[Widget], menu_label: _T.Optional[Widget]) -> int:
        """
        Prepends a page to @notebook, specifying the widget to use as the
        label in the popup menu.
        """
        ...

    def prev_page(self) -> object:
        """
        Switches to the previous page. Nothing happens if the current page
        is the first page.
        """
        ...

    def remove_page(self, page_num: int) -> object:
        """
        Removes a page from the notebook given its index
        in the notebook.
        """
        ...

    def reorder_child(self, child: Widget, position: int) -> object:
        """
        Reorders the page containing @child, so that it appears in position
        @position. If @position is greater than or equal to the number of
        children in the list or negative, @child will be moved to the end
        of the list.
        """
        ...

    def set_action_widget(self, widget: Widget, pack_type: PackType) -> object:
        """
        Sets @widget as one of the action widgets. Depending on the pack type
        the widget will be placed before or after the tabs. You can use
        a #GtkBox if you need to pack more than one widget on the same side.

        Note that action widgets are “internal” children of the notebook and thus
        not included in the list returned from gtk_container_foreach().
        """
        ...

    def set_current_page(self, page_num: int) -> object:
        """
        Switches to the page number @page_num.

        Note that due to historical reasons, GtkNotebook refuses
        to switch to a page unless the child widget is visible.
        Therefore, it is recommended to show child widgets before
        adding them to a notebook.
        """
        ...

    def set_group_name(self, group_name: _T.Optional[str]) -> object:
        """
        Sets a group name for @notebook.

        Notebooks with the same name will be able to exchange tabs
        via drag and drop. A notebook with a %NULL group name will
        not be able to exchange tabs with any other notebook.
        """
        ...

    def set_menu_label(self, child: Widget, menu_label: _T.Optional[Widget]) -> object:
        """
        Changes the menu label for the page containing @child.
        """
        ...

    def set_menu_label_text(self, child: Widget, menu_text: str) -> object:
        """
        Creates a new label and sets it as the menu label of @child.
        """
        ...

    def set_scrollable(self, scrollable: bool) -> object:
        """
        Sets whether the tab label area will have arrows for
        scrolling if there are too many tabs to fit in the area.
        """
        ...

    def set_show_border(self, show_border: bool) -> object:
        """
        Sets whether a bevel will be drawn around the notebook pages.
        This only has a visual effect when the tabs are not shown.
        See gtk_notebook_set_show_tabs().
        """
        ...

    def set_show_tabs(self, show_tabs: bool) -> object:
        """
        Sets whether to show the tabs for the notebook or not.
        """
        ...

    def set_tab_detachable(self, child: Widget, detachable: bool) -> object:
        """
        Sets whether the tab can be detached from @notebook to another
        notebook or widget.

        Note that 2 notebooks must share a common group identificator
        (see gtk_notebook_set_group_name()) to allow automatic tabs
        interchange between them.

        If you want a widget to interact with a notebook through DnD
        (i.e.: accept dragged tabs from it) it must be set as a drop
        destination and accept the target “GTK_NOTEBOOK_TAB”. The notebook
        will fill the selection with a GtkWidget** pointing to the child
        widget that corresponds to the dropped tab.

        Note that you should use gtk_notebook_detach_tab() instead
        of gtk_container_remove() if you want to remove the tab from
        the source notebook as part of accepting a drop. Otherwise,
        the source notebook will think that the dragged tab was
        removed from underneath the ongoing drag operation, and
        will initiate a drag cancel animation.

        |[<!-- language="C" -->
         static void
         on_drag_data_received (GtkWidget        *widget,
                                GdkDragContext   *context,
                                gint              x,
                                gint              y,
                                GtkSelectionData *data,
                                guint             info,
                                guint             time,
                                gpointer          user_data)
         {
           GtkWidget *notebook;
           GtkWidget **child;

           notebook = gtk_drag_get_source_widget (context);
           child = (void*) gtk_selection_data_get_data (data);

           // process_widget (*child);

           gtk_notebook_detach_tab (GTK_NOTEBOOK (notebook), *child);
         }
        ]|

        If you want a notebook to accept drags from other widgets,
        you will have to set your own DnD code to do it.
        """
        ...

    def set_tab_label(self, child: Widget, tab_label: _T.Optional[Widget]) -> object:
        """
        Changes the tab label for @child.
        If %NULL is specified for @tab_label, then the page will
        have the label “page N”.
        """
        ...

    def set_tab_label_text(self, child: Widget, tab_text: str) -> object:
        """
        Creates a new label and sets it as the tab label for the page
        containing @child.
        """
        ...

    def set_tab_pos(self, pos: PositionType) -> object:
        """
        Sets the edge at which the tabs for switching pages in the
        notebook are drawn.
        """
        ...

    def set_tab_reorderable(self, child: Widget, reorderable: bool) -> object:
        """
        Sets whether the notebook tab can be reordered
        via drag and drop or not.
        """
        ...


    ...

class NotebookAccessible(ContainerAccessible, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class NotebookPageAccessible(Atk.Object, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, notebook: NotebookAccessible, child: Widget) -> Atk.Object:
        ...

    def invalidate(self) -> object:
        ...


    ...

class NumerableIcon(Gio.EmblemedIcon, Gio.Icon):
    """
    GtkNumerableIcon is a subclass of #GEmblemedIcon that can
    show a number or short string as an emblem. The number can
    be overlayed on top of another emblem, if desired.

    It supports theming by taking font and color information
    from a provided #GtkStyleContext; see
    gtk_numerable_icon_set_style_context().

    Typical numerable icons:
    ![](numerableicon.png)
    ![](numerableicon2.png)
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_background_gicon(self) -> Gio.Icon:
        """
        Returns the #GIcon that was set as the base background image, or
        %NULL if there’s none. The caller of this function does not own
        a reference to the returned #GIcon.
        """
        ...

    def get_background_icon_name(self) -> str:
        """
        Returns the icon name used as the base background image,
        or %NULL if there’s none.
        """
        ...

    def get_count(self) -> int:
        """
        Returns the value currently displayed by @self.
        """
        ...

    def get_label(self) -> str:
        """
        Returns the currently displayed label of the icon, or %NULL.
        """
        ...

    def get_style_context(self) -> StyleContext:
        """
        Returns the #GtkStyleContext used by the icon for theming,
        or %NULL if there’s none.
        """
        ...

    def set_background_gicon(self, icon: _T.Optional[Gio.Icon]) -> object:
        """
        Updates the icon to use @icon as the base background image.
        If @icon is %NULL, @self will go back using style information
        or default theming for its background image.

        If this method is called and an icon name was already set as
        background for the icon, @icon will be used, i.e. the last method
        called between gtk_numerable_icon_set_background_gicon() and
        gtk_numerable_icon_set_background_icon_name() has always priority.
        """
        ...

    def set_background_icon_name(self, icon_name: _T.Optional[str]) -> object:
        """
        Updates the icon to use the icon named @icon_name from the
        current icon theme as the base background image. If @icon_name
        is %NULL, @self will go back using style information or default
        theming for its background image.

        If this method is called and a #GIcon was already set as
        background for the icon, @icon_name will be used, i.e. the
        last method called between gtk_numerable_icon_set_background_icon_name()
        and gtk_numerable_icon_set_background_gicon() has always priority.
        """
        ...

    def set_count(self, count: int) -> object:
        """
        Sets the currently displayed value of @self to @count.

        The numeric value is always clamped to make it two digits, i.e.
        between -99 and 99. Setting a count of zero removes the emblem.
        If this method is called, and a label was already set on the icon,
        it will automatically be reset to %NULL before rendering the number,
        i.e. the last method called between gtk_numerable_icon_set_count()
        and gtk_numerable_icon_set_label() has always priority.
        """
        ...

    def set_label(self, label: _T.Optional[str]) -> object:
        """
        Sets the currently displayed value of @self to the string
        in @label. Setting an empty label removes the emblem.

        Note that this is meant for displaying short labels, such as
        roman numbers, or single letters. For roman numbers, consider
        using the Unicode characters U+2160 - U+217F. Strings longer
        than two characters will likely not be rendered very well.

        If this method is called, and a number was already set on the
        icon, it will automatically be reset to zero before rendering
        the label, i.e. the last method called between
        gtk_numerable_icon_set_label() and gtk_numerable_icon_set_count()
        has always priority.
        """
        ...

    def set_style_context(self, style: StyleContext) -> object:
        """
        Updates the icon to fetch theme information from the
        given #GtkStyleContext.
        """
        ...


    ...

class OffscreenWindow(Window, Atk.ImplementorIface, Buildable):
    """
    GtkOffscreenWindow is strictly intended to be used for obtaining
    snapshots of widgets that are not part of a normal widget hierarchy.
    Since #GtkOffscreenWindow is a toplevel widget you cannot obtain
    snapshots of a full window with it since you cannot pack a toplevel
    widget in another toplevel.

    The idea is to take a widget and manually set the state of it,
    add it to a GtkOffscreenWindow and then retrieve the snapshot
    as a #cairo_surface_t or #GdkPixbuf.

    GtkOffscreenWindow derives from #GtkWindow only as an implementation
    detail.  Applications should not use any API specific to #GtkWindow
    to operate on this object.  It should be treated as a #GtkBin that
    has no parent widget.

    When contained offscreen widgets are redrawn, GtkOffscreenWindow
    will emit a #GtkWidget::damage-event signal.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a toplevel container widget that is used to retrieve
        snapshots of widgets without showing them on the screen.
        """
        ...

    def get_pixbuf(self) -> GdkPixbuf.Pixbuf:
        """
        Retrieves a snapshot of the contained widget in the form of
        a #GdkPixbuf.  This is a new pixbuf with a reference count of 1,
        and the application should unreference it once it is no longer
        needed.
        """
        ...

    def get_surface(self) -> cairo.Surface:
        """
        Retrieves a snapshot of the contained widget in the form of
        a #cairo_surface_t.  If you need to keep this around over window
        resizes then you should add a reference to it.
        """
        ...


    ...

class Overlay(Bin, Atk.ImplementorIface, Buildable):
    """
    GtkOverlay is a container which contains a single main child, on top
    of which it can place “overlay” widgets. The position of each overlay
    widget is determined by its #GtkWidget:halign and #GtkWidget:valign
    properties. E.g. a widget with both alignments set to %GTK_ALIGN_START
    will be placed at the top left corner of the GtkOverlay container,
    whereas an overlay with halign set to %GTK_ALIGN_CENTER and valign set
    to %GTK_ALIGN_END will be placed a the bottom edge of the GtkOverlay,
    horizontally centered. The position can be adjusted by setting the margin
    properties of the child to non-zero values.

    More complicated placement of overlays is possible by connecting
    to the #GtkOverlay::get-child-position signal.

    An overlay’s minimum and natural sizes are those of its main child. The sizes
    of overlay children are not considered when measuring these preferred sizes.

    # GtkOverlay as GtkBuildable

    The GtkOverlay implementation of the GtkBuildable interface
    supports placing a child as an overlay by specifying “overlay” as
    the “type” attribute of a `<child>` element.

    # CSS nodes

    GtkOverlay has a single CSS node with the name “overlay”. Overlay children
    whose alignments cause them to be positioned at an edge get the style classes
    “.left”, “.right”, “.top”, and/or “.bottom” according to their position.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkOverlay.
        """
        ...

    def add_overlay(self, widget: Widget) -> object:
        """
        Adds @widget to @overlay.

        The widget will be stacked on top of the main widget
        added with gtk_container_add().

        The position at which @widget is placed is determined
        from its #GtkWidget:halign and #GtkWidget:valign properties.
        """
        ...

    def get_overlay_pass_through(self, widget: Widget) -> bool:
        """
        Convenience function to get the value of the #GtkOverlay:pass-through
        child property for @widget.
        """
        ...

    def reorder_overlay(self, child: Widget, index_: int) -> object:
        """
        Moves @child to a new @index in the list of @overlay children.
        The list contains overlays in the order that these were
        added to @overlay by default. See also #GtkOverlay:index.

        A widget’s index in the @overlay children list determines which order
        the children are drawn if they overlap. The first child is drawn at
        the bottom. It also affects the default focus chain order.
        """
        ...

    def set_overlay_pass_through(self, widget: Widget, pass_through: bool) -> object:
        """
        Convenience function to set the value of the #GtkOverlay:pass-through
        child property for @widget.
        """
        ...


    ...

class PadController(EventController):
    """
    #GtkPadController is an event controller for the pads found in drawing
    tablets (The collection of buttons and tactile sensors often found around
    the stylus-sensitive area).

    These buttons and sensors have no implicit meaning, and by default they
    perform no action, this event controller is provided to map those to
    #GAction objects, thus letting the application give those a more semantic
    meaning.

    Buttons and sensors are not constrained to triggering a single action, some
    %GDK_SOURCE_TABLET_PAD devices feature multiple "modes", all these input
    elements have one current mode, which may determine the final action
    being triggered. Pad devices often divide buttons and sensors into groups,
    all elements in a group share the same current mode, but different groups
    may have different modes. See gdk_device_pad_get_n_groups() and
    gdk_device_pad_get_group_n_modes().

    Each of the actions that a given button/strip/ring performs for a given
    mode is defined by #GtkPadActionEntry, it contains an action name that
    will be looked up in the given #GActionGroup and activated whenever the
    specified input element and mode are triggered.

    A simple example of #GtkPadController usage, assigning button 1 in all
    modes and pad devices to an "invert-selection" action:
    |[
      GtkPadActionEntry *pad_actions[] = {
        { GTK_PAD_ACTION_BUTTON, 1, -1, "Invert selection", "pad-actions.invert-selection" },
        …
      };

      …
      action_group = g_simple_action_group_new ();
      action = g_simple_action_new ("pad-actions.invert-selection", NULL);
      g_signal_connect (action, "activate", on_invert_selection_activated, NULL);
      g_action_map_add_action (G_ACTION_MAP (action_group), action);
      …
      pad_controller = gtk_pad_controller_new (window, action_group, NULL);
    ]|

    The actions belonging to rings/strips will be activated with a parameter
    of type %G_VARIANT_TYPE_DOUBLE bearing the value of the given axis, it
    is required that those are made stateful and accepting this #GVariantType.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, window: Window, group: Gio.ActionGroup, pad: _T.Optional[Gdk.Device]) -> PadController:
        """
        Creates a new #GtkPadController that will associate events from @pad to
        actions. A %NULL pad may be provided so the controller manages all pad devices
        generically, it is discouraged to mix #GtkPadController objects with %NULL
        and non-%NULL @pad argument on the same @window, as execution order is not
        guaranteed.

        The #GtkPadController is created with no mapped actions. In order to map pad
        events to actions, use gtk_pad_controller_set_action_entries() or
        gtk_pad_controller_set_action().
        """
        ...

    def set_action(self, type: PadActionType, index: int, mode: int, label: str, action_name: str) -> object:
        """
        Adds an individual action to @controller. This action will only be activated
        if the given button/ring/strip number in @index is interacted while
        the current mode is @mode. -1 may be used for simple cases, so the action
        is triggered on all modes.

        The given @label should be considered user-visible, so internationalization
        rules apply. Some windowing systems may be able to use those for user
        feedback.
        """
        ...

    def set_action_entries(self, entries: object, n_entries: int) -> object:
        """
        This is a convenience function to add a group of action entries on
        @controller. See #GtkPadActionEntry and gtk_pad_controller_set_action().
        """
        ...


    ...

class PageSetup(GObject.Object):
    """
    A GtkPageSetup object stores the page size, orientation and margins.
    The idea is that you can get one of these from the page setup dialog
    and then pass it to the #GtkPrintOperation when printing.
    The benefit of splitting this out of the #GtkPrintSettings is that
    these affect the actual layout of the page, and thus need to be set
    long before user prints.

    ## Margins ## {#print-margins}
    The margins specified in this object are the “print margins”, i.e. the
    parts of the page that the printer cannot print on. These are different
    from the layout margins that a word processor uses; they are typically
    used to determine the minimal size for the layout
    margins.

    To obtain a #GtkPageSetup use gtk_page_setup_new() to get the defaults,
    or use gtk_print_run_page_setup_dialog() to show the page setup dialog
    and receive the resulting page setup.

    ## A page setup dialog

    |[<!-- language="C" -->
    static GtkPrintSettings *settings = NULL;
    static GtkPageSetup *page_setup = NULL;

    static void
    do_page_setup (void)
    {
      GtkPageSetup *new_page_setup;

      if (settings == NULL)
        settings = gtk_print_settings_new ();

      new_page_setup = gtk_print_run_page_setup_dialog (GTK_WINDOW (main_window),
                                                        page_setup, settings);

      if (page_setup)
        g_object_unref (page_setup);

      page_setup = new_page_setup;
    }
    ]|

    Printing support was added in GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> PageSetup:
        """
        Creates a new #GtkPageSetup.
        """
        ...


    @classmethod
    def new_from_file(cls, file_name: str) -> PageSetup:
        """
        Reads the page setup from the file @file_name. Returns a
        new #GtkPageSetup object with the restored page setup,
        or %NULL if an error occurred. See gtk_page_setup_to_file().
        """
        ...


    @classmethod
    def new_from_gvariant(cls, variant: GLib.Variant) -> PageSetup:
        """
        Desrialize a page setup from an a{sv} variant in
        the format produced by gtk_page_setup_to_gvariant().
        """
        ...


    @classmethod
    def new_from_key_file(cls, key_file: GLib.KeyFile, group_name: _T.Optional[str]) -> PageSetup:
        """
        Reads the page setup from the group @group_name in the key file
        @key_file. Returns a new #GtkPageSetup object with the restored
        page setup, or %NULL if an error occurred.
        """
        ...

    def copy(self) -> PageSetup:
        """
        Copies a #GtkPageSetup.
        """
        ...

    def get_bottom_margin(self, unit: Unit) -> float:
        """
        Gets the bottom margin in units of @unit.
        """
        ...

    def get_left_margin(self, unit: Unit) -> float:
        """
        Gets the left margin in units of @unit.
        """
        ...

    def get_orientation(self) -> PageOrientation:
        """
        Gets the page orientation of the #GtkPageSetup.
        """
        ...

    def get_page_height(self, unit: Unit) -> float:
        """
        Returns the page height in units of @unit.

        Note that this function takes orientation and
        margins into consideration.
        See gtk_page_setup_get_paper_height().
        """
        ...

    def get_page_width(self, unit: Unit) -> float:
        """
        Returns the page width in units of @unit.

        Note that this function takes orientation and
        margins into consideration.
        See gtk_page_setup_get_paper_width().
        """
        ...

    def get_paper_height(self, unit: Unit) -> float:
        """
        Returns the paper height in units of @unit.

        Note that this function takes orientation, but
        not margins into consideration.
        See gtk_page_setup_get_page_height().
        """
        ...

    def get_paper_size(self) -> PaperSize:
        """
        Gets the paper size of the #GtkPageSetup.
        """
        ...

    def get_paper_width(self, unit: Unit) -> float:
        """
        Returns the paper width in units of @unit.

        Note that this function takes orientation, but
        not margins into consideration.
        See gtk_page_setup_get_page_width().
        """
        ...

    def get_right_margin(self, unit: Unit) -> float:
        """
        Gets the right margin in units of @unit.
        """
        ...

    def get_top_margin(self, unit: Unit) -> float:
        """
        Gets the top margin in units of @unit.
        """
        ...

    def load_file(self, file_name: str) -> bool:
        """
        Reads the page setup from the file @file_name.
        See gtk_page_setup_to_file().
        """
        ...

    def load_key_file(self, key_file: GLib.KeyFile, group_name: _T.Optional[str]) -> bool:
        """
        Reads the page setup from the group @group_name in the key file
        @key_file.
        """
        ...

    def set_bottom_margin(self, margin: float, unit: Unit) -> object:
        """
        Sets the bottom margin of the #GtkPageSetup.
        """
        ...

    def set_left_margin(self, margin: float, unit: Unit) -> object:
        """
        Sets the left margin of the #GtkPageSetup.
        """
        ...

    def set_orientation(self, orientation: PageOrientation) -> object:
        """
        Sets the page orientation of the #GtkPageSetup.
        """
        ...

    def set_paper_size(self, size: PaperSize) -> object:
        """
        Sets the paper size of the #GtkPageSetup without
        changing the margins. See
        gtk_page_setup_set_paper_size_and_default_margins().
        """
        ...

    def set_paper_size_and_default_margins(self, size: PaperSize) -> object:
        """
        Sets the paper size of the #GtkPageSetup and modifies
        the margins according to the new paper size.
        """
        ...

    def set_right_margin(self, margin: float, unit: Unit) -> object:
        """
        Sets the right margin of the #GtkPageSetup.
        """
        ...

    def set_top_margin(self, margin: float, unit: Unit) -> object:
        """
        Sets the top margin of the #GtkPageSetup.
        """
        ...

    def to_file(self, file_name: str) -> bool:
        """
        This function saves the information from @setup to @file_name.
        """
        ...

    def to_gvariant(self) -> GLib.Variant:
        """
        Serialize page setup to an a{sv} variant.
        """
        ...

    def to_key_file(self, key_file: GLib.KeyFile, group_name: _T.Optional[str]) -> object:
        """
        This function adds the page setup from @setup to @key_file.
        """
        ...


    ...

class Paned(Container, Atk.ImplementorIface, Buildable, Orientable):
    """
    #GtkPaned has two panes, arranged either
    horizontally or vertically. The division between
    the two panes is adjustable by the user by dragging
    a handle.

    Child widgets are
    added to the panes of the widget with gtk_paned_pack1() and
    gtk_paned_pack2(). The division between the two children is set by default
    from the size requests of the children, but it can be adjusted by the
    user.

    A paned widget draws a separator between the two child widgets and a
    small handle that the user can drag to adjust the division. It does not
    draw any relief around the children or around the separator. (The space
    in which the separator is called the gutter.) Often, it is useful to put
    each child inside a #GtkFrame with the shadow type set to %GTK_SHADOW_IN
    so that the gutter appears as a ridge. No separator is drawn if one of
    the children is missing.

    Each child has two options that can be set, @resize and @shrink. If
    @resize is true, then when the #GtkPaned is resized, that child will
    expand or shrink along with the paned widget. If @shrink is true, then
    that child can be made smaller than its requisition by the user.
    Setting @shrink to %FALSE allows the application to set a minimum size.
    If @resize is false for both children, then this is treated as if
    @resize is true for both children.

    The application can set the position of the slider as if it were set
    by the user, by calling gtk_paned_set_position().

    # CSS nodes

    |[<!-- language="plain" -->
    paned
    ├── <child>
    ├── separator[.wide]
    ╰── <child>
    ]|

    GtkPaned has a main CSS node with name paned, and a subnode for
    the separator with name separator. The subnode gets a .wide style
    class when the paned is supposed to be wide.

    In horizontal orientation, the nodes of the children are always arranged
    from left to right. So :first-child will always select the leftmost child,
    regardless of text direction.

    ## Creating a paned widget with minimum sizes.

    |[<!-- language="C" -->
    GtkWidget *hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
    GtkWidget *frame1 = gtk_frame_new (NULL);
    GtkWidget *frame2 = gtk_frame_new (NULL);
    gtk_frame_set_shadow_type (GTK_FRAME (frame1), GTK_SHADOW_IN);
    gtk_frame_set_shadow_type (GTK_FRAME (frame2), GTK_SHADOW_IN);

    gtk_widget_set_size_request (hpaned, 200, -1);

    gtk_paned_pack1 (GTK_PANED (hpaned), frame1, TRUE, FALSE);
    gtk_widget_set_size_request (frame1, 50, -1);

    gtk_paned_pack2 (GTK_PANED (hpaned), frame2, FALSE, FALSE);
    gtk_widget_set_size_request (frame2, 50, -1);
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, orientation: Orientation) -> Widget:
        """
        Creates a new #GtkPaned widget.
        """
        ...

    def add1(self, child: Widget) -> object:
        """
        Adds a child to the top or left pane with default parameters. This is
        equivalent to
        `gtk_paned_pack1 (paned, child, FALSE, TRUE)`.
        """
        ...

    def add2(self, child: Widget) -> object:
        """
        Adds a child to the bottom or right pane with default parameters. This
        is equivalent to
        `gtk_paned_pack2 (paned, child, TRUE, TRUE)`.
        """
        ...

    def get_child1(self) -> Widget:
        """
        Obtains the first child of the paned widget.
        """
        ...

    def get_child2(self) -> Widget:
        """
        Obtains the second child of the paned widget.
        """
        ...

    def get_handle_window(self) -> Gdk.Window:
        """
        Returns the #GdkWindow of the handle. This function is
        useful when handling button or motion events because it
        enables the callback to distinguish between the window
        of the paned, a child and the handle.
        """
        ...

    def get_position(self) -> int:
        """
        Obtains the position of the divider between the two panes.
        """
        ...

    def get_wide_handle(self) -> bool:
        """
        Gets the #GtkPaned:wide-handle property.
        """
        ...

    def pack1(self, child: Widget, resize: bool, shrink: bool) -> object:
        """
        Adds a child to the top or left pane.
        """
        ...

    def pack2(self, child: Widget, resize: bool, shrink: bool) -> object:
        """
        Adds a child to the bottom or right pane.
        """
        ...

    def set_position(self, position: int) -> object:
        """
        Sets the position of the divider between the two panes.
        """
        ...

    def set_wide_handle(self, wide: bool) -> object:
        """
        Sets the #GtkPaned:wide-handle property.
        """
        ...


    ...

class PanedAccessible(ContainerAccessible, Atk.Component, Atk.Value):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class PlacesSidebar(ScrolledWindow, Atk.ImplementorIface, Buildable):
    """
    #GtkPlacesSidebar is a widget that displays a list of frequently-used places in the
    file system:  the user’s home directory, the user’s bookmarks, and volumes and drives.
    This widget is used as a sidebar in #GtkFileChooser and may be used by file managers
    and similar programs.

    The places sidebar displays drives and volumes, and will automatically mount
    or unmount them when the user selects them.

    Applications can hook to various signals in the places sidebar to customize
    its behavior.  For example, they can add extra commands to the context menu
    of the sidebar.

    While bookmarks are completely in control of the user, the places sidebar also
    allows individual applications to provide extra shortcut folders that are unique
    to each application.  For example, a Paint program may want to add a shortcut
    for a Clipart folder.  You can do this with gtk_places_sidebar_add_shortcut().

    To make use of the places sidebar, an application at least needs to connect
    to the #GtkPlacesSidebar::open-location signal.  This is emitted when the
    user selects in the sidebar a location to open.  The application should also
    call gtk_places_sidebar_set_location() when it changes the currently-viewed
    location.

    # CSS nodes

    GtkPlacesSidebar uses a single CSS node with name placessidebar and style
    class .sidebar.

    Among the children of the places sidebar, the following style classes can
    be used:
    - .sidebar-new-bookmark-row for the 'Add new bookmark' row
    - .sidebar-placeholder-row for a row that is a placeholder
    - .has-open-popup when a popup is open for a row
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkPlacesSidebar widget.

        The application should connect to at least the
        #GtkPlacesSidebar::open-location signal to be notified
        when the user makes a selection in the sidebar.
        """
        ...

    def add_shortcut(self, location: Gio.File) -> object:
        """
        Applications may want to present some folders in the places sidebar if
        they could be immediately useful to users.  For example, a drawing
        program could add a “/usr/share/clipart” location when the sidebar is
        being used in an “Insert Clipart” dialog box.

        This function adds the specified @location to a special place for immutable
        shortcuts.  The shortcuts are application-specific; they are not shared
        across applications, and they are not persistent.  If this function
        is called multiple times with different locations, then they are added
        to the sidebar’s list in the same order as the function is called.
        """
        ...

    def get_local_only(self) -> bool:
        """
        Returns the value previously set with gtk_places_sidebar_set_local_only().
        """
        ...

    def get_location(self) -> Gio.File:
        """
        Gets the currently selected location in the @sidebar. This can be %NULL when
        nothing is selected, for example, when gtk_places_sidebar_set_location() has
        been called with a location that is not among the sidebar’s list of places to
        show.

        You can use this function to get the selection in the @sidebar.  Also, if you
        connect to the #GtkPlacesSidebar::populate-popup signal, you can use this
        function to get the location that is being referred to during the callbacks
        for your menu items.
        """
        ...

    def get_nth_bookmark(self, n: int) -> Gio.File:
        """
        This function queries the bookmarks added by the user to the places sidebar,
        and returns one of them.  This function is used by #GtkFileChooser to implement
        the “Alt-1”, “Alt-2”, etc. shortcuts, which activate the cooresponding bookmark.
        """
        ...

    def get_open_flags(self) -> PlacesOpenFlags:
        """
        Gets the open flags.
        """
        ...

    def get_show_connect_to_server(self) -> bool:
        """
        Returns the value previously set with gtk_places_sidebar_set_show_connect_to_server()
        """
        ...

    def get_show_desktop(self) -> bool:
        """
        Returns the value previously set with gtk_places_sidebar_set_show_desktop()
        """
        ...

    def get_show_enter_location(self) -> bool:
        """
        Returns the value previously set with gtk_places_sidebar_set_show_enter_location()
        """
        ...

    def get_show_other_locations(self) -> bool:
        """
        Returns the value previously set with gtk_places_sidebar_set_show_other_locations()
        """
        ...

    def get_show_recent(self) -> bool:
        """
        Returns the value previously set with gtk_places_sidebar_set_show_recent()
        """
        ...

    def get_show_starred_location(self) -> bool:
        """
        Returns the value previously set with gtk_places_sidebar_set_show_starred_location()
        """
        ...

    def get_show_trash(self) -> bool:
        """
        Returns the value previously set with gtk_places_sidebar_set_show_trash()
        """
        ...

    def list_shortcuts(self) -> GLib.SList:
        """
        Gets the list of shortcuts.
        """
        ...

    def remove_shortcut(self, location: Gio.File) -> object:
        """
        Removes an application-specific shortcut that has been previously been
        inserted with gtk_places_sidebar_add_shortcut().  If the @location is not a
        shortcut in the sidebar, then nothing is done.
        """
        ...

    def set_drop_targets_visible(self, visible: bool, context: Gdk.DragContext) -> object:
        """
        Make the GtkPlacesSidebar show drop targets, so it can show the available
        drop targets and a "new bookmark" row. This improves the Drag-and-Drop
        experience of the user and allows applications to show all available
        drop targets at once.

        This needs to be called when the application is aware of an ongoing drag
        that might target the sidebar. The drop-targets-visible state will be unset
        automatically if the drag finishes in the GtkPlacesSidebar. You only need
        to unset the state when the drag ends on some other widget on your application.
        """
        ...

    def set_local_only(self, local_only: bool) -> object:
        """
        Sets whether the @sidebar should only show local files.
        """
        ...

    def set_location(self, location: _T.Optional[Gio.File]) -> object:
        """
        Sets the location that is being shown in the widgets surrounding the
        @sidebar, for example, in a folder view in a file manager.  In turn, the
        @sidebar will highlight that location if it is being shown in the list of
        places, or it will unhighlight everything if the @location is not among the
        places in the list.
        """
        ...

    def set_open_flags(self, flags: PlacesOpenFlags) -> object:
        """
        Sets the way in which the calling application can open new locations from
        the places sidebar.  For example, some applications only open locations
        “directly” into their main view, while others may support opening locations
        in a new notebook tab or a new window.

        This function is used to tell the places @sidebar about the ways in which the
        application can open new locations, so that the sidebar can display (or not)
        the “Open in new tab” and “Open in new window” menu items as appropriate.

        When the #GtkPlacesSidebar::open-location signal is emitted, its flags
        argument will be set to one of the @flags that was passed in
        gtk_places_sidebar_set_open_flags().

        Passing 0 for @flags will cause #GTK_PLACES_OPEN_NORMAL to always be sent
        to callbacks for the “open-location” signal.
        """
        ...

    def set_show_connect_to_server(self, show_connect_to_server: bool) -> object:
        """
        Sets whether the @sidebar should show an item for connecting to a network server;
        this is off by default. An application may want to turn this on if it implements
        a way for the user to connect to network servers directly.

        If you enable this, you should connect to the
        #GtkPlacesSidebar::show-connect-to-server signal.
        """
        ...

    def set_show_desktop(self, show_desktop: bool) -> object:
        """
        Sets whether the @sidebar should show an item for the Desktop folder.
        The default value for this option is determined by the desktop
        environment and the user’s configuration, but this function can be
        used to override it on a per-application basis.
        """
        ...

    def set_show_enter_location(self, show_enter_location: bool) -> object:
        """
        Sets whether the @sidebar should show an item for entering a location;
        this is off by default. An application may want to turn this on if manually
        entering URLs is an expected user action.

        If you enable this, you should connect to the
        #GtkPlacesSidebar::show-enter-location signal.
        """
        ...

    def set_show_other_locations(self, show_other_locations: bool) -> object:
        """
        Sets whether the @sidebar should show an item for the application to show
        an Other Locations view; this is off by default. When set to %TRUE, persistent
        devices such as hard drives are hidden, otherwise they are shown in the sidebar.
        An application may want to turn this on if it implements a way for the user to
        see and interact with drives and network servers directly.

        If you enable this, you should connect to the
        #GtkPlacesSidebar::show-other-locations signal.
        """
        ...

    def set_show_recent(self, show_recent: bool) -> object:
        """
        Sets whether the @sidebar should show an item for recent files.
        The default value for this option is determined by the desktop
        environment, but this function can be used to override it on a
        per-application basis.
        """
        ...

    def set_show_starred_location(self, show_starred_location: bool) -> object:
        """
        If you enable this, you should connect to the
        #GtkPlacesSidebar::show-starred-location signal.
        """
        ...

    def set_show_trash(self, show_trash: bool) -> object:
        """
        Sets whether the @sidebar should show an item for the Trash location.
        """
        ...


    ...

class Plug(Window, Atk.ImplementorIface, Buildable):
    """
    Together with #GtkSocket, #GtkPlug provides the ability to embed
    widgets from one process into another process in a fashion that is
    transparent to the user. One process creates a #GtkSocket widget
    and passes the ID of that widget’s window to the other process,
    which then creates a #GtkPlug with that window ID. Any widgets
    contained in the #GtkPlug then will appear inside the first
    application’s window.

    The communication between a #GtkSocket and a #GtkPlug follows the
    [XEmbed Protocol](http://www.freedesktop.org/Standards/xembed-spec).
    This protocol has also been implemented in other toolkits, e.g. Qt,
    allowing the same level of integration when embedding a Qt widget
    in GTK+ or vice versa.

    The #GtkPlug and #GtkSocket widgets are only available when GTK+
    is compiled for the X11 platform and %GDK_WINDOWING_X11 is defined.
    They can only be used on a #GdkX11Display. To use #GtkPlug and
    #GtkSocket, you need to include the `gtk/gtkx.h` header.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, socket_id: xlib.Window) -> Widget:
        """
        Creates a new plug widget inside the #GtkSocket identified
        by @socket_id. If @socket_id is 0, the plug is left “unplugged” and
        can later be plugged into a #GtkSocket by  gtk_socket_add_id().
        """
        ...


    @classmethod
    def new_for_display(cls, display: Gdk.Display, socket_id: xlib.Window) -> Widget:
        """
        Create a new plug widget inside the #GtkSocket identified by socket_id.
        """
        ...

    def construct(self, socket_id: xlib.Window) -> object:
        """
        Finish the initialization of @plug for a given #GtkSocket identified by
        @socket_id. This function will generally only be used by classes deriving from #GtkPlug.
        """
        ...

    def construct_for_display(self, display: Gdk.Display, socket_id: xlib.Window) -> object:
        """
        Finish the initialization of @plug for a given #GtkSocket identified by
        @socket_id which is currently displayed on @display.
        This function will generally only be used by classes deriving from #GtkPlug.
        """
        ...

    def get_embedded(self) -> bool:
        """
        Determines whether the plug is embedded in a socket.
        """
        ...

    def get_id(self) -> xlib.Window:
        """
        Gets the window ID of a #GtkPlug widget, which can then
        be used to embed this window inside another window, for
        instance with gtk_socket_add_id().
        """
        ...

    def get_socket_window(self) -> Gdk.Window:
        """
        Retrieves the socket the plug is embedded in.
        """
        ...


    ...

class PlugAccessible(WindowAccessible, Atk.Component, Atk.Window):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_id(self) -> str:
        ...


    ...

class Popover(Bin, Atk.ImplementorIface, Buildable):
    """
    GtkPopover is a bubble-like context window, primarily meant to
    provide context-dependent information or options. Popovers are
    attached to a widget, passed at construction time on gtk_popover_new(),
    or updated afterwards through gtk_popover_set_relative_to(), by
    default they will point to the whole widget area, although this
    behavior can be changed through gtk_popover_set_pointing_to().

    The position of a popover relative to the widget it is attached to
    can also be changed through gtk_popover_set_position().

    By default, #GtkPopover performs a GTK+ grab, in order to ensure
    input events get redirected to it while it is shown, and also so
    the popover is dismissed in the expected situations (clicks outside
    the popover, or the Esc key being pressed). If no such modal behavior
    is desired on a popover, gtk_popover_set_modal() may be called on it
    to tweak its behavior.

    ## GtkPopover as menu replacement

    GtkPopover is often used to replace menus. To facilitate this, it
    supports being populated from a #GMenuModel, using
    gtk_popover_new_from_model(). In addition to all the regular menu
    model features, this function supports rendering sections in the
    model in a more compact form, as a row of icon buttons instead of
    menu items.

    To use this rendering, set the ”display-hint” attribute of the
    section to ”horizontal-buttons” and set the icons of your items
    with the ”verb-icon” attribute.

    |[
    <section>
      <attribute name="display-hint">horizontal-buttons</attribute>
      <item>
        <attribute name="label">Cut</attribute>
        <attribute name="action">app.cut</attribute>
        <attribute name="verb-icon">edit-cut-symbolic</attribute>
      </item>
      <item>
        <attribute name="label">Copy</attribute>
        <attribute name="action">app.copy</attribute>
        <attribute name="verb-icon">edit-copy-symbolic</attribute>
      </item>
      <item>
        <attribute name="label">Paste</attribute>
        <attribute name="action">app.paste</attribute>
        <attribute name="verb-icon">edit-paste-symbolic</attribute>
      </item>
    </section>
    ]|

    # CSS nodes

    GtkPopover has a single css node called popover. It always gets the
    .background style class and it gets the .menu style class if it is
    menu-like (e.g. #GtkPopoverMenu or created using gtk_popover_new_from_model().

    Particular uses of GtkPopover, such as touch selection popups
    or magnifiers in #GtkEntry or #GtkTextView get style classes
    like .touch-selection or .magnifier to differentiate from
    plain popovers.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, relative_to: _T.Optional[Widget]) -> Widget:
        """
        Creates a new popover to point to @relative_to
        """
        ...


    @classmethod
    def new_from_model(cls, relative_to: _T.Optional[Widget], model: Gio.MenuModel) -> Widget:
        """
        Creates a #GtkPopover and populates it according to
        @model. The popover is pointed to the @relative_to widget.

        The created buttons are connected to actions found in the
        #GtkApplicationWindow to which the popover belongs - typically
        by means of being attached to a widget that is contained within
        the #GtkApplicationWindows widget hierarchy.

        Actions can also be added using gtk_widget_insert_action_group()
        on the menus attach widget or on any of its parent widgets.
        """
        ...

    def bind_model(self, model: _T.Optional[Gio.MenuModel], action_namespace: _T.Optional[str]) -> object:
        """
        Establishes a binding between a #GtkPopover and a #GMenuModel.

        The contents of @popover are removed and then refilled with menu items
        according to @model.  When @model changes, @popover is updated.
        Calling this function twice on @popover with different @model will
        cause the first binding to be replaced with a binding to the new
        model. If @model is %NULL then any previous binding is undone and
        all children are removed.

        If @action_namespace is non-%NULL then the effect is as if all
        actions mentioned in the @model have their names prefixed with the
        namespace, plus a dot.  For example, if the action “quit” is
        mentioned and @action_namespace is “app” then the effective action
        name is “app.quit”.

        This function uses #GtkActionable to define the action name and
        target values on the created menu items.  If you want to use an
        action group other than “app” and “win”, or if you want to use a
        #GtkMenuShell outside of a #GtkApplicationWindow, then you will need
        to attach your own action group to the widget hierarchy using
        gtk_widget_insert_action_group().  As an example, if you created a
        group with a “quit” action and inserted it with the name “mygroup”
        then you would use the action name “mygroup.quit” in your
        #GMenuModel.
        """
        ...

    def get_constrain_to(self) -> PopoverConstraint:
        """
        Returns the constraint for placing this popover.
        See gtk_popover_set_constrain_to().
        """
        ...

    def get_default_widget(self) -> Widget:
        """
        Gets the widget that should be set as the default while
        the popover is shown.
        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the popover is modal, see gtk_popover_set_modal to
        see the implications of this.
        """
        ...

    def get_pointing_to(self, rect: Gdk.Rectangle) -> bool:
        """
        If a rectangle to point to has been set, this function will
        return %TRUE and fill in @rect with such rectangle, otherwise
        it will return %FALSE and fill in @rect with the attached
        widget coordinates.
        """
        ...

    def get_position(self) -> PositionType:
        """
        Returns the preferred position of @popover.
        """
        ...

    def get_relative_to(self) -> Widget:
        """
        Returns the widget @popover is currently attached to
        """
        ...

    def get_transitions_enabled(self) -> bool:
        """
        Returns whether show/hide transitions are enabled on this popover.
        """
        ...

    def popdown(self) -> object:
        """
        Pops @popover down.This is different than a gtk_widget_hide() call
        in that it shows the popover with a transition. If you want to hide
        the popover without a transition, use gtk_widget_hide().
        """
        ...

    def popup(self) -> object:
        """
        Pops @popover up. This is different than a gtk_widget_show() call
        in that it shows the popover with a transition. If you want to show
        the popover without a transition, use gtk_widget_show().
        """
        ...

    def set_constrain_to(self, constraint: PopoverConstraint) -> object:
        """
        Sets a constraint for positioning this popover.

        Note that not all platforms support placing popovers freely,
        and may already impose constraints.
        """
        ...

    def set_default_widget(self, widget: _T.Optional[Widget]) -> object:
        """
        Sets the widget that should be set as default widget while
        the popover is shown (see gtk_window_set_default()). #GtkPopover
        remembers the previous default widget and reestablishes it
        when the popover is dismissed.
        """
        ...

    def set_modal(self, modal: bool) -> object:
        """
        Sets whether @popover is modal, a modal popover will grab all input
        within the toplevel and grab the keyboard focus on it when being
        displayed. Clicking outside the popover area or pressing Esc will
        dismiss the popover and ungrab input.
        """
        ...

    def set_pointing_to(self, rect: Gdk.Rectangle) -> object:
        """
        Sets the rectangle that @popover will point to, in the
        coordinate space of the widget @popover is attached to,
        see gtk_popover_set_relative_to().
        """
        ...

    def set_position(self, position: PositionType) -> object:
        """
        Sets the preferred position for @popover to appear. If the @popover
        is currently visible, it will be immediately updated.

        This preference will be respected where possible, although
        on lack of space (eg. if close to the window edges), the
        #GtkPopover may choose to appear on the opposite side
        """
        ...

    def set_relative_to(self, relative_to: _T.Optional[Widget]) -> object:
        """
        Sets a new widget to be attached to @popover. If @popover is
        visible, the position will be updated.

        Note: the ownership of popovers is always given to their @relative_to
        widget, so if @relative_to is set to %NULL on an attached @popover, it
        will be detached from its previous widget, and consequently destroyed
        unless extra references are kept.
        """
        ...

    def set_transitions_enabled(self, transitions_enabled: bool) -> object:
        """
        Sets whether show/hide transitions are enabled on this popover
        """
        ...


    ...

class PopoverAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class PopoverMenu(Popover, Atk.ImplementorIface, Buildable):
    """
    GtkPopoverMenu is a subclass of #GtkPopover that treats its
    children like menus and allows switching between them. It is
    meant to be used primarily together with #GtkModelButton, but
    any widget can be used, such as #GtkSpinButton or #GtkScale.
    In this respect, GtkPopoverMenu is more flexible than popovers
    that are created from a #GMenuModel with gtk_popover_new_from_model().

    To add a child as a submenu, set the #GtkPopoverMenu:submenu
    child property to the name of the submenu. To let the user open
    this submenu, add a #GtkModelButton whose #GtkModelButton:menu-name
    property is set to the name you've given to the submenu.

    By convention, the first child of a submenu should be a #GtkModelButton
    to switch back to the parent menu. Such a button should use the
    #GtkModelButton:inverted and #GtkModelButton:centered properties
    to achieve a title-like appearance and place the submenu indicator
    at the opposite side. To switch back to the main menu, use "main"
    as the menu name.

    # Example

    |[<!-- language="xml" -->
    <object class="GtkPopoverMenu">
      <child>
        <object class="GtkBox">
          <property name="visible">True</property>
          <property name="margin">10</property>
          <child>
            <object class="GtkModelButton">
              <property name="visible">True</property>
              <property name="action-name">win.frob</property>
              <property name="text" translatable="yes">Frob</property>
            </object>
          </child>
          <child>
            <object class="GtkModelButton">
              <property name="visible">True</property>
              <property name="menu-name">more</property>
              <property name="text" translatable="yes">More</property>
            </object>
          </child>
        </object>
      </child>
      <child>
        <object class="GtkBox">
          <property name="visible">True</property>
          <property name="margin">10</property>
          <child>
            <object class="GtkModelButton">
              <property name="visible">True</property>
              <property name="action-name">win.foo</property>
              <property name="text" translatable="yes">Foo</property>
            </object>
          </child>
          <child>
            <object class="GtkModelButton">
              <property name="visible">True</property>
              <property name="action-name">win.bar</property>
              <property name="text" translatable="yes">Bar</property>
            </object>
          </child>
        </object>
        <packing>
          <property name="submenu">more</property>
        </packing>
      </child>
    </object>
    ]|

    Just like normal popovers created using gtk_popover_new_from_model,
    #GtkPopoverMenu instances have a single css node called "popover"
    and get the .menu style class.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new popover menu.
        """
        ...

    def open_submenu(self, name: str) -> object:
        """
        Opens a submenu of the @popover. The @name
        must be one of the names given to the submenus
        of @popover with #GtkPopoverMenu:submenu, or
        "main" to switch back to the main menu.

        #GtkModelButton will open submenus automatically
        when the #GtkModelButton:menu-name property is set,
        so this function is only needed when you are using
        other kinds of widgets to initiate menu changes.
        """
        ...


    ...

class PrintContext(GObject.Object):
    """
    A GtkPrintContext encapsulates context information that is required when
    drawing pages for printing, such as the cairo context and important
    parameters like page size and resolution. It also lets you easily
    create #PangoLayout and #PangoContext objects that match the font metrics
    of the cairo surface.

    GtkPrintContext objects gets passed to the #GtkPrintOperation::begin-print,
    #GtkPrintOperation::end-print, #GtkPrintOperation::request-page-setup and
    #GtkPrintOperation::draw-page signals on the #GtkPrintOperation.

    ## Using GtkPrintContext in a #GtkPrintOperation::draw-page callback

    |[<!-- language="C" -->
    static void
    draw_page (GtkPrintOperation *operation,
    	   GtkPrintContext   *context,
    	   int                page_nr)
    {
      cairo_t *cr;
      PangoLayout *layout;
      PangoFontDescription *desc;

      cr = gtk_print_context_get_cairo_context (context);

      // Draw a red rectangle, as wide as the paper (inside the margins)
      cairo_set_source_rgb (cr, 1.0, 0, 0);
      cairo_rectangle (cr, 0, 0, gtk_print_context_get_width (context), 50);

      cairo_fill (cr);

      // Draw some lines
      cairo_move_to (cr, 20, 10);
      cairo_line_to (cr, 40, 20);
      cairo_arc (cr, 60, 60, 20, 0, M_PI);
      cairo_line_to (cr, 80, 20);

      cairo_set_source_rgb (cr, 0, 0, 0);
      cairo_set_line_width (cr, 5);
      cairo_set_line_cap (cr, CAIRO_LINE_CAP_ROUND);
      cairo_set_line_join (cr, CAIRO_LINE_JOIN_ROUND);

      cairo_stroke (cr);

      // Draw some text
      layout = gtk_print_context_create_pango_layout (context);
      pango_layout_set_text (layout, "Hello World! Printing is easy", -1);
      desc = pango_font_description_from_string ("sans 28");
      pango_layout_set_font_description (layout, desc);
      pango_font_description_free (desc);

      cairo_move_to (cr, 30, 20);
      pango_cairo_layout_path (cr, layout);

      // Font Outline
      cairo_set_source_rgb (cr, 0.93, 1.0, 0.47);
      cairo_set_line_width (cr, 0.5);
      cairo_stroke_preserve (cr);

      // Font Fill
      cairo_set_source_rgb (cr, 0, 0.0, 1.0);
      cairo_fill (cr);

      g_object_unref (layout);
    }
    ]|

    Printing support was added in GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def create_pango_context(self) -> Pango.Context:
        """
        Creates a new #PangoContext that can be used with the
        #GtkPrintContext.
        """
        ...

    def create_pango_layout(self) -> Pango.Layout:
        """
        Creates a new #PangoLayout that is suitable for use
        with the #GtkPrintContext.
        """
        ...

    def get_cairo_context(self) -> cairo.Context:
        """
        Obtains the cairo context that is associated with the
        #GtkPrintContext.
        """
        ...

    def get_dpi_x(self) -> float:
        """
        Obtains the horizontal resolution of the #GtkPrintContext,
        in dots per inch.
        """
        ...

    def get_dpi_y(self) -> float:
        """
        Obtains the vertical resolution of the #GtkPrintContext,
        in dots per inch.
        """
        ...

    def get_hard_margins(self, top: float, bottom: float, left: float, right: float) -> bool:
        """
        Obtains the hardware printer margins of the #GtkPrintContext, in units.
        """
        ...

    def get_height(self) -> float:
        """
        Obtains the height of the #GtkPrintContext, in pixels.
        """
        ...

    def get_page_setup(self) -> PageSetup:
        """
        Obtains the #GtkPageSetup that determines the page
        dimensions of the #GtkPrintContext.
        """
        ...

    def get_pango_fontmap(self) -> Pango.FontMap:
        """
        Returns a #PangoFontMap that is suitable for use
        with the #GtkPrintContext.
        """
        ...

    def get_width(self) -> float:
        """
        Obtains the width of the #GtkPrintContext, in pixels.
        """
        ...

    def set_cairo_context(self, cr: cairo.Context, dpi_x: float, dpi_y: float) -> object:
        """
        Sets a new cairo context on a print context.

        This function is intended to be used when implementing
        an internal print preview, it is not needed for printing,
        since GTK+ itself creates a suitable cairo context in that
        case.
        """
        ...


    ...

class PrintOperation(GObject.Object, PrintOperationPreview):
    """
    GtkPrintOperation is the high-level, portable printing API.
    It looks a bit different than other GTK+ dialogs such as the
    #GtkFileChooser, since some platforms don’t expose enough
    infrastructure to implement a good print dialog. On such
    platforms, GtkPrintOperation uses the native print dialog.
    On platforms which do not provide a native print dialog, GTK+
    uses its own, see #GtkPrintUnixDialog.

    The typical way to use the high-level printing API is to create
    a GtkPrintOperation object with gtk_print_operation_new() when
    the user selects to print. Then you set some properties on it,
    e.g. the page size, any #GtkPrintSettings from previous print
    operations, the number of pages, the current page, etc.

    Then you start the print operation by calling gtk_print_operation_run().
    It will then show a dialog, let the user select a printer and
    options. When the user finished the dialog various signals will
    be emitted on the #GtkPrintOperation, the main one being
    #GtkPrintOperation::draw-page, which you are supposed to catch
    and render the page on the provided #GtkPrintContext using Cairo.

    # The high-level printing API

    |[<!-- language="C" -->
    static GtkPrintSettings *settings = NULL;

    static void
    do_print (void)
    {
      GtkPrintOperation *print;
      GtkPrintOperationResult res;

      print = gtk_print_operation_new ();

      if (settings != NULL)
        gtk_print_operation_set_print_settings (print, settings);

      g_signal_connect (print, "begin_print", G_CALLBACK (begin_print), NULL);
      g_signal_connect (print, "draw_page", G_CALLBACK (draw_page), NULL);

      res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
                                     GTK_WINDOW (main_window), NULL);

      if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
        {
          if (settings != NULL)
            g_object_unref (settings);
          settings = g_object_ref (gtk_print_operation_get_print_settings (print));
        }

      g_object_unref (print);
    }
    ]|

    By default GtkPrintOperation uses an external application to do
    print preview. To implement a custom print preview, an application
    must connect to the preview signal. The functions
    gtk_print_operation_preview_render_page(),
    gtk_print_operation_preview_end_preview() and
    gtk_print_operation_preview_is_selected()
    are useful when implementing a print preview.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> PrintOperation:
        """
        Creates a new #GtkPrintOperation.
        """
        ...

    def cancel(self) -> object:
        """
        Cancels a running print operation. This function may
        be called from a #GtkPrintOperation::begin-print,
        #GtkPrintOperation::paginate or #GtkPrintOperation::draw-page
        signal handler to stop the currently running print
        operation.
        """
        ...

    def draw_page_finish(self) -> object:
        """
        Signalize that drawing of particular page is complete.

        It is called after completion of page drawing (e.g. drawing in another
        thread).
        If gtk_print_operation_set_defer_drawing() was called before, then this function
        has to be called by application. In another case it is called by the library
        itself.
        """
        ...

    def get_default_page_setup(self) -> PageSetup:
        """
        Returns the default page setup, see
        gtk_print_operation_set_default_page_setup().
        """
        ...

    def get_embed_page_setup(self) -> bool:
        """
        Gets the value of #GtkPrintOperation:embed-page-setup property.
        """
        ...

    def get_error(self) -> object:
        """
        Call this when the result of a print operation is
        %GTK_PRINT_OPERATION_RESULT_ERROR, either as returned by
        gtk_print_operation_run(), or in the #GtkPrintOperation::done signal
        handler. The returned #GError will contain more details on what went wrong.
        """
        ...

    def get_has_selection(self) -> bool:
        """
        Gets the value of #GtkPrintOperation:has-selection property.
        """
        ...

    def get_n_pages_to_print(self) -> int:
        """
        Returns the number of pages that will be printed.

        Note that this value is set during print preparation phase
        (%GTK_PRINT_STATUS_PREPARING), so this function should never be
        called before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
        You can connect to the #GtkPrintOperation::status-changed signal
        and call gtk_print_operation_get_n_pages_to_print() when
        print status is %GTK_PRINT_STATUS_GENERATING_DATA.
        This is typically used to track the progress of print operation.
        """
        ...

    def get_print_settings(self) -> PrintSettings:
        """
        Returns the current print settings.

        Note that the return value is %NULL until either
        gtk_print_operation_set_print_settings() or
        gtk_print_operation_run() have been called.
        """
        ...

    def get_status(self) -> PrintStatus:
        """
        Returns the status of the print operation.
        Also see gtk_print_operation_get_status_string().
        """
        ...

    def get_status_string(self) -> str:
        """
        Returns a string representation of the status of the
        print operation. The string is translated and suitable
        for displaying the print status e.g. in a #GtkStatusbar.

        Use gtk_print_operation_get_status() to obtain a status
        value that is suitable for programmatic use.
        """
        ...

    def get_support_selection(self) -> bool:
        """
        Gets the value of #GtkPrintOperation:support-selection property.
        """
        ...

    def is_finished(self) -> bool:
        """
        A convenience function to find out if the print operation
        is finished, either successfully (%GTK_PRINT_STATUS_FINISHED)
        or unsuccessfully (%GTK_PRINT_STATUS_FINISHED_ABORTED).

        Note: when you enable print status tracking the print operation
        can be in a non-finished state even after done has been called, as
        the operation status then tracks the print job status on the printer.
        """
        ...

    def run(self, action: PrintOperationAction, parent: _T.Optional[Window]) -> PrintOperationResult:
        """
        Runs the print operation, by first letting the user modify
        print settings in the print dialog, and then print the document.

        Normally that this function does not return until the rendering of all
        pages is complete. You can connect to the
        #GtkPrintOperation::status-changed signal on @op to obtain some
        information about the progress of the print operation.
        Furthermore, it may use a recursive mainloop to show the print dialog.

        If you call gtk_print_operation_set_allow_async() or set the
        #GtkPrintOperation:allow-async property the operation will run
        asynchronously if this is supported on the platform. The
        #GtkPrintOperation::done signal will be emitted with the result of the
        operation when the it is done (i.e. when the dialog is canceled, or when
        the print succeeds or fails).
        |[<!-- language="C" -->
        if (settings != NULL)
          gtk_print_operation_set_print_settings (print, settings);
          
        if (page_setup != NULL)
          gtk_print_operation_set_default_page_setup (print, page_setup);
          
        g_signal_connect (print, "begin-print",
                          G_CALLBACK (begin_print), &data);
        g_signal_connect (print, "draw-page",
                          G_CALLBACK (draw_page), &data);
         
        res = gtk_print_operation_run (print,
                                       GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
                                       parent,
                                       &error);
         
        if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
         {
           error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
          			                     GTK_DIALOG_DESTROY_WITH_PARENT,
        					     GTK_MESSAGE_ERROR,
        					     GTK_BUTTONS_CLOSE,
        					     "Error printing file:\n%s",
        					     error->message);
           g_signal_connect (error_dialog, "response",
                             G_CALLBACK (gtk_widget_destroy), NULL);
           gtk_widget_show (error_dialog);
           g_error_free (error);
         }
        else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
         {
           if (settings != NULL)
        g_object_unref (settings);
           settings = g_object_ref (gtk_print_operation_get_print_settings (print));
         }
        ]|

        Note that gtk_print_operation_run() can only be called once on a
        given #GtkPrintOperation.
        """
        ...

    def set_allow_async(self, allow_async: bool) -> object:
        """
        Sets whether the gtk_print_operation_run() may return
        before the print operation is completed. Note that
        some platforms may not allow asynchronous operation.
        """
        ...

    def set_current_page(self, current_page: int) -> object:
        """
        Sets the current page.

        If this is called before gtk_print_operation_run(),
        the user will be able to select to print only the current page.

        Note that this only makes sense for pre-paginated documents.
        """
        ...

    def set_custom_tab_label(self, label: _T.Optional[str]) -> object:
        """
        Sets the label for the tab holding custom widgets.
        """
        ...

    def set_default_page_setup(self, default_page_setup: _T.Optional[PageSetup]) -> object:
        """
        Makes @default_page_setup the default page setup for @op.

        This page setup will be used by gtk_print_operation_run(),
        but it can be overridden on a per-page basis by connecting
        to the #GtkPrintOperation::request-page-setup signal.
        """
        ...

    def set_defer_drawing(self) -> object:
        """
        Sets up the #GtkPrintOperation to wait for calling of
        gtk_print_operation_draw_page_finish() from application. It can
        be used for drawing page in another thread.

        This function must be called in the callback of “draw-page” signal.
        """
        ...

    def set_embed_page_setup(self, embed: bool) -> object:
        """
        Embed page size combo box and orientation combo box into page setup page.
        Selected page setup is stored as default page setup in #GtkPrintOperation.
        """
        ...

    def set_export_filename(self, filename: str) -> object:
        """
        Sets up the #GtkPrintOperation to generate a file instead
        of showing the print dialog. The indended use of this function
        is for implementing “Export to PDF” actions. Currently, PDF
        is the only supported format.

        “Print to PDF” support is independent of this and is done
        by letting the user pick the “Print to PDF” item from the list
        of printers in the print dialog.
        """
        ...

    def set_has_selection(self, has_selection: bool) -> object:
        """
        Sets whether there is a selection to print.

        Application has to set number of pages to which the selection
        will draw by gtk_print_operation_set_n_pages() in a callback of
        #GtkPrintOperation::begin-print.
        """
        ...

    def set_job_name(self, job_name: str) -> object:
        """
        Sets the name of the print job. The name is used to identify
        the job (e.g. in monitoring applications like eggcups).

        If you don’t set a job name, GTK+ picks a default one by
        numbering successive print jobs.
        """
        ...

    def set_n_pages(self, n_pages: int) -> object:
        """
        Sets the number of pages in the document.

        This must be set to a positive number
        before the rendering starts. It may be set in a
        #GtkPrintOperation::begin-print signal hander.

        Note that the page numbers passed to the
        #GtkPrintOperation::request-page-setup
        and #GtkPrintOperation::draw-page signals are 0-based, i.e. if
        the user chooses to print all pages, the last ::draw-page signal
        will be for page @n_pages - 1.
        """
        ...

    def set_print_settings(self, print_settings: _T.Optional[PrintSettings]) -> object:
        """
        Sets the print settings for @op. This is typically used to
        re-establish print settings from a previous print operation,
        see gtk_print_operation_run().
        """
        ...

    def set_show_progress(self, show_progress: bool) -> object:
        """
        If @show_progress is %TRUE, the print operation will show a
        progress dialog during the print operation.
        """
        ...

    def set_support_selection(self, support_selection: bool) -> object:
        """
        Sets whether selection is supported by #GtkPrintOperation.
        """
        ...

    def set_track_print_status(self, track_status: bool) -> object:
        """
        If track_status is %TRUE, the print operation will try to continue report
        on the status of the print job in the printer queues and printer. This
        can allow your application to show things like “out of paper” issues,
        and when the print job actually reaches the printer.

        This function is often implemented using some form of polling, so it should
        not be enabled unless needed.
        """
        ...

    def set_unit(self, unit: Unit) -> object:
        """
        Sets up the transformation for the cairo context obtained from
        #GtkPrintContext in such a way that distances are measured in
        units of @unit.
        """
        ...

    def set_use_full_page(self, full_page: bool) -> object:
        """
        If @full_page is %TRUE, the transformation for the cairo context
        obtained from #GtkPrintContext puts the origin at the top left
        corner of the page (which may not be the top left corner of the
        sheet, depending on page orientation and the number of pages per
        sheet). Otherwise, the origin is at the top left corner of the
        imageable area (i.e. inside the margins).
        """
        ...


    ...

class PrintSettings(GObject.Object):
    """
    A GtkPrintSettings object represents the settings of a print dialog in
    a system-independent way. The main use for this object is that once
    you’ve printed you can get a settings object that represents the settings
    the user chose, and the next time you print you can pass that object in so
    that the user doesn’t have to re-set all his settings.

    Its also possible to enumerate the settings so that you can easily save
    the settings for the next time your app runs, or even store them in a
    document. The predefined keys try to use shared values as much as possible
    so that moving such a document between systems still works.

    Printing support was added in GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> PrintSettings:
        """
        Creates a new #GtkPrintSettings object.
        """
        ...


    @classmethod
    def new_from_file(cls, file_name: str) -> PrintSettings:
        """
        Reads the print settings from @file_name. Returns a new #GtkPrintSettings
        object with the restored settings, or %NULL if an error occurred. If the
        file could not be loaded then error is set to either a #GFileError or
        #GKeyFileError.  See gtk_print_settings_to_file().
        """
        ...


    @classmethod
    def new_from_gvariant(cls, variant: GLib.Variant) -> PrintSettings:
        """
        Deserialize print settings from an a{sv} variant in
        the format produced by gtk_print_settings_to_gvariant().
        """
        ...


    @classmethod
    def new_from_key_file(cls, key_file: GLib.KeyFile, group_name: _T.Optional[str]) -> PrintSettings:
        """
        Reads the print settings from the group @group_name in @key_file.  Returns a
        new #GtkPrintSettings object with the restored settings, or %NULL if an
        error occurred. If the file could not be loaded then error is set to either
        a #GFileError or #GKeyFileError.
        """
        ...

    def copy(self) -> PrintSettings:
        """
        Copies a #GtkPrintSettings object.
        """
        ...

    def foreach(self, func: PrintSettingsFunc, user_data: _T.Optional[object]) -> object:
        """
        Calls @func for each key-value pair of @settings.
        """
        ...

    def get(self, key: str) -> str:
        """
        Looks up the string value associated with @key.
        """
        ...

    def get_bool(self, key: str) -> bool:
        """
        Returns the boolean represented by the value
        that is associated with @key.

        The string “true” represents %TRUE, any other
        string %FALSE.
        """
        ...

    def get_collate(self) -> bool:
        """
        Gets the value of %GTK_PRINT_SETTINGS_COLLATE.
        """
        ...

    def get_default_source(self) -> str:
        """
        Gets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
        """
        ...

    def get_dither(self) -> str:
        """
        Gets the value of %GTK_PRINT_SETTINGS_DITHER.
        """
        ...

    def get_double(self, key: str) -> float:
        """
        Returns the double value associated with @key, or 0.
        """
        ...

    def get_double_with_default(self, key: str, def: float) -> float:
        """
        Returns the floating point number represented by
        the value that is associated with @key, or @default_val
        if the value does not represent a floating point number.

        Floating point numbers are parsed with g_ascii_strtod().
        """
        ...

    def get_duplex(self) -> PrintDuplex:
        """
        Gets the value of %GTK_PRINT_SETTINGS_DUPLEX.
        """
        ...

    def get_finishings(self) -> str:
        """
        Gets the value of %GTK_PRINT_SETTINGS_FINISHINGS.
        """
        ...

    def get_int(self, key: str) -> int:
        """
        Returns the integer value of @key, or 0.
        """
        ...

    def get_int_with_default(self, key: str, def: int) -> int:
        """
        Returns the value of @key, interpreted as
        an integer, or the default value.
        """
        ...

    def get_length(self, key: str, unit: Unit) -> float:
        """
        Returns the value associated with @key, interpreted
        as a length. The returned value is converted to @units.
        """
        ...

    def get_media_type(self) -> str:
        """
        Gets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.

        The set of media types is defined in PWG 5101.1-2002 PWG.
        """
        ...

    def get_n_copies(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_N_COPIES.
        """
        ...

    def get_number_up(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.
        """
        ...

    def get_number_up_layout(self) -> NumberUpLayout:
        """
        Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
        """
        ...

    def get_orientation(self) -> PageOrientation:
        """
        Get the value of %GTK_PRINT_SETTINGS_ORIENTATION,
        converted to a #GtkPageOrientation.
        """
        ...

    def get_output_bin(self) -> str:
        """
        Gets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.
        """
        ...

    def get_page_ranges(self, num_ranges: int) -> object:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
        """
        ...

    def get_page_set(self) -> PageSet:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAGE_SET.
        """
        ...

    def get_paper_height(self, unit: Unit) -> float:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT,
        converted to @unit.
        """
        ...

    def get_paper_size(self) -> PaperSize:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
        converted to a #GtkPaperSize.
        """
        ...

    def get_paper_width(self, unit: Unit) -> float:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH,
        converted to @unit.
        """
        ...

    def get_print_pages(self) -> PrintPages:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.
        """
        ...

    def get_printer(self) -> str:
        """
        Convenience function to obtain the value of
        %GTK_PRINT_SETTINGS_PRINTER.
        """
        ...

    def get_printer_lpi(self) -> float:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.
        """
        ...

    def get_quality(self) -> PrintQuality:
        """
        Gets the value of %GTK_PRINT_SETTINGS_QUALITY.
        """
        ...

    def get_resolution(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION.
        """
        ...

    def get_resolution_x(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_X.
        """
        ...

    def get_resolution_y(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_Y.
        """
        ...

    def get_reverse(self) -> bool:
        """
        Gets the value of %GTK_PRINT_SETTINGS_REVERSE.
        """
        ...

    def get_scale(self) -> float:
        """
        Gets the value of %GTK_PRINT_SETTINGS_SCALE.
        """
        ...

    def get_use_color(self) -> bool:
        """
        Gets the value of %GTK_PRINT_SETTINGS_USE_COLOR.
        """
        ...

    def has_key(self, key: str) -> bool:
        """
        Returns %TRUE, if a value is associated with @key.
        """
        ...

    def load_file(self, file_name: str) -> bool:
        """
        Reads the print settings from @file_name. If the file could not be loaded
        then error is set to either a #GFileError or #GKeyFileError.
        See gtk_print_settings_to_file().
        """
        ...

    def load_key_file(self, key_file: GLib.KeyFile, group_name: _T.Optional[str]) -> bool:
        """
        Reads the print settings from the group @group_name in @key_file. If the
        file could not be loaded then error is set to either a #GFileError or
        #GKeyFileError.
        """
        ...

    def set(self, key: str, value: _T.Optional[str]) -> object:
        """
        Associates @value with @key.
        """
        ...

    def set_bool(self, key: str, value: bool) -> object:
        """
        Sets @key to a boolean value.
        """
        ...

    def set_collate(self, collate: bool) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_COLLATE.
        """
        ...

    def set_default_source(self, default_source: str) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
        """
        ...

    def set_dither(self, dither: str) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_DITHER.
        """
        ...

    def set_double(self, key: str, value: float) -> object:
        """
        Sets @key to a double value.
        """
        ...

    def set_duplex(self, duplex: PrintDuplex) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_DUPLEX.
        """
        ...

    def set_finishings(self, finishings: str) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_FINISHINGS.
        """
        ...

    def set_int(self, key: str, value: int) -> object:
        """
        Sets @key to an integer value.
        """
        ...

    def set_length(self, key: str, value: float, unit: Unit) -> object:
        """
        Associates a length in units of @unit with @key.
        """
        ...

    def set_media_type(self, media_type: str) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.

        The set of media types is defined in PWG 5101.1-2002 PWG.
        """
        ...

    def set_n_copies(self, num_copies: int) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_N_COPIES.
        """
        ...

    def set_number_up(self, number_up: int) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.
        """
        ...

    def set_number_up_layout(self, number_up_layout: NumberUpLayout) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
        """
        ...

    def set_orientation(self, orientation: PageOrientation) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_ORIENTATION.
        """
        ...

    def set_output_bin(self, output_bin: str) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.
        """
        ...

    def set_page_ranges(self, page_ranges: object, num_ranges: int) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
        """
        ...

    def set_page_set(self, page_set: PageSet) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAGE_SET.
        """
        ...

    def set_paper_height(self, height: float, unit: Unit) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT.
        """
        ...

    def set_paper_size(self, paper_size: PaperSize) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
        %GTK_PRINT_SETTINGS_PAPER_WIDTH and
        %GTK_PRINT_SETTINGS_PAPER_HEIGHT.
        """
        ...

    def set_paper_width(self, width: float, unit: Unit) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH.
        """
        ...

    def set_print_pages(self, pages: PrintPages) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.
        """
        ...

    def set_printer(self, printer: str) -> object:
        """
        Convenience function to set %GTK_PRINT_SETTINGS_PRINTER
        to @printer.
        """
        ...

    def set_printer_lpi(self, lpi: float) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.
        """
        ...

    def set_quality(self, quality: PrintQuality) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_QUALITY.
        """
        ...

    def set_resolution(self, resolution: int) -> object:
        """
        Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
        %GTK_PRINT_SETTINGS_RESOLUTION_X and
        %GTK_PRINT_SETTINGS_RESOLUTION_Y.
        """
        ...

    def set_resolution_xy(self, resolution_x: int, resolution_y: int) -> object:
        """
        Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
        %GTK_PRINT_SETTINGS_RESOLUTION_X and
        %GTK_PRINT_SETTINGS_RESOLUTION_Y.
        """
        ...

    def set_reverse(self, reverse: bool) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_REVERSE.
        """
        ...

    def set_scale(self, scale: float) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_SCALE.
        """
        ...

    def set_use_color(self, use_color: bool) -> object:
        """
        Sets the value of %GTK_PRINT_SETTINGS_USE_COLOR.
        """
        ...

    def to_file(self, file_name: str) -> bool:
        """
        This function saves the print settings from @settings to @file_name. If the
        file could not be loaded then error is set to either a #GFileError or
        #GKeyFileError.
        """
        ...

    def to_gvariant(self) -> GLib.Variant:
        """
        Serialize print settings to an a{sv} variant.
        """
        ...

    def to_key_file(self, key_file: GLib.KeyFile, group_name: _T.Optional[str]) -> object:
        """
        This function adds the print settings from @settings to @key_file.
        """
        ...

    def unset(self, key: str) -> object:
        """
        Removes any value associated with @key.
        This has the same effect as setting the value to %NULL.
        """
        ...


    ...

class ProgressBar(Widget, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkProgressBar is typically used to display the progress of a long
    running operation. It provides a visual clue that processing is underway.
    The GtkProgressBar can be used in two different modes: percentage mode
    and activity mode.

    When an application can determine how much work needs to take place
    (e.g. read a fixed number of bytes from a file) and can monitor its
    progress, it can use the GtkProgressBar in percentage mode and the
    user sees a growing bar indicating the percentage of the work that
    has been completed. In this mode, the application is required to call
    gtk_progress_bar_set_fraction() periodically to update the progress bar.

    When an application has no accurate way of knowing the amount of work
    to do, it can use the #GtkProgressBar in activity mode, which shows
    activity by a block moving back and forth within the progress area. In
    this mode, the application is required to call gtk_progress_bar_pulse()
    periodically to update the progress bar.

    There is quite a bit of flexibility provided to control the appearance
    of the #GtkProgressBar. Functions are provided to control the orientation
    of the bar, optional text can be displayed along with the bar, and the
    step size used in activity mode can be set.

    # CSS nodes

    |[<!-- language="plain" -->
    progressbar[.osd]
    ├── [text]
    ╰── trough[.empty][.full]
        ╰── progress[.pulse]
    ]|

    GtkProgressBar has a main CSS node with name progressbar and subnodes with
    names text and trough, of which the latter has a subnode named progress. The
    text subnode is only present if text is shown. The progress subnode has the
    style class .pulse when in activity mode. It gets the style classes .left,
    .right, .top or .bottom added when the progress 'touches' the corresponding
    end of the GtkProgressBar. The .osd class on the progressbar node is for use
    in overlays like the one Epiphany has for page loading progress.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkProgressBar.
        """
        ...

    def get_ellipsize(self) -> Pango.EllipsizeMode:
        """
        Returns the ellipsizing position of the progress bar.
        See gtk_progress_bar_set_ellipsize().
        """
        ...

    def get_fraction(self) -> float:
        """
        Returns the current fraction of the task that’s been completed.
        """
        ...

    def get_inverted(self) -> bool:
        """
        Gets the value set by gtk_progress_bar_set_inverted().
        """
        ...

    def get_pulse_step(self) -> float:
        """
        Retrieves the pulse step set with gtk_progress_bar_set_pulse_step().
        """
        ...

    def get_show_text(self) -> bool:
        """
        Gets the value of the #GtkProgressBar:show-text property.
        See gtk_progress_bar_set_show_text().
        """
        ...

    def get_text(self) -> str:
        """
        Retrieves the text that is displayed with the progress bar,
        if any, otherwise %NULL. The return value is a reference
        to the text, not a copy of it, so will become invalid
        if you change the text in the progress bar.
        """
        ...

    def pulse(self) -> object:
        """
        Indicates that some progress has been made, but you don’t know how much.
        Causes the progress bar to enter “activity mode,” where a block
        bounces back and forth. Each call to gtk_progress_bar_pulse()
        causes the block to move by a little bit (the amount of movement
        per pulse is determined by gtk_progress_bar_set_pulse_step()).
        """
        ...

    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> object:
        """
        Sets the mode used to ellipsize (add an ellipsis: "...") the
        text if there is not enough space to render the entire string.
        """
        ...

    def set_fraction(self, fraction: float) -> object:
        """
        Causes the progress bar to “fill in” the given fraction
        of the bar. The fraction should be between 0.0 and 1.0,
        inclusive.
        """
        ...

    def set_inverted(self, inverted: bool) -> object:
        """
        Progress bars normally grow from top to bottom or left to right.
        Inverted progress bars grow in the opposite direction.
        """
        ...

    def set_pulse_step(self, fraction: float) -> object:
        """
        Sets the fraction of total progress bar length to move the
        bouncing block for each call to gtk_progress_bar_pulse().
        """
        ...

    def set_show_text(self, show_text: bool) -> object:
        """
        Sets whether the progress bar will show text next to the bar.
        The shown text is either the value of the #GtkProgressBar:text
        property or, if that is %NULL, the #GtkProgressBar:fraction value,
        as a percentage.

        To make a progress bar that is styled and sized suitably for containing
        text (even if the actual text is blank), set #GtkProgressBar:show-text to
        %TRUE and #GtkProgressBar:text to the empty string (not %NULL).
        """
        ...

    def set_text(self, text: _T.Optional[str]) -> object:
        """
        Causes the given @text to appear next to the progress bar.

        If @text is %NULL and #GtkProgressBar:show-text is %TRUE, the current
        value of #GtkProgressBar:fraction will be displayed as a percentage.

        If @text is non-%NULL and #GtkProgressBar:show-text is %TRUE, the text
        will be displayed. In this case, it will not display the progress
        percentage. If @text is the empty string, the progress bar will still
        be styled and sized suitably for containing text, as long as
        #GtkProgressBar:show-text is %TRUE.
        """
        ...


    ...

class ProgressBarAccessible(WidgetAccessible, Atk.Component, Atk.Value):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class RadioAction(ToggleAction, Buildable):
    """
    A #GtkRadioAction is similar to #GtkRadioMenuItem. A number of radio
    actions can be linked together so that only one may be active at any
    one time.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: str, label: _T.Optional[str], tooltip: _T.Optional[str], stock_id: _T.Optional[str], value: int) -> RadioAction:
        """
        Creates a new #GtkRadioAction object. To add the action to
        a #GtkActionGroup and set the accelerator for the action,
        call gtk_action_group_add_action_with_accel().
        """
        ...

    def get_current_value(self) -> int:
        """
        Obtains the value property of the currently active member of
        the group to which @action belongs.
        """
        ...

    def get_group(self) -> GLib.SList:
        """
        Returns the list representing the radio group for this object.
        Note that the returned list is only valid until the next change
        to the group.

        A common way to set up a group of radio group is the following:
        |[<!-- language="C" -->
          GSList *group = NULL;
          GtkRadioAction *action;
         
          while ( ...more actions to add... /)
            {
               action = gtk_radio_action_new (...);
               
               gtk_radio_action_set_group (action, group);
               group = gtk_radio_action_get_group (action);
            }
        ]|
        """
        ...

    def join_group(self, group_source: _T.Optional[RadioAction]) -> object:
        """
        Joins a radio action object to the group of another radio action object.

        Use this in language bindings instead of the gtk_radio_action_get_group()
        and gtk_radio_action_set_group() methods

        A common way to set up a group of radio actions is the following:
        |[<!-- language="C" -->
          GtkRadioAction *action;
          GtkRadioAction *last_action;
         
          while ( ...more actions to add... /)
            {
               action = gtk_radio_action_new (...);
               
               gtk_radio_action_join_group (action, last_action);
               last_action = action;
            }
        ]|
        """
        ...

    def set_current_value(self, current_value: int) -> object:
        """
        Sets the currently active group member to the member with value
        property @current_value.
        """
        ...

    def set_group(self, group: _T.Optional[GLib.SList]) -> object:
        """
        Sets the radio group for the radio action object.
        """
        ...


    ...

class RadioButton(CheckButton, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A single radio button performs the same basic function as a #GtkCheckButton,
    as its position in the object hierarchy reflects. It is only when multiple
    radio buttons are grouped together that they become a different user
    interface component in their own right.

    Every radio button is a member of some group of radio buttons. When one is
    selected, all other radio buttons in the same group are deselected. A
    #GtkRadioButton is one way of giving the user a choice from many options.

    Radio button widgets are created with gtk_radio_button_new(), passing %NULL
    as the argument if this is the first radio button in a group. In subsequent
    calls, the group you wish to add this button to should be passed as an
    argument. Optionally, gtk_radio_button_new_with_label() can be used if you
    want a text label on the radio button.

    Alternatively, when adding widgets to an existing group of radio buttons,
    use gtk_radio_button_new_from_widget() with a #GtkRadioButton that already
    has a group assigned to it. The convenience function
    gtk_radio_button_new_with_label_from_widget() is also provided.

    To retrieve the group a #GtkRadioButton is assigned to, use
    gtk_radio_button_get_group().

    To remove a #GtkRadioButton from one group and make it part of a new one,
    use gtk_radio_button_set_group().

    The group list does not need to be freed, as each #GtkRadioButton will remove
    itself and its list item when it is destroyed.

    # CSS nodes

    |[<!-- language="plain" -->
    radiobutton
    ├── radio
    ╰── <child>
    ]|

    A GtkRadioButton with indicator (see gtk_toggle_button_set_mode()) has a
    main CSS node with name radiobutton and a subnode with name radio.

    |[<!-- language="plain" -->
    button.radio
    ├── radio
    ╰── <child>
    ]|

    A GtkRadioButton without indicator changes the name of its main node
    to button and adds a .radio style class to it. The subnode is invisible
    in this case.

    ## How to create a group of two radio buttons.

    |[<!-- language="C" -->
    void create_radio_buttons (void) {

       GtkWidget *window, *radio1, *radio2, *box, *entry;
       window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
       box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2);
       gtk_box_set_homogeneous (GTK_BOX (box), TRUE);

       // Create a radio button with a GtkEntry widget
       radio1 = gtk_radio_button_new (NULL);
       entry = gtk_entry_new ();
       gtk_container_add (GTK_CONTAINER (radio1), entry);


       // Create a radio button with a label
       radio2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio1),
                                                             "I’m the second radio button.");

       // Pack them into a box, then show all the widgets
       gtk_box_pack_start (GTK_BOX (box), radio1);
       gtk_box_pack_start (GTK_BOX (box), radio2);
       gtk_container_add (GTK_CONTAINER (window), box);
       gtk_widget_show_all (window);
       return;
    }
    ]|

    When an unselected button in the group is clicked the clicked button
    receives the #GtkToggleButton::toggled signal, as does the previously
    selected button.
    Inside the #GtkToggleButton::toggled handler, gtk_toggle_button_get_active()
    can be used to determine if the button has been selected or deselected.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, group: _T.Optional[GLib.SList]) -> Widget:
        """
        Creates a new #GtkRadioButton. To be of any practical value, a widget should
        then be packed into the radio button.
        """
        ...


    @classmethod
    def new_from_widget(cls, radio_group_member: _T.Optional[RadioButton]) -> Widget:
        """
        Creates a new #GtkRadioButton, adding it to the same group as
        @radio_group_member. As with gtk_radio_button_new(), a widget
        should be packed into the radio button.
        """
        ...


    @classmethod
    def new_with_label(cls, group: _T.Optional[GLib.SList], label: str) -> Widget:
        """
        Creates a new #GtkRadioButton with a text label.
        """
        ...


    @classmethod
    def new_with_label_from_widget(cls, radio_group_member: _T.Optional[RadioButton], label: str) -> Widget:
        """
        Creates a new #GtkRadioButton with a text label, adding it to
        the same group as @radio_group_member.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, group: _T.Optional[GLib.SList], label: str) -> Widget:
        """
        Creates a new #GtkRadioButton containing a label, adding it to the same
        group as @group. The label will be created using
        gtk_label_new_with_mnemonic(), so underscores in @label indicate the
        mnemonic for the button.
        """
        ...


    @classmethod
    def new_with_mnemonic_from_widget(cls, radio_group_member: _T.Optional[RadioButton], label: str) -> Widget:
        """
        Creates a new #GtkRadioButton containing a label. The label
        will be created using gtk_label_new_with_mnemonic(), so underscores
        in @label indicate the mnemonic for the button.
        """
        ...

    def get_group(self) -> GLib.SList:
        """
        Retrieves the group assigned to a radio button.
        """
        ...

    def join_group(self, group_source: _T.Optional[RadioButton]) -> object:
        """
        Joins a #GtkRadioButton object to the group of another #GtkRadioButton object

        Use this in language bindings instead of the gtk_radio_button_get_group()
        and gtk_radio_button_set_group() methods

        A common way to set up a group of radio buttons is the following:
        |[<!-- language="C" -->
          GtkRadioButton *radio_button;
          GtkRadioButton *last_button;

          while (some_condition)
            {
               radio_button = gtk_radio_button_new (NULL);

               gtk_radio_button_join_group (radio_button, last_button);
               last_button = radio_button;
            }
        ]|
        """
        ...

    def set_group(self, group: _T.Optional[GLib.SList]) -> object:
        """
        Sets a #GtkRadioButton’s group. It should be noted that this does not change
        the layout of your interface in any way, so if you are changing the group,
        it is likely you will need to re-arrange the user interface to reflect these
        changes.
        """
        ...


    ...

class RadioButtonAccessible(ToggleButtonAccessible, Atk.Action, Atk.Component, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class RadioMenuItem(CheckMenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A radio menu item is a check menu item that belongs to a group. At each
    instant exactly one of the radio menu items from a group is selected.

    The group list does not need to be freed, as each #GtkRadioMenuItem will
    remove itself and its list item when it is destroyed.

    The correct way to create a group of radio menu items is approximatively
    this:

    ## How to create a group of radio menu items.

    |[<!-- language="C" -->
    GSList *group = NULL;
    GtkWidget *item;
    gint i;

    for (i = 0; i < 5; i++)
    {
      item = gtk_radio_menu_item_new_with_label (group, "This is an example");
      group = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (item));
      if (i == 1)
        gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (item), TRUE);
    }
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    menuitem
    ├── radio.left
    ╰── <child>
    ]|

    GtkRadioMenuItem has a main CSS node with name menuitem, and a subnode
    with name radio, which gets the .left or .right style class.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, group: _T.Optional[GLib.SList]) -> Widget:
        """
        Creates a new #GtkRadioMenuItem.
        """
        ...


    @classmethod
    def new_from_widget(cls, group: _T.Optional[RadioMenuItem]) -> Widget:
        """
        Creates a new #GtkRadioMenuItem adding it to the same group as @group.
        """
        ...


    @classmethod
    def new_with_label(cls, group: _T.Optional[GLib.SList], label: str) -> Widget:
        """
        Creates a new #GtkRadioMenuItem whose child is a simple #GtkLabel.
        """
        ...


    @classmethod
    def new_with_label_from_widget(cls, group: _T.Optional[RadioMenuItem], label: _T.Optional[str]) -> Widget:
        """
        Creates a new GtkRadioMenuItem whose child is a simple GtkLabel.
        The new #GtkRadioMenuItem is added to the same group as @group.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, group: _T.Optional[GLib.SList], label: str) -> Widget:
        """
        Creates a new #GtkRadioMenuItem containing a label. The label
        will be created using gtk_label_new_with_mnemonic(), so underscores
        in @label indicate the mnemonic for the menu item.
        """
        ...


    @classmethod
    def new_with_mnemonic_from_widget(cls, group: _T.Optional[RadioMenuItem], label: _T.Optional[str]) -> Widget:
        """
        Creates a new GtkRadioMenuItem containing a label. The label will be
        created using gtk_label_new_with_mnemonic(), so underscores in label
        indicate the mnemonic for the menu item.

        The new #GtkRadioMenuItem is added to the same group as @group.
        """
        ...

    def get_group(self) -> GLib.SList:
        """
        Returns the group to which the radio menu item belongs, as a #GList of
        #GtkRadioMenuItem. The list belongs to GTK+ and should not be freed.
        """
        ...

    def join_group(self, group_source: _T.Optional[RadioMenuItem]) -> object:
        """
        Joins a #GtkRadioMenuItem object to the group of another #GtkRadioMenuItem
        object.

        This function should be used by language bindings to avoid the memory
        manangement of the opaque #GSList of gtk_radio_menu_item_get_group()
        and gtk_radio_menu_item_set_group().

        A common way to set up a group of #GtkRadioMenuItem instances is:

        |[
          GtkRadioMenuItem *last_item = NULL;

          while ( ...more items to add... )
            {
              GtkRadioMenuItem *radio_item;

              radio_item = gtk_radio_menu_item_new (...);

              gtk_radio_menu_item_join_group (radio_item, last_item);
              last_item = radio_item;
            }
        ]|
        """
        ...

    def set_group(self, group: _T.Optional[GLib.SList]) -> object:
        """
        Sets the group of a radio menu item, or changes it.
        """
        ...


    ...

class RadioMenuItemAccessible(CheckMenuItemAccessible, Atk.Action, Atk.Component, Atk.Selection):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class RadioToolButton(ToggleToolButton, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A #GtkRadioToolButton is a #GtkToolItem that contains a radio button,
    that is, a button that is part of a group of toggle buttons where only
    one button can be active at a time.

    Use gtk_radio_tool_button_new() to create a new GtkRadioToolButton. Use
    gtk_radio_tool_button_new_from_widget() to create a new GtkRadioToolButton
    that is part of the same group as an existing GtkRadioToolButton.

    # CSS nodes

    GtkRadioToolButton has a single CSS node with name toolbutton.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, group: _T.Optional[GLib.SList]) -> ToolItem:
        """
        Creates a new #GtkRadioToolButton, adding it to @group.
        """
        ...


    @classmethod
    def new_from_stock(cls, group: _T.Optional[GLib.SList], stock_id: str) -> ToolItem:
        """
        Creates a new #GtkRadioToolButton, adding it to @group.
        The new #GtkRadioToolButton will contain an icon and label from the
        stock item indicated by @stock_id.
        """
        ...


    @classmethod
    def new_from_widget(cls, group: _T.Optional[RadioToolButton]) -> ToolItem:
        """
        Creates a new #GtkRadioToolButton adding it to the same group as @gruup
        """
        ...


    @classmethod
    def new_with_stock_from_widget(cls, group: _T.Optional[RadioToolButton], stock_id: str) -> ToolItem:
        """
        Creates a new #GtkRadioToolButton adding it to the same group as @group.
        The new #GtkRadioToolButton will contain an icon and label from the
        stock item indicated by @stock_id.
        """
        ...

    def get_group(self) -> GLib.SList:
        """
        Returns the radio button group @button belongs to.
        """
        ...

    def set_group(self, group: _T.Optional[GLib.SList]) -> object:
        """
        Adds @button to @group, removing it from the group it belonged to before.
        """
        ...


    ...

class Range(Widget, Atk.ImplementorIface, Buildable, Orientable):
    """
    #GtkRange is the common base class for widgets which visualize an
    adjustment, e.g #GtkScale or #GtkScrollbar.

    Apart from signals for monitoring the parameters of the adjustment,
    #GtkRange provides properties and methods for influencing the sensitivity
    of the “steppers”. It also provides properties and methods for setting a
    “fill level” on range widgets. See gtk_range_set_fill_level().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_adjustment(self) -> Adjustment:
        """
        Get the #GtkAdjustment which is the “model” object for #GtkRange.
        See gtk_range_set_adjustment() for details.
        The return value does not have a reference added, so should not
        be unreferenced.
        """
        ...

    def get_fill_level(self) -> float:
        """
        Gets the current position of the fill level indicator.
        """
        ...

    def get_flippable(self) -> bool:
        """
        Gets the value set by gtk_range_set_flippable().
        """
        ...

    def get_inverted(self) -> bool:
        """
        Gets the value set by gtk_range_set_inverted().
        """
        ...

    def get_lower_stepper_sensitivity(self) -> SensitivityType:
        """
        Gets the sensitivity policy for the stepper that points to the
        'lower' end of the GtkRange’s adjustment.
        """
        ...

    def get_min_slider_size(self) -> int:
        """
        This function is useful mainly for #GtkRange subclasses.

        See gtk_range_set_min_slider_size().
        """
        ...

    def get_range_rect(self, range_rect: Gdk.Rectangle) -> object:
        """
        This function returns the area that contains the range’s trough
        and its steppers, in widget->window coordinates.

        This function is useful mainly for #GtkRange subclasses.
        """
        ...

    def get_restrict_to_fill_level(self) -> bool:
        """
        Gets whether the range is restricted to the fill level.
        """
        ...

    def get_round_digits(self) -> int:
        """
        Gets the number of digits to round the value to when
        it changes. See #GtkRange::change-value.
        """
        ...

    def get_show_fill_level(self) -> bool:
        """
        Gets whether the range displays the fill level graphically.
        """
        ...

    def get_slider_range(self, slider_start: int, slider_end: int) -> object:
        """
        This function returns sliders range along the long dimension,
        in widget->window coordinates.

        This function is useful mainly for #GtkRange subclasses.
        """
        ...

    def get_slider_size_fixed(self) -> bool:
        """
        This function is useful mainly for #GtkRange subclasses.

        See gtk_range_set_slider_size_fixed().
        """
        ...

    def get_upper_stepper_sensitivity(self) -> SensitivityType:
        """
        Gets the sensitivity policy for the stepper that points to the
        'upper' end of the GtkRange’s adjustment.
        """
        ...

    def get_value(self) -> float:
        """
        Gets the current value of the range.
        """
        ...

    def set_adjustment(self, adjustment: Adjustment) -> object:
        """
        Sets the adjustment to be used as the “model” object for this range
        widget. The adjustment indicates the current range value, the
        minimum and maximum range values, the step/page increments used
        for keybindings and scrolling, and the page size. The page size
        is normally 0 for #GtkScale and nonzero for #GtkScrollbar, and
        indicates the size of the visible area of the widget being scrolled.
        The page size affects the size of the scrollbar slider.
        """
        ...

    def set_fill_level(self, fill_level: float) -> object:
        """
        Set the new position of the fill level indicator.

        The “fill level” is probably best described by its most prominent
        use case, which is an indicator for the amount of pre-buffering in
        a streaming media player. In that use case, the value of the range
        would indicate the current play position, and the fill level would
        be the position up to which the file/stream has been downloaded.

        This amount of prebuffering can be displayed on the range’s trough
        and is themeable separately from the trough. To enable fill level
        display, use gtk_range_set_show_fill_level(). The range defaults
        to not showing the fill level.

        Additionally, it’s possible to restrict the range’s slider position
        to values which are smaller than the fill level. This is controller
        by gtk_range_set_restrict_to_fill_level() and is by default
        enabled.
        """
        ...

    def set_flippable(self, flippable: bool) -> object:
        """
        If a range is flippable, it will switch its direction if it is
        horizontal and its direction is %GTK_TEXT_DIR_RTL.

        See gtk_widget_get_direction().
        """
        ...

    def set_increments(self, step: float, page: float) -> object:
        """
        Sets the step and page sizes for the range.
        The step size is used when the user clicks the #GtkScrollbar
        arrows or moves #GtkScale via arrow keys. The page size
        is used for example when moving via Page Up or Page Down keys.
        """
        ...

    def set_inverted(self, setting: bool) -> object:
        """
        Ranges normally move from lower to higher values as the
        slider moves from top to bottom or left to right. Inverted
        ranges have higher values at the top or on the right rather than
        on the bottom or left.
        """
        ...

    def set_lower_stepper_sensitivity(self, sensitivity: SensitivityType) -> object:
        """
        Sets the sensitivity policy for the stepper that points to the
        'lower' end of the GtkRange’s adjustment.
        """
        ...

    def set_min_slider_size(self, min_size: int) -> object:
        """
        Sets the minimum size of the range’s slider.

        This function is useful mainly for #GtkRange subclasses.
        """
        ...

    def set_range(self, min: float, max: float) -> object:
        """
        Sets the allowable values in the #GtkRange, and clamps the range
        value to be between @min and @max. (If the range has a non-zero
        page size, it is clamped between @min and @max - page-size.)
        """
        ...

    def set_restrict_to_fill_level(self, restrict_to_fill_level: bool) -> object:
        """
        Sets whether the slider is restricted to the fill level. See
        gtk_range_set_fill_level() for a general description of the fill
        level concept.
        """
        ...

    def set_round_digits(self, round_digits: int) -> object:
        """
        Sets the number of digits to round the value to when
        it changes. See #GtkRange::change-value.
        """
        ...

    def set_show_fill_level(self, show_fill_level: bool) -> object:
        """
        Sets whether a graphical fill level is show on the trough. See
        gtk_range_set_fill_level() for a general description of the fill
        level concept.
        """
        ...

    def set_slider_size_fixed(self, size_fixed: bool) -> object:
        """
        Sets whether the range’s slider has a fixed size, or a size that
        depends on its adjustment’s page size.

        This function is useful mainly for #GtkRange subclasses.
        """
        ...

    def set_upper_stepper_sensitivity(self, sensitivity: SensitivityType) -> object:
        """
        Sets the sensitivity policy for the stepper that points to the
        'upper' end of the GtkRange’s adjustment.
        """
        ...

    def set_value(self, value: float) -> object:
        """
        Sets the current value of the range; if the value is outside the
        minimum or maximum range values, it will be clamped to fit inside
        them. The range emits the #GtkRange::value-changed signal if the
        value changes.
        """
        ...


    ...

class RangeAccessible(WidgetAccessible, Atk.Component, Atk.Value):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class RcStyle(GObject.Object):
    """
    The #GtkRcStyle-struct is used to represent a set
    of information about the appearance of a widget.
    This can later be composited together with other
    #GtkRcStyle-struct<!-- -->s to form a #GtkStyle.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> RcStyle:
        """
        Creates a new #GtkRcStyle with no fields set and
        a reference count of 1.
        """
        ...

    def copy(self) -> RcStyle:
        """
        Makes a copy of the specified #GtkRcStyle. This function
        will correctly copy an RC style that is a member of a class
        derived from #GtkRcStyle.
        """
        ...


    ...

class RecentAction(Action, Buildable, RecentChooser):
    """
    A #GtkRecentAction represents a list of recently used files, which
    can be shown by widgets such as #GtkRecentChooserDialog or
    #GtkRecentChooserMenu.

    To construct a submenu showing recently used files, use a #GtkRecentAction
    as the action for a `<menuitem>`. To construct a menu toolbutton showing
    the recently used files in the popup menu, use a #GtkRecentAction as the
    action for a `<toolitem>` element.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: str, label: _T.Optional[str], tooltip: _T.Optional[str], stock_id: _T.Optional[str]) -> Action:
        """
        Creates a new #GtkRecentAction object. To add the action to
        a #GtkActionGroup and set the accelerator for the action,
        call gtk_action_group_add_action_with_accel().
        """
        ...


    @classmethod
    def new_for_manager(cls, name: str, label: _T.Optional[str], tooltip: _T.Optional[str], stock_id: _T.Optional[str], manager: _T.Optional[RecentManager]) -> Action:
        """
        Creates a new #GtkRecentAction object. To add the action to
        a #GtkActionGroup and set the accelerator for the action,
        call gtk_action_group_add_action_with_accel().
        """
        ...

    def get_show_numbers(self) -> bool:
        """
        Returns the value set by gtk_recent_chooser_menu_set_show_numbers().
        """
        ...

    def set_show_numbers(self, show_numbers: bool) -> object:
        """
        Sets whether a number should be added to the items shown by the
        widgets representing @action. The numbers are shown to provide
        a unique character for a mnemonic to be used inside the menu item's
        label. Only the first ten items get a number to avoid clashes.
        """
        ...


    ...

class RecentChooserDialog(Dialog, Atk.ImplementorIface, Buildable, RecentChooser):
    """
    #GtkRecentChooserDialog is a dialog box suitable for displaying the recently
    used documents.  This widgets works by putting a #GtkRecentChooserWidget inside
    a #GtkDialog.  It exposes the #GtkRecentChooserIface interface, so you can use
    all the #GtkRecentChooser functions on the recent chooser dialog as well as
    those for #GtkDialog.

    Note that #GtkRecentChooserDialog does not have any methods of its own.
    Instead, you should use the functions that work on a #GtkRecentChooser.

    ## Typical usage ## {#gtkrecentchooser-typical-usage}

    In the simplest of cases, you can use the following code to use
    a #GtkRecentChooserDialog to select a recently used file:

    |[<!-- language="C" -->
    GtkWidget *dialog;
    gint res;

    dialog = gtk_recent_chooser_dialog_new ("Recent Documents",
                                            parent_window,
                                            _("_Cancel"),
                                            GTK_RESPONSE_CANCEL,
                                            _("_Open"),
                                            GTK_RESPONSE_ACCEPT,
                                            NULL);

    res = gtk_dialog_run (GTK_DIALOG (dialog));
    if (res == GTK_RESPONSE_ACCEPT)
      {
        GtkRecentInfo *info;
        GtkRecentChooser *chooser = GTK_RECENT_CHOOSER (dialog);

        info = gtk_recent_chooser_get_current_item (chooser);
        open_file (gtk_recent_info_get_uri (info));
        gtk_recent_info_unref (info);
      }

    gtk_widget_destroy (dialog);
    ]|

    Recently used files are supported since GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: _T.Optional[str], parent: _T.Optional[Window], first_button_text: _T.Optional[str], *args: object) -> Widget:
        """
        Creates a new #GtkRecentChooserDialog.  This function is analogous to
        gtk_dialog_new_with_buttons().
        """
        ...


    @classmethod
    def new_for_manager(cls, title: _T.Optional[str], parent: _T.Optional[Window], manager: RecentManager, first_button_text: _T.Optional[str], *args: object) -> Widget:
        """
        Creates a new #GtkRecentChooserDialog with a specified recent manager.

        This is useful if you have implemented your own recent manager, or if you
        have a customized instance of a #GtkRecentManager object.
        """
        ...


    ...

class RecentChooserMenu(Menu, Atk.ImplementorIface, Activatable, Buildable, RecentChooser):
    """
    #GtkRecentChooserMenu is a widget suitable for displaying recently used files
    inside a menu.  It can be used to set a sub-menu of a #GtkMenuItem using
    gtk_menu_item_set_submenu(), or as the menu of a #GtkMenuToolButton.

    Note that #GtkRecentChooserMenu does not have any methods of its own. Instead,
    you should use the functions that work on a #GtkRecentChooser.

    Note also that #GtkRecentChooserMenu does not support multiple filters, as it
    has no way to let the user choose between them as the #GtkRecentChooserWidget
    and #GtkRecentChooserDialog widgets do. Thus using gtk_recent_chooser_add_filter()
    on a #GtkRecentChooserMenu widget will yield the same effects as using
    gtk_recent_chooser_set_filter(), replacing any currently set filter
    with the supplied filter; gtk_recent_chooser_remove_filter() will remove
    any currently set #GtkRecentFilter object and will unset the current filter;
    gtk_recent_chooser_list_filters() will return a list containing a single
    #GtkRecentFilter object.

    Recently used files are supported since GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkRecentChooserMenu widget.

        This kind of widget shows the list of recently used resources as
        a menu, each item as a menu item.  Each item inside the menu might
        have an icon, representing its MIME type, and a number, for mnemonic
        access.

        This widget implements the #GtkRecentChooser interface.

        This widget creates its own #GtkRecentManager object.  See the
        gtk_recent_chooser_menu_new_for_manager() function to know how to create
        a #GtkRecentChooserMenu widget bound to another #GtkRecentManager object.
        """
        ...


    @classmethod
    def new_for_manager(cls, manager: RecentManager) -> Widget:
        """
        Creates a new #GtkRecentChooserMenu widget using @manager as
        the underlying recently used resources manager.

        This is useful if you have implemented your own recent manager,
        or if you have a customized instance of a #GtkRecentManager
        object or if you wish to share a common #GtkRecentManager object
        among multiple #GtkRecentChooser widgets.
        """
        ...

    def get_show_numbers(self) -> bool:
        """
        Returns the value set by gtk_recent_chooser_menu_set_show_numbers().
        """
        ...

    def set_show_numbers(self, show_numbers: bool) -> object:
        """
        Sets whether a number should be added to the items of @menu.  The
        numbers are shown to provide a unique character for a mnemonic to
        be used inside ten menu item’s label.  Only the first the items
        get a number to avoid clashes.
        """
        ...


    ...

class RecentChooserWidget(Box, Atk.ImplementorIface, Buildable, Orientable, RecentChooser):
    """
    #GtkRecentChooserWidget is a widget suitable for selecting recently used
    files.  It is the main building block of a #GtkRecentChooserDialog.  Most
    applications will only need to use the latter; you can use
    #GtkRecentChooserWidget as part of a larger window if you have special needs.

    Note that #GtkRecentChooserWidget does not have any methods of its own.
    Instead, you should use the functions that work on a #GtkRecentChooser.

    Recently used files are supported since GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkRecentChooserWidget object.  This is an embeddable widget
        used to access the recently used resources list.
        """
        ...


    @classmethod
    def new_for_manager(cls, manager: RecentManager) -> Widget:
        """
        Creates a new #GtkRecentChooserWidget with a specified recent manager.

        This is useful if you have implemented your own recent manager, or if you
        have a customized instance of a #GtkRecentManager object.
        """
        ...


    ...

class RecentFilter(GObject.InitiallyUnowned, Buildable):
    """
    A #GtkRecentFilter can be used to restrict the files being shown
    in a #GtkRecentChooser.  Files can be filtered based on their name
    (with gtk_recent_filter_add_pattern()), on their mime type (with
    gtk_file_filter_add_mime_type()), on the application that has
    registered them (with gtk_recent_filter_add_application()), or by
    a custom filter function (with gtk_recent_filter_add_custom()).

    Filtering by mime type handles aliasing and subclassing of mime
    types; e.g. a filter for text/plain also matches a file with mime
    type application/rtf, since application/rtf is a subclass of text/plain.
    Note that #GtkRecentFilter allows wildcards for the subtype of a
    mime type, so you can e.g. filter for image/\*.

    Normally, filters are used by adding them to a #GtkRecentChooser,
    see gtk_recent_chooser_add_filter(), but it is also possible to
    manually use a filter on a file with gtk_recent_filter_filter().

    Recently used files are supported since GTK+ 2.10.

    ## GtkRecentFilter as GtkBuildable

    The GtkRecentFilter implementation of the GtkBuildable interface
    supports adding rules using the `<mime-types>`, `<patterns>` and
    `<applications>` elements and listing the rules within. Specifying
    a `<mime-type>`, `<pattern>` or `<application>` has the same effect as
    calling gtk_recent_filter_add_mime_type(),
    gtk_recent_filter_add_pattern() or gtk_recent_filter_add_application().

    An example of a UI definition fragment specifying `GtkRecentFilter`
    rules:

    |[<!-- language="xml" -->
    <object class="GtkRecentFilter">
      <mime-types>
        <mime-type>text/plain</mime-type>
        <mime-type>image/png</mime-type>
      </mime-types>
      <patterns>
        <pattern>*.txt</pattern>
        <pattern>*.png</pattern>
      </patterns>
      <applications>
        <application>gimp</application>
        <application>gedit</application>
        <application>glade</application>
      </applications>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> RecentFilter:
        """
        Creates a new #GtkRecentFilter with no rules added to it.
        Such filter does not accept any recently used resources, so is not
        particularly useful until you add rules with
        gtk_recent_filter_add_pattern(), gtk_recent_filter_add_mime_type(),
        gtk_recent_filter_add_application(), gtk_recent_filter_add_age().
        To create a filter that accepts any recently used resource, use:
        |[<!-- language="C" -->
        GtkRecentFilter *filter = gtk_recent_filter_new ();
        gtk_recent_filter_add_pattern (filter, "*");
        ]|
        """
        ...

    def add_age(self, days: int) -> object:
        """
        Adds a rule that allows resources based on their age - that is, the number
        of days elapsed since they were last modified.
        """
        ...

    def add_application(self, application: str) -> object:
        """
        Adds a rule that allows resources based on the name of the application
        that has registered them.
        """
        ...

    def add_custom(self, needed: RecentFilterFlags, func: RecentFilterFunc, data: _T.Optional[object], data_destroy: GLib.DestroyNotify) -> object:
        """
        Adds a rule to a filter that allows resources based on a custom callback
        function. The bitfield @needed which is passed in provides information
        about what sorts of information that the filter function needs;
        this allows GTK+ to avoid retrieving expensive information when
        it isn’t needed by the filter.
        """
        ...

    def add_group(self, group: str) -> object:
        """
        Adds a rule that allows resources based on the name of the group
        to which they belong
        """
        ...

    def add_mime_type(self, mime_type: str) -> object:
        """
        Adds a rule that allows resources based on their registered MIME type.
        """
        ...

    def add_pattern(self, pattern: str) -> object:
        """
        Adds a rule that allows resources based on a pattern matching their
        display name.
        """
        ...

    def add_pixbuf_formats(self) -> object:
        """
        Adds a rule allowing image files in the formats supported
        by GdkPixbuf.
        """
        ...

    def filter(self, filter_info: RecentFilterInfo) -> bool:
        """
        Tests whether a file should be displayed according to @filter.
        The #GtkRecentFilterInfo @filter_info should include
        the fields returned from gtk_recent_filter_get_needed(), and
        must set the #GtkRecentFilterInfo.contains field of @filter_info
        to indicate which fields have been set.

        This function will not typically be used by applications; it
        is intended principally for use in the implementation of
        #GtkRecentChooser.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the human-readable name for the filter.
        See gtk_recent_filter_set_name().
        """
        ...

    def get_needed(self) -> RecentFilterFlags:
        """
        Gets the fields that need to be filled in for the #GtkRecentFilterInfo
        passed to gtk_recent_filter_filter()

        This function will not typically be used by applications; it
        is intended principally for use in the implementation of
        #GtkRecentChooser.
        """
        ...

    def set_name(self, name: str) -> object:
        """
        Sets the human-readable name of the filter; this is the string
        that will be displayed in the recently used resources selector
        user interface if there is a selectable list of filters.
        """
        ...


    ...

class RecentManager(GObject.Object):
    """
    #GtkRecentManager provides a facility for adding, removing and
    looking up recently used files. Each recently used file is
    identified by its URI, and has meta-data associated to it, like
    the names and command lines of the applications that have
    registered it, the number of time each application has registered
    the same file, the mime type of the file and whether the file
    should be displayed only by the applications that have
    registered it.

    The recently used files list is per user.

    The #GtkRecentManager acts like a database of all the recently
    used files. You can create new #GtkRecentManager objects, but
    it is more efficient to use the default manager created by GTK+.

    Adding a new recently used file is as simple as:

    |[<!-- language="C" -->
    GtkRecentManager *manager;

    manager = gtk_recent_manager_get_default ();
    gtk_recent_manager_add_item (manager, file_uri);
    ]|

    The #GtkRecentManager will try to gather all the needed information
    from the file itself through GIO.

    Looking up the meta-data associated with a recently used file
    given its URI requires calling gtk_recent_manager_lookup_item():

    |[<!-- language="C" -->
    GtkRecentManager *manager;
    GtkRecentInfo *info;
    GError *error = NULL;

    manager = gtk_recent_manager_get_default ();
    info = gtk_recent_manager_lookup_item (manager, file_uri, &error);
    if (error)
      {
        g_warning ("Could not find the file: %s", error->message);
        g_error_free (error);
      }
    else
     {
       // Use the info object
       gtk_recent_info_unref (info);
     }
    ]|

    In order to retrieve the list of recently used files, you can use
    gtk_recent_manager_get_items(), which returns a list of #GtkRecentInfo-structs.

    A #GtkRecentManager is the model used to populate the contents of
    one, or more #GtkRecentChooser implementations.

    Note that the maximum age of the recently used files list is
    controllable through the #GtkSettings:gtk-recent-files-max-age
    property.

    Recently used files are supported since GTK+ 2.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> RecentManager:
        """
        Creates a new recent manager object. Recent manager objects are used to
        handle the list of recently used resources. A #GtkRecentManager object
        monitors the recently used resources list, and emits the “changed” signal
        each time something inside the list changes.

        #GtkRecentManager objects are expensive: be sure to create them only when
        needed. You should use gtk_recent_manager_get_default() instead.
        """
        ...

    def add_full(self, uri: str, recent_data: RecentData) -> bool:
        """
        Adds a new resource, pointed by @uri, into the recently used
        resources list, using the metadata specified inside the
        #GtkRecentData-struct passed in @recent_data.

        The passed URI will be used to identify this resource inside the
        list.

        In order to register the new recently used resource, metadata about
        the resource must be passed as well as the URI; the metadata is
        stored in a #GtkRecentData-struct, which must contain the MIME
        type of the resource pointed by the URI; the name of the application
        that is registering the item, and a command line to be used when
        launching the item.

        Optionally, a #GtkRecentData-struct might contain a UTF-8 string
        to be used when viewing the item instead of the last component of
        the URI; a short description of the item; whether the item should
        be considered private - that is, should be displayed only by the
        applications that have registered it.
        """
        ...

    def add_item(self, uri: str) -> bool:
        """
        Adds a new resource, pointed by @uri, into the recently used
        resources list.

        This function automatically retrieves some of the needed
        metadata and setting other metadata to common default values;
        it then feeds the data to gtk_recent_manager_add_full().

        See gtk_recent_manager_add_full() if you want to explicitly
        define the metadata for the resource pointed by @uri.
        """
        ...

    def get_items(self) -> GLib.List:
        """
        Gets the list of recently used resources.
        """
        ...

    def has_item(self, uri: str) -> bool:
        """
        Checks whether there is a recently used resource registered
        with @uri inside the recent manager.
        """
        ...

    def lookup_item(self, uri: str) -> RecentInfo:
        """
        Searches for a URI inside the recently used resources list, and
        returns a #GtkRecentInfo-struct containing informations about the resource
        like its MIME type, or its display name.
        """
        ...

    def move_item(self, uri: str, new_uri: _T.Optional[str]) -> bool:
        """
        Changes the location of a recently used resource from @uri to @new_uri.

        Please note that this function will not affect the resource pointed
        by the URIs, but only the URI used in the recently used resources list.
        """
        ...

    def purge_items(self) -> int:
        """
        Purges every item from the recently used resources list.
        """
        ...

    def remove_item(self, uri: str) -> bool:
        """
        Removes a resource pointed by @uri from the recently used resources
        list handled by a recent manager.
        """
        ...


    ...

class RendererCellAccessible(CellAccessible, Atk.Action, Atk.Component, Atk.TableCell):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, renderer: CellRenderer) -> Atk.Object:
        ...


    ...

class Revealer(Bin, Atk.ImplementorIface, Buildable):
    """
    The GtkRevealer widget is a container which animates
    the transition of its child from invisible to visible.

    The style of transition can be controlled with
    gtk_revealer_set_transition_type().

    These animations respect the #GtkSettings:gtk-enable-animations
    setting.

    # CSS nodes

    GtkRevealer has a single CSS node with name revealer.

    The GtkRevealer widget was added in GTK+ 3.10.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkRevealer.
        """
        ...

    def get_child_revealed(self) -> bool:
        """
        Returns whether the child is fully revealed, in other words whether
        the transition to the revealed state is completed.
        """
        ...

    def get_reveal_child(self) -> bool:
        """
        Returns whether the child is currently
        revealed. See gtk_revealer_set_reveal_child().

        This function returns %TRUE as soon as the transition
        is to the revealed state is started. To learn whether
        the child is fully revealed (ie the transition is completed),
        use gtk_revealer_get_child_revealed().
        """
        ...

    def get_transition_duration(self) -> int:
        """
        Returns the amount of time (in milliseconds) that
        transitions will take.
        """
        ...

    def get_transition_type(self) -> RevealerTransitionType:
        """
        Gets the type of animation that will be used
        for transitions in @revealer.
        """
        ...

    def set_reveal_child(self, reveal_child: bool) -> object:
        """
        Tells the #GtkRevealer to reveal or conceal its child.

        The transition will be animated with the current
        transition type of @revealer.
        """
        ...

    def set_transition_duration(self, duration: int) -> object:
        """
        Sets the duration that transitions will take.
        """
        ...

    def set_transition_type(self, transition: RevealerTransitionType) -> object:
        """
        Sets the type of animation that will be used for
        transitions in @revealer. Available types include
        various kinds of fades and slides.
        """
        ...


    ...

class Scale(Range, Atk.ImplementorIface, Buildable, Orientable):
    """
    A GtkScale is a slider control used to select a numeric value.
    To use it, you’ll probably want to investigate the methods on
    its base class, #GtkRange, in addition to the methods for GtkScale itself.
    To set the value of a scale, you would normally use gtk_range_set_value().
    To detect changes to the value, you would normally use the
    #GtkRange::value-changed signal.

    Note that using the same upper and lower bounds for the #GtkScale (through
    the #GtkRange methods) will hide the slider itself. This is useful for
    applications that want to show an undeterminate value on the scale, without
    changing the layout of the application (such as movie or music players).

    # GtkScale as GtkBuildable

    GtkScale supports a custom `<marks>` element, which can contain multiple
    `<mark>` elements. The “value” and “position” attributes have the same
    meaning as gtk_scale_add_mark() parameters of the same name. If the
    element is not empty, its content is taken as the markup to show at
    the mark. It can be translated with the usual ”translatable” and
    “context” attributes.

    # CSS nodes

    |[<!-- language="plain" -->
    scale[.fine-tune][.marks-before][.marks-after]
    ├── marks.top
    │   ├── mark
    │   ┊    ├── [label]
    │   ┊    ╰── indicator
    ┊   ┊
    │   ╰── mark
    ├── [value]
    ├── contents
    │   ╰── trough
    │       ├── slider
    │       ├── [highlight]
    │       ╰── [fill]
    ╰── marks.bottom
        ├── mark
        ┊    ├── indicator
        ┊    ╰── [label]
        ╰── mark
    ]|

    GtkScale has a main CSS node with name scale and a subnode for its contents,
    with subnodes named trough and slider.

    The main node gets the style class .fine-tune added when the scale is in
    'fine-tuning' mode.

    If the scale has an origin (see gtk_scale_set_has_origin()), there is a
    subnode with name highlight below the trough node that is used for rendering
    the highlighted part of the trough.

    If the scale is showing a fill level (see gtk_range_set_show_fill_level()),
    there is a subnode with name fill below the trough node that is used for
    rendering the filled in part of the trough.

    If marks are present, there is a marks subnode before or after the contents
    node, below which each mark gets a node with name mark. The marks nodes get
    either the .top or .bottom style class.

    The mark node has a subnode named indicator. If the mark has text, it also
    has a subnode named label. When the mark is either above or left of the
    scale, the label subnode is the first when present. Otherwise, the indicator
    subnode is the first.

    The main CSS node gets the 'marks-before' and/or 'marks-after' style classes
    added depending on what marks are present.

    If the scale is displaying the value (see #GtkScale:draw-value), there is
    subnode with name value.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, orientation: Orientation, adjustment: _T.Optional[Adjustment]) -> Widget:
        """
        Creates a new #GtkScale.
        """
        ...


    @classmethod
    def new_with_range(cls, orientation: Orientation, min: float, max: float, step: float) -> Widget:
        """
        Creates a new scale widget with the given orientation that lets the
        user input a number between @min and @max (including @min and @max)
        with the increment @step.  @step must be nonzero; it’s the distance
        the slider moves when using the arrow keys to adjust the scale
        value.

        Note that the way in which the precision is derived works best if @step
        is a power of ten. If the resulting precision is not suitable for your
        needs, use gtk_scale_set_digits() to correct it.
        """
        ...

    def add_mark(self, value: float, position: PositionType, markup: _T.Optional[str]) -> object:
        """
        Adds a mark at @value.

        A mark is indicated visually by drawing a tick mark next to the scale,
        and GTK+ makes it easy for the user to position the scale exactly at the
        marks value.

        If @markup is not %NULL, text is shown next to the tick mark.

        To remove marks from a scale, use gtk_scale_clear_marks().
        """
        ...

    def clear_marks(self) -> object:
        """
        Removes any marks that have been added with gtk_scale_add_mark().
        """
        ...

    def get_digits(self) -> int:
        """
        Gets the number of decimal places that are displayed in the value.
        """
        ...

    def get_draw_value(self) -> bool:
        """
        Returns whether the current value is displayed as a string
        next to the slider.
        """
        ...

    def get_has_origin(self) -> bool:
        """
        Returns whether the scale has an origin.
        """
        ...

    def get_layout(self) -> Pango.Layout:
        """
        Gets the #PangoLayout used to display the scale. The returned
        object is owned by the scale so does not need to be freed by
        the caller.
        """
        ...

    def get_layout_offsets(self, x: int, y: int) -> object:
        """
        Obtains the coordinates where the scale will draw the
        #PangoLayout representing the text in the scale. Remember
        when using the #PangoLayout function you need to convert to
        and from pixels using PANGO_PIXELS() or #PANGO_SCALE.

        If the #GtkScale:draw-value property is %FALSE, the return
        values are undefined.
        """
        ...

    def get_value_pos(self) -> PositionType:
        """
        Gets the position in which the current value is displayed.
        """
        ...

    def set_digits(self, digits: int) -> object:
        """
        Sets the number of decimal places that are displayed in the value. Also
        causes the value of the adjustment to be rounded to this number of digits,
        so the retrieved value matches the displayed one, if #GtkScale:draw-value is
        %TRUE when the value changes. If you want to enforce rounding the value when
        #GtkScale:draw-value is %FALSE, you can set #GtkRange:round-digits instead.

        Note that rounding to a small number of digits can interfere with
        the smooth autoscrolling that is built into #GtkScale. As an alternative,
        you can use the #GtkScale::format-value signal to format the displayed
        value yourself.
        """
        ...

    def set_draw_value(self, draw_value: bool) -> object:
        """
        Specifies whether the current value is displayed as a string next
        to the slider.
        """
        ...

    def set_has_origin(self, has_origin: bool) -> object:
        """
        If #GtkScale:has-origin is set to %TRUE (the default), the scale will
        highlight the part of the trough between the origin (bottom or left side)
        and the current value.
        """
        ...

    def set_value_pos(self, pos: PositionType) -> object:
        """
        Sets the position in which the current value is displayed.
        """
        ...


    ...

class ScaleAccessible(RangeAccessible, Atk.Component, Atk.Value):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ScaleButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable, Orientable):
    """
    #GtkScaleButton provides a button which pops up a scale widget.
    This kind of widget is commonly used for volume controls in multimedia
    applications, and GTK+ provides a #GtkVolumeButton subclass that
    is tailored for this use case.

    # CSS nodes

    GtkScaleButton has a single CSS node with name button. To differentiate
    it from a plain #GtkButton, it gets the .scale style class.

    The popup widget that contains the scale has a .scale-popup style class.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, size: int, min: float, max: float, step: float, icons: _T.Optional[object]) -> Widget:
        """
        Creates a #GtkScaleButton, with a range between @min and @max, with
        a stepping of @step.
        """
        ...

    def get_adjustment(self) -> Adjustment:
        """
        Gets the #GtkAdjustment associated with the #GtkScaleButton’s scale.
        See gtk_range_get_adjustment() for details.
        """
        ...

    def get_minus_button(self) -> Button:
        """
        Retrieves the minus button of the #GtkScaleButton.
        """
        ...

    def get_plus_button(self) -> Button:
        """
        Retrieves the plus button of the #GtkScaleButton.
        """
        ...

    def get_popup(self) -> Widget:
        """
        Retrieves the popup of the #GtkScaleButton.
        """
        ...

    def get_value(self) -> float:
        """
        Gets the current value of the scale button.
        """
        ...

    def set_adjustment(self, adjustment: Adjustment) -> object:
        """
        Sets the #GtkAdjustment to be used as a model
        for the #GtkScaleButton’s scale.
        See gtk_range_set_adjustment() for details.
        """
        ...

    def set_icons(self, icons: object) -> object:
        """
        Sets the icons to be used by the scale button.
        For details, see the #GtkScaleButton:icons property.
        """
        ...

    def set_value(self, value: float) -> object:
        """
        Sets the current value of the scale; if the value is outside
        the minimum or maximum range values, it will be clamped to fit
        inside them. The scale button emits the #GtkScaleButton::value-changed
        signal if the value changes.
        """
        ...


    ...

class ScaleButtonAccessible(ButtonAccessible, Atk.Action, Atk.Component, Atk.Image, Atk.Value):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Scrollbar(Range, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkScrollbar widget is a horizontal or vertical scrollbar,
    depending on the value of the #GtkOrientable:orientation property.

    Its position and movement are controlled by the adjustment that is passed to
    or created by gtk_scrollbar_new(). See #GtkAdjustment for more details. The
    #GtkAdjustment:value field sets the position of the thumb and must be between
    #GtkAdjustment:lower and #GtkAdjustment:upper - #GtkAdjustment:page-size. The
    #GtkAdjustment:page-size represents the size of the visible scrollable area.
    The fields #GtkAdjustment:step-increment and #GtkAdjustment:page-increment
    fields are added to or subtracted from the #GtkAdjustment:value when the user
    asks to move by a step (using e.g. the cursor arrow keys or, if present, the
    stepper buttons) or by a page (using e.g. the Page Down/Up keys).

    # CSS nodes

    |[<!-- language="plain" -->
    scrollbar[.fine-tune]
    ╰── contents
        ├── [button.up]
        ├── [button.down]
        ├── trough
        │   ╰── slider
        ├── [button.up]
        ╰── [button.down]
    ]|

    GtkScrollbar has a main CSS node with name scrollbar and a subnode for its
    contents, with subnodes named trough and slider.

    The main node gets the style class .fine-tune added when the scrollbar is
    in 'fine-tuning' mode.

    If steppers are enabled, they are represented by up to four additional
    subnodes with name button. These get the style classes .up and .down to
    indicate in which direction they are moving.

    Other style classes that may be added to scrollbars inside #GtkScrolledWindow
    include the positional classes (.left, .right, .top, .bottom) and style
    classes related to overlay scrolling (.overlay-indicator, .dragging, .hovering).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, orientation: Orientation, adjustment: _T.Optional[Adjustment]) -> Widget:
        """
        Creates a new scrollbar with the given orientation.
        """
        ...


    ...

class ScrolledWindow(Bin, Atk.ImplementorIface, Buildable):
    """
    GtkScrolledWindow is a container that accepts a single child widget, makes
    that child scrollable using either internally added scrollbars or externally
    associated adjustments, and optionally draws a frame around the child.

    Widgets with native scrolling support, i.e. those whose classes implement the
    #GtkScrollable interface, are added directly. For other types of widget, the
    class #GtkViewport acts as an adaptor, giving scrollability to other widgets.
    GtkScrolledWindow’s implementation of gtk_container_add() intelligently
    accounts for whether or not the added child is a #GtkScrollable. If it isn’t,
    #GtkScrolledWindow wraps the child in a #GtkViewport and adds that for you.
    Therefore, you can just add any child widget and not worry about the details.

    If gtk_container_add() has added a #GtkViewport for you, you can remove
    both your added child widget from the #GtkViewport, and the #GtkViewport
    from the GtkScrolledWindow, like this:

    |[<!-- language="C" -->
    GtkWidget *scrolled_window = gtk_scrolled_window_new (NULL, NULL);
    GtkWidget *child_widget = gtk_button_new ();

    // GtkButton is not a GtkScrollable, so GtkScrolledWindow will automatically
    // add a GtkViewport.
    gtk_container_add (GTK_CONTAINER (scrolled_window),
                       child_widget);

    // Either of these will result in child_widget being unparented:
    gtk_container_remove (GTK_CONTAINER (scrolled_window),
                          child_widget);
    // or
    gtk_container_remove (GTK_CONTAINER (scrolled_window),
                          gtk_bin_get_child (GTK_BIN (scrolled_window)));
    ]|

    Unless #GtkScrolledWindow:policy is GTK_POLICY_NEVER or GTK_POLICY_EXTERNAL,
    GtkScrolledWindow adds internal #GtkScrollbar widgets around its child. The
    scroll position of the child, and if applicable the scrollbars, is controlled
    by the #GtkScrolledWindow:hadjustment and #GtkScrolledWindow:vadjustment
    that are associated with the GtkScrolledWindow. See the docs on #GtkScrollbar
    for the details, but note that the “step_increment” and “page_increment”
    fields are only effective if the policy causes scrollbars to be present.

    If a GtkScrolledWindow doesn’t behave quite as you would like, or
    doesn’t have exactly the right layout, it’s very possible to set up
    your own scrolling with #GtkScrollbar and for example a #GtkGrid.

    # Touch support

    GtkScrolledWindow has built-in support for touch devices. When a
    touchscreen is used, swiping will move the scrolled window, and will
    expose 'kinetic' behavior. This can be turned off with the
    #GtkScrolledWindow:kinetic-scrolling property if it is undesired.

    GtkScrolledWindow also displays visual 'overshoot' indication when
    the content is pulled beyond the end, and this situation can be
    captured with the #GtkScrolledWindow::edge-overshot signal.

    If no mouse device is present, the scrollbars will overlayed as
    narrow, auto-hiding indicators over the content. If traditional
    scrollbars are desired although no mouse is present, this behaviour
    can be turned off with the #GtkScrolledWindow:overlay-scrolling
    property.

    # CSS nodes

    GtkScrolledWindow has a main CSS node with name scrolledwindow.

    It uses subnodes with names overshoot and undershoot to
    draw the overflow and underflow indications. These nodes get
    the .left, .right, .top or .bottom style class added depending
    on where the indication is drawn.

    GtkScrolledWindow also sets the positional style classes (.left,
    .right, .top, .bottom) and style classes related to overlay
    scrolling (.overlay-indicator, .dragging, .hovering) on its scrollbars.

    If both scrollbars are visible, the area where they meet is drawn
    with a subnode named junction.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, hadjustment: _T.Optional[Adjustment], vadjustment: _T.Optional[Adjustment]) -> Widget:
        """
        Creates a new scrolled window.

        The two arguments are the scrolled window’s adjustments; these will be
        shared with the scrollbars and the child widget to keep the bars in sync
        with the child. Usually you want to pass %NULL for the adjustments, which
        will cause the scrolled window to create them for you.
        """
        ...

    def add_with_viewport(self, child: Widget) -> object:
        """
        Used to add children without native scrolling capabilities. This
        is simply a convenience function; it is equivalent to adding the
        unscrollable child to a viewport, then adding the viewport to the
        scrolled window. If a child has native scrolling, use
        gtk_container_add() instead of this function.

        The viewport scrolls the child by moving its #GdkWindow, and takes
        the size of the child to be the size of its toplevel #GdkWindow.
        This will be very wrong for most widgets that support native scrolling;
        for example, if you add a widget such as #GtkTreeView with a viewport,
        the whole widget will scroll, including the column headings. Thus,
        widgets with native scrolling support should not be used with the
        #GtkViewport proxy.

        A widget supports scrolling natively if it implements the
        #GtkScrollable interface.
        """
        ...

    def get_capture_button_press(self) -> bool:
        """
        Return whether button presses are captured during kinetic
        scrolling. See gtk_scrolled_window_set_capture_button_press().
        """
        ...

    def get_hadjustment(self) -> Adjustment:
        """
        Returns the horizontal scrollbar’s adjustment, used to connect the
        horizontal scrollbar to the child widget’s horizontal scroll
        functionality.
        """
        ...

    def get_hscrollbar(self) -> Widget:
        """
        Returns the horizontal scrollbar of @scrolled_window.
        """
        ...

    def get_kinetic_scrolling(self) -> bool:
        """
        Returns the specified kinetic scrolling behavior.
        """
        ...

    def get_max_content_height(self) -> int:
        """
        Returns the maximum content height set.
        """
        ...

    def get_max_content_width(self) -> int:
        """
        Returns the maximum content width set.
        """
        ...

    def get_min_content_height(self) -> int:
        """
        Gets the minimal content height of @scrolled_window, or -1 if not set.
        """
        ...

    def get_min_content_width(self) -> int:
        """
        Gets the minimum content width of @scrolled_window, or -1 if not set.
        """
        ...

    def get_overlay_scrolling(self) -> bool:
        """
        Returns whether overlay scrolling is enabled for this scrolled window.
        """
        ...

    def get_placement(self) -> CornerType:
        """
        Gets the placement of the contents with respect to the scrollbars
        for the scrolled window. See gtk_scrolled_window_set_placement().
        """
        ...

    def get_policy(self, hscrollbar_policy: PolicyType, vscrollbar_policy: PolicyType) -> object:
        """
        Retrieves the current policy values for the horizontal and vertical
        scrollbars. See gtk_scrolled_window_set_policy().
        """
        ...

    def get_propagate_natural_height(self) -> bool:
        """
        Reports whether the natural height of the child will be calculated and propagated
        through the scrolled window’s requested natural height.
        """
        ...

    def get_propagate_natural_width(self) -> bool:
        """
        Reports whether the natural width of the child will be calculated and propagated
        through the scrolled window’s requested natural width.
        """
        ...

    def get_shadow_type(self) -> ShadowType:
        """
        Gets the shadow type of the scrolled window. See
        gtk_scrolled_window_set_shadow_type().
        """
        ...

    def get_vadjustment(self) -> Adjustment:
        """
        Returns the vertical scrollbar’s adjustment, used to connect the
        vertical scrollbar to the child widget’s vertical scroll functionality.
        """
        ...

    def get_vscrollbar(self) -> Widget:
        """
        Returns the vertical scrollbar of @scrolled_window.
        """
        ...

    def set_capture_button_press(self, capture_button_press: bool) -> object:
        """
        Changes the behaviour of @scrolled_window with regard to the initial
        event that possibly starts kinetic scrolling. When @capture_button_press
        is set to %TRUE, the event is captured by the scrolled window, and
        then later replayed if it is meant to go to the child widget.

        This should be enabled if any child widgets perform non-reversible
        actions on #GtkWidget::button-press-event. If they don't, and handle
        additionally handle #GtkWidget::grab-broken-event, it might be better
        to set @capture_button_press to %FALSE.

        This setting only has an effect if kinetic scrolling is enabled.
        """
        ...

    def set_hadjustment(self, hadjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the #GtkAdjustment for the horizontal scrollbar.
        """
        ...

    def set_kinetic_scrolling(self, kinetic_scrolling: bool) -> object:
        """
        Turns kinetic scrolling on or off.
        Kinetic scrolling only applies to devices with source
        %GDK_SOURCE_TOUCHSCREEN.
        """
        ...

    def set_max_content_height(self, height: int) -> object:
        """
        Sets the maximum height that @scrolled_window should keep visible. The
        @scrolled_window will grow up to this height before it starts scrolling
        the content.

        It is a programming error to set the maximum content height to a value
        smaller than #GtkScrolledWindow:min-content-height.
        """
        ...

    def set_max_content_width(self, width: int) -> object:
        """
        Sets the maximum width that @scrolled_window should keep visible. The
        @scrolled_window will grow up to this width before it starts scrolling
        the content.

        It is a programming error to set the maximum content width to a value
        smaller than #GtkScrolledWindow:min-content-width.
        """
        ...

    def set_min_content_height(self, height: int) -> object:
        """
        Sets the minimum height that @scrolled_window should keep visible.
        Note that this can and (usually will) be smaller than the minimum
        size of the content.

        It is a programming error to set the minimum content height to a
        value greater than #GtkScrolledWindow:max-content-height.
        """
        ...

    def set_min_content_width(self, width: int) -> object:
        """
        Sets the minimum width that @scrolled_window should keep visible.
        Note that this can and (usually will) be smaller than the minimum
        size of the content.

        It is a programming error to set the minimum content width to a
        value greater than #GtkScrolledWindow:max-content-width.
        """
        ...

    def set_overlay_scrolling(self, overlay_scrolling: bool) -> object:
        """
        Enables or disables overlay scrolling for this scrolled window.
        """
        ...

    def set_placement(self, window_placement: CornerType) -> object:
        """
        Sets the placement of the contents with respect to the scrollbars
        for the scrolled window.

        The default is %GTK_CORNER_TOP_LEFT, meaning the child is
        in the top left, with the scrollbars underneath and to the right.
        Other values in #GtkCornerType are %GTK_CORNER_TOP_RIGHT,
        %GTK_CORNER_BOTTOM_LEFT, and %GTK_CORNER_BOTTOM_RIGHT.

        See also gtk_scrolled_window_get_placement() and
        gtk_scrolled_window_unset_placement().
        """
        ...

    def set_policy(self, hscrollbar_policy: PolicyType, vscrollbar_policy: PolicyType) -> object:
        """
        Sets the scrollbar policy for the horizontal and vertical scrollbars.

        The policy determines when the scrollbar should appear; it is a value
        from the #GtkPolicyType enumeration. If %GTK_POLICY_ALWAYS, the
        scrollbar is always present; if %GTK_POLICY_NEVER, the scrollbar is
        never present; if %GTK_POLICY_AUTOMATIC, the scrollbar is present only
        if needed (that is, if the slider part of the bar would be smaller
        than the trough — the display is larger than the page size).
        """
        ...

    def set_propagate_natural_height(self, propagate: bool) -> object:
        """
        Sets whether the natural height of the child should be calculated and propagated
        through the scrolled window’s requested natural height.
        """
        ...

    def set_propagate_natural_width(self, propagate: bool) -> object:
        """
        Sets whether the natural width of the child should be calculated and propagated
        through the scrolled window’s requested natural width.
        """
        ...

    def set_shadow_type(self, type: ShadowType) -> object:
        """
        Changes the type of shadow drawn around the contents of
        @scrolled_window.
        """
        ...

    def set_vadjustment(self, vadjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the #GtkAdjustment for the vertical scrollbar.
        """
        ...

    def unset_placement(self) -> object:
        """
        Unsets the placement of the contents with respect to the scrollbars
        for the scrolled window. If no window placement is set for a scrolled
        window, it defaults to %GTK_CORNER_TOP_LEFT.

        See also gtk_scrolled_window_set_placement() and
        gtk_scrolled_window_get_placement().
        """
        ...


    ...

class ScrolledWindowAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class SearchBar(Bin, Atk.ImplementorIface, Buildable):
    """
    #GtkSearchBar is a container made to have a search entry (possibly
    with additional connex widgets, such as drop-down menus, or buttons)
    built-in. The search bar would appear when a search is started through
    typing on the keyboard, or the application’s search mode is toggled on.

    For keyboard presses to start a search, events will need to be
    forwarded from the top-level window that contains the search bar.
    See gtk_search_bar_handle_event() for example code. Common shortcuts
    such as Ctrl+F should be handled as an application action, or through
    the menu items.

    You will also need to tell the search bar about which entry you
    are using as your search entry using gtk_search_bar_connect_entry().
    The following example shows you how to create a more complex search
    entry.

    # CSS nodes

    GtkSearchBar has a single CSS node with name searchbar.

    ## Creating a search bar

    [A simple example](https://gitlab.gnome.org/GNOME/gtk/blob/gtk-3-24/examples/search-bar.c)
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a #GtkSearchBar. You will need to tell it about
        which widget is going to be your text entry using
        gtk_search_bar_connect_entry().
        """
        ...

    def connect_entry(self, entry: Entry) -> object:
        """
        Connects the #GtkEntry widget passed as the one to be used in
        this search bar. The entry should be a descendant of the search bar.
        This is only required if the entry isn’t the direct child of the
        search bar (as in our main example).
        """
        ...

    def get_search_mode(self) -> bool:
        """
        Returns whether the search mode is on or off.
        """
        ...

    def get_show_close_button(self) -> bool:
        """
        Returns whether the close button is shown.
        """
        ...

    def handle_event(self, event: Gdk.Event) -> bool:
        """
        This function should be called when the top-level
        window which contains the search bar received a key event.

        If the key event is handled by the search bar, the bar will
        be shown, the entry populated with the entered text and %GDK_EVENT_STOP
        will be returned. The caller should ensure that events are
        not propagated further.

        If no entry has been connected to the search bar, using
        gtk_search_bar_connect_entry(), this function will return
        immediately with a warning.

        ## Showing the search bar on key presses

        |[<!-- language="C" -->
        static gboolean
        on_key_press_event (GtkWidget *widget,
                            GdkEvent  *event,
                            gpointer   user_data)
        {
          GtkSearchBar *bar = GTK_SEARCH_BAR (user_data);
          return gtk_search_bar_handle_event (bar, event);
        }

        static void
        create_toplevel (void)
        {
          GtkWidget *window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
          GtkWindow *search_bar = gtk_search_bar_new ();

         // Add more widgets to the window...

          g_signal_connect (window,
                           "key-press-event",
                            G_CALLBACK (on_key_press_event),
                            search_bar);
        }
        ]|
        """
        ...

    def set_search_mode(self, search_mode: bool) -> object:
        """
        Switches the search mode on or off.
        """
        ...

    def set_show_close_button(self, visible: bool) -> object:
        """
        Shows or hides the close button. Applications that
        already have a “search” toggle button should not show a close
        button in their search bar, as it duplicates the role of the
        toggle button.
        """
        ...


    ...

class SearchEntry(Entry, Atk.ImplementorIface, Buildable, CellEditable, Editable):
    """
    #GtkSearchEntry is a subclass of #GtkEntry that has been
    tailored for use as a search entry.

    It will show an inactive symbolic “find” icon when the search
    entry is empty, and a symbolic “clear” icon when there is text.
    Clicking on the “clear” icon will empty the search entry.

    Note that the search/clear icon is shown using a secondary
    icon, and thus does not work if you are using the secondary
    icon position for some other purpose.

    To make filtering appear more reactive, it is a good idea to
    not react to every change in the entry text immediately, but
    only after a short delay. To support this, #GtkSearchEntry
    emits the #GtkSearchEntry::search-changed signal which can
    be used instead of the #GtkEditable::changed signal.

    The #GtkSearchEntry::previous-match, #GtkSearchEntry::next-match
    and #GtkSearchEntry::stop-search signals can be used to implement
    moving between search results and ending the search.

    Often, GtkSearchEntry will be fed events by means of being
    placed inside a #GtkSearchBar. If that is not the case,
    you can use gtk_search_entry_handle_event() to pass events.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a #GtkSearchEntry, with a find icon when the search field is
        empty, and a clear icon when it isn't.
        """
        ...

    def handle_event(self, event: Gdk.Event) -> bool:
        """
        This function should be called when the top-level window
        which contains the search entry received a key event. If
        the entry is part of a #GtkSearchBar, it is preferable
        to call gtk_search_bar_handle_event() instead, which will
        reveal the entry in addition to passing the event to this
        function.

        If the key event is handled by the search entry and starts
        or continues a search, %GDK_EVENT_STOP will be returned.
        The caller should ensure that the entry is shown in this
        case, and not propagate the event further.
        """
        ...


    ...

class Separator(Widget, Atk.ImplementorIface, Buildable, Orientable):
    """
    GtkSeparator is a horizontal or vertical separator widget, depending on the
    value of the #GtkOrientable:orientation property, used to group the widgets
    within a window. It displays a line with a shadow to make it appear sunken
    into the interface.

    # CSS nodes

    GtkSeparator has a single CSS node with name separator. The node
    gets one of the .horizontal or .vertical style classes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, orientation: Orientation) -> Widget:
        """
        Creates a new #GtkSeparator with the given orientation.
        """
        ...


    ...

class SeparatorMenuItem(MenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    The #GtkSeparatorMenuItem is a separator used to group
    items within a menu. It displays a horizontal line with a shadow to
    make it appear sunken into the interface.

    # CSS nodes

    GtkSeparatorMenuItem has a single CSS node with name separator.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkSeparatorMenuItem.
        """
        ...


    ...

class SeparatorToolItem(ToolItem, Atk.ImplementorIface, Activatable, Buildable):
    """
    A #GtkSeparatorToolItem is a #GtkToolItem that separates groups of other
    #GtkToolItems. Depending on the theme, a #GtkSeparatorToolItem will
    often look like a vertical line on horizontally docked toolbars.

    If the #GtkToolbar child property “expand” is %TRUE and the property
    #GtkSeparatorToolItem:draw is %FALSE, a #GtkSeparatorToolItem will act as
    a “spring” that forces other items to the ends of the toolbar.

    Use gtk_separator_tool_item_new() to create a new #GtkSeparatorToolItem.

    # CSS nodes

    GtkSeparatorToolItem has a single CSS node with name separator.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> ToolItem:
        """
        Create a new #GtkSeparatorToolItem
        """
        ...

    def get_draw(self) -> bool:
        """
        Returns whether @item is drawn as a line, or just blank.
        See gtk_separator_tool_item_set_draw().
        """
        ...

    def set_draw(self, draw: bool) -> object:
        """
        Whether @item is drawn as a vertical line, or just blank.
        Setting this to %FALSE along with gtk_tool_item_set_expand() is useful
        to create an item that forces following items to the end of the toolbar.
        """
        ...


    ...

class Settings(GObject.Object, StyleProvider):
    """
    GtkSettings provide a mechanism to share global settings between
    applications.

    On the X window system, this sharing is realized by an
    [XSettings](http://www.freedesktop.org/wiki/Specifications/xsettings-spec)
    manager that is usually part of the desktop environment, along with
    utilities that let the user change these settings. In the absence of
    an Xsettings manager, GTK+ reads default values for settings from
    `settings.ini` files in
    `/etc/gtk-3.0`, `$XDG_CONFIG_DIRS/gtk-3.0`
    and `$XDG_CONFIG_HOME/gtk-3.0`.
    These files must be valid key files (see #GKeyFile), and have
    a section called Settings. Themes can also provide default values
    for settings by installing a `settings.ini` file
    next to their `gtk.css` file.

    Applications can override system-wide settings by setting the property
    of the GtkSettings object with g_object_set(). This should be restricted
    to special cases though; GtkSettings are not meant as an application
    configuration facility. When doing so, you need to be aware that settings
    that are specific to individual widgets may not be available before the
    widget type has been realized at least once. The following example
    demonstrates a way to do this:
    |[<!-- language="C" -->
      gtk_init (&argc, &argv);

      // make sure the type is realized
      g_type_class_unref (g_type_class_ref (GTK_TYPE_IMAGE_MENU_ITEM));

      g_object_set (gtk_settings_get_default (), "gtk-enable-animations", FALSE, NULL);
    ]|

    There is one GtkSettings instance per screen. It can be obtained with
    gtk_settings_get_for_screen(), but in many cases, it is more convenient
    to use gtk_widget_get_settings(). gtk_settings_get_default() returns the
    GtkSettings instance for the default screen.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def reset_property(self, name: str) -> object:
        """
        Undoes the effect of calling g_object_set() to install an
        application-specific value for a setting. After this call,
        the setting will again follow the session-wide value for
        this setting.
        """
        ...

    def set_double_property(self, name: str, v_double: float, origin: str) -> object:
        ...

    def set_long_property(self, name: str, v_long: int, origin: str) -> object:
        ...

    def set_property_value(self, name: str, svalue: SettingsValue) -> object:
        ...

    def set_string_property(self, name: str, v_string: str, origin: str) -> object:
        ...


    ...

class ShortcutLabel(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    #GtkShortcutLabel is a widget that represents a single keyboard shortcut or gesture
    in the user interface.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, accelerator: str) -> Widget:
        """
        Creates a new #GtkShortcutLabel with @accelerator set.
        """
        ...

    def get_accelerator(self) -> str:
        """
        Retrieves the current accelerator of @self.
        """
        ...

    def get_disabled_text(self) -> str:
        """
        Retrieves the text that is displayed when no accelerator is set.
        """
        ...

    def set_accelerator(self, accelerator: str) -> object:
        """
        Sets the accelerator to be displayed by @self.
        """
        ...

    def set_disabled_text(self, disabled_text: str) -> object:
        """
        Sets the text to be displayed by @self when no accelerator is set.
        """
        ...


    ...

class ShortcutsGroup(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    A GtkShortcutsGroup represents a group of related keyboard shortcuts
    or gestures. The group has a title. It may optionally be associated with
    a view of the application, which can be used to show only relevant shortcuts
    depending on the application context.

    This widget is only meant to be used with #GtkShortcutsWindow.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ShortcutsSection(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    A GtkShortcutsSection collects all the keyboard shortcuts and gestures
    for a major application mode. If your application needs multiple sections,
    you should give each section a unique #GtkShortcutsSection:section-name and
    a #GtkShortcutsSection:title that can be shown in the section selector of
    the GtkShortcutsWindow.

    The #GtkShortcutsSection:max-height property can be used to influence how
    the groups in the section are distributed over pages and columns.

    This widget is only meant to be used with #GtkShortcutsWindow.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ShortcutsShortcut(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    A GtkShortcutsShortcut represents a single keyboard shortcut or gesture
    with a short text. This widget is only meant to be used with #GtkShortcutsWindow.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ShortcutsWindow(Window, Atk.ImplementorIface, Buildable):
    """
    A GtkShortcutsWindow shows brief information about the keyboard shortcuts
    and gestures of an application. The shortcuts can be grouped, and you can
    have multiple sections in this window, corresponding to the major modes of
    your application.

    Additionally, the shortcuts can be filtered by the current view, to avoid
    showing information that is not relevant in the current application context.

    The recommended way to construct a GtkShortcutsWindow is with GtkBuilder,
    by populating a #GtkShortcutsWindow with one or more #GtkShortcutsSection
    objects, which contain #GtkShortcutsGroups that in turn contain objects of
    class #GtkShortcutsShortcut.

    # A simple example:

    ![](gedit-shortcuts.png)

    This example has as single section. As you can see, the shortcut groups
    are arranged in columns, and spread across several pages if there are too
    many to find on a single page.

    The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-gedit.ui).

    # An example with multiple views:

    ![](clocks-shortcuts.png)

    This example shows a #GtkShortcutsWindow that has been configured to show only
    the shortcuts relevant to the "stopwatch" view.

    The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-clocks.ui).

    # An example with multiple sections:

    ![](builder-shortcuts.png)

    This example shows a #GtkShortcutsWindow with two sections, "Editor Shortcuts"
    and "Terminal Shortcuts".

    The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-builder.ui).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class SizeGroup(GObject.Object, Buildable):
    """
    #GtkSizeGroup provides a mechanism for grouping a number of widgets
    together so they all request the same amount of space.  This is
    typically useful when you want a column of widgets to have the same
    size, but you can’t use a #GtkGrid widget.

    In detail, the size requested for each widget in a #GtkSizeGroup is
    the maximum of the sizes that would have been requested for each
    widget in the size group if they were not in the size group. The mode
    of the size group (see gtk_size_group_set_mode()) determines whether
    this applies to the horizontal size, the vertical size, or both sizes.

    Note that size groups only affect the amount of space requested, not
    the size that the widgets finally receive. If you want the widgets in
    a #GtkSizeGroup to actually be the same size, you need to pack them in
    such a way that they get the size they request and not more. For
    example, if you are packing your widgets into a table, you would not
    include the %GTK_FILL flag.

    #GtkSizeGroup objects are referenced by each widget in the size group,
    so once you have added all widgets to a #GtkSizeGroup, you can drop
    the initial reference to the size group with g_object_unref(). If the
    widgets in the size group are subsequently destroyed, then they will
    be removed from the size group and drop their references on the size
    group; when all widgets have been removed, the size group will be
    freed.

    Widgets can be part of multiple size groups; GTK+ will compute the
    horizontal size of a widget from the horizontal requisition of all
    widgets that can be reached from the widget by a chain of size groups
    of type %GTK_SIZE_GROUP_HORIZONTAL or %GTK_SIZE_GROUP_BOTH, and the
    vertical size from the vertical requisition of all widgets that can be
    reached from the widget by a chain of size groups of type
    %GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH.

    Note that only non-contextual sizes of every widget are ever consulted
    by size groups (since size groups have no knowledge of what size a widget
    will be allocated in one dimension, it cannot derive how much height
    a widget will receive for a given width). When grouping widgets that
    trade height for width in mode %GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH:
    the height for the minimum width will be the requested height for all
    widgets in the group. The same is of course true when horizontally grouping
    width for height widgets.

    Widgets that trade height-for-width should set a reasonably large minimum width
    by way of #GtkLabel:width-chars for instance. Widgets with static sizes as well
    as widgets that grow (such as ellipsizing text) need no such considerations.

    # GtkSizeGroup as GtkBuildable

    Size groups can be specified in a UI definition by placing an `<object>`
    element with `class="GtkSizeGroup"` somewhere in the UI definition. The
    widgets that belong to the size group are specified by a `<widgets>` element
    that may contain multiple `<widget>` elements, one for each member of the
    size group. The ”name” attribute gives the id of the widget.

    An example of a UI definition fragment with GtkSizeGroup:

    |[<!-- language="xml" -->
    <object class="GtkSizeGroup">
      <property name="mode">GTK_SIZE_GROUP_HORIZONTAL</property>
      <widgets>
        <widget name="radio1"/>
        <widget name="radio2"/>
      </widgets>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, mode: SizeGroupMode) -> SizeGroup:
        """
        Create a new #GtkSizeGroup.
        """
        ...

    def add_widget(self, widget: Widget) -> object:
        """
        Adds a widget to a #GtkSizeGroup. In the future, the requisition
        of the widget will be determined as the maximum of its requisition
        and the requisition of the other widgets in the size group.
        Whether this applies horizontally, vertically, or in both directions
        depends on the mode of the size group. See gtk_size_group_set_mode().

        When the widget is destroyed or no longer referenced elsewhere, it will
        be removed from the size group.
        """
        ...

    def get_ignore_hidden(self) -> bool:
        """
        Returns if invisible widgets are ignored when calculating the size.
        """
        ...

    def get_mode(self) -> SizeGroupMode:
        """
        Gets the current mode of the size group. See gtk_size_group_set_mode().
        """
        ...

    def get_widgets(self) -> GLib.SList:
        """
        Returns the list of widgets associated with @size_group.
        """
        ...

    def remove_widget(self, widget: Widget) -> object:
        """
        Removes a widget from a #GtkSizeGroup.
        """
        ...

    def set_ignore_hidden(self, ignore_hidden: bool) -> object:
        """
        Sets whether unmapped widgets should be ignored when
        calculating the size.
        """
        ...

    def set_mode(self, mode: SizeGroupMode) -> object:
        """
        Sets the #GtkSizeGroupMode of the size group. The mode of the size
        group determines whether the widgets in the size group should
        all have the same horizontal requisition (%GTK_SIZE_GROUP_HORIZONTAL)
        all have the same vertical requisition (%GTK_SIZE_GROUP_VERTICAL),
        or should all have the same requisition in both directions
        (%GTK_SIZE_GROUP_BOTH).
        """
        ...


    ...

class Socket(Container, Atk.ImplementorIface, Buildable):
    """
    Together with #GtkPlug, #GtkSocket provides the ability to embed
    widgets from one process into another process in a fashion that
    is transparent to the user. One process creates a #GtkSocket widget
    and passes that widget’s window ID to the other process, which then
    creates a #GtkPlug with that window ID. Any widgets contained in the
    #GtkPlug then will appear inside the first application’s window.

    The socket’s window ID is obtained by using gtk_socket_get_id().
    Before using this function, the socket must have been realized,
    and for hence, have been added to its parent.

    ## Obtaining the window ID of a socket.

    |[<!-- language="C" -->
    GtkWidget *socket = gtk_socket_new ();
    gtk_widget_show (socket);
    gtk_container_add (GTK_CONTAINER (parent), socket);

    // The following call is only necessary if one of
    // the ancestors of the socket is not yet visible.
    gtk_widget_realize (socket);
    g_print ("The ID of the sockets window is %#x\n",
             gtk_socket_get_id (socket));
    ]|

    Note that if you pass the window ID of the socket to another
    process that will create a plug in the socket, you must make
    sure that the socket widget is not destroyed until that plug
    is created. Violating this rule will cause unpredictable
    consequences, the most likely consequence being that the plug
    will appear as a separate toplevel window. You can check if
    the plug has been created by using gtk_socket_get_plug_window().
    If it returns a non-%NULL value, then the plug has been
    successfully created inside of the socket.

    When GTK+ is notified that the embedded window has been destroyed,
    then it will destroy the socket as well. You should always,
    therefore, be prepared for your sockets to be destroyed at any
    time when the main event loop is running. To prevent this from
    happening, you can connect to the #GtkSocket::plug-removed signal.

    The communication between a #GtkSocket and a #GtkPlug follows the
    [XEmbed Protocol](http://www.freedesktop.org/Standards/xembed-spec).
    This protocol has also been implemented in other toolkits, e.g. Qt,
    allowing the same level of integration when embedding a Qt widget
    in GTK or vice versa.

    The #GtkPlug and #GtkSocket widgets are only available when GTK+
    is compiled for the X11 platform and %GDK_WINDOWING_X11 is defined.
    They can only be used on a #GdkX11Display. To use #GtkPlug and
    #GtkSocket, you need to include the `gtk/gtkx.h` header.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Create a new empty #GtkSocket.
        """
        ...

    def add_id(self, window: xlib.Window) -> object:
        """
        Adds an XEMBED client, such as a #GtkPlug, to the #GtkSocket.  The
        client may be in the same process or in a different process.

        To embed a #GtkPlug in a #GtkSocket, you can either create the
        #GtkPlug with `gtk_plug_new (0)`, call
        gtk_plug_get_id() to get the window ID of the plug, and then pass that to the
        gtk_socket_add_id(), or you can call gtk_socket_get_id() to get the
        window ID for the socket, and call gtk_plug_new() passing in that
        ID.

        The #GtkSocket must have already be added into a toplevel window
         before you can make this call.
        """
        ...

    def get_id(self) -> xlib.Window:
        """
        Gets the window ID of a #GtkSocket widget, which can then
        be used to create a client embedded inside the socket, for
        instance with gtk_plug_new().

        The #GtkSocket must have already be added into a toplevel window
        before you can make this call.
        """
        ...

    def get_plug_window(self) -> Gdk.Window:
        """
        Retrieves the window of the plug. Use this to check if the plug has
        been created inside of the socket.
        """
        ...


    ...

class SocketAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def embed(self, path: str) -> object:
        ...


    ...

class SpinButton(Entry, Atk.ImplementorIface, Buildable, CellEditable, Editable, Orientable):
    """
    A #GtkSpinButton is an ideal way to allow the user to set the value of
    some attribute. Rather than having to directly type a number into a
    #GtkEntry, GtkSpinButton allows the user to click on one of two arrows
    to increment or decrement the displayed value. A value can still be
    typed in, with the bonus that it can be checked to ensure it is in a
    given range.

    The main properties of a GtkSpinButton are through an adjustment.
    See the #GtkAdjustment section for more details about an adjustment's
    properties. Note that GtkSpinButton will by default make its entry
    large enough to accomodate the lower and upper bounds of the adjustment,
    which can lead to surprising results. Best practice is to set both
    the #GtkEntry:width-chars and #GtkEntry:max-width-chars poperties
    to the desired number of characters to display in the entry.

    # CSS nodes

    |[<!-- language="plain" -->
    spinbutton.horizontal
    ├── undershoot.left
    ├── undershoot.right
    ├── entry
    │   ╰── ...
    ├── button.down
    ╰── button.up
    ]|

    |[<!-- language="plain" -->
    spinbutton.vertical
    ├── undershoot.left
    ├── undershoot.right
    ├── button.up
    ├── entry
    │   ╰── ...
    ╰── button.down
    ]|

    GtkSpinButtons main CSS node has the name spinbutton. It creates subnodes
    for the entry and the two buttons, with these names. The button nodes have
    the style classes .up and .down. The GtkEntry subnodes (if present) are put
    below the entry node. The orientation of the spin button is reflected in
    the .vertical or .horizontal style class on the main node.

    ## Using a GtkSpinButton to get an integer

    |[<!-- language="C" -->
    // Provides a function to retrieve an integer value from a GtkSpinButton
    // and creates a spin button to model percentage values.

    gint
    grab_int_value (GtkSpinButton *button,
                    gpointer       user_data)
    {
      return gtk_spin_button_get_value_as_int (button);
    }

    void
    create_integer_spin_button (void)
    {

      GtkWidget *window, *button;
      GtkAdjustment *adjustment;

      adjustment = gtk_adjustment_new (50.0, 0.0, 100.0, 1.0, 5.0, 0.0);

      window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
      gtk_container_set_border_width (GTK_CONTAINER (window), 5);

      // creates the spinbutton, with no decimal places
      button = gtk_spin_button_new (adjustment, 1.0, 0);
      gtk_container_add (GTK_CONTAINER (window), button);

      gtk_widget_show_all (window);
    }
    ]|

    ## Using a GtkSpinButton to get a floating point value

    |[<!-- language="C" -->
    // Provides a function to retrieve a floating point value from a
    // GtkSpinButton, and creates a high precision spin button.

    gfloat
    grab_float_value (GtkSpinButton *button,
                      gpointer       user_data)
    {
      return gtk_spin_button_get_value (button);
    }

    void
    create_floating_spin_button (void)
    {
      GtkWidget *window, *button;
      GtkAdjustment *adjustment;

      adjustment = gtk_adjustment_new (2.500, 0.0, 5.0, 0.001, 0.1, 0.0);

      window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
      gtk_container_set_border_width (GTK_CONTAINER (window), 5);

      // creates the spinbutton, with three decimal places
      button = gtk_spin_button_new (adjustment, 0.001, 3);
      gtk_container_add (GTK_CONTAINER (window), button);

      gtk_widget_show_all (window);
    }
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, adjustment: _T.Optional[Adjustment], climb_rate: float, digits: int) -> Widget:
        """
        Creates a new #GtkSpinButton.
        """
        ...


    @classmethod
    def new_with_range(cls, min: float, max: float, step: float) -> Widget:
        """
        This is a convenience constructor that allows creation of a numeric
        #GtkSpinButton without manually creating an adjustment. The value is
        initially set to the minimum value and a page increment of 10 * @step
        is the default. The precision of the spin button is equivalent to the
        precision of @step.

        Note that the way in which the precision is derived works best if @step
        is a power of ten. If the resulting precision is not suitable for your
        needs, use gtk_spin_button_set_digits() to correct it.
        """
        ...

    def configure(self, adjustment: _T.Optional[Adjustment], climb_rate: float, digits: int) -> object:
        """
        Changes the properties of an existing spin button. The adjustment,
        climb rate, and number of decimal places are updated accordingly.
        """
        ...

    def get_adjustment(self) -> Adjustment:
        """
        Get the adjustment associated with a #GtkSpinButton
        """
        ...

    def get_digits(self) -> int:
        """
        Fetches the precision of @spin_button. See gtk_spin_button_set_digits().
        """
        ...

    def get_increments(self, step: float, page: float) -> object:
        """
        Gets the current step and page the increments used by @spin_button. See
        gtk_spin_button_set_increments().
        """
        ...

    def get_numeric(self) -> bool:
        """
        Returns whether non-numeric text can be typed into the spin button.
        See gtk_spin_button_set_numeric().
        """
        ...

    def get_range(self, min: float, max: float) -> object:
        """
        Gets the range allowed for @spin_button.
        See gtk_spin_button_set_range().
        """
        ...

    def get_snap_to_ticks(self) -> bool:
        """
        Returns whether the values are corrected to the nearest step.
        See gtk_spin_button_set_snap_to_ticks().
        """
        ...

    def get_update_policy(self) -> SpinButtonUpdatePolicy:
        """
        Gets the update behavior of a spin button.
        See gtk_spin_button_set_update_policy().
        """
        ...

    def get_value(self) -> float:
        """
        Get the value in the @spin_button.
        """
        ...

    def get_value_as_int(self) -> int:
        """
        Get the value @spin_button represented as an integer.
        """
        ...

    def get_wrap(self) -> bool:
        """
        Returns whether the spin button’s value wraps around to the
        opposite limit when the upper or lower limit of the range is
        exceeded. See gtk_spin_button_set_wrap().
        """
        ...

    def set_adjustment(self, adjustment: Adjustment) -> object:
        """
        Replaces the #GtkAdjustment associated with @spin_button.
        """
        ...

    def set_digits(self, digits: int) -> object:
        """
        Set the precision to be displayed by @spin_button. Up to 20 digit precision
        is allowed.
        """
        ...

    def set_increments(self, step: float, page: float) -> object:
        """
        Sets the step and page increments for spin_button.  This affects how
        quickly the value changes when the spin button’s arrows are activated.
        """
        ...

    def set_numeric(self, numeric: bool) -> object:
        """
        Sets the flag that determines if non-numeric text can be typed
        into the spin button.
        """
        ...

    def set_range(self, min: float, max: float) -> object:
        """
        Sets the minimum and maximum allowable values for @spin_button.

        If the current value is outside this range, it will be adjusted
        to fit within the range, otherwise it will remain unchanged.
        """
        ...

    def set_snap_to_ticks(self, snap_to_ticks: bool) -> object:
        """
        Sets the policy as to whether values are corrected to the
        nearest step increment when a spin button is activated after
        providing an invalid value.
        """
        ...

    def set_update_policy(self, policy: SpinButtonUpdatePolicy) -> object:
        """
        Sets the update behavior of a spin button.
        This determines whether the spin button is always updated
        or only when a valid value is set.
        """
        ...

    def set_value(self, value: float) -> object:
        """
        Sets the value of @spin_button.
        """
        ...

    def set_wrap(self, wrap: bool) -> object:
        """
        Sets the flag that determines if a spin button value wraps
        around to the opposite limit when the upper or lower limit
        of the range is exceeded.
        """
        ...

    def spin(self, direction: SpinType, increment: float) -> object:
        """
        Increment or decrement a spin button’s value in a specified
        direction by a specified amount.
        """
        ...

    def update(self) -> object:
        """
        Manually force an update of the spin button.
        """
        ...


    ...

class SpinButtonAccessible(EntryAccessible, Atk.Action, Atk.Component, Atk.EditableText, Atk.Text, Atk.Value):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Spinner(Widget, Atk.ImplementorIface, Buildable):
    """
    A GtkSpinner widget displays an icon-size spinning animation.
    It is often used as an alternative to a #GtkProgressBar for
    displaying indefinite activity, instead of actual progress.

    To start the animation, use gtk_spinner_start(), to stop it
    use gtk_spinner_stop().

    # CSS nodes

    GtkSpinner has a single CSS node with the name spinner. When the animation is
    active, the :checked pseudoclass is added to this node.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Returns a new spinner widget. Not yet started.
        """
        ...

    def start(self) -> object:
        """
        Starts the animation of the spinner.
        """
        ...

    def stop(self) -> object:
        """
        Stops the animation of the spinner.
        """
        ...


    ...

class SpinnerAccessible(WidgetAccessible, Atk.Component, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Stack(Container, Atk.ImplementorIface, Buildable):
    """
    The GtkStack widget is a container which only shows
    one of its children at a time. In contrast to GtkNotebook,
    GtkStack does not provide a means for users to change the
    visible child. Instead, the #GtkStackSwitcher widget can be
    used with GtkStack to provide this functionality.

    Transitions between pages can be animated as slides or
    fades. This can be controlled with gtk_stack_set_transition_type().
    These animations respect the #GtkSettings:gtk-enable-animations
    setting.

    The GtkStack widget was added in GTK+ 3.10.

    # CSS nodes

    GtkStack has a single CSS node named stack.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkStack container.
        """
        ...

    def add_named(self, child: Widget, name: str) -> object:
        """
        Adds a child to @stack.
        The child is identified by the @name.
        """
        ...

    def add_titled(self, child: Widget, name: str, title: str) -> object:
        """
        Adds a child to @stack.
        The child is identified by the @name. The @title
        will be used by #GtkStackSwitcher to represent
        @child in a tab bar, so it should be short.
        """
        ...

    def get_child_by_name(self, name: str) -> Widget:
        """
        Finds the child of the #GtkStack with the name given as
        the argument. Returns %NULL if there is no child with this
        name.
        """
        ...

    def get_hhomogeneous(self) -> bool:
        """
        Gets whether @stack is horizontally homogeneous.
        See gtk_stack_set_hhomogeneous().
        """
        ...

    def get_homogeneous(self) -> bool:
        """
        Gets whether @stack is homogeneous.
        See gtk_stack_set_homogeneous().
        """
        ...

    def get_interpolate_size(self) -> bool:
        """
        Returns wether the #GtkStack is set up to interpolate between
        the sizes of children on page switch.
        """
        ...

    def get_transition_duration(self) -> int:
        """
        Returns the amount of time (in milliseconds) that
        transitions between pages in @stack will take.
        """
        ...

    def get_transition_running(self) -> bool:
        """
        Returns whether the @stack is currently in a transition from one page to
        another.
        """
        ...

    def get_transition_type(self) -> StackTransitionType:
        """
        Gets the type of animation that will be used
        for transitions between pages in @stack.
        """
        ...

    def get_vhomogeneous(self) -> bool:
        """
        Gets whether @stack is vertically homogeneous.
        See gtk_stack_set_vhomogeneous().
        """
        ...

    def get_visible_child(self) -> Widget:
        """
        Gets the currently visible child of @stack, or %NULL if
        there are no visible children.
        """
        ...

    def get_visible_child_name(self) -> str:
        """
        Returns the name of the currently visible child of @stack, or
        %NULL if there is no visible child.
        """
        ...

    def set_hhomogeneous(self, hhomogeneous: bool) -> object:
        """
        Sets the #GtkStack to be horizontally homogeneous or not.
        If it is homogeneous, the #GtkStack will request the same
        width for all its children. If it isn't, the stack
        may change width when a different child becomes visible.
        """
        ...

    def set_homogeneous(self, homogeneous: bool) -> object:
        """
        Sets the #GtkStack to be homogeneous or not. If it
        is homogeneous, the #GtkStack will request the same
        size for all its children. If it isn't, the stack
        may change size when a different child becomes visible.

        Since 3.16, homogeneity can be controlled separately
        for horizontal and vertical size, with the
        #GtkStack:hhomogeneous and #GtkStack:vhomogeneous.
        """
        ...

    def set_interpolate_size(self, interpolate_size: bool) -> object:
        """
        Sets whether or not @stack will interpolate its size when
        changing the visible child. If the #GtkStack:interpolate-size
        property is set to %TRUE, @stack will interpolate its size between
        the current one and the one it'll take after changing the
        visible child, according to the set transition duration.
        """
        ...

    def set_transition_duration(self, duration: int) -> object:
        """
        Sets the duration that transitions between pages in @stack
        will take.
        """
        ...

    def set_transition_type(self, transition: StackTransitionType) -> object:
        """
        Sets the type of animation that will be used for
        transitions between pages in @stack. Available
        types include various kinds of fades and slides.

        The transition type can be changed without problems
        at runtime, so it is possible to change the animation
        based on the page that is about to become current.
        """
        ...

    def set_vhomogeneous(self, vhomogeneous: bool) -> object:
        """
        Sets the #GtkStack to be vertically homogeneous or not.
        If it is homogeneous, the #GtkStack will request the same
        height for all its children. If it isn't, the stack
        may change height when a different child becomes visible.
        """
        ...

    def set_visible_child(self, child: Widget) -> object:
        """
        Makes @child the visible child of @stack.

        If @child is different from the currently
        visible child, the transition between the
        two will be animated with the current
        transition type of @stack.

        Note that the @child widget has to be visible itself
        (see gtk_widget_show()) in order to become the visible
        child of @stack.
        """
        ...

    def set_visible_child_full(self, name: str, transition: StackTransitionType) -> object:
        """
        Makes the child with the given name visible.

        Note that the child widget has to be visible itself
        (see gtk_widget_show()) in order to become the visible
        child of @stack.
        """
        ...

    def set_visible_child_name(self, name: str) -> object:
        """
        Makes the child with the given name visible.

        If @child is different from the currently
        visible child, the transition between the
        two will be animated with the current
        transition type of @stack.

        Note that the child widget has to be visible itself
        (see gtk_widget_show()) in order to become the visible
        child of @stack.
        """
        ...


    ...

class StackAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class StackSidebar(Bin, Atk.ImplementorIface, Buildable):
    """
    A GtkStackSidebar enables you to quickly and easily provide a
    consistent "sidebar" object for your user interface.

    In order to use a GtkStackSidebar, you simply use a GtkStack to
    organize your UI flow, and add the sidebar to your sidebar area. You
    can use gtk_stack_sidebar_set_stack() to connect the #GtkStackSidebar
    to the #GtkStack.

    # CSS nodes

    GtkStackSidebar has a single CSS node with name stacksidebar and
    style class .sidebar.

    When circumstances require it, GtkStackSidebar adds the
    .needs-attention style class to the widgets representing the stack
    pages.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new sidebar.
        """
        ...

    def get_stack(self) -> Stack:
        """
        Retrieves the stack.
        See gtk_stack_sidebar_set_stack().
        """
        ...

    def set_stack(self, stack: Stack) -> object:
        """
        Set the #GtkStack associated with this #GtkStackSidebar.

        The sidebar widget will automatically update according to the order
        (packing) and items within the given #GtkStack.
        """
        ...


    ...

class StackSwitcher(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    The GtkStackSwitcher widget acts as a controller for a
    #GtkStack; it shows a row of buttons to switch between
    the various pages of the associated stack widget.

    All the content for the buttons comes from the child properties
    of the #GtkStack; the button visibility in a #GtkStackSwitcher
    widget is controlled by the visibility of the child in the
    #GtkStack.

    It is possible to associate multiple #GtkStackSwitcher widgets
    with the same #GtkStack widget.

    The GtkStackSwitcher widget was added in 3.10.

    # CSS nodes

    GtkStackSwitcher has a single CSS node named stackswitcher and
    style class .stack-switcher.

    When circumstances require it, GtkStackSwitcher adds the
    .needs-attention style class to the widgets representing the
    stack pages.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Create a new #GtkStackSwitcher.
        """
        ...

    def get_stack(self) -> Stack:
        """
        Retrieves the stack.
        See gtk_stack_switcher_set_stack().
        """
        ...

    def set_stack(self, stack: _T.Optional[Stack]) -> object:
        """
        Sets the stack to control.
        """
        ...


    ...

class StatusIcon(GObject.Object):
    """
    The “system tray” or notification area is normally used for transient icons
    that indicate some special state. For example, a system tray icon might
    appear to tell the user that they have new mail, or have an incoming instant
    message, or something along those lines. The basic idea is that creating an
    icon in the notification area is less annoying than popping up a dialog.

    A #GtkStatusIcon object can be used to display an icon in a “system tray”.
    The icon can have a tooltip, and the user can interact with it by
    activating it or popping up a context menu.

    It is very important to notice that status icons depend on the existence
    of a notification area being available to the user; you should not use status
    icons as the only way to convey critical information regarding your application,
    as the notification area may not exist on the user's environment, or may have
    been removed. You should always check that a status icon has been embedded into
    a notification area by using gtk_status_icon_is_embedded(), and gracefully
    recover if the function returns %FALSE.

    On X11, the implementation follows the
    [FreeDesktop System Tray Specification](http://www.freedesktop.org/wiki/Specifications/systemtray-spec).
    Implementations of the “tray” side of this specification can
    be found e.g. in the GNOME 2 and KDE panel applications.

    Note that a GtkStatusIcon is not a widget, but just a #GObject. Making it a
    widget would be impractical, since the system tray on Windows doesn’t allow
    to embed arbitrary widgets.

    GtkStatusIcon has been deprecated in 3.14. You should consider using
    notifications or more modern platform-specific APIs instead. GLib provides
    the #GNotification API which works well with #GtkApplication on multiple
    platforms and environments, and should be the preferred mechanism to notify
    the users of transient status updates. See this [HowDoI](https://wiki.gnome.org/HowDoI/GNotification)
    for code examples.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> StatusIcon:
        """
        Creates an empty status icon object.
        """
        ...


    @classmethod
    def new_from_file(cls, filename: str) -> StatusIcon:
        """
        Creates a status icon displaying the file @filename.

        The image will be scaled down to fit in the available
        space in the notification area, if necessary.
        """
        ...


    @classmethod
    def new_from_gicon(cls, icon: Gio.Icon) -> StatusIcon:
        """
        Creates a status icon displaying a #GIcon. If the icon is a
        themed icon, it will be updated when the theme changes.
        """
        ...


    @classmethod
    def new_from_icon_name(cls, icon_name: str) -> StatusIcon:
        """
        Creates a status icon displaying an icon from the current icon theme.
        If the current icon theme is changed, the icon will be updated
        appropriately.
        """
        ...


    @classmethod
    def new_from_pixbuf(cls, pixbuf: GdkPixbuf.Pixbuf) -> StatusIcon:
        """
        Creates a status icon displaying @pixbuf.

        The image will be scaled down to fit in the available
        space in the notification area, if necessary.
        """
        ...


    @classmethod
    def new_from_stock(cls, stock_id: str) -> StatusIcon:
        """
        Creates a status icon displaying a stock icon. Sample stock icon
        names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. You can register your
        own stock icon names, see gtk_icon_factory_add_default() and
        gtk_icon_factory_add().
        """
        ...

    def get_geometry(self, screen: Gdk.Screen, area: Gdk.Rectangle, orientation: Orientation) -> bool:
        """
        Obtains information about the location of the status icon
        on screen. This information can be used to e.g. position
        popups like notification bubbles.

        See gtk_status_icon_position_menu() for a more convenient
        alternative for positioning menus.

        Note that some platforms do not allow GTK+ to provide
        this information, and even on platforms that do allow it,
        the information is not reliable unless the status icon
        is embedded in a notification area, see
        gtk_status_icon_is_embedded().
        """
        ...

    def get_gicon(self) -> Gio.Icon:
        """
        Retrieves the #GIcon being displayed by the #GtkStatusIcon.
        The storage type of the status icon must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_GICON (see gtk_status_icon_get_storage_type()).
        The caller of this function does not own a reference to the
        returned #GIcon.

        If this function fails, @icon is left unchanged;
        """
        ...

    def get_has_tooltip(self) -> bool:
        """
        Returns the current value of the has-tooltip property.
        See #GtkStatusIcon:has-tooltip for more information.
        """
        ...

    def get_icon_name(self) -> str:
        """
        Gets the name of the icon being displayed by the #GtkStatusIcon.
        The storage type of the status icon must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_ICON_NAME (see gtk_status_icon_get_storage_type()).
        The returned string is owned by the #GtkStatusIcon and should not
        be freed or modified.
        """
        ...

    def get_pixbuf(self) -> GdkPixbuf.Pixbuf:
        """
        Gets the #GdkPixbuf being displayed by the #GtkStatusIcon.
        The storage type of the status icon must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_PIXBUF (see gtk_status_icon_get_storage_type()).
        The caller of this function does not own a reference to the
        returned pixbuf.
        """
        ...

    def get_screen(self) -> Gdk.Screen:
        """
        Returns the #GdkScreen associated with @status_icon.
        """
        ...

    def get_size(self) -> int:
        """
        Gets the size in pixels that is available for the image.
        Stock icons and named icons adapt their size automatically
        if the size of the notification area changes. For other
        storage types, the size-changed signal can be used to
        react to size changes.

        Note that the returned size is only meaningful while the
        status icon is embedded (see gtk_status_icon_is_embedded()).
        """
        ...

    def get_stock(self) -> str:
        """
        Gets the id of the stock icon being displayed by the #GtkStatusIcon.
        The storage type of the status icon must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_STOCK (see gtk_status_icon_get_storage_type()).
        The returned string is owned by the #GtkStatusIcon and should not
        be freed or modified.
        """
        ...

    def get_storage_type(self) -> ImageType:
        """
        Gets the type of representation being used by the #GtkStatusIcon
        to store image data. If the #GtkStatusIcon has no image data,
        the return value will be %GTK_IMAGE_EMPTY.
        """
        ...

    def get_title(self) -> str:
        """
        Gets the title of this tray icon. See gtk_status_icon_set_title().
        """
        ...

    def get_tooltip_markup(self) -> str:
        """
        Gets the contents of the tooltip for @status_icon.
        """
        ...

    def get_tooltip_text(self) -> str:
        """
        Gets the contents of the tooltip for @status_icon.
        """
        ...

    def get_visible(self) -> bool:
        """
        Returns whether the status icon is visible or not.
        Note that being visible does not guarantee that
        the user can actually see the icon, see also
        gtk_status_icon_is_embedded().
        """
        ...

    def get_x11_window_id(self) -> int:
        """
        This function is only useful on the X11/freedesktop.org platform.

        It returns a window ID for the widget in the underlying
        status icon implementation.  This is useful for the Galago
        notification service, which can send a window ID in the protocol
        in order for the server to position notification windows
        pointing to a status icon reliably.

        This function is not intended for other use cases which are
        more likely to be met by one of the non-X11 specific methods, such
        as gtk_status_icon_position_menu().
        """
        ...

    def is_embedded(self) -> bool:
        """
        Returns whether the status icon is embedded in a notification
        area.
        """
        ...

    def set_from_file(self, filename: str) -> object:
        """
        Makes @status_icon display the file @filename.
        See gtk_status_icon_new_from_file() for details.
        """
        ...

    def set_from_gicon(self, icon: Gio.Icon) -> object:
        """
        Makes @status_icon display the #GIcon.
        See gtk_status_icon_new_from_gicon() for details.
        """
        ...

    def set_from_icon_name(self, icon_name: str) -> object:
        """
        Makes @status_icon display the icon named @icon_name from the
        current icon theme.
        See gtk_status_icon_new_from_icon_name() for details.
        """
        ...

    def set_from_pixbuf(self, pixbuf: _T.Optional[GdkPixbuf.Pixbuf]) -> object:
        """
        Makes @status_icon display @pixbuf.
        See gtk_status_icon_new_from_pixbuf() for details.
        """
        ...

    def set_from_stock(self, stock_id: str) -> object:
        """
        Makes @status_icon display the stock icon with the id @stock_id.
        See gtk_status_icon_new_from_stock() for details.
        """
        ...

    def set_has_tooltip(self, has_tooltip: bool) -> object:
        """
        Sets the has-tooltip property on @status_icon to @has_tooltip.
        See #GtkStatusIcon:has-tooltip for more information.
        """
        ...

    def set_name(self, name: str) -> object:
        """
        Sets the name of this tray icon.
        This should be a string identifying this icon. It is may be
        used for sorting the icons in the tray and will not be shown to
        the user.
        """
        ...

    def set_screen(self, screen: Gdk.Screen) -> object:
        """
        Sets the #GdkScreen where @status_icon is displayed; if
        the icon is already mapped, it will be unmapped, and
        then remapped on the new screen.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the title of this tray icon.
        This should be a short, human-readable, localized string
        describing the tray icon. It may be used by tools like screen
        readers to render the tray icon.
        """
        ...

    def set_tooltip_markup(self, markup: _T.Optional[str]) -> object:
        """
        Sets @markup as the contents of the tooltip, which is marked up with
         the [Pango text markup language][PangoMarkupFormat].

        This function will take care of setting #GtkStatusIcon:has-tooltip to %TRUE
        and of the default handler for the #GtkStatusIcon::query-tooltip signal.

        See also the #GtkStatusIcon:tooltip-markup property and
        gtk_tooltip_set_markup().
        """
        ...

    def set_tooltip_text(self, text: str) -> object:
        """
        Sets @text as the contents of the tooltip.

        This function will take care of setting #GtkStatusIcon:has-tooltip to
        %TRUE and of the default handler for the #GtkStatusIcon::query-tooltip
        signal.

        See also the #GtkStatusIcon:tooltip-text property and
        gtk_tooltip_set_text().
        """
        ...

    def set_visible(self, visible: bool) -> object:
        """
        Shows or hides a status icon.
        """
        ...


    ...

class Statusbar(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    A #GtkStatusbar is usually placed along the bottom of an application's
    main #GtkWindow. It may provide a regular commentary of the application's
    status (as is usually the case in a web browser, for example), or may be
    used to simply output a message when the status changes, (when an upload
    is complete in an FTP client, for example).

    Status bars in GTK+ maintain a stack of messages. The message at
    the top of the each bar’s stack is the one that will currently be displayed.

    Any messages added to a statusbar’s stack must specify a
    context id that is used to uniquely identify
    the source of a message. This context id can be generated by
    gtk_statusbar_get_context_id(), given a message and the statusbar that
    it will be added to. Note that messages are stored in a stack, and when
    choosing which message to display, the stack structure is adhered to,
    regardless of the context identifier of a message.

    One could say that a statusbar maintains one stack of messages for
    display purposes, but allows multiple message producers to maintain
    sub-stacks of the messages they produced (via context ids).

    Status bars are created using gtk_statusbar_new().

    Messages are added to the bar’s stack with gtk_statusbar_push().

    The message at the top of the stack can be removed using
    gtk_statusbar_pop(). A message can be removed from anywhere in the
    stack if its message id was recorded at the time it was added. This
    is done using gtk_statusbar_remove().

    # CSS node

    GtkStatusbar has a single CSS node with name statusbar.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkStatusbar ready for messages.
        """
        ...

    def get_context_id(self, context_description: str) -> int:
        """
        Returns a new context identifier, given a description
        of the actual context. Note that the description is
        not shown in the UI.
        """
        ...

    def get_message_area(self) -> Box:
        """
        Retrieves the box containing the label widget.
        """
        ...

    def pop(self, context_id: int) -> object:
        """
        Removes the first message in the #GtkStatusbar’s stack
        with the given context id.

        Note that this may not change the displayed message, if
        the message at the top of the stack has a different
        context id.
        """
        ...

    def push(self, context_id: int, text: str) -> int:
        """
        Pushes a new message onto a statusbar’s stack.
        """
        ...

    def remove(self, context_id: int, message_id: int) -> object:
        """
        Forces the removal of a message from a statusbar’s stack.
        The exact @context_id and @message_id must be specified.
        """
        ...

    def remove_all(self, context_id: int) -> object:
        """
        Forces the removal of all messages from a statusbar's
        stack with the exact @context_id.
        """
        ...


    ...

class StatusbarAccessible(ContainerAccessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Style(GObject.Object):
    """
    A #GtkStyle object encapsulates the information that provides the look and
    feel for a widget.

    > In GTK+ 3.0, GtkStyle has been deprecated and replaced by
    > #GtkStyleContext.

    Each #GtkWidget has an associated #GtkStyle object that is used when
    rendering that widget. Also, a #GtkStyle holds information for the five
    possible widget states though not every widget supports all five
    states; see #GtkStateType.

    Usually the #GtkStyle for a widget is the same as the default style that
    is set by GTK+ and modified the theme engine.

    Usually applications should not need to use or modify the #GtkStyle of
    their widgets.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Style:
        """
        Creates a new #GtkStyle.
        """
        ...

    def apply_default_background(self, cr: cairo.Context, window: Gdk.Window, state_type: StateType, x: int, y: int, width: int, height: int) -> object:
        ...

    def attach(self, window: Gdk.Window) -> Style:
        """
        Attaches a style to a window; this process allocates the
        colors and creates the GC’s for the style - it specializes
        it to a particular visual. The process may involve the creation
        of a new style if the style has already been attached to a
        window with a different style and visual.

        Since this function may return a new object, you have to use it
        in the following way:
        `style = gtk_style_attach (style, window)`
        """
        ...

    def copy(self) -> Style:
        """
        Creates a copy of the passed in #GtkStyle object.
        """
        ...

    def detach(self) -> object:
        """
        Detaches a style from a window. If the style is not attached
        to any windows anymore, it is unrealized. See gtk_style_attach().
        """
        ...

    def get(self, widget_type: GObject.Type, first_property_name: str, *args: object) -> object:
        """
        Gets the values of a multiple style properties for @widget_type
        from @style.
        """
        ...

    def get_style_property(self, widget_type: GObject.Type, property_name: str, value: GObject.Value) -> object:
        """
        Queries the value of a style property corresponding to a
        widget class is in the given style.
        """
        ...

    def get_valist(self, widget_type: GObject.Type, first_property_name: str, var_args: list) -> object:
        """
        Non-vararg variant of gtk_style_get().
        Used primarily by language bindings.
        """
        ...

    def has_context(self) -> bool:
        """
        Returns whether @style has an associated #GtkStyleContext.
        """
        ...

    def lookup_color(self, color_name: str, color: Gdk.Color) -> bool:
        """
        Looks up @color_name in the style’s logical color mappings,
        filling in @color and returning %TRUE if found, otherwise
        returning %FALSE. Do not cache the found mapping, because
        it depends on the #GtkStyle and might change when a theme
        switch occurs.
        """
        ...

    def lookup_icon_set(self, stock_id: str) -> IconSet:
        """
        Looks up @stock_id in the icon factories associated with @style
        and the default icon factory, returning an icon set if found,
        otherwise %NULL.
        """
        ...

    def render_icon(self, source: IconSource, direction: TextDirection, state: StateType, size: int, widget: _T.Optional[Widget], detail: _T.Optional[str]) -> GdkPixbuf.Pixbuf:
        """
        Renders the icon specified by @source at the given @size
        according to the given parameters and returns the result in a
        pixbuf.
        """
        ...

    def set_background(self, window: Gdk.Window, state_type: StateType) -> object:
        """
        Sets the background of @window to the background color or pixmap
        specified by @style for the given state.
        """
        ...


    ...

class StyleContext(GObject.Object):
    """
    #GtkStyleContext is an object that stores styling information affecting
    a widget defined by #GtkWidgetPath.

    In order to construct the final style information, #GtkStyleContext
    queries information from all attached #GtkStyleProviders. Style providers
    can be either attached explicitly to the context through
    gtk_style_context_add_provider(), or to the screen through
    gtk_style_context_add_provider_for_screen(). The resulting style is a
    combination of all providers’ information in priority order.

    For GTK+ widgets, any #GtkStyleContext returned by
    gtk_widget_get_style_context() will already have a #GtkWidgetPath, a
    #GdkScreen and RTL/LTR information set. The style context will also be
    updated automatically if any of these settings change on the widget.

    If you are using the theming layer standalone, you will need to set a
    widget path and a screen yourself to the created style context through
    gtk_style_context_set_path() and possibly gtk_style_context_set_screen(). See
    the “Foreign drawing“ example in gtk3-demo.

    # Style Classes # {#gtkstylecontext-classes}

    Widgets can add style classes to their context, which can be used to associate
    different styles by class. The documentation for individual widgets lists
    which style classes it uses itself, and which style classes may be added by
    applications to affect their appearance.

    GTK+ defines macros for a number of style classes.

    # Style Regions

    Widgets can also add regions with flags to their context. This feature is
    deprecated and will be removed in a future GTK+ update. Please use style
    classes instead.

    GTK+ defines macros for a number of style regions.

    # Custom styling in UI libraries and applications

    If you are developing a library with custom #GtkWidgets that
    render differently than standard components, you may need to add a
    #GtkStyleProvider yourself with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK
    priority, either a #GtkCssProvider or a custom object implementing the
    #GtkStyleProvider interface. This way themes may still attempt
    to style your UI elements in a different way if needed so.

    If you are using custom styling on an applications, you probably want then
    to make your style information prevail to the theme’s, so you must use
    a #GtkStyleProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
    priority, keep in mind that the user settings in
    `XDG_CONFIG_HOME/gtk-3.0/gtk.css` will
    still take precedence over your changes, as it uses the
    %GTK_STYLE_PROVIDER_PRIORITY_USER priority.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> StyleContext:
        """
        Creates a standalone #GtkStyleContext, this style context
        won’t be attached to any widget, so you may want
        to call gtk_style_context_set_path() yourself.

        This function is only useful when using the theming layer
        separated from GTK+, if you are using #GtkStyleContext to
        theme #GtkWidgets, use gtk_widget_get_style_context()
        in order to get a style context ready to theme the widget.
        """
        ...

    def add_class(self, class_name: str) -> object:
        """
        Adds a style class to @context, so posterior calls to
        gtk_style_context_get() or any of the gtk_render_*()
        functions will make use of this new class for styling.

        In the CSS file format, a #GtkEntry defining a “search”
        class, would be matched by:

        |[ <!-- language="CSS" -->
        entry.search { ... }
        ]|

        While any widget defining a “search” class would be
        matched by:
        |[ <!-- language="CSS" -->
        .search { ... }
        ]|
        """
        ...

    def add_provider(self, provider: StyleProvider, priority: int) -> object:
        """
        Adds a style provider to @context, to be used in style construction.
        Note that a style provider added by this function only affects
        the style of the widget to which @context belongs. If you want
        to affect the style of all widgets, use
        gtk_style_context_add_provider_for_screen().

        Note: If both priorities are the same, a #GtkStyleProvider
        added through this function takes precedence over another added
        through gtk_style_context_add_provider_for_screen().
        """
        ...

    def add_region(self, region_name: str, flags: RegionFlags) -> object:
        """
        Adds a region to @context, so posterior calls to
        gtk_style_context_get() or any of the gtk_render_*()
        functions will make use of this new region for styling.

        In the CSS file format, a #GtkTreeView defining a “row”
        region, would be matched by:

        |[ <!-- language="CSS" -->
        treeview row { ... }
        ]|

        Pseudo-classes are used for matching @flags, so the two
        following rules:
        |[ <!-- language="CSS" -->
        treeview row:nth-child(even) { ... }
        treeview row:nth-child(odd) { ... }
        ]|

        would apply to even and odd rows, respectively.

        Region names must only contain lowercase letters
        and “-”, starting always with a lowercase letter.
        """
        ...

    def cancel_animations(self, region_id: _T.Optional[object]) -> object:
        """
        Stops all running animations for @region_id and all animatable
        regions underneath.

        A %NULL @region_id will stop all ongoing animations in @context,
        when dealing with a #GtkStyleContext obtained through
        gtk_widget_get_style_context(), this is normally done for you
        in all circumstances you would expect all widget to be stopped,
        so this should be only used in complex widgets with different
        animatable regions.
        """
        ...

    def get(self, state: StateFlags, *args: object) -> object:
        """
        Retrieves several style property values from @context for a
        given state.

        See gtk_style_context_get_property() for details.
        """
        ...

    def get_background_color(self, state: StateFlags, color: Gdk.RGBA) -> object:
        """
        Gets the background color for a given state.

        This function is far less useful than it seems, and it should not be used in
        newly written code. CSS has no concept of "background color", as a background
        can be an image, or a gradient, or any other pattern including solid colors.

        The only reason why you would call gtk_style_context_get_background_color() is
        to use the returned value to draw the background with it; the correct way to
        achieve this result is to use gtk_render_background() instead, along with CSS
        style classes to modify the color to be rendered.
        """
        ...

    def get_border(self, state: StateFlags, border: Border) -> object:
        """
        Gets the border for a given state as a #GtkBorder.

        See gtk_style_context_get_property() and
        #GTK_STYLE_PROPERTY_BORDER_WIDTH for details.
        """
        ...

    def get_border_color(self, state: StateFlags, color: Gdk.RGBA) -> object:
        """
        Gets the border color for a given state.
        """
        ...

    def get_color(self, state: StateFlags, color: Gdk.RGBA) -> object:
        """
        Gets the foreground color for a given state.

        See gtk_style_context_get_property() and
        #GTK_STYLE_PROPERTY_COLOR for details.
        """
        ...

    def get_direction(self) -> TextDirection:
        """
        Returns the widget direction used for rendering.
        """
        ...

    def get_font(self, state: StateFlags) -> Pango.FontDescription:
        """
        Returns the font description for a given state. The returned
        object is const and will remain valid until the
        #GtkStyleContext::changed signal happens.
        """
        ...

    def get_frame_clock(self) -> Gdk.FrameClock:
        """
        Returns the #GdkFrameClock to which @context is attached.
        """
        ...

    def get_junction_sides(self) -> JunctionSides:
        """
        Returns the sides where rendered elements connect visually with others.
        """
        ...

    def get_margin(self, state: StateFlags, margin: Border) -> object:
        """
        Gets the margin for a given state as a #GtkBorder.
        See gtk_style_property_get() and #GTK_STYLE_PROPERTY_MARGIN
        for details.
        """
        ...

    def get_padding(self, state: StateFlags, padding: Border) -> object:
        """
        Gets the padding for a given state as a #GtkBorder.
        See gtk_style_context_get() and #GTK_STYLE_PROPERTY_PADDING
        for details.
        """
        ...

    def get_parent(self) -> StyleContext:
        """
        Gets the parent context set via gtk_style_context_set_parent().
        See that function for details.
        """
        ...

    def get_path(self) -> WidgetPath:
        """
        Returns the widget path used for style matching.
        """
        ...

    def get_property(self, property: str, state: StateFlags, value: GObject.Value) -> object:
        """
        Gets a style property from @context for the given state.

        Note that not all CSS properties that are supported by GTK+ can be
        retrieved in this way, since they may not be representable as #GValue.
        GTK+ defines macros for a number of properties that can be used
        with this function.

        Note that passing a state other than the current state of @context
        is not recommended unless the style context has been saved with
        gtk_style_context_save().

        When @value is no longer needed, g_value_unset() must be called
        to free any allocated memory.
        """
        ...

    def get_scale(self) -> int:
        """
        Returns the scale used for assets.
        """
        ...

    def get_screen(self) -> Gdk.Screen:
        """
        Returns the #GdkScreen to which @context is attached.
        """
        ...

    def get_section(self, property: str) -> CssSection:
        """
        Queries the location in the CSS where @property was defined for the
        current @context. Note that the state to be queried is taken from
        gtk_style_context_get_state().

        If the location is not available, %NULL will be returned. The
        location might not be available for various reasons, such as the
        property being overridden, @property not naming a supported CSS
        property or tracking of definitions being disabled for performance
        reasons.

        Shorthand CSS properties cannot be queried for a location and will
        always return %NULL.
        """
        ...

    def get_state(self) -> StateFlags:
        """
        Returns the state used for style matching.

        This method should only be used to retrieve the #GtkStateFlags
        to pass to #GtkStyleContext methods, like gtk_style_context_get_padding().
        If you need to retrieve the current state of a #GtkWidget, use
        gtk_widget_get_state_flags().
        """
        ...

    def get_style(self, *args: object) -> object:
        """
        Retrieves several widget style properties from @context according to the
        current style.
        """
        ...

    def get_style_property(self, property_name: str, value: GObject.Value) -> object:
        """
        Gets the value for a widget style property.

        When @value is no longer needed, g_value_unset() must be called
        to free any allocated memory.
        """
        ...

    def get_style_valist(self, args: list) -> object:
        """
        Retrieves several widget style properties from @context according to the
        current style.
        """
        ...

    def get_valist(self, state: StateFlags, args: list) -> object:
        """
        Retrieves several style property values from @context for a given state.

        See gtk_style_context_get_property() for details.
        """
        ...

    def has_class(self, class_name: str) -> bool:
        """
        Returns %TRUE if @context currently has defined the
        given class name.
        """
        ...

    def has_region(self, region_name: str, flags_return: RegionFlags) -> bool:
        """
        Returns %TRUE if @context has the region defined.
        If @flags_return is not %NULL, it is set to the flags
        affecting the region.
        """
        ...

    def invalidate(self) -> object:
        """
        Invalidates @context style information, so it will be reconstructed
        again. It is useful if you modify the @context and need the new
        information immediately.
        """
        ...

    def list_classes(self) -> GLib.List:
        """
        Returns the list of classes currently defined in @context.
        """
        ...

    def list_regions(self) -> GLib.List:
        """
        Returns the list of regions currently defined in @context.
        """
        ...

    def lookup_color(self, color_name: str, color: Gdk.RGBA) -> bool:
        """
        Looks up and resolves a color name in the @context color map.
        """
        ...

    def lookup_icon_set(self, stock_id: str) -> IconSet:
        """
        Looks up @stock_id in the icon factories associated to @context and
        the default icon factory, returning an icon set if found, otherwise
        %NULL.
        """
        ...

    def notify_state_change(self, window: Gdk.Window, region_id: _T.Optional[object], state: StateType, state_value: bool) -> object:
        """
        Notifies a state change on @context, so if the current style makes use
        of transition animations, one will be started so all rendered elements
        under @region_id are animated for state @state being set to value
        @state_value.

        The @window parameter is used in order to invalidate the rendered area
        as the animation runs, so make sure it is the same window that is being
        rendered on by the gtk_render_*() functions.

        If @region_id is %NULL, all rendered elements using @context will be
        affected by this state transition.

        As a practical example, a #GtkButton notifying a state transition on
        the prelight state:
        |[ <!-- language="C" -->
        gtk_style_context_notify_state_change (context,
                                               gtk_widget_get_window (widget),
                                               NULL,
                                               GTK_STATE_PRELIGHT,
                                               button->in_button);
        ]|

        Can be handled in the CSS file like this:
        |[ <!-- language="CSS" -->
        button {
            background-color: #f00
        }

        button:hover {
            background-color: #fff;
            transition: 200ms linear
        }
        ]|

        This combination will animate the button background from red to white
        if a pointer enters the button, and back to red if the pointer leaves
        the button.

        Note that @state is used when finding the transition parameters, which
        is why the style places the transition under the :hover pseudo-class.
        """
        ...

    def pop_animatable_region(self) -> object:
        """
        Pops an animatable region from @context.
        See gtk_style_context_push_animatable_region().
        """
        ...

    def push_animatable_region(self, region_id: _T.Optional[object]) -> object:
        """
        Pushes an animatable region, so all further gtk_render_*() calls between
        this call and the following gtk_style_context_pop_animatable_region()
        will potentially show transition animations for this region if
        gtk_style_context_notify_state_change() is called for a given state,
        and the current theme/style defines transition animations for state
        changes.

        The @region_id used must be unique in @context so the themes
        can uniquely identify rendered elements subject to a state transition.
        """
        ...

    def remove_class(self, class_name: str) -> object:
        """
        Removes @class_name from @context.
        """
        ...

    def remove_provider(self, provider: StyleProvider) -> object:
        """
        Removes @provider from the style providers list in @context.
        """
        ...

    def remove_region(self, region_name: str) -> object:
        """
        Removes a region from @context.
        """
        ...

    def restore(self) -> object:
        """
        Restores @context state to a previous stage.
        See gtk_style_context_save().
        """
        ...

    def save(self) -> object:
        """
        Saves the @context state, so temporary modifications done through
        gtk_style_context_add_class(), gtk_style_context_remove_class(),
        gtk_style_context_set_state(), etc. can quickly be reverted
        in one go through gtk_style_context_restore().

        The matching call to gtk_style_context_restore() must be done
        before GTK returns to the main loop.
        """
        ...

    def scroll_animations(self, window: Gdk.Window, dx: int, dy: int) -> object:
        """
        This function is analogous to gdk_window_scroll(), and
        should be called together with it so the invalidation
        areas for any ongoing animation are scrolled together
        with it.
        """
        ...

    def set_background(self, window: Gdk.Window) -> object:
        """
        Sets the background of @window to the background pattern or
        color specified in @context for its current state.
        """
        ...

    def set_direction(self, direction: TextDirection) -> object:
        """
        Sets the reading direction for rendering purposes.

        If you are using a #GtkStyleContext returned from
        gtk_widget_get_style_context(), you do not need to
        call this yourself.
        """
        ...

    def set_frame_clock(self, frame_clock: Gdk.FrameClock) -> object:
        """
        Attaches @context to the given frame clock.

        The frame clock is used for the timing of animations.

        If you are using a #GtkStyleContext returned from
        gtk_widget_get_style_context(), you do not need to
        call this yourself.
        """
        ...

    def set_junction_sides(self, sides: JunctionSides) -> object:
        """
        Sets the sides where rendered elements (mostly through
        gtk_render_frame()) will visually connect with other visual elements.

        This is merely a hint that may or may not be honored
        by themes.

        Container widgets are expected to set junction hints as appropriate
        for their children, so it should not normally be necessary to call
        this function manually.
        """
        ...

    def set_parent(self, parent: _T.Optional[StyleContext]) -> object:
        """
        Sets the parent style context for @context. The parent style
        context is used to implement
        [inheritance](http://www.w3.org/TR/css3-cascade/#inheritance)
        of properties.

        If you are using a #GtkStyleContext returned from
        gtk_widget_get_style_context(), the parent will be set for you.
        """
        ...

    def set_path(self, path: WidgetPath) -> object:
        """
        Sets the #GtkWidgetPath used for style matching. As a
        consequence, the style will be regenerated to match
        the new given path.

        If you are using a #GtkStyleContext returned from
        gtk_widget_get_style_context(), you do not need to call
        this yourself.
        """
        ...

    def set_scale(self, scale: int) -> object:
        """
        Sets the scale to use when getting image assets for the style.
        """
        ...

    def set_screen(self, screen: Gdk.Screen) -> object:
        """
        Attaches @context to the given screen.

        The screen is used to add style information from “global” style
        providers, such as the screen’s #GtkSettings instance.

        If you are using a #GtkStyleContext returned from
        gtk_widget_get_style_context(), you do not need to
        call this yourself.
        """
        ...

    def set_state(self, flags: StateFlags) -> object:
        """
        Sets the state to be used for style matching.
        """
        ...

    def state_is_running(self, state: StateType, progress: float) -> bool:
        """
        Returns %TRUE if there is a transition animation running for the
        current region (see gtk_style_context_push_animatable_region()).

        If @progress is not %NULL, the animation progress will be returned
        there, 0.0 means the state is closest to being unset, while 1.0 means
        it’s closest to being set. This means transition animation will
        run from 0 to 1 when @state is being set and from 1 to 0 when
        it’s being unset.
        """
        ...

    def to_string(self, flags: StyleContextPrintFlags) -> str:
        """
        Converts the style context into a string representation.

        The string representation always includes information about
        the name, state, id, visibility and style classes of the CSS
        node that is backing @context. Depending on the flags, more
        information may be included.

        This function is intended for testing and debugging of the
        CSS implementation in GTK+. There are no guarantees about
        the format of the returned string, it may change.
        """
        ...


    ...

class StyleProperties(GObject.Object, StyleProvider):
    """
    GtkStyleProperties provides the storage for style information
    that is used by #GtkStyleContext and other #GtkStyleProvider
    implementations.

    Before style properties can be stored in GtkStyleProperties, they
    must be registered with gtk_style_properties_register_property().

    Unless you are writing a #GtkStyleProvider implementation, you
    are unlikely to use this API directly, as gtk_style_context_get()
    and its variants are the preferred way to access styling information
    from widget implementations and theming engine implementations
    should use the APIs provided by #GtkThemingEngine instead.

    #GtkStyleProperties has been deprecated in GTK 3.16. The CSS
    machinery does not use it anymore and all users of this object
    have been deprecated.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> StyleProperties:
        """
        Returns a newly created #GtkStyleProperties
        """
        ...

    def clear(self) -> object:
        """
        Clears all style information from @props.
        """
        ...

    def get(self, state: StateFlags, *args: object) -> object:
        """
        Retrieves several style property values from @props for a
        given state.
        """
        ...

    def get_property(self, property: str, state: StateFlags, value: GObject.Value) -> bool:
        """
        Gets a style property from @props for the given state. When done with @value,
        g_value_unset() needs to be called to free any allocated memory.
        """
        ...

    def get_valist(self, state: StateFlags, args: list) -> object:
        """
        Retrieves several style property values from @props for a given state.
        """
        ...

    def lookup_color(self, name: str) -> SymbolicColor:
        """
        Returns the symbolic color that is mapped
        to @name.
        """
        ...

    def map_color(self, name: str, color: SymbolicColor) -> object:
        """
        Maps @color so it can be referenced by @name. See
        gtk_style_properties_lookup_color()
        """
        ...

    def merge(self, props_to_merge: StyleProperties, replace: bool) -> object:
        """
        Merges into @props all the style information contained
        in @props_to_merge. If @replace is %TRUE, the values
        will be overwritten, if it is %FALSE, the older values
        will prevail.
        """
        ...

    def set(self, state: StateFlags, *args: object) -> object:
        """
        Sets several style properties on @props.
        """
        ...

    def set_property(self, property: str, state: StateFlags, value: GObject.Value) -> object:
        """
        Sets a styling property in @props.
        """
        ...

    def set_valist(self, state: StateFlags, args: list) -> object:
        """
        Sets several style properties on @props.
        """
        ...

    def unset_property(self, property: str, state: StateFlags) -> object:
        """
        Unsets a style property in @props.
        """
        ...


    ...

class Switch(Widget, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    #GtkSwitch is a widget that has two states: on or off. The user can control
    which state should be active by clicking the empty area, or by dragging the
    handle.

    GtkSwitch can also handle situations where the underlying state changes with
    a delay. See #GtkSwitch::state-set for details.

    # CSS nodes

    |[<!-- language="plain" -->
    switch
    ╰── slider
    ]|

    GtkSwitch has two css nodes, the main node with the name switch and a subnode
    named slider. Neither of them is using any style classes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkSwitch widget.
        """
        ...

    def get_active(self) -> bool:
        """
        Gets whether the #GtkSwitch is in its “on” or “off” state.
        """
        ...

    def get_state(self) -> bool:
        """
        Gets the underlying state of the #GtkSwitch.
        """
        ...

    def set_active(self, is_active: bool) -> object:
        """
        Changes the state of @sw to the desired one.
        """
        ...

    def set_state(self, state: bool) -> object:
        """
        Sets the underlying state of the #GtkSwitch.

        Normally, this is the same as #GtkSwitch:active, unless the switch
        is set up for delayed state changes. This function is typically
        called from a #GtkSwitch::state-set signal handler.

        See #GtkSwitch::state-set for details.
        """
        ...


    ...

class SwitchAccessible(WidgetAccessible, Atk.Action, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Table(Container, Atk.ImplementorIface, Buildable):
    """
    The #GtkTable functions allow the programmer to arrange widgets in rows and
    columns, making it easy to align many widgets next to each other,
    horizontally and vertically.

    Tables are created with a call to gtk_table_new(), the size of which can
    later be changed with gtk_table_resize().

    Widgets can be added to a table using gtk_table_attach() or the more
    convenient (but slightly less flexible) gtk_table_attach_defaults().

    To alter the space next to a specific row, use gtk_table_set_row_spacing(),
    and for a column, gtk_table_set_col_spacing().
    The gaps between all rows or columns can be changed by
    calling gtk_table_set_row_spacings() or gtk_table_set_col_spacings()
    respectively. Note that spacing is added between the
    children, while padding added by gtk_table_attach() is added on
    either side of the widget it belongs to.

    gtk_table_set_homogeneous(), can be used to set whether all cells in the
    table will resize themselves to the size of the largest widget in the table.

    > #GtkTable has been deprecated. Use #GtkGrid instead. It provides the same
    > capabilities as GtkTable for arranging widgets in a rectangular grid, but
    > does support height-for-width geometry management.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, rows: int, columns: int, homogeneous: bool) -> Widget:
        """
        Used to create a new table widget. An initial size must be given by
        specifying how many rows and columns the table should have, although
        this can be changed later with gtk_table_resize().  @rows and @columns
        must both be in the range 1 .. 65535. For historical reasons, 0 is accepted
        as well and is silently interpreted as 1.
        """
        ...

    def attach(self, child: Widget, left_attach: int, right_attach: int, top_attach: int, bottom_attach: int, xoptions: AttachOptions, yoptions: AttachOptions, xpadding: int, ypadding: int) -> object:
        """
        Adds a widget to a table. The number of “cells” that a widget will occupy is
        specified by @left_attach, @right_attach, @top_attach and @bottom_attach.
        These each represent the leftmost, rightmost, uppermost and lowest column
        and row numbers of the table. (Columns and rows are indexed from zero).

        To make a button occupy the lower right cell of a 2x2 table, use
        |[
        gtk_table_attach (table, button,
                          1, 2, // left, right attach
                          1, 2, // top, bottom attach
                          xoptions, yoptions,
                          xpadding, ypadding);
        ]|
        If you want to make the button span the entire bottom row, use @left_attach == 0 and @right_attach = 2 instead.
        """
        ...

    def attach_defaults(self, widget: Widget, left_attach: int, right_attach: int, top_attach: int, bottom_attach: int) -> object:
        """
        As there are many options associated with gtk_table_attach(), this convenience
        function provides the programmer with a means to add children to a table with
        identical padding and expansion options. The values used for the #GtkAttachOptions
        are `GTK_EXPAND | GTK_FILL`, and the padding is set to 0.
        """
        ...

    def get_col_spacing(self, column: int) -> int:
        """
        Gets the amount of space between column @col, and
        column @col + 1. See gtk_table_set_col_spacing().
        """
        ...

    def get_default_col_spacing(self) -> int:
        """
        Gets the default column spacing for the table. This is
        the spacing that will be used for newly added columns.
        (See gtk_table_set_col_spacings())
        """
        ...

    def get_default_row_spacing(self) -> int:
        """
        Gets the default row spacing for the table. This is
        the spacing that will be used for newly added rows.
        (See gtk_table_set_row_spacings())
        """
        ...

    def get_homogeneous(self) -> bool:
        """
        Returns whether the table cells are all constrained to the same
        width and height. (See gtk_table_set_homogeneous ())
        """
        ...

    def get_row_spacing(self, row: int) -> int:
        """
        Gets the amount of space between row @row, and
        row @row + 1. See gtk_table_set_row_spacing().
        """
        ...

    def get_size(self, rows: int, columns: int) -> object:
        """
        Gets the number of rows and columns in the table.
        """
        ...

    def resize(self, rows: int, columns: int) -> object:
        """
        If you need to change a table’s size after
        it has been created, this function allows you to do so.
        """
        ...

    def set_col_spacing(self, column: int, spacing: int) -> object:
        """
        Alters the amount of space between a given table column and the following
        column.
        """
        ...

    def set_col_spacings(self, spacing: int) -> object:
        """
        Sets the space between every column in @table equal to @spacing.
        """
        ...

    def set_homogeneous(self, homogeneous: bool) -> object:
        """
        Changes the homogenous property of table cells, ie. whether all cells are
        an equal size or not.
        """
        ...

    def set_row_spacing(self, row: int, spacing: int) -> object:
        """
        Changes the space between a given table row and the subsequent row.
        """
        ...

    def set_row_spacings(self, spacing: int) -> object:
        """
        Sets the space between every row in @table equal to @spacing.
        """
        ...


    ...

class TearoffMenuItem(MenuItem, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A #GtkTearoffMenuItem is a special #GtkMenuItem which is used to
    tear off and reattach its menu.

    When its menu is shown normally, the #GtkTearoffMenuItem is drawn as a
    dotted line indicating that the menu can be torn off.  Activating it
    causes its menu to be torn off and displayed in its own window
    as a tearoff menu.

    When its menu is shown as a tearoff menu, the #GtkTearoffMenuItem is drawn
    as a dotted line which has a left pointing arrow graphic indicating that
    the tearoff menu can be reattached.  Activating it will erase the tearoff
    menu window.

    > #GtkTearoffMenuItem is deprecated and should not be used in newly
    > written code. Menus are not meant to be torn around.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkTearoffMenuItem.
        """
        ...


    ...

class TextBuffer(GObject.Object):
    """
    You may wish to begin by reading the
    [text widget conceptual overview][TextWidget]
    which gives an overview of all the objects and data
    types related to the text widget and how they work together.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, table: _T.Optional[TextTagTable]) -> TextBuffer:
        """
        Creates a new text buffer.
        """
        ...

    def add_mark(self, mark: TextMark, where: TextIter) -> object:
        """
        Adds the mark at position @where. The mark must not be added to
        another buffer, and if its name is not %NULL then there must not
        be another mark in the buffer with the same name.

        Emits the #GtkTextBuffer::mark-set signal as notification of the mark's
        initial placement.
        """
        ...

    def add_selection_clipboard(self, clipboard: Clipboard) -> object:
        """
        Adds @clipboard to the list of clipboards in which the selection
        contents of @buffer are available. In most cases, @clipboard will be
        the #GtkClipboard of type %GDK_SELECTION_PRIMARY for a view of @buffer.
        """
        ...

    def apply_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> object:
        """
        Emits the “apply-tag” signal on @buffer. The default
        handler for the signal applies @tag to the given range.
        @start and @end do not have to be in order.
        """
        ...

    def apply_tag_by_name(self, name: str, start: TextIter, end: TextIter) -> object:
        """
        Calls gtk_text_tag_table_lookup() on the buffer’s tag table to
        get a #GtkTextTag, then calls gtk_text_buffer_apply_tag().
        """
        ...

    def backspace(self, iter: TextIter, interactive: bool, default_editable: bool) -> bool:
        """
        Performs the appropriate action as if the user hit the delete
        key with the cursor at the position specified by @iter. In the
        normal case a single character will be deleted, but when
        combining accents are involved, more than one character can
        be deleted, and when precomposed character and accent combinations
        are involved, less than one character will be deleted.

        Because the buffer is modified, all outstanding iterators become
        invalid after calling this function; however, the @iter will be
        re-initialized to point to the location where text was deleted.
        """
        ...

    def begin_user_action(self) -> object:
        """
        Called to indicate that the buffer operations between here and a
        call to gtk_text_buffer_end_user_action() are part of a single
        user-visible operation. The operations between
        gtk_text_buffer_begin_user_action() and
        gtk_text_buffer_end_user_action() can then be grouped when creating
        an undo stack. #GtkTextBuffer maintains a count of calls to
        gtk_text_buffer_begin_user_action() that have not been closed with
        a call to gtk_text_buffer_end_user_action(), and emits the
        “begin-user-action” and “end-user-action” signals only for the
        outermost pair of calls. This allows you to build user actions
        from other user actions.

        The “interactive” buffer mutation functions, such as
        gtk_text_buffer_insert_interactive(), automatically call begin/end
        user action around the buffer operations they perform, so there's
        no need to add extra calls if you user action consists solely of a
        single call to one of those functions.
        """
        ...

    def copy_clipboard(self, clipboard: Clipboard) -> object:
        """
        Copies the currently-selected text to a clipboard.
        """
        ...

    def create_child_anchor(self, iter: TextIter) -> TextChildAnchor:
        """
        This is a convenience function which simply creates a child anchor
        with gtk_text_child_anchor_new() and inserts it into the buffer
        with gtk_text_buffer_insert_child_anchor(). The new anchor is
        owned by the buffer; no reference count is returned to
        the caller of gtk_text_buffer_create_child_anchor().
        """
        ...

    def create_mark(self, mark_name: _T.Optional[str], where: TextIter, left_gravity: bool) -> TextMark:
        """
        Creates a mark at position @where. If @mark_name is %NULL, the mark
        is anonymous; otherwise, the mark can be retrieved by name using
        gtk_text_buffer_get_mark(). If a mark has left gravity, and text is
        inserted at the mark’s current location, the mark will be moved to
        the left of the newly-inserted text. If the mark has right gravity
        (@left_gravity = %FALSE), the mark will end up on the right of
        newly-inserted text. The standard left-to-right cursor is a mark
        with right gravity (when you type, the cursor stays on the right
        side of the text you’re typing).

        The caller of this function does not own a
        reference to the returned #GtkTextMark, so you can ignore the
        return value if you like. Marks are owned by the buffer and go
        away when the buffer does.

        Emits the #GtkTextBuffer::mark-set signal as notification of the mark's
        initial placement.
        """
        ...

    def create_tag(self, tag_name: _T.Optional[str], first_property_name: _T.Optional[str], *args: object) -> TextTag:
        """
        Creates a tag and adds it to the tag table for @buffer.
        Equivalent to calling gtk_text_tag_new() and then adding the
        tag to the buffer’s tag table. The returned tag is owned by
        the buffer’s tag table, so the ref count will be equal to one.

        If @tag_name is %NULL, the tag is anonymous.

        If @tag_name is non-%NULL, a tag called @tag_name must not already
        exist in the tag table for this buffer.

        The @first_property_name argument and subsequent arguments are a list
        of properties to set on the tag, as with g_object_set().
        """
        ...

    def cut_clipboard(self, clipboard: Clipboard, default_editable: bool) -> object:
        """
        Copies the currently-selected text to a clipboard, then deletes
        said text if it’s editable.
        """
        ...

    def delete(self, start: TextIter, end: TextIter) -> object:
        """
        Deletes text between @start and @end. The order of @start and @end
        is not actually relevant; gtk_text_buffer_delete() will reorder
        them. This function actually emits the “delete-range” signal, and
        the default handler of that signal deletes the text. Because the
        buffer is modified, all outstanding iterators become invalid after
        calling this function; however, the @start and @end will be
        re-initialized to point to the location where text was deleted.
        """
        ...

    def delete_interactive(self, start_iter: TextIter, end_iter: TextIter, default_editable: bool) -> bool:
        """
        Deletes all editable text in the given range.
        Calls gtk_text_buffer_delete() for each editable sub-range of
        [@start,@end). @start and @end are revalidated to point to
        the location of the last deleted range, or left untouched if
        no text was deleted.
        """
        ...

    def delete_mark(self, mark: TextMark) -> object:
        """
        Deletes @mark, so that it’s no longer located anywhere in the
        buffer. Removes the reference the buffer holds to the mark, so if
        you haven’t called g_object_ref() on the mark, it will be freed. Even
        if the mark isn’t freed, most operations on @mark become
        invalid, until it gets added to a buffer again with
        gtk_text_buffer_add_mark(). Use gtk_text_mark_get_deleted() to
        find out if a mark has been removed from its buffer.
        The #GtkTextBuffer::mark-deleted signal will be emitted as notification after
        the mark is deleted.
        """
        ...

    def delete_mark_by_name(self, name: str) -> object:
        """
        Deletes the mark named @name; the mark must exist. See
        gtk_text_buffer_delete_mark() for details.
        """
        ...

    def delete_selection(self, interactive: bool, default_editable: bool) -> bool:
        """
        Deletes the range between the “insert” and “selection_bound” marks,
        that is, the currently-selected text. If @interactive is %TRUE,
        the editability of the selection will be considered (users can’t delete
        uneditable text).
        """
        ...

    def deserialize(self, content_buffer: TextBuffer, format: Gdk.Atom, iter: TextIter, data: object, length: int) -> bool:
        """
        This function deserializes rich text in format @format and inserts
        it at @iter.

        @formats to be used must be registered using
        gtk_text_buffer_register_deserialize_format() or
        gtk_text_buffer_register_deserialize_tagset() beforehand.
        """
        ...

    def deserialize_get_can_create_tags(self, format: Gdk.Atom) -> bool:
        """
        This functions returns the value set with
        gtk_text_buffer_deserialize_set_can_create_tags()
        """
        ...

    def deserialize_set_can_create_tags(self, format: Gdk.Atom, can_create_tags: bool) -> object:
        """
        Use this function to allow a rich text deserialization function to
        create new tags in the receiving buffer. Note that using this
        function is almost always a bad idea, because the rich text
        functions you register should know how to map the rich text format
        they handler to your text buffers set of tags.

        The ability of creating new (arbitrary!) tags in the receiving buffer
        is meant for special rich text formats like the internal one that
        is registered using gtk_text_buffer_register_deserialize_tagset(),
        because that format is essentially a dump of the internal structure
        of the source buffer, including its tag names.

        You should allow creation of tags only if you know what you are
        doing, e.g. if you defined a tagset name for your application
        suite’s text buffers and you know that it’s fine to receive new
        tags from these buffers, because you know that your application can
        handle the newly created tags.
        """
        ...

    def end_user_action(self) -> object:
        """
        Should be paired with a call to gtk_text_buffer_begin_user_action().
        See that function for a full explanation.
        """
        ...

    def get_bounds(self, start: TextIter, end: TextIter) -> object:
        """
        Retrieves the first and last iterators in the buffer, i.e. the
        entire buffer lies within the range [@start,@end).
        """
        ...

    def get_char_count(self) -> int:
        """
        Gets the number of characters in the buffer; note that characters
        and bytes are not the same, you can’t e.g. expect the contents of
        the buffer in string form to be this many bytes long. The character
        count is cached, so this function is very fast.
        """
        ...

    def get_copy_target_list(self) -> TargetList:
        """
        This function returns the list of targets this text buffer can
        provide for copying and as DND source. The targets in the list are
        added with @info values from the #GtkTextBufferTargetInfo enum,
        using gtk_target_list_add_rich_text_targets() and
        gtk_target_list_add_text_targets().
        """
        ...

    def get_deserialize_formats(self, n_formats: int) -> object:
        """
        This function returns the rich text deserialize formats registered
        with @buffer using gtk_text_buffer_register_deserialize_format() or
        gtk_text_buffer_register_deserialize_tagset()
        """
        ...

    def get_end_iter(self, iter: TextIter) -> object:
        """
        Initializes @iter with the “end iterator,” one past the last valid
        character in the text buffer. If dereferenced with
        gtk_text_iter_get_char(), the end iterator has a character value of 0.
        The entire buffer lies in the range from the first position in
        the buffer (call gtk_text_buffer_get_start_iter() to get
        character position 0) to the end iterator.
        """
        ...

    def get_has_selection(self) -> bool:
        """
        Indicates whether the buffer has some text currently selected.
        """
        ...

    def get_insert(self) -> TextMark:
        """
        Returns the mark that represents the cursor (insertion point).
        Equivalent to calling gtk_text_buffer_get_mark() to get the mark
        named “insert”, but very slightly more efficient, and involves less
        typing.
        """
        ...

    def get_iter_at_child_anchor(self, iter: TextIter, anchor: TextChildAnchor) -> object:
        """
        Obtains the location of @anchor within @buffer.
        """
        ...

    def get_iter_at_line(self, iter: TextIter, line_number: int) -> object:
        """
        Initializes @iter to the start of the given line. If @line_number is greater
        than the number of lines in the @buffer, the end iterator is returned.
        """
        ...

    def get_iter_at_line_index(self, iter: TextIter, line_number: int, byte_index: int) -> object:
        """
        Obtains an iterator pointing to @byte_index within the given line.
        @byte_index must be the start of a UTF-8 character. Note bytes, not
        characters; UTF-8 may encode one character as multiple bytes.

        Before the 3.20 version, it was not allowed to pass an invalid location.

        Since the 3.20 version, if @line_number is greater than the number of lines
        in the @buffer, the end iterator is returned. And if @byte_index is off the
        end of the line, the iterator at the end of the line is returned.
        """
        ...

    def get_iter_at_line_offset(self, iter: TextIter, line_number: int, char_offset: int) -> object:
        """
        Obtains an iterator pointing to @char_offset within the given line. Note
        characters, not bytes; UTF-8 may encode one character as multiple bytes.

        Before the 3.20 version, it was not allowed to pass an invalid location.

        Since the 3.20 version, if @line_number is greater than the number of lines
        in the @buffer, the end iterator is returned. And if @char_offset is off the
        end of the line, the iterator at the end of the line is returned.
        """
        ...

    def get_iter_at_mark(self, iter: TextIter, mark: TextMark) -> object:
        """
        Initializes @iter with the current position of @mark.
        """
        ...

    def get_iter_at_offset(self, iter: TextIter, char_offset: int) -> object:
        """
        Initializes @iter to a position @char_offset chars from the start
        of the entire buffer. If @char_offset is -1 or greater than the number
        of characters in the buffer, @iter is initialized to the end iterator,
        the iterator one past the last valid character in the buffer.
        """
        ...

    def get_line_count(self) -> int:
        """
        Obtains the number of lines in the buffer. This value is cached, so
        the function is very fast.
        """
        ...

    def get_mark(self, name: str) -> TextMark:
        """
        Returns the mark named @name in buffer @buffer, or %NULL if no such
        mark exists in the buffer.
        """
        ...

    def get_modified(self) -> bool:
        """
        Indicates whether the buffer has been modified since the last call
        to gtk_text_buffer_set_modified() set the modification flag to
        %FALSE. Used for example to enable a “save” function in a text
        editor.
        """
        ...

    def get_paste_target_list(self) -> TargetList:
        """
        This function returns the list of targets this text buffer supports
        for pasting and as DND destination. The targets in the list are
        added with @info values from the #GtkTextBufferTargetInfo enum,
        using gtk_target_list_add_rich_text_targets() and
        gtk_target_list_add_text_targets().
        """
        ...

    def get_selection_bound(self) -> TextMark:
        """
        Returns the mark that represents the selection bound.  Equivalent
        to calling gtk_text_buffer_get_mark() to get the mark named
        “selection_bound”, but very slightly more efficient, and involves
        less typing.

        The currently-selected text in @buffer is the region between the
        “selection_bound” and “insert” marks. If “selection_bound” and
        “insert” are in the same place, then there is no current selection.
        gtk_text_buffer_get_selection_bounds() is another convenient function
        for handling the selection, if you just want to know whether there’s a
        selection and what its bounds are.
        """
        ...

    def get_selection_bounds(self, start: TextIter, end: TextIter) -> bool:
        """
        Returns %TRUE if some text is selected; places the bounds
        of the selection in @start and @end (if the selection has length 0,
        then @start and @end are filled in with the same value).
        @start and @end will be in ascending order. If @start and @end are
        NULL, then they are not filled in, but the return value still indicates
        whether text is selected.
        """
        ...

    def get_serialize_formats(self, n_formats: int) -> object:
        """
        This function returns the rich text serialize formats registered
        with @buffer using gtk_text_buffer_register_serialize_format() or
        gtk_text_buffer_register_serialize_tagset()
        """
        ...

    def get_slice(self, start: TextIter, end: TextIter, include_hidden_chars: bool) -> str:
        """
        Returns the text in the range [@start,@end). Excludes undisplayed
        text (text marked with tags that set the invisibility attribute) if
        @include_hidden_chars is %FALSE. The returned string includes a
        0xFFFC character whenever the buffer contains
        embedded images, so byte and character indexes into
        the returned string do correspond to byte
        and character indexes into the buffer. Contrast with
        gtk_text_buffer_get_text(). Note that 0xFFFC can occur in normal
        text as well, so it is not a reliable indicator that a pixbuf or
        widget is in the buffer.
        """
        ...

    def get_start_iter(self, iter: TextIter) -> object:
        """
        Initialized @iter with the first position in the text buffer. This
        is the same as using gtk_text_buffer_get_iter_at_offset() to get
        the iter at character offset 0.
        """
        ...

    def get_tag_table(self) -> TextTagTable:
        """
        Get the #GtkTextTagTable associated with this buffer.
        """
        ...

    def get_text(self, start: TextIter, end: TextIter, include_hidden_chars: bool) -> str:
        """
        Returns the text in the range [@start,@end). Excludes undisplayed
        text (text marked with tags that set the invisibility attribute) if
        @include_hidden_chars is %FALSE. Does not include characters
        representing embedded images, so byte and character indexes into
        the returned string do not correspond to byte
        and character indexes into the buffer. Contrast with
        gtk_text_buffer_get_slice().
        """
        ...

    def insert(self, iter: TextIter, text: str, len: int) -> object:
        """
        Inserts @len bytes of @text at position @iter.  If @len is -1,
        @text must be nul-terminated and will be inserted in its
        entirety. Emits the “insert-text” signal; insertion actually occurs
        in the default handler for the signal. @iter is invalidated when
        insertion occurs (because the buffer contents change), but the
        default signal handler revalidates it to point to the end of the
        inserted text.
        """
        ...

    def insert_at_cursor(self, text: str, len: int) -> object:
        """
        Simply calls gtk_text_buffer_insert(), using the current
        cursor position as the insertion point.
        """
        ...

    def insert_child_anchor(self, iter: TextIter, anchor: TextChildAnchor) -> object:
        """
        Inserts a child widget anchor into the text buffer at @iter. The
        anchor will be counted as one character in character counts, and
        when obtaining the buffer contents as a string, will be represented
        by the Unicode “object replacement character” 0xFFFC. Note that the
        “slice” variants for obtaining portions of the buffer as a string
        include this character for child anchors, but the “text” variants do
        not. E.g. see gtk_text_buffer_get_slice() and
        gtk_text_buffer_get_text(). Consider
        gtk_text_buffer_create_child_anchor() as a more convenient
        alternative to this function. The buffer will add a reference to
        the anchor, so you can unref it after insertion.
        """
        ...

    def insert_interactive(self, iter: TextIter, text: str, len: int, default_editable: bool) -> bool:
        """
        Like gtk_text_buffer_insert(), but the insertion will not occur if
        @iter is at a non-editable location in the buffer. Usually you
        want to prevent insertions at ineditable locations if the insertion
        results from a user action (is interactive).

        @default_editable indicates the editability of text that doesn't
        have a tag affecting editability applied to it. Typically the
        result of gtk_text_view_get_editable() is appropriate here.
        """
        ...

    def insert_interactive_at_cursor(self, text: str, len: int, default_editable: bool) -> bool:
        """
        Calls gtk_text_buffer_insert_interactive() at the cursor
        position.

        @default_editable indicates the editability of text that doesn't
        have a tag affecting editability applied to it. Typically the
        result of gtk_text_view_get_editable() is appropriate here.
        """
        ...

    def insert_markup(self, iter: TextIter, markup: str, len: int) -> object:
        """
        Inserts the text in @markup at position @iter. @markup will be inserted
        in its entirety and must be nul-terminated and valid UTF-8. Emits the
        #GtkTextBuffer::insert-text signal, possibly multiple times; insertion
        actually occurs in the default handler for the signal. @iter will point
        to the end of the inserted text on return.
        """
        ...

    def insert_pixbuf(self, iter: TextIter, pixbuf: GdkPixbuf.Pixbuf) -> object:
        """
        Inserts an image into the text buffer at @iter. The image will be
        counted as one character in character counts, and when obtaining
        the buffer contents as a string, will be represented by the Unicode
        “object replacement character” 0xFFFC. Note that the “slice”
        variants for obtaining portions of the buffer as a string include
        this character for pixbufs, but the “text” variants do
        not. e.g. see gtk_text_buffer_get_slice() and
        gtk_text_buffer_get_text().
        """
        ...

    def insert_range(self, iter: TextIter, start: TextIter, end: TextIter) -> object:
        """
        Copies text, tags, and pixbufs between @start and @end (the order
        of @start and @end doesn’t matter) and inserts the copy at @iter.
        Used instead of simply getting/inserting text because it preserves
        images and tags. If @start and @end are in a different buffer from
        @buffer, the two buffers must share the same tag table.

        Implemented via emissions of the insert_text and apply_tag signals,
        so expect those.
        """
        ...

    def insert_range_interactive(self, iter: TextIter, start: TextIter, end: TextIter, default_editable: bool) -> bool:
        """
        Same as gtk_text_buffer_insert_range(), but does nothing if the
        insertion point isn’t editable. The @default_editable parameter
        indicates whether the text is editable at @iter if no tags
        enclosing @iter affect editability. Typically the result of
        gtk_text_view_get_editable() is appropriate here.
        """
        ...

    def insert_with_tags(self, iter: TextIter, text: str, len: int, first_tag: TextTag, *args: object) -> object:
        """
        Inserts @text into @buffer at @iter, applying the list of tags to
        the newly-inserted text. The last tag specified must be %NULL to
        terminate the list. Equivalent to calling gtk_text_buffer_insert(),
        then gtk_text_buffer_apply_tag() on the inserted text;
        gtk_text_buffer_insert_with_tags() is just a convenience function.
        """
        ...

    def insert_with_tags_by_name(self, iter: TextIter, text: str, len: int, first_tag_name: str, *args: object) -> object:
        """
        Same as gtk_text_buffer_insert_with_tags(), but allows you
        to pass in tag names instead of tag objects.
        """
        ...

    def move_mark(self, mark: TextMark, where: TextIter) -> object:
        """
        Moves @mark to the new location @where. Emits the #GtkTextBuffer::mark-set
        signal as notification of the move.
        """
        ...

    def move_mark_by_name(self, name: str, where: TextIter) -> object:
        """
        Moves the mark named @name (which must exist) to location @where.
        See gtk_text_buffer_move_mark() for details.
        """
        ...

    def paste_clipboard(self, clipboard: Clipboard, override_location: _T.Optional[TextIter], default_editable: bool) -> object:
        """
        Pastes the contents of a clipboard. If @override_location is %NULL, the
        pasted text will be inserted at the cursor position, or the buffer selection
        will be replaced if the selection is non-empty.

        Note: pasting is asynchronous, that is, we’ll ask for the paste data and
        return, and at some point later after the main loop runs, the paste data will
        be inserted.
        """
        ...

    def place_cursor(self, where: TextIter) -> object:
        """
        This function moves the “insert” and “selection_bound” marks
        simultaneously.  If you move them to the same place in two steps
        with gtk_text_buffer_move_mark(), you will temporarily select a
        region in between their old and new locations, which can be pretty
        inefficient since the temporarily-selected region will force stuff
        to be recalculated. This function moves them as a unit, which can
        be optimized.
        """
        ...

    def register_deserialize_format(self, mime_type: str, function: TextBufferDeserializeFunc, user_data: _T.Optional[object], user_data_destroy: GLib.DestroyNotify) -> Gdk.Atom:
        """
        This function registers a rich text deserialization @function along with
        its @mime_type with the passed @buffer.
        """
        ...

    def register_deserialize_tagset(self, tagset_name: _T.Optional[str]) -> Gdk.Atom:
        """
        This function registers GTK+’s internal rich text serialization
        format with the passed @buffer. See
        gtk_text_buffer_register_serialize_tagset() for details.
        """
        ...

    def register_serialize_format(self, mime_type: str, function: TextBufferSerializeFunc, user_data: _T.Optional[object], user_data_destroy: GLib.DestroyNotify) -> Gdk.Atom:
        """
        This function registers a rich text serialization @function along with
        its @mime_type with the passed @buffer.
        """
        ...

    def register_serialize_tagset(self, tagset_name: _T.Optional[str]) -> Gdk.Atom:
        """
        This function registers GTK+’s internal rich text serialization
        format with the passed @buffer. The internal format does not comply
        to any standard rich text format and only works between #GtkTextBuffer
        instances. It is capable of serializing all of a text buffer’s tags
        and embedded pixbufs.

        This function is just a wrapper around
        gtk_text_buffer_register_serialize_format(). The mime type used
        for registering is “application/x-gtk-text-buffer-rich-text”, or
        “application/x-gtk-text-buffer-rich-text;format=@tagset_name” if a
        @tagset_name was passed.

        The @tagset_name can be used to restrict the transfer of rich text
        to buffers with compatible sets of tags, in order to avoid unknown
        tags from being pasted. It is probably the common case to pass an
        identifier != %NULL here, since the %NULL tagset requires the
        receiving buffer to deal with with pasting of arbitrary tags.
        """
        ...

    def remove_all_tags(self, start: TextIter, end: TextIter) -> object:
        """
        Removes all tags in the range between @start and @end.  Be careful
        with this function; it could remove tags added in code unrelated to
        the code you’re currently writing. That is, using this function is
        probably a bad idea if you have two or more unrelated code sections
        that add tags.
        """
        ...

    def remove_selection_clipboard(self, clipboard: Clipboard) -> object:
        """
        Removes a #GtkClipboard added with
        gtk_text_buffer_add_selection_clipboard().
        """
        ...

    def remove_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> object:
        """
        Emits the “remove-tag” signal. The default handler for the signal
        removes all occurrences of @tag from the given range. @start and
        @end don’t have to be in order.
        """
        ...

    def remove_tag_by_name(self, name: str, start: TextIter, end: TextIter) -> object:
        """
        Calls gtk_text_tag_table_lookup() on the buffer’s tag table to
        get a #GtkTextTag, then calls gtk_text_buffer_remove_tag().
        """
        ...

    def select_range(self, ins: TextIter, bound: TextIter) -> object:
        """
        This function moves the “insert” and “selection_bound” marks
        simultaneously.  If you move them in two steps
        with gtk_text_buffer_move_mark(), you will temporarily select a
        region in between their old and new locations, which can be pretty
        inefficient since the temporarily-selected region will force stuff
        to be recalculated. This function moves them as a unit, which can
        be optimized.
        """
        ...

    def serialize(self, content_buffer: TextBuffer, format: Gdk.Atom, start: TextIter, end: TextIter, length: int) -> object:
        """
        This function serializes the portion of text between @start
        and @end in the rich text format represented by @format.

        @formats to be used must be registered using
        gtk_text_buffer_register_serialize_format() or
        gtk_text_buffer_register_serialize_tagset() beforehand.
        """
        ...

    def set_modified(self, setting: bool) -> object:
        """
        Used to keep track of whether the buffer has been modified since the
        last time it was saved. Whenever the buffer is saved to disk, call
        gtk_text_buffer_set_modified (@buffer, FALSE). When the buffer is modified,
        it will automatically toggled on the modified bit again. When the modified
        bit flips, the buffer emits the #GtkTextBuffer::modified-changed signal.
        """
        ...

    def set_text(self, text: str, len: int) -> object:
        """
        Deletes current contents of @buffer, and inserts @text instead. If
        @len is -1, @text must be nul-terminated. @text must be valid UTF-8.
        """
        ...

    def unregister_deserialize_format(self, format: Gdk.Atom) -> object:
        """
        This function unregisters a rich text format that was previously
        registered using gtk_text_buffer_register_deserialize_format() or
        gtk_text_buffer_register_deserialize_tagset().
        """
        ...

    def unregister_serialize_format(self, format: Gdk.Atom) -> object:
        """
        This function unregisters a rich text format that was previously
        registered using gtk_text_buffer_register_serialize_format() or
        gtk_text_buffer_register_serialize_tagset()
        """
        ...


    ...

class TextCellAccessible(RendererCellAccessible, Atk.Action, Atk.Component, Atk.TableCell, Atk.Text):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class TextChildAnchor(GObject.Object):
    """
    A #GtkTextChildAnchor is a spot in the buffer where child widgets can
    be “anchored” (inserted inline, as if they were characters). The anchor
    can have multiple widgets anchored, to allow for multiple views.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> TextChildAnchor:
        """
        Creates a new #GtkTextChildAnchor. Usually you would then insert
        it into a #GtkTextBuffer with gtk_text_buffer_insert_child_anchor().
        To perform the creation and insertion in one step, use the
        convenience function gtk_text_buffer_create_child_anchor().
        """
        ...

    def get_deleted(self) -> bool:
        """
        Determines whether a child anchor has been deleted from
        the buffer. Keep in mind that the child anchor will be
        unreferenced when removed from the buffer, so you need to
        hold your own reference (with g_object_ref()) if you plan
        to use this function — otherwise all deleted child anchors
        will also be finalized.
        """
        ...

    def get_widgets(self) -> GLib.List:
        """
        Gets a list of all widgets anchored at this child anchor.
        The returned list should be freed with g_list_free().
        """
        ...


    ...

class TextMark(GObject.Object):
    """
    You may wish to begin by reading the
    [text widget conceptual overview][TextWidget]
    which gives an overview of all the objects and data
    types related to the text widget and how they work together.

    A #GtkTextMark is like a bookmark in a text buffer; it preserves a position in
    the text. You can convert the mark to an iterator using
    gtk_text_buffer_get_iter_at_mark(). Unlike iterators, marks remain valid across
    buffer mutations, because their behavior is defined when text is inserted or
    deleted. When text containing a mark is deleted, the mark remains in the
    position originally occupied by the deleted text. When text is inserted at a
    mark, a mark with “left gravity” will be moved to the
    beginning of the newly-inserted text, and a mark with “right
    gravity” will be moved to the end.

    Note that “left” and “right” here refer to logical direction (left
    is the toward the start of the buffer); in some languages such as
    Hebrew the logically-leftmost text is not actually on the left when
    displayed.

    Marks are reference counted, but the reference count only controls the validity
    of the memory; marks can be deleted from the buffer at any time with
    gtk_text_buffer_delete_mark(). Once deleted from the buffer, a mark is
    essentially useless.

    Marks optionally have names; these can be convenient to avoid passing the
    #GtkTextMark object around.

    Marks are typically created using the gtk_text_buffer_create_mark() function.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: _T.Optional[str], left_gravity: bool) -> TextMark:
        """
        Creates a text mark. Add it to a buffer using gtk_text_buffer_add_mark().
        If @name is %NULL, the mark is anonymous; otherwise, the mark can be
        retrieved by name using gtk_text_buffer_get_mark(). If a mark has left
        gravity, and text is inserted at the mark’s current location, the mark
        will be moved to the left of the newly-inserted text. If the mark has
        right gravity (@left_gravity = %FALSE), the mark will end up on the
        right of newly-inserted text. The standard left-to-right cursor is a
        mark with right gravity (when you type, the cursor stays on the right
        side of the text you’re typing).
        """
        ...

    def get_buffer(self) -> TextBuffer:
        """
        Gets the buffer this mark is located inside,
        or %NULL if the mark is deleted.
        """
        ...

    def get_deleted(self) -> bool:
        """
        Returns %TRUE if the mark has been removed from its buffer
        with gtk_text_buffer_delete_mark(). See gtk_text_buffer_add_mark()
        for a way to add it to a buffer again.
        """
        ...

    def get_left_gravity(self) -> bool:
        """
        Determines whether the mark has left gravity.
        """
        ...

    def get_name(self) -> str:
        """
        Returns the mark name; returns NULL for anonymous marks.
        """
        ...

    def get_visible(self) -> bool:
        """
        Returns %TRUE if the mark is visible (i.e. a cursor is displayed
        for it).
        """
        ...

    def set_visible(self, setting: bool) -> object:
        """
        Sets the visibility of @mark; the insertion point is normally
        visible, i.e. you can see it as a vertical bar. Also, the text
        widget uses a visible mark to indicate where a drop will occur when
        dragging-and-dropping text. Most other marks are not visible.
        Marks are not visible by default.
        """
        ...


    ...

class TextTag(GObject.Object):
    """
    You may wish to begin by reading the
    [text widget conceptual overview][TextWidget]
    which gives an overview of all the objects and
    data types related to the text widget and how they work together.

    Tags should be in the #GtkTextTagTable for a given #GtkTextBuffer
    before using them with that buffer.

    gtk_text_buffer_create_tag() is the best way to create tags.
    See “gtk3-demo” for numerous examples.

    For each property of #GtkTextTag, there is a “set” property, e.g.
    “font-set” corresponds to “font”. These “set” properties reflect
    whether a property has been set or not.
    They are maintained by GTK+ and you should not set them independently.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: _T.Optional[str]) -> TextTag:
        """
        Creates a #GtkTextTag. Configure the tag using object arguments,
        i.e. using g_object_set().
        """
        ...

    def changed(self, size_changed: bool) -> object:
        """
        Emits the #GtkTextTagTable::tag-changed signal on the #GtkTextTagTable where
        the tag is included.

        The signal is already emitted when setting a #GtkTextTag property. This
        function is useful for a #GtkTextTag subclass.
        """
        ...

    def event(self, event_object: GObject.Object, event: Gdk.Event, iter: TextIter) -> bool:
        """
        Emits the “event” signal on the #GtkTextTag.
        """
        ...

    def get_priority(self) -> int:
        """
        Get the tag priority.
        """
        ...

    def set_priority(self, priority: int) -> object:
        """
        Sets the priority of a #GtkTextTag. Valid priorities
        start at 0 and go to one less than gtk_text_tag_table_get_size().
        Each tag in a table has a unique priority; setting the priority
        of one tag shifts the priorities of all the other tags in the
        table to maintain a unique priority for each tag. Higher priority
        tags “win” if two tags both set the same text attribute. When adding
        a tag to a tag table, it will be assigned the highest priority in
        the table by default; so normally the precedence of a set of tags
        is the order in which they were added to the table, or created with
        gtk_text_buffer_create_tag(), which adds the tag to the buffer’s table
        automatically.
        """
        ...


    ...

class TextTagTable(GObject.Object, Buildable):
    """
    You may wish to begin by reading the
    [text widget conceptual overview][TextWidget]
    which gives an overview of all the objects and
    data types related to the text widget and how they work together.

    # GtkTextTagTables as GtkBuildable

    The GtkTextTagTable implementation of the GtkBuildable interface
    supports adding tags by specifying “tag” as the “type” attribute
    of a `<child>` element.

    An example of a UI definition fragment specifying tags:

    |[<!-- language="xml" -->
    <object class="GtkTextTagTable">
     <child type="tag">
       <object class="GtkTextTag"/>
     </child>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> TextTagTable:
        """
        Creates a new #GtkTextTagTable. The table contains no tags by
        default.
        """
        ...

    def add(self, tag: TextTag) -> bool:
        """
        Add a tag to the table. The tag is assigned the highest priority
        in the table.

        @tag must not be in a tag table already, and may not have
        the same name as an already-added tag.
        """
        ...

    def foreach(self, func: TextTagTableForeach, data: _T.Optional[object]) -> object:
        """
        Calls @func on each tag in @table, with user data @data.
        Note that the table may not be modified while iterating
        over it (you can’t add/remove tags).
        """
        ...

    def get_size(self) -> int:
        """
        Returns the size of the table (number of tags)
        """
        ...

    def lookup(self, name: str) -> TextTag:
        """
        Look up a named tag.
        """
        ...

    def remove(self, tag: TextTag) -> object:
        """
        Remove a tag from the table. If a #GtkTextBuffer has @table as its tag table,
        the tag is removed from the buffer. The table’s reference to the tag is
        removed, so the tag will end up destroyed if you don’t have a reference to
        it.
        """
        ...


    ...

class TextView(Container, Atk.ImplementorIface, Buildable, Scrollable):
    """
    You may wish to begin by reading the
    [text widget conceptual overview][TextWidget]
    which gives an overview of all the objects and data
    types related to the text widget and how they work together.

    # CSS nodes

    |[<!-- language="plain" -->
    textview.view
    ├── border.top
    ├── border.left
    ├── text
    │   ╰── [selection]
    ├── border.right
    ├── border.bottom
    ╰── [window.popup]
    ]|

    GtkTextView has a main css node with name textview and style class .view,
    and subnodes for each of the border windows, and the main text area,
    with names border and text, respectively. The border nodes each get
    one of the style classes .left, .right, .top or .bottom.

    A node representing the selection will appear below the text node.

    If a context menu is opened, the window node will appear as a subnode
    of the main node.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkTextView. If you don’t call gtk_text_view_set_buffer()
        before using the text view, an empty default buffer will be created
        for you. Get the buffer with gtk_text_view_get_buffer(). If you want
        to specify your own buffer, consider gtk_text_view_new_with_buffer().
        """
        ...


    @classmethod
    def new_with_buffer(cls, buffer: TextBuffer) -> Widget:
        """
        Creates a new #GtkTextView widget displaying the buffer
        @buffer. One buffer can be shared among many widgets.
        @buffer may be %NULL to create a default buffer, in which case
        this function is equivalent to gtk_text_view_new(). The
        text view adds its own reference count to the buffer; it does not
        take over an existing reference.
        """
        ...

    def add_child_at_anchor(self, child: Widget, anchor: TextChildAnchor) -> object:
        """
        Adds a child widget in the text buffer, at the given @anchor.
        """
        ...

    def add_child_in_window(self, child: Widget, which_window: TextWindowType, xpos: int, ypos: int) -> object:
        """
        Adds a child at fixed coordinates in one of the text widget's
        windows.

        The window must have nonzero size (see
        gtk_text_view_set_border_window_size()). Note that the child
        coordinates are given relative to scrolling. When
        placing a child in #GTK_TEXT_WINDOW_WIDGET, scrolling is
        irrelevant, the child floats above all scrollable areas. But when
        placing a child in one of the scrollable windows (border windows or
        text window) it will move with the scrolling as needed.
        """
        ...

    def backward_display_line(self, iter: TextIter) -> bool:
        """
        Moves the given @iter backward by one display (wrapped) line.
        A display line is different from a paragraph. Paragraphs are
        separated by newlines or other paragraph separator characters.
        Display lines are created by line-wrapping a paragraph. If
        wrapping is turned off, display lines and paragraphs will be the
        same. Display lines are divided differently for each view, since
        they depend on the view’s width; paragraphs are the same in all
        views, since they depend on the contents of the #GtkTextBuffer.
        """
        ...

    def backward_display_line_start(self, iter: TextIter) -> bool:
        """
        Moves the given @iter backward to the next display line start.
        A display line is different from a paragraph. Paragraphs are
        separated by newlines or other paragraph separator characters.
        Display lines are created by line-wrapping a paragraph. If
        wrapping is turned off, display lines and paragraphs will be the
        same. Display lines are divided differently for each view, since
        they depend on the view’s width; paragraphs are the same in all
        views, since they depend on the contents of the #GtkTextBuffer.
        """
        ...

    def buffer_to_window_coords(self, win: TextWindowType, buffer_x: int, buffer_y: int, window_x: int, window_y: int) -> object:
        """
        Converts coordinate (@buffer_x, @buffer_y) to coordinates for the window
        @win, and stores the result in (@window_x, @window_y).

        Note that you can’t convert coordinates for a nonexisting window (see
        gtk_text_view_set_border_window_size()).
        """
        ...

    def forward_display_line(self, iter: TextIter) -> bool:
        """
        Moves the given @iter forward by one display (wrapped) line.
        A display line is different from a paragraph. Paragraphs are
        separated by newlines or other paragraph separator characters.
        Display lines are created by line-wrapping a paragraph. If
        wrapping is turned off, display lines and paragraphs will be the
        same. Display lines are divided differently for each view, since
        they depend on the view’s width; paragraphs are the same in all
        views, since they depend on the contents of the #GtkTextBuffer.
        """
        ...

    def forward_display_line_end(self, iter: TextIter) -> bool:
        """
        Moves the given @iter forward to the next display line end.
        A display line is different from a paragraph. Paragraphs are
        separated by newlines or other paragraph separator characters.
        Display lines are created by line-wrapping a paragraph. If
        wrapping is turned off, display lines and paragraphs will be the
        same. Display lines are divided differently for each view, since
        they depend on the view’s width; paragraphs are the same in all
        views, since they depend on the contents of the #GtkTextBuffer.
        """
        ...

    def get_accepts_tab(self) -> bool:
        """
        Returns whether pressing the Tab key inserts a tab characters.
        gtk_text_view_set_accepts_tab().
        """
        ...

    def get_border_window_size(self, type: TextWindowType) -> int:
        """
        Gets the width of the specified border window. See
        gtk_text_view_set_border_window_size().
        """
        ...

    def get_bottom_margin(self) -> int:
        """
        Gets the bottom margin for text in the @text_view.
        """
        ...

    def get_buffer(self) -> TextBuffer:
        """
        Returns the #GtkTextBuffer being displayed by this text view.
        The reference count on the buffer is not incremented; the caller
        of this function won’t own a new reference.
        """
        ...

    def get_cursor_locations(self, iter: _T.Optional[TextIter], strong: Gdk.Rectangle, weak: Gdk.Rectangle) -> object:
        """
        Given an @iter within a text layout, determine the positions of the
        strong and weak cursors if the insertion point is at that
        iterator. The position of each cursor is stored as a zero-width
        rectangle. The strong cursor location is the location where
        characters of the directionality equal to the base direction of the
        paragraph are inserted.  The weak cursor location is the location
        where characters of the directionality opposite to the base
        direction of the paragraph are inserted.

        If @iter is %NULL, the actual cursor position is used.

        Note that if @iter happens to be the actual cursor position, and
        there is currently an IM preedit sequence being entered, the
        returned locations will be adjusted to account for the preedit
        cursor’s offset within the preedit sequence.

        The rectangle position is in buffer coordinates; use
        gtk_text_view_buffer_to_window_coords() to convert these
        coordinates to coordinates for one of the windows in the text view.
        """
        ...

    def get_cursor_visible(self) -> bool:
        """
        Find out whether the cursor should be displayed.
        """
        ...

    def get_default_attributes(self) -> TextAttributes:
        """
        Obtains a copy of the default text attributes. These are the
        attributes used for text unless a tag overrides them.
        You’d typically pass the default attributes in to
        gtk_text_iter_get_attributes() in order to get the
        attributes in effect at a given text position.

        The return value is a copy owned by the caller of this function,
        and should be freed with gtk_text_attributes_unref().
        """
        ...

    def get_editable(self) -> bool:
        """
        Returns the default editability of the #GtkTextView. Tags in the
        buffer may override this setting for some ranges of text.
        """
        ...

    def get_hadjustment(self) -> Adjustment:
        """
        Gets the horizontal-scrolling #GtkAdjustment.
        """
        ...

    def get_indent(self) -> int:
        """
        Gets the default indentation of paragraphs in @text_view.
        Tags in the view’s buffer may override the default.
        The indentation may be negative.
        """
        ...

    def get_input_hints(self) -> InputHints:
        """
        Gets the value of the #GtkTextView:input-hints property.
        """
        ...

    def get_input_purpose(self) -> InputPurpose:
        """
        Gets the value of the #GtkTextView:input-purpose property.
        """
        ...

    def get_iter_at_location(self, iter: TextIter, x: int, y: int) -> bool:
        """
        Retrieves the iterator at buffer coordinates @x and @y. Buffer
        coordinates are coordinates for the entire buffer, not just the
        currently-displayed portion.  If you have coordinates from an
        event, you have to convert those to buffer coordinates with
        gtk_text_view_window_to_buffer_coords().
        """
        ...

    def get_iter_at_position(self, iter: TextIter, trailing: int, x: int, y: int) -> bool:
        """
        Retrieves the iterator pointing to the character at buffer
        coordinates @x and @y. Buffer coordinates are coordinates for
        the entire buffer, not just the currently-displayed portion.
        If you have coordinates from an event, you have to convert
        those to buffer coordinates with
        gtk_text_view_window_to_buffer_coords().

        Note that this is different from gtk_text_view_get_iter_at_location(),
        which returns cursor locations, i.e. positions between
        characters.
        """
        ...

    def get_iter_location(self, iter: TextIter, location: Gdk.Rectangle) -> object:
        """
        Gets a rectangle which roughly contains the character at @iter.
        The rectangle position is in buffer coordinates; use
        gtk_text_view_buffer_to_window_coords() to convert these
        coordinates to coordinates for one of the windows in the text view.
        """
        ...

    def get_justification(self) -> Justification:
        """
        Gets the default justification of paragraphs in @text_view.
        Tags in the buffer may override the default.
        """
        ...

    def get_left_margin(self) -> int:
        """
        Gets the default left margin size of paragraphs in the @text_view.
        Tags in the buffer may override the default.
        """
        ...

    def get_line_at_y(self, target_iter: TextIter, y: int, line_top: int) -> object:
        """
        Gets the #GtkTextIter at the start of the line containing
        the coordinate @y. @y is in buffer coordinates, convert from
        window coordinates with gtk_text_view_window_to_buffer_coords().
        If non-%NULL, @line_top will be filled with the coordinate of the top
        edge of the line.
        """
        ...

    def get_line_yrange(self, iter: TextIter, y: int, height: int) -> object:
        """
        Gets the y coordinate of the top of the line containing @iter,
        and the height of the line. The coordinate is a buffer coordinate;
        convert to window coordinates with gtk_text_view_buffer_to_window_coords().
        """
        ...

    def get_monospace(self) -> bool:
        """
        Gets the value of the #GtkTextView:monospace property.
        """
        ...

    def get_overwrite(self) -> bool:
        """
        Returns whether the #GtkTextView is in overwrite mode or not.
        """
        ...

    def get_pixels_above_lines(self) -> int:
        """
        Gets the default number of pixels to put above paragraphs.
        Adding this function with gtk_text_view_get_pixels_below_lines()
        is equal to the line space between each paragraph.
        """
        ...

    def get_pixels_below_lines(self) -> int:
        """
        Gets the value set by gtk_text_view_set_pixels_below_lines().

        The line space is the sum of the value returned by this function and the
        value returned by gtk_text_view_get_pixels_above_lines().
        """
        ...

    def get_pixels_inside_wrap(self) -> int:
        """
        Gets the value set by gtk_text_view_set_pixels_inside_wrap().
        """
        ...

    def get_right_margin(self) -> int:
        """
        Gets the default right margin for text in @text_view. Tags
        in the buffer may override the default.
        """
        ...

    def get_tabs(self) -> Pango.TabArray:
        """
        Gets the default tabs for @text_view. Tags in the buffer may
        override the defaults. The returned array will be %NULL if
        “standard” (8-space) tabs are used. Free the return value
        with pango_tab_array_free().
        """
        ...

    def get_top_margin(self) -> int:
        """
        Gets the top margin for text in the @text_view.
        """
        ...

    def get_vadjustment(self) -> Adjustment:
        """
        Gets the vertical-scrolling #GtkAdjustment.
        """
        ...

    def get_visible_rect(self, visible_rect: Gdk.Rectangle) -> object:
        """
        Fills @visible_rect with the currently-visible
        region of the buffer, in buffer coordinates. Convert to window coordinates
        with gtk_text_view_buffer_to_window_coords().
        """
        ...

    def get_window(self, win: TextWindowType) -> Gdk.Window:
        """
        Retrieves the #GdkWindow corresponding to an area of the text view;
        possible windows include the overall widget window, child windows
        on the left, right, top, bottom, and the window that displays the
        text buffer. Windows are %NULL and nonexistent if their width or
        height is 0, and are nonexistent before the widget has been
        realized.
        """
        ...

    def get_window_type(self, window: Gdk.Window) -> TextWindowType:
        """
        Usually used to find out which window an event corresponds to.

        If you connect to an event signal on @text_view, this function
        should be called on `event->window` to see which window it was.
        """
        ...

    def get_wrap_mode(self) -> WrapMode:
        """
        Gets the line wrapping for the view.
        """
        ...

    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool:
        """
        Allow the #GtkTextView input method to internally handle key press
        and release events. If this function returns %TRUE, then no further
        processing should be done for this key event. See
        gtk_im_context_filter_keypress().

        Note that you are expected to call this function from your handler
        when overriding key event handling. This is needed in the case when
        you need to insert your own key handling between the input method
        and the default key event handling of the #GtkTextView.

        |[<!-- language="C" -->
        static gboolean
        gtk_foo_bar_key_press_event (GtkWidget   *widget,
                                     GdkEventKey *event)
        {
          guint keyval;

          gdk_event_get_keyval ((GdkEvent*)event, &keyval);

          if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
            {
              if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
                return TRUE;
            }

          // Do some stuff

          return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
        }
        ]|
        """
        ...

    def move_child(self, child: Widget, xpos: int, ypos: int) -> object:
        """
        Updates the position of a child, as for gtk_text_view_add_child_in_window().
        """
        ...

    def move_mark_onscreen(self, mark: TextMark) -> bool:
        """
        Moves a mark within the buffer so that it's
        located within the currently-visible text area.
        """
        ...

    def move_visually(self, iter: TextIter, count: int) -> bool:
        """
        Move the iterator a given number of characters visually, treating
        it as the strong cursor position. If @count is positive, then the
        new strong cursor position will be @count positions to the right of
        the old cursor position. If @count is negative then the new strong
        cursor position will be @count positions to the left of the old
        cursor position.

        In the presence of bi-directional text, the correspondence
        between logical and visual order will depend on the direction
        of the current run, and there may be jumps when the cursor
        is moved off of the end of a run.
        """
        ...

    def place_cursor_onscreen(self) -> bool:
        """
        Moves the cursor to the currently visible region of the
        buffer, it it isn’t there already.
        """
        ...

    def reset_cursor_blink(self) -> object:
        """
        Ensures that the cursor is shown (i.e. not in an 'off' blink
        interval) and resets the time that it will stay blinking (or
        visible, in case blinking is disabled).

        This function should be called in response to user input
        (e.g. from derived classes that override the textview's
        #GtkWidget::key-press-event handler).
        """
        ...

    def reset_im_context(self) -> object:
        """
        Reset the input method context of the text view if needed.

        This can be necessary in the case where modifying the buffer
        would confuse on-going input method behavior.
        """
        ...

    def scroll_mark_onscreen(self, mark: TextMark) -> object:
        """
        Scrolls @text_view the minimum distance such that @mark is contained
        within the visible area of the widget.
        """
        ...

    def scroll_to_iter(self, iter: TextIter, within_margin: float, use_align: bool, xalign: float, yalign: float) -> bool:
        """
        Scrolls @text_view so that @iter is on the screen in the position
        indicated by @xalign and @yalign. An alignment of 0.0 indicates
        left or top, 1.0 indicates right or bottom, 0.5 means center.
        If @use_align is %FALSE, the text scrolls the minimal distance to
        get the mark onscreen, possibly not scrolling at all. The effective
        screen for purposes of this function is reduced by a margin of size
        @within_margin.

        Note that this function uses the currently-computed height of the
        lines in the text buffer. Line heights are computed in an idle
        handler; so this function may not have the desired effect if it’s
        called before the height computations. To avoid oddness, consider
        using gtk_text_view_scroll_to_mark() which saves a point to be
        scrolled to after line validation.
        """
        ...

    def scroll_to_mark(self, mark: TextMark, within_margin: float, use_align: bool, xalign: float, yalign: float) -> object:
        """
        Scrolls @text_view so that @mark is on the screen in the position
        indicated by @xalign and @yalign. An alignment of 0.0 indicates
        left or top, 1.0 indicates right or bottom, 0.5 means center.
        If @use_align is %FALSE, the text scrolls the minimal distance to
        get the mark onscreen, possibly not scrolling at all. The effective
        screen for purposes of this function is reduced by a margin of size
        @within_margin.
        """
        ...

    def set_accepts_tab(self, accepts_tab: bool) -> object:
        """
        Sets the behavior of the text widget when the Tab key is pressed.
        If @accepts_tab is %TRUE, a tab character is inserted. If @accepts_tab
        is %FALSE the keyboard focus is moved to the next widget in the focus
        chain.
        """
        ...

    def set_border_window_size(self, type: TextWindowType, size: int) -> object:
        """
        Sets the width of %GTK_TEXT_WINDOW_LEFT or %GTK_TEXT_WINDOW_RIGHT,
        or the height of %GTK_TEXT_WINDOW_TOP or %GTK_TEXT_WINDOW_BOTTOM.
        Automatically destroys the corresponding window if the size is set
        to 0, and creates the window if the size is set to non-zero.  This
        function can only be used for the “border windows”, and it won’t
        work with %GTK_TEXT_WINDOW_WIDGET, %GTK_TEXT_WINDOW_TEXT, or
        %GTK_TEXT_WINDOW_PRIVATE.
        """
        ...

    def set_bottom_margin(self, bottom_margin: int) -> object:
        """
        Sets the bottom margin for text in @text_view.

        Note that this function is confusingly named.
        In CSS terms, the value set here is padding.
        """
        ...

    def set_buffer(self, buffer: _T.Optional[TextBuffer]) -> object:
        """
        Sets @buffer as the buffer being displayed by @text_view. The previous
        buffer displayed by the text view is unreferenced, and a reference is
        added to @buffer. If you owned a reference to @buffer before passing it
        to this function, you must remove that reference yourself; #GtkTextView
        will not “adopt” it.
        """
        ...

    def set_cursor_visible(self, setting: bool) -> object:
        """
        Toggles whether the insertion point should be displayed. A buffer with
        no editable text probably shouldn’t have a visible cursor, so you may
        want to turn the cursor off.

        Note that this property may be overridden by the
        #GtkSettings:gtk-keynave-use-caret settings.
        """
        ...

    def set_editable(self, setting: bool) -> object:
        """
        Sets the default editability of the #GtkTextView. You can override
        this default setting with tags in the buffer, using the “editable”
        attribute of tags.
        """
        ...

    def set_indent(self, indent: int) -> object:
        """
        Sets the default indentation for paragraphs in @text_view.
        Tags in the buffer may override the default.
        """
        ...

    def set_input_hints(self, hints: InputHints) -> object:
        """
        Sets the #GtkTextView:input-hints property, which
        allows input methods to fine-tune their behaviour.
        """
        ...

    def set_input_purpose(self, purpose: InputPurpose) -> object:
        """
        Sets the #GtkTextView:input-purpose property which
        can be used by on-screen keyboards and other input
        methods to adjust their behaviour.
        """
        ...

    def set_justification(self, justification: Justification) -> object:
        """
        Sets the default justification of text in @text_view.
        Tags in the view’s buffer may override the default.
        """
        ...

    def set_left_margin(self, left_margin: int) -> object:
        """
        Sets the default left margin for text in @text_view.
        Tags in the buffer may override the default.

        Note that this function is confusingly named.
        In CSS terms, the value set here is padding.
        """
        ...

    def set_monospace(self, monospace: bool) -> object:
        """
        Sets the #GtkTextView:monospace property, which
        indicates that the text view should use monospace
        fonts.
        """
        ...

    def set_overwrite(self, overwrite: bool) -> object:
        """
        Changes the #GtkTextView overwrite mode.
        """
        ...

    def set_pixels_above_lines(self, pixels_above_lines: int) -> object:
        """
        Sets the default number of blank pixels above paragraphs in @text_view.
        Tags in the buffer for @text_view may override the defaults.
        """
        ...

    def set_pixels_below_lines(self, pixels_below_lines: int) -> object:
        """
        Sets the default number of pixels of blank space
        to put below paragraphs in @text_view. May be overridden
        by tags applied to @text_view’s buffer.
        """
        ...

    def set_pixels_inside_wrap(self, pixels_inside_wrap: int) -> object:
        """
        Sets the default number of pixels of blank space to leave between
        display/wrapped lines within a paragraph. May be overridden by
        tags in @text_view’s buffer.
        """
        ...

    def set_right_margin(self, right_margin: int) -> object:
        """
        Sets the default right margin for text in the text view.
        Tags in the buffer may override the default.

        Note that this function is confusingly named.
        In CSS terms, the value set here is padding.
        """
        ...

    def set_tabs(self, tabs: Pango.TabArray) -> object:
        """
        Sets the default tab stops for paragraphs in @text_view.
        Tags in the buffer may override the default.
        """
        ...

    def set_top_margin(self, top_margin: int) -> object:
        """
        Sets the top margin for text in @text_view.

        Note that this function is confusingly named.
        In CSS terms, the value set here is padding.
        """
        ...

    def set_wrap_mode(self, wrap_mode: WrapMode) -> object:
        """
        Sets the line wrapping for the view.
        """
        ...

    def starts_display_line(self, iter: TextIter) -> bool:
        """
        Determines whether @iter is at the start of a display line.
        See gtk_text_view_forward_display_line() for an explanation of
        display lines vs. paragraphs.
        """
        ...

    def window_to_buffer_coords(self, win: TextWindowType, window_x: int, window_y: int, buffer_x: int, buffer_y: int) -> object:
        """
        Converts coordinates on the window identified by @win to buffer
        coordinates, storing the result in (@buffer_x,@buffer_y).

        Note that you can’t convert coordinates for a nonexisting window (see
        gtk_text_view_set_border_window_size()).
        """
        ...


    ...

class TextViewAccessible(ContainerAccessible, Atk.Component, Atk.EditableText, Atk.StreamableContent, Atk.Text):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ThemingEngine(GObject.Object):
    """
    #GtkThemingEngine was the object used for rendering themed content
    in GTK+ widgets. It used to allow overriding GTK+'s default
    implementation of rendering functions by allowing engines to be
    loaded as modules.

    #GtkThemingEngine has been deprecated in GTK+ 3.14 and will be
    ignored for rendering. The advancements in CSS theming are good
    enough to allow themers to achieve their goals without the need
    to modify source code.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get(self, state: StateFlags, *args: object) -> object:
        """
        Retrieves several style property values that apply to the currently
        rendered element.
        """
        ...

    def get_background_color(self, state: StateFlags, color: Gdk.RGBA) -> object:
        """
        Gets the background color for a given state.
        """
        ...

    def get_border(self, state: StateFlags, border: Border) -> object:
        """
        Gets the border for a given state as a #GtkBorder.
        """
        ...

    def get_border_color(self, state: StateFlags, color: Gdk.RGBA) -> object:
        """
        Gets the border color for a given state.
        """
        ...

    def get_color(self, state: StateFlags, color: Gdk.RGBA) -> object:
        """
        Gets the foreground color for a given state.
        """
        ...

    def get_direction(self) -> TextDirection:
        """
        Returns the widget direction used for rendering.
        """
        ...

    def get_font(self, state: StateFlags) -> Pango.FontDescription:
        """
        Returns the font description for a given state.
        """
        ...

    def get_junction_sides(self) -> JunctionSides:
        """
        Returns the widget direction used for rendering.
        """
        ...

    def get_margin(self, state: StateFlags, margin: Border) -> object:
        """
        Gets the margin for a given state as a #GtkBorder.
        """
        ...

    def get_padding(self, state: StateFlags, padding: Border) -> object:
        """
        Gets the padding for a given state as a #GtkBorder.
        """
        ...

    def get_path(self) -> WidgetPath:
        """
        Returns the widget path used for style matching.
        """
        ...

    def get_property(self, property: str, state: StateFlags, value: GObject.Value) -> object:
        """
        Gets a property value as retrieved from the style settings that apply
        to the currently rendered element.
        """
        ...

    def get_screen(self) -> Gdk.Screen:
        """
        Returns the #GdkScreen to which @engine currently rendering to.
        """
        ...

    def get_state(self) -> StateFlags:
        """
        returns the state used when rendering.
        """
        ...

    def get_style(self, *args: object) -> object:
        """
        Retrieves several widget style properties from @engine according
        to the currently rendered content’s style.
        """
        ...

    def get_style_property(self, property_name: str, value: GObject.Value) -> object:
        """
        Gets the value for a widget style property.
        """
        ...

    def get_style_valist(self, args: list) -> object:
        """
        Retrieves several widget style properties from @engine according to the
        currently rendered content’s style.
        """
        ...

    def get_valist(self, state: StateFlags, args: list) -> object:
        """
        Retrieves several style property values that apply to the currently
        rendered element.
        """
        ...

    def has_class(self, style_class: str) -> bool:
        """
        Returns %TRUE if the currently rendered contents have
        defined the given class name.
        """
        ...

    def has_region(self, style_region: str, flags: RegionFlags) -> bool:
        """
        Returns %TRUE if the currently rendered contents have the
        region defined. If @flags_return is not %NULL, it is set
        to the flags affecting the region.
        """
        ...

    def lookup_color(self, color_name: str, color: Gdk.RGBA) -> bool:
        """
        Looks up and resolves a color name in the current style’s color map.
        """
        ...

    def state_is_running(self, state: StateType, progress: float) -> bool:
        """
        Returns %TRUE if there is a transition animation running for the
        current region (see gtk_style_context_push_animatable_region()).

        If @progress is not %NULL, the animation progress will be returned
        there, 0.0 means the state is closest to being %FALSE, while 1.0 means
        it’s closest to being %TRUE. This means transition animations will
        run from 0 to 1 when @state is being set to %TRUE and from 1 to 0 when
        it’s being set to %FALSE.
        """
        ...


    ...

class ToggleAction(Action, Buildable):
    """
    A #GtkToggleAction corresponds roughly to a #GtkCheckMenuItem. It has an
    “active” state specifying whether the action has been checked or not.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: str, label: _T.Optional[str], tooltip: _T.Optional[str], stock_id: _T.Optional[str]) -> ToggleAction:
        """
        Creates a new #GtkToggleAction object. To add the action to
        a #GtkActionGroup and set the accelerator for the action,
        call gtk_action_group_add_action_with_accel().
        """
        ...

    def get_active(self) -> bool:
        """
        Returns the checked state of the toggle action.
        """
        ...

    def get_draw_as_radio(self) -> bool:
        """
        Returns whether the action should have proxies like a radio action.
        """
        ...

    def set_active(self, is_active: bool) -> object:
        """
        Sets the checked state on the toggle action.
        """
        ...

    def set_draw_as_radio(self, draw_as_radio: bool) -> object:
        """
        Sets whether the action should have proxies like a radio action.
        """
        ...

    def toggled(self) -> object:
        """
        Emits the “toggled” signal on the toggle action.
        """
        ...


    ...

class ToggleButton(Button, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A #GtkToggleButton is a #GtkButton which will remain “pressed-in” when
    clicked. Clicking again will cause the toggle button to return to its
    normal state.

    A toggle button is created by calling either gtk_toggle_button_new() or
    gtk_toggle_button_new_with_label(). If using the former, it is advisable to
    pack a widget, (such as a #GtkLabel and/or a #GtkImage), into the toggle
    button’s container. (See #GtkButton for more information).

    The state of a #GtkToggleButton can be set specifically using
    gtk_toggle_button_set_active(), and retrieved using
    gtk_toggle_button_get_active().

    To simply switch the state of a toggle button, use gtk_toggle_button_toggled().

    # CSS nodes

    GtkToggleButton has a single CSS node with name button. To differentiate
    it from a plain #GtkButton, it gets the .toggle style class.

    ## Creating two #GtkToggleButton widgets.

    |[<!-- language="C" -->
    static void output_state (GtkToggleButton *source, gpointer user_data) {
      printf ("Active: %d\n", gtk_toggle_button_get_active (source));
    }

    void make_toggles (void) {
      GtkWidget *window, *toggle1, *toggle2;
      GtkWidget *box;
      const char *text;

      window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
      box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 12);

      text = "Hi, I’m a toggle button.";
      toggle1 = gtk_toggle_button_new_with_label (text);

      // Makes this toggle button invisible
      gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle1),
                                  TRUE);

      g_signal_connect (toggle1, "toggled",
                        G_CALLBACK (output_state),
                        NULL);
      gtk_container_add (GTK_CONTAINER (box), toggle1);

      text = "Hi, I’m a toggle button.";
      toggle2 = gtk_toggle_button_new_with_label (text);
      gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle2),
                                  FALSE);
      g_signal_connect (toggle2, "toggled",
                        G_CALLBACK (output_state),
                        NULL);
      gtk_container_add (GTK_CONTAINER (box), toggle2);

      gtk_container_add (GTK_CONTAINER (window), box);
      gtk_widget_show_all (window);
    }
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new toggle button. A widget should be packed into the button, as in gtk_button_new().
        """
        ...


    @classmethod
    def new_with_label(cls, label: str) -> Widget:
        """
        Creates a new toggle button with a text label.
        """
        ...


    @classmethod
    def new_with_mnemonic(cls, label: str) -> Widget:
        """
        Creates a new #GtkToggleButton containing a label. The label
        will be created using gtk_label_new_with_mnemonic(), so underscores
        in @label indicate the mnemonic for the button.
        """
        ...

    def get_active(self) -> bool:
        """
        Queries a #GtkToggleButton and returns its current state. Returns %TRUE if
        the toggle button is pressed in and %FALSE if it is raised.
        """
        ...

    def get_inconsistent(self) -> bool:
        """
        Gets the value set by gtk_toggle_button_set_inconsistent().
        """
        ...

    def get_mode(self) -> bool:
        """
        Retrieves whether the button is displayed as a separate indicator
        and label. See gtk_toggle_button_set_mode().
        """
        ...

    def set_active(self, is_active: bool) -> object:
        """
        Sets the status of the toggle button. Set to %TRUE if you want the
        GtkToggleButton to be “pressed in”, and %FALSE to raise it.
        This action causes the #GtkToggleButton::toggled signal and the
        #GtkButton::clicked signal to be emitted.
        """
        ...

    def set_inconsistent(self, setting: bool) -> object:
        """
        If the user has selected a range of elements (such as some text or
        spreadsheet cells) that are affected by a toggle button, and the
        current values in that range are inconsistent, you may want to
        display the toggle in an “in between” state. This function turns on
        “in between” display.  Normally you would turn off the inconsistent
        state again if the user toggles the toggle button. This has to be
        done manually, gtk_toggle_button_set_inconsistent() only affects
        visual appearance, it doesn’t affect the semantics of the button.
        """
        ...

    def set_mode(self, draw_indicator: bool) -> object:
        """
        Sets whether the button is displayed as a separate indicator and label.
        You can call this function on a checkbutton or a radiobutton with
        @draw_indicator = %FALSE to make the button look like a normal button.

        This can be used to create linked strip of buttons that work like
        a #GtkStackSwitcher.

        This function only affects instances of classes like #GtkCheckButton
        and #GtkRadioButton that derive from #GtkToggleButton,
        not instances of #GtkToggleButton itself.
        """
        ...

    def toggled(self) -> object:
        """
        Emits the #GtkToggleButton::toggled signal on the
        #GtkToggleButton. There is no good reason for an
        application ever to call this function.
        """
        ...


    ...

class ToggleButtonAccessible(ButtonAccessible, Atk.Action, Atk.Component, Atk.Image):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class ToggleToolButton(ToolButton, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    A #GtkToggleToolButton is a #GtkToolItem that contains a toggle
    button.

    Use gtk_toggle_tool_button_new() to create a new GtkToggleToolButton.

    # CSS nodes

    GtkToggleToolButton has a single CSS node with name togglebutton.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> ToolItem:
        """
        Returns a new #GtkToggleToolButton
        """
        ...


    @classmethod
    def new_from_stock(cls, stock_id: str) -> ToolItem:
        """
        Creates a new #GtkToggleToolButton containing the image and text from a
        stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
        and #GTK_STOCK_APPLY.

        It is an error if @stock_id is not a name of a stock item.
        """
        ...

    def get_active(self) -> bool:
        """
        Queries a #GtkToggleToolButton and returns its current state.
        Returns %TRUE if the toggle button is pressed in and %FALSE if it is raised.
        """
        ...

    def set_active(self, is_active: bool) -> object:
        """
        Sets the status of the toggle tool button. Set to %TRUE if you
        want the GtkToggleButton to be “pressed in”, and %FALSE to raise it.
        This action causes the toggled signal to be emitted.
        """
        ...


    ...

class ToolButton(ToolItem, Atk.ImplementorIface, Actionable, Activatable, Buildable):
    """
    #GtkToolButtons are #GtkToolItems containing buttons.

    Use gtk_tool_button_new() to create a new #GtkToolButton.

    The label of a #GtkToolButton is determined by the properties
    #GtkToolButton:label-widget, #GtkToolButton:label, and
    #GtkToolButton:stock-id. If #GtkToolButton:label-widget is
    non-%NULL, then that widget is used as the label. Otherwise, if
    #GtkToolButton:label is non-%NULL, that string is used as the label.
    Otherwise, if #GtkToolButton:stock-id is non-%NULL, the label is
    determined by the stock item. Otherwise, the button does not have a label.

    The icon of a #GtkToolButton is determined by the properties
    #GtkToolButton:icon-widget and #GtkToolButton:stock-id. If
    #GtkToolButton:icon-widget is non-%NULL, then
    that widget is used as the icon. Otherwise, if #GtkToolButton:stock-id is
    non-%NULL, the icon is determined by the stock item. Otherwise,
    the button does not have a icon.

    # CSS nodes

    GtkToolButton has a single CSS node with name toolbutton.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, icon_widget: _T.Optional[Widget], label: _T.Optional[str]) -> ToolItem:
        """
        Creates a new #GtkToolButton using @icon_widget as contents and @label as
        label.
        """
        ...


    @classmethod
    def new_from_stock(cls, stock_id: str) -> ToolItem:
        """
        Creates a new #GtkToolButton containing the image and text from a
        stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
        and #GTK_STOCK_APPLY.

        It is an error if @stock_id is not a name of a stock item.
        """
        ...

    def get_icon_name(self) -> str:
        """
        Returns the name of the themed icon for the tool button,
        see gtk_tool_button_set_icon_name().
        """
        ...

    def get_icon_widget(self) -> Widget:
        """
        Return the widget used as icon widget on @button.
        See gtk_tool_button_set_icon_widget().
        """
        ...

    def get_label(self) -> str:
        """
        Returns the label used by the tool button, or %NULL if the tool button
        doesn’t have a label. or uses a the label from a stock item. The returned
        string is owned by GTK+, and must not be modified or freed.
        """
        ...

    def get_label_widget(self) -> Widget:
        """
        Returns the widget used as label on @button.
        See gtk_tool_button_set_label_widget().
        """
        ...

    def get_stock_id(self) -> str:
        """
        Returns the name of the stock item. See gtk_tool_button_set_stock_id().
        The returned string is owned by GTK+ and must not be freed or modifed.
        """
        ...

    def get_use_underline(self) -> bool:
        """
        Returns whether underscores in the label property are used as mnemonics
        on menu items on the overflow menu. See gtk_tool_button_set_use_underline().
        """
        ...

    def set_icon_name(self, icon_name: _T.Optional[str]) -> object:
        """
        Sets the icon for the tool button from a named themed icon.
        See the docs for #GtkIconTheme for more details.
        The #GtkToolButton:icon-name property only has an effect if not
        overridden by non-%NULL #GtkToolButton:label-widget,
        #GtkToolButton:icon-widget and #GtkToolButton:stock-id properties.
        """
        ...

    def set_icon_widget(self, icon_widget: _T.Optional[Widget]) -> object:
        """
        Sets @icon as the widget used as icon on @button. If @icon_widget is
        %NULL the icon is determined by the #GtkToolButton:stock-id property. If the
        #GtkToolButton:stock-id property is also %NULL, @button will not have an icon.
        """
        ...

    def set_label(self, label: _T.Optional[str]) -> object:
        """
        Sets @label as the label used for the tool button. The #GtkToolButton:label
        property only has an effect if not overridden by a non-%NULL
        #GtkToolButton:label-widget property. If both the #GtkToolButton:label-widget
        and #GtkToolButton:label properties are %NULL, the label is determined by the
        #GtkToolButton:stock-id property. If the #GtkToolButton:stock-id property is
        also %NULL, @button will not have a label.
        """
        ...

    def set_label_widget(self, label_widget: _T.Optional[Widget]) -> object:
        """
        Sets @label_widget as the widget that will be used as the label
        for @button. If @label_widget is %NULL the #GtkToolButton:label property is used
        as label. If #GtkToolButton:label is also %NULL, the label in the stock item
        determined by the #GtkToolButton:stock-id property is used as label. If
        #GtkToolButton:stock-id is also %NULL, @button does not have a label.
        """
        ...

    def set_stock_id(self, stock_id: _T.Optional[str]) -> object:
        """
        Sets the name of the stock item. See gtk_tool_button_new_from_stock().
        The stock_id property only has an effect if not overridden by non-%NULL
        #GtkToolButton:label-widget and #GtkToolButton:icon-widget properties.
        """
        ...

    def set_use_underline(self, use_underline: bool) -> object:
        """
        If set, an underline in the label property indicates that the next character
        should be used for the mnemonic accelerator key in the overflow menu. For
        example, if the label property is “_Open” and @use_underline is %TRUE,
        the label on the tool button will be “Open” and the item on the overflow
        menu will have an underlined “O”.

        Labels shown on tool buttons never have mnemonics on them; this property
        only affects the menu item on the overflow menu.
        """
        ...


    ...

class ToolItem(Bin, Atk.ImplementorIface, Activatable, Buildable):
    """
    #GtkToolItems are widgets that can appear on a toolbar. To
    create a toolbar item that contain something else than a button, use
    gtk_tool_item_new(). Use gtk_container_add() to add a child
    widget to the tool item.

    For toolbar items that contain buttons, see the #GtkToolButton,
    #GtkToggleToolButton and #GtkRadioToolButton classes.

    See the #GtkToolbar class for a description of the toolbar widget, and
    #GtkToolShell for a description of the tool shell interface.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> ToolItem:
        """
        Creates a new #GtkToolItem
        """
        ...

    def get_ellipsize_mode(self) -> Pango.EllipsizeMode:
        """
        Returns the ellipsize mode used for @tool_item. Custom subclasses of
        #GtkToolItem should call this function to find out how text should
        be ellipsized.
        """
        ...

    def get_expand(self) -> bool:
        """
        Returns whether @tool_item is allocated extra space.
        See gtk_tool_item_set_expand().
        """
        ...

    def get_homogeneous(self) -> bool:
        """
        Returns whether @tool_item is the same size as other homogeneous
        items. See gtk_tool_item_set_homogeneous().
        """
        ...

    def get_icon_size(self) -> int:
        """
        Returns the icon size used for @tool_item. Custom subclasses of
        #GtkToolItem should call this function to find out what size icons
        they should use.
        """
        ...

    def get_is_important(self) -> bool:
        """
        Returns whether @tool_item is considered important. See
        gtk_tool_item_set_is_important()
        """
        ...

    def get_orientation(self) -> Orientation:
        """
        Returns the orientation used for @tool_item. Custom subclasses of
        #GtkToolItem should call this function to find out what size icons
        they should use.
        """
        ...

    def get_proxy_menu_item(self, menu_item_id: str) -> Widget:
        """
        If @menu_item_id matches the string passed to
        gtk_tool_item_set_proxy_menu_item() return the corresponding #GtkMenuItem.

        Custom subclasses of #GtkToolItem should use this function to
        update their menu item when the #GtkToolItem changes. That the
        @menu_item_ids must match ensures that a #GtkToolItem
        will not inadvertently change a menu item that they did not create.
        """
        ...

    def get_relief_style(self) -> ReliefStyle:
        """
        Returns the relief style of @tool_item. See gtk_button_set_relief().
        Custom subclasses of #GtkToolItem should call this function in the handler
        of the #GtkToolItem::toolbar_reconfigured signal to find out the
        relief style of buttons.
        """
        ...

    def get_text_alignment(self) -> float:
        """
        Returns the text alignment used for @tool_item. Custom subclasses of
        #GtkToolItem should call this function to find out how text should
        be aligned.
        """
        ...

    def get_text_orientation(self) -> Orientation:
        """
        Returns the text orientation used for @tool_item. Custom subclasses of
        #GtkToolItem should call this function to find out how text should
        be orientated.
        """
        ...

    def get_text_size_group(self) -> SizeGroup:
        """
        Returns the size group used for labels in @tool_item.
        Custom subclasses of #GtkToolItem should call this function
        and use the size group for labels.
        """
        ...

    def get_toolbar_style(self) -> ToolbarStyle:
        """
        Returns the toolbar style used for @tool_item. Custom subclasses of
        #GtkToolItem should call this function in the handler of the
        GtkToolItem::toolbar_reconfigured signal to find out in what style
        the toolbar is displayed and change themselves accordingly

        Possibilities are:
        - %GTK_TOOLBAR_BOTH, meaning the tool item should show
          both an icon and a label, stacked vertically
        - %GTK_TOOLBAR_ICONS, meaning the toolbar shows only icons
        - %GTK_TOOLBAR_TEXT, meaning the tool item should only show text
        - %GTK_TOOLBAR_BOTH_HORIZ, meaning the tool item should show
          both an icon and a label, arranged horizontally
        """
        ...

    def get_use_drag_window(self) -> bool:
        """
        Returns whether @tool_item has a drag window. See
        gtk_tool_item_set_use_drag_window().
        """
        ...

    def get_visible_horizontal(self) -> bool:
        """
        Returns whether the @tool_item is visible on toolbars that are
        docked horizontally.
        """
        ...

    def get_visible_vertical(self) -> bool:
        """
        Returns whether @tool_item is visible when the toolbar is docked vertically.
        See gtk_tool_item_set_visible_vertical().
        """
        ...

    def rebuild_menu(self) -> object:
        """
        Calling this function signals to the toolbar that the
        overflow menu item for @tool_item has changed. If the
        overflow menu is visible when this function it called,
        the menu will be rebuilt.

        The function must be called when the tool item changes what it
        will do in response to the #GtkToolItem::create-menu-proxy signal.
        """
        ...

    def retrieve_proxy_menu_item(self) -> Widget:
        """
        Returns the #GtkMenuItem that was last set by
        gtk_tool_item_set_proxy_menu_item(), ie. the #GtkMenuItem
        that is going to appear in the overflow menu.
        """
        ...

    def set_expand(self, expand: bool) -> object:
        """
        Sets whether @tool_item is allocated extra space when there
        is more room on the toolbar then needed for the items. The
        effect is that the item gets bigger when the toolbar gets bigger
        and smaller when the toolbar gets smaller.
        """
        ...

    def set_homogeneous(self, homogeneous: bool) -> object:
        """
        Sets whether @tool_item is to be allocated the same size as other
        homogeneous items. The effect is that all homogeneous items will have
        the same width as the widest of the items.
        """
        ...

    def set_is_important(self, is_important: bool) -> object:
        """
        Sets whether @tool_item should be considered important. The #GtkToolButton
        class uses this property to determine whether to show or hide its label
        when the toolbar style is %GTK_TOOLBAR_BOTH_HORIZ. The result is that
        only tool buttons with the “is_important” property set have labels, an
        effect known as “priority text”
        """
        ...

    def set_proxy_menu_item(self, menu_item_id: str, menu_item: _T.Optional[Widget]) -> object:
        """
        Sets the #GtkMenuItem used in the toolbar overflow menu. The
        @menu_item_id is used to identify the caller of this function and
        should also be used with gtk_tool_item_get_proxy_menu_item().

        See also #GtkToolItem::create-menu-proxy.
        """
        ...

    def set_tooltip_markup(self, markup: str) -> object:
        """
        Sets the markup text to be displayed as tooltip on the item.
        See gtk_widget_set_tooltip_markup().
        """
        ...

    def set_tooltip_text(self, text: str) -> object:
        """
        Sets the text to be displayed as tooltip on the item.
        See gtk_widget_set_tooltip_text().
        """
        ...

    def set_use_drag_window(self, use_drag_window: bool) -> object:
        """
        Sets whether @tool_item has a drag window. When %TRUE the
        toolitem can be used as a drag source through gtk_drag_source_set().
        When @tool_item has a drag window it will intercept all events,
        even those that would otherwise be sent to a child of @tool_item.
        """
        ...

    def set_visible_horizontal(self, visible_horizontal: bool) -> object:
        """
        Sets whether @tool_item is visible when the toolbar is docked horizontally.
        """
        ...

    def set_visible_vertical(self, visible_vertical: bool) -> object:
        """
        Sets whether @tool_item is visible when the toolbar is docked
        vertically. Some tool items, such as text entries, are too wide to be
        useful on a vertically docked toolbar. If @visible_vertical is %FALSE
        @tool_item will not appear on toolbars that are docked vertically.
        """
        ...

    def toolbar_reconfigured(self) -> object:
        """
        Emits the signal #GtkToolItem::toolbar_reconfigured on @tool_item.
        #GtkToolbar and other #GtkToolShell implementations use this function
        to notify children, when some aspect of their configuration changes.
        """
        ...


    ...

class ToolItemGroup(Container, Atk.ImplementorIface, Buildable, ToolShell):
    """
    A #GtkToolItemGroup is used together with #GtkToolPalette to add
    #GtkToolItems to a palette like container with different
    categories and drag and drop support.

    # CSS nodes

    GtkToolItemGroup has a single CSS node named toolitemgroup.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, label: str) -> Widget:
        """
        Creates a new tool item group with label @label.
        """
        ...

    def get_collapsed(self) -> bool:
        """
        Gets whether @group is collapsed or expanded.
        """
        ...

    def get_drop_item(self, x: int, y: int) -> ToolItem:
        """
        Gets the tool item at position (x, y).
        """
        ...

    def get_ellipsize(self) -> Pango.EllipsizeMode:
        """
        Gets the ellipsization mode of @group.
        """
        ...

    def get_header_relief(self) -> ReliefStyle:
        """
        Gets the relief mode of the header button of @group.
        """
        ...

    def get_item_position(self, item: ToolItem) -> int:
        """
        Gets the position of @item in @group as index.
        """
        ...

    def get_label(self) -> str:
        """
        Gets the label of @group.
        """
        ...

    def get_label_widget(self) -> Widget:
        """
        Gets the label widget of @group.
        See gtk_tool_item_group_set_label_widget().
        """
        ...

    def get_n_items(self) -> int:
        """
        Gets the number of tool items in @group.
        """
        ...

    def get_nth_item(self, index: int) -> ToolItem:
        """
        Gets the tool item at @index in group.
        """
        ...

    def insert(self, item: ToolItem, position: int) -> object:
        """
        Inserts @item at @position in the list of children of @group.
        """
        ...

    def set_collapsed(self, collapsed: bool) -> object:
        """
        Sets whether the @group should be collapsed or expanded.
        """
        ...

    def set_ellipsize(self, ellipsize: Pango.EllipsizeMode) -> object:
        """
        Sets the ellipsization mode which should be used by labels in @group.
        """
        ...

    def set_header_relief(self, style: ReliefStyle) -> object:
        """
        Set the button relief of the group header.
        See gtk_button_set_relief() for details.
        """
        ...

    def set_item_position(self, item: ToolItem, position: int) -> object:
        """
        Sets the position of @item in the list of children of @group.
        """
        ...

    def set_label(self, label: str) -> object:
        """
        Sets the label of the tool item group. The label is displayed in the header
        of the group.
        """
        ...

    def set_label_widget(self, label_widget: Widget) -> object:
        """
        Sets the label of the tool item group.
        The label widget is displayed in the header of the group, in place
        of the usual label.
        """
        ...


    ...

class ToolPalette(Container, Atk.ImplementorIface, Buildable, Orientable, Scrollable):
    """
    A #GtkToolPalette allows you to add #GtkToolItems to a palette-like
    container with different categories and drag and drop support.

    A #GtkToolPalette is created with a call to gtk_tool_palette_new().

    #GtkToolItems cannot be added directly to a #GtkToolPalette -
    instead they are added to a #GtkToolItemGroup which can than be added
    to a #GtkToolPalette. To add a #GtkToolItemGroup to a #GtkToolPalette,
    use gtk_container_add().

    |[<!-- language="C" -->
    GtkWidget *palette, *group;
    GtkToolItem *item;

    palette = gtk_tool_palette_new ();
    group = gtk_tool_item_group_new (_("Test Category"));
    gtk_container_add (GTK_CONTAINER (palette), group);

    item = gtk_tool_button_new (NULL, _("_Open"));
    gtk_tool_button_set_icon_name (GTK_TOOL_BUTTON (item), "document-open");
    gtk_tool_item_group_insert (GTK_TOOL_ITEM_GROUP (group), item, -1);
    ]|

    The easiest way to use drag and drop with #GtkToolPalette is to call
    gtk_tool_palette_add_drag_dest() with the desired drag source @palette
    and the desired drag target @widget. Then gtk_tool_palette_get_drag_item()
    can be used to get the dragged item in the #GtkWidget::drag-data-received
    signal handler of the drag target.

    |[<!-- language="C" -->
    static void
    passive_canvas_drag_data_received (GtkWidget        *widget,
                                       GdkDragContext   *context,
                                       gint              x,
                                       gint              y,
                                       GtkSelectionData *selection,
                                       guint             info,
                                       guint             time,
                                       gpointer          data)
    {
      GtkWidget *palette;
      GtkWidget *item;

      // Get the dragged item
      palette = gtk_widget_get_ancestor (gtk_drag_get_source_widget (context),
                                         GTK_TYPE_TOOL_PALETTE);
      if (palette != NULL)
        item = gtk_tool_palette_get_drag_item (GTK_TOOL_PALETTE (palette),
                                               selection);

      // Do something with item
    }

    GtkWidget *target, palette;

    palette = gtk_tool_palette_new ();
    target = gtk_drawing_area_new ();

    g_signal_connect (G_OBJECT (target), "drag-data-received",
                      G_CALLBACK (passive_canvas_drag_data_received), NULL);
    gtk_tool_palette_add_drag_dest (GTK_TOOL_PALETTE (palette), target,
                                    GTK_DEST_DEFAULT_ALL,
                                    GTK_TOOL_PALETTE_DRAG_ITEMS,
                                    GDK_ACTION_COPY);
    ]|

    # CSS nodes

    GtkToolPalette has a single CSS node named toolpalette.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new tool palette.
        """
        ...

    def add_drag_dest(self, widget: Widget, flags: DestDefaults, targets: ToolPaletteDragTargets, actions: Gdk.DragAction) -> object:
        """
        Sets @palette as drag source (see gtk_tool_palette_set_drag_source())
        and sets @widget as a drag destination for drags from @palette.
        See gtk_drag_dest_set().
        """
        ...

    def get_drag_item(self, selection: SelectionData) -> Widget:
        """
        Get the dragged item from the selection.
        This could be a #GtkToolItem or a #GtkToolItemGroup.
        """
        ...

    def get_drop_group(self, x: int, y: int) -> ToolItemGroup:
        """
        Gets the group at position (x, y).
        """
        ...

    def get_drop_item(self, x: int, y: int) -> ToolItem:
        """
        Gets the item at position (x, y).
        See gtk_tool_palette_get_drop_group().
        """
        ...

    def get_exclusive(self, group: ToolItemGroup) -> bool:
        """
        Gets whether @group is exclusive or not.
        See gtk_tool_palette_set_exclusive().
        """
        ...

    def get_expand(self, group: ToolItemGroup) -> bool:
        """
        Gets whether group should be given extra space.
        See gtk_tool_palette_set_expand().
        """
        ...

    def get_group_position(self, group: ToolItemGroup) -> int:
        """
        Gets the position of @group in @palette as index.
        See gtk_tool_palette_set_group_position().
        """
        ...

    def get_hadjustment(self) -> Adjustment:
        """
        Gets the horizontal adjustment of the tool palette.
        """
        ...

    def get_icon_size(self) -> int:
        """
        Gets the size of icons in the tool palette.
        See gtk_tool_palette_set_icon_size().
        """
        ...

    def get_style(self) -> ToolbarStyle:
        """
        Gets the style (icons, text or both) of items in the tool palette.
        """
        ...

    def get_vadjustment(self) -> Adjustment:
        """
        Gets the vertical adjustment of the tool palette.
        """
        ...

    def set_drag_source(self, targets: ToolPaletteDragTargets) -> object:
        """
        Sets the tool palette as a drag source.
        Enables all groups and items in the tool palette as drag sources
        on button 1 and button 3 press with copy and move actions.
        See gtk_drag_source_set().
        """
        ...

    def set_exclusive(self, group: ToolItemGroup, exclusive: bool) -> object:
        """
        Sets whether the group should be exclusive or not.
        If an exclusive group is expanded all other groups are collapsed.
        """
        ...

    def set_expand(self, group: ToolItemGroup, expand: bool) -> object:
        """
        Sets whether the group should be given extra space.
        """
        ...

    def set_group_position(self, group: ToolItemGroup, position: int) -> object:
        """
        Sets the position of the group as an index of the tool palette.
        If position is 0 the group will become the first child, if position is
        -1 it will become the last child.
        """
        ...

    def set_icon_size(self, icon_size: int) -> object:
        """
        Sets the size of icons in the tool palette.
        """
        ...

    def set_style(self, style: ToolbarStyle) -> object:
        """
        Sets the style (text, icons or both) of items in the tool palette.
        """
        ...

    def unset_icon_size(self) -> object:
        """
        Unsets the tool palette icon size set with gtk_tool_palette_set_icon_size(),
        so that user preferences will be used to determine the icon size.
        """
        ...

    def unset_style(self) -> object:
        """
        Unsets a toolbar style set with gtk_tool_palette_set_style(),
        so that user preferences will be used to determine the toolbar style.
        """
        ...


    ...

class Toolbar(Container, Atk.ImplementorIface, Buildable, Orientable, ToolShell):
    """
    A toolbar is created with a call to gtk_toolbar_new().

    A toolbar can contain instances of a subclass of #GtkToolItem. To add
    a #GtkToolItem to the a toolbar, use gtk_toolbar_insert(). To remove
    an item from the toolbar use gtk_container_remove(). To add a button
    to the toolbar, add an instance of #GtkToolButton.

    Toolbar items can be visually grouped by adding instances of
    #GtkSeparatorToolItem to the toolbar. If the GtkToolbar child property
    “expand” is #TRUE and the property #GtkSeparatorToolItem:draw is set to
    #FALSE, the effect is to force all following items to the end of the toolbar.

    By default, a toolbar can be shrunk, upon which it will add an arrow button
    to show an overflow menu offering access to any #GtkToolItem child that has
    a proxy menu item. To disable this and request enough size for all children,
    call gtk_toolbar_set_show_arrow() to set #GtkToolbar:show-arrow to %FALSE.

    Creating a context menu for the toolbar can be done by connecting to
    the #GtkToolbar::popup-context-menu signal.

    # CSS nodes

    GtkToolbar has a single CSS node with name toolbar.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new toolbar.
        """
        ...

    def get_drop_index(self, x: int, y: int) -> int:
        """
        Returns the position corresponding to the indicated point on
        @toolbar. This is useful when dragging items to the toolbar:
        this function returns the position a new item should be
        inserted.

        @x and @y are in @toolbar coordinates.
        """
        ...

    def get_icon_size(self) -> IconSize:
        """
        Retrieves the icon size for the toolbar. See gtk_toolbar_set_icon_size().
        """
        ...

    def get_item_index(self, item: ToolItem) -> int:
        """
        Returns the position of @item on the toolbar, starting from 0.
        It is an error if @item is not a child of the toolbar.
        """
        ...

    def get_n_items(self) -> int:
        """
        Returns the number of items on the toolbar.
        """
        ...

    def get_nth_item(self, n: int) -> ToolItem:
        """
        Returns the @n'th item on @toolbar, or %NULL if the
        toolbar does not contain an @n'th item.
        """
        ...

    def get_relief_style(self) -> ReliefStyle:
        """
        Returns the relief style of buttons on @toolbar. See
        gtk_button_set_relief().
        """
        ...

    def get_show_arrow(self) -> bool:
        """
        Returns whether the toolbar has an overflow menu.
        See gtk_toolbar_set_show_arrow().
        """
        ...

    def get_style(self) -> ToolbarStyle:
        """
        Retrieves whether the toolbar has text, icons, or both . See
        gtk_toolbar_set_style().
        """
        ...

    def insert(self, item: ToolItem, pos: int) -> object:
        """
        Insert a #GtkToolItem into the toolbar at position @pos. If @pos is
        0 the item is prepended to the start of the toolbar. If @pos is
        negative, the item is appended to the end of the toolbar.
        """
        ...

    def set_drop_highlight_item(self, tool_item: _T.Optional[ToolItem], index_: int) -> object:
        """
        Highlights @toolbar to give an idea of what it would look like
        if @item was added to @toolbar at the position indicated by @index_.
        If @item is %NULL, highlighting is turned off. In that case @index_
        is ignored.

        The @tool_item passed to this function must not be part of any widget
        hierarchy. When an item is set as drop highlight item it can not
        added to any widget hierarchy or used as highlight item for another
        toolbar.
        """
        ...

    def set_icon_size(self, icon_size: IconSize) -> object:
        """
        This function sets the size of stock icons in the toolbar. You
        can call it both before you add the icons and after they’ve been
        added. The size you set will override user preferences for the default
        icon size.

        This should only be used for special-purpose toolbars, normal
        application toolbars should respect the user preferences for the
        size of icons.
        """
        ...

    def set_show_arrow(self, show_arrow: bool) -> object:
        """
        Sets whether to show an overflow menu when @toolbar isn’t allocated enough
        size to show all of its items. If %TRUE, items which can’t fit in @toolbar,
        and which have a proxy menu item set by gtk_tool_item_set_proxy_menu_item()
        or #GtkToolItem::create-menu-proxy, will be available in an overflow menu,
        which can be opened by an added arrow button. If %FALSE, @toolbar will
        request enough size to fit all of its child items without any overflow.
        """
        ...

    def set_style(self, style: ToolbarStyle) -> object:
        """
        Alters the view of @toolbar to display either icons only, text only, or both.
        """
        ...

    def unset_icon_size(self) -> object:
        """
        Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that
        user preferences will be used to determine the icon size.
        """
        ...

    def unset_style(self) -> object:
        """
        Unsets a toolbar style set with gtk_toolbar_set_style(), so that
        user preferences will be used to determine the toolbar style.
        """
        ...


    ...

class Tooltip(GObject.Object):
    """
    Basic tooltips can be realized simply by using gtk_widget_set_tooltip_text()
    or gtk_widget_set_tooltip_markup() without any explicit tooltip object.

    When you need a tooltip with a little more fancy contents, like adding an
    image, or you want the tooltip to have different contents per #GtkTreeView
    row or cell, you will have to do a little more work:

    - Set the #GtkWidget:has-tooltip property to %TRUE, this will make GTK+
      monitor the widget for motion and related events which are needed to
      determine when and where to show a tooltip.

    - Connect to the #GtkWidget::query-tooltip signal.  This signal will be
      emitted when a tooltip is supposed to be shown. One of the arguments passed
      to the signal handler is a GtkTooltip object. This is the object that we
      are about to display as a tooltip, and can be manipulated in your callback
      using functions like gtk_tooltip_set_icon(). There are functions for setting
      the tooltip’s markup, setting an image from a named icon, or even putting in
      a custom widget.

      Return %TRUE from your query-tooltip handler. This causes the tooltip to be
      show. If you return %FALSE, it will not be shown.

    In the probably rare case where you want to have even more control over the
    tooltip that is about to be shown, you can set your own #GtkWindow which
    will be used as tooltip window.  This works as follows:

    - Set #GtkWidget:has-tooltip and connect to #GtkWidget::query-tooltip as before.
      Use gtk_widget_set_tooltip_window() to set a #GtkWindow created by you as
      tooltip window.

    - In the #GtkWidget::query-tooltip callback you can access your window using
      gtk_widget_get_tooltip_window() and manipulate as you wish. The semantics of
      the return value are exactly as before, return %TRUE to show the window,
      %FALSE to not show it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def set_custom(self, custom_widget: _T.Optional[Widget]) -> object:
        """
        Replaces the widget packed into the tooltip with
        @custom_widget. @custom_widget does not get destroyed when the tooltip goes
        away.
        By default a box with a #GtkImage and #GtkLabel is embedded in
        the tooltip, which can be configured using gtk_tooltip_set_markup()
        and gtk_tooltip_set_icon().
        """
        ...

    def set_icon(self, pixbuf: _T.Optional[GdkPixbuf.Pixbuf]) -> object:
        """
        Sets the icon of the tooltip (which is in front of the text) to be
        @pixbuf.  If @pixbuf is %NULL, the image will be hidden.
        """
        ...

    def set_icon_from_gicon(self, gicon: _T.Optional[Gio.Icon], size: int) -> object:
        """
        Sets the icon of the tooltip (which is in front of the text)
        to be the icon indicated by @gicon with the size indicated
        by @size. If @gicon is %NULL, the image will be hidden.
        """
        ...

    def set_icon_from_icon_name(self, icon_name: _T.Optional[str], size: int) -> object:
        """
        Sets the icon of the tooltip (which is in front of the text) to be
        the icon indicated by @icon_name with the size indicated
        by @size.  If @icon_name is %NULL, the image will be hidden.
        """
        ...

    def set_icon_from_stock(self, stock_id: _T.Optional[str], size: int) -> object:
        """
        Sets the icon of the tooltip (which is in front of the text) to be
        the stock item indicated by @stock_id with the size indicated
        by @size.  If @stock_id is %NULL, the image will be hidden.
        """
        ...

    def set_markup(self, markup: _T.Optional[str]) -> object:
        """
        Sets the text of the tooltip to be @markup, which is marked up
        with the [Pango text markup language][PangoMarkupFormat].
        If @markup is %NULL, the label will be hidden.
        """
        ...

    def set_text(self, text: _T.Optional[str]) -> object:
        """
        Sets the text of the tooltip to be @text. If @text is %NULL, the label
        will be hidden. See also gtk_tooltip_set_markup().
        """
        ...

    def set_tip_area(self, rect: Gdk.Rectangle) -> object:
        """
        Sets the area of the widget, where the contents of this tooltip apply,
        to be @rect (in widget coordinates).  This is especially useful for
        properly setting tooltips on #GtkTreeView rows and cells, #GtkIconViews,
        etc.

        For setting tooltips on #GtkTreeView, please refer to the convenience
        functions for this: gtk_tree_view_set_tooltip_row() and
        gtk_tree_view_set_tooltip_cell().
        """
        ...


    ...

class ToplevelAccessible(Atk.Object):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_children(self) -> GLib.List:
        ...


    ...

class TreeModelFilter(GObject.Object, TreeDragSource, TreeModel):
    """
    A #GtkTreeModelFilter is a tree model which wraps another tree model,
    and can do the following things:

    - Filter specific rows, based on data from a “visible column”, a column
      storing booleans indicating whether the row should be filtered or not,
      or based on the return value of a “visible function”, which gets a
      model, iter and user_data and returns a boolean indicating whether the
      row should be filtered or not.

    - Modify the “appearance” of the model, using a modify function.
      This is extremely powerful and allows for just changing some
      values and also for creating a completely different model based
      on the given child model.

    - Set a different root node, also known as a “virtual root”. You can pass
      in a #GtkTreePath indicating the root node for the filter at construction
      time.

    The basic API is similar to #GtkTreeModelSort. For an example on its usage,
    see the section on #GtkTreeModelSort.

    When using #GtkTreeModelFilter, it is important to realize that
    #GtkTreeModelFilter maintains an internal cache of all nodes which are
    visible in its clients. The cache is likely to be a subtree of the tree
    exposed by the child model. #GtkTreeModelFilter will not cache the entire
    child model when unnecessary to not compromise the caching mechanism
    that is exposed by the reference counting scheme. If the child model
    implements reference counting, unnecessary signals may not be emitted
    because of reference counting rule 3, see the #GtkTreeModel
    documentation. (Note that e.g. #GtkTreeStore does not implement
    reference counting and will always emit all signals, even when
    the receiving node is not visible).

    Because of this, limitations for possible visible functions do apply.
    In general, visible functions should only use data or properties from
    the node for which the visibility state must be determined, its siblings
    or its parents. Usually, having a dependency on the state of any child
    node is not possible, unless references are taken on these explicitly.
    When no such reference exists, no signals may be received for these child
    nodes (see reference couting rule number 3 in the #GtkTreeModel section).

    Determining the visibility state of a given node based on the state
    of its child nodes is a frequently occurring use case. Therefore,
    #GtkTreeModelFilter explicitly supports this. For example, when a node
    does not have any children, you might not want the node to be visible.
    As soon as the first row is added to the node’s child level (or the
    last row removed), the node’s visibility should be updated.

    This introduces a dependency from the node on its child nodes. In order
    to accommodate this, #GtkTreeModelFilter must make sure the necessary
    signals are received from the child model. This is achieved by building,
    for all nodes which are exposed as visible nodes to #GtkTreeModelFilter's
    clients, the child level (if any) and take a reference on the first node
    in this level. Furthermore, for every row-inserted, row-changed or
    row-deleted signal (also these which were not handled because the node
    was not cached), #GtkTreeModelFilter will check if the visibility state
    of any parent node has changed.

    Beware, however, that this explicit support is limited to these two
    cases. For example, if you want a node to be visible only if two nodes
    in a child’s child level (2 levels deeper) are visible, you are on your
    own. In this case, either rely on #GtkTreeStore to emit all signals
    because it does not implement reference counting, or for models that
    do implement reference counting, obtain references on these child levels
    yourself.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def clear_cache(self) -> object:
        """
        This function should almost never be called. It clears the @filter
        of any cached iterators that haven’t been reffed with
        gtk_tree_model_ref_node(). This might be useful if the child model
        being filtered is static (and doesn’t change often) and there has been
        a lot of unreffed access to nodes. As a side effect of this function,
        all unreffed iters will be invalid.
        """
        ...

    def convert_child_iter_to_iter(self, filter_iter: TreeIter, child_iter: TreeIter) -> bool:
        """
        Sets @filter_iter to point to the row in @filter that corresponds to the
        row pointed at by @child_iter.  If @filter_iter was not set, %FALSE is
        returned.
        """
        ...

    def convert_child_path_to_path(self, child_path: TreePath) -> TreePath:
        """
        Converts @child_path to a path relative to @filter. That is, @child_path
        points to a path in the child model. The rerturned path will point to the
        same row in the filtered model. If @child_path isn’t a valid path on the
        child model or points to a row which is not visible in @filter, then %NULL
        is returned.
        """
        ...

    def convert_iter_to_child_iter(self, child_iter: TreeIter, filter_iter: TreeIter) -> object:
        """
        Sets @child_iter to point to the row pointed to by @filter_iter.
        """
        ...

    def convert_path_to_child_path(self, filter_path: TreePath) -> TreePath:
        """
        Converts @filter_path to a path on the child model of @filter. That is,
        @filter_path points to a location in @filter. The returned path will
        point to the same location in the model not being filtered. If @filter_path
        does not point to a location in the child model, %NULL is returned.
        """
        ...

    def get_model(self) -> TreeModel:
        """
        Returns a pointer to the child model of @filter.
        """
        ...

    def refilter(self) -> object:
        """
        Emits ::row_changed for each row in the child model, which causes
        the filter to re-evaluate whether a row is visible or not.
        """
        ...

    def set_modify_func(self, n_columns: int, types: object, func: TreeModelFilterModifyFunc, data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        With the @n_columns and @types parameters, you give an array of column
        types for this model (which will be exposed to the parent model/view).
        The @func, @data and @destroy parameters are for specifying the modify
        function. The modify function will get called for each
        data access, the goal of the modify function is to return the data which
        should be displayed at the location specified using the parameters of the
        modify function.

        Note that gtk_tree_model_filter_set_modify_func()
        can only be called once for a given filter model.
        """
        ...

    def set_visible_column(self, column: int) -> object:
        """
        Sets @column of the child_model to be the column where @filter should
        look for visibility information. @columns should be a column of type
        %G_TYPE_BOOLEAN, where %TRUE means that a row is visible, and %FALSE
        if not.

        Note that gtk_tree_model_filter_set_visible_func() or
        gtk_tree_model_filter_set_visible_column() can only be called
        once for a given filter model.
        """
        ...

    def set_visible_func(self, func: TreeModelFilterVisibleFunc, data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Sets the visible function used when filtering the @filter to be @func.
        The function should return %TRUE if the given row should be visible and
        %FALSE otherwise.

        If the condition calculated by the function changes over time (e.g.
        because it depends on some global parameters), you must call
        gtk_tree_model_filter_refilter() to keep the visibility information
        of the model up-to-date.

        Note that @func is called whenever a row is inserted, when it may still
        be empty. The visible function should therefore take special care of empty
        rows, like in the example below.

        |[<!-- language="C" -->
        static gboolean
        visible_func (GtkTreeModel *model,
                      GtkTreeIter  *iter,
                      gpointer      data)
        {
          // Visible if row is non-empty and first column is “HI”
          gchar *str;
          gboolean visible = FALSE;

          gtk_tree_model_get (model, iter, 0, &str, -1);
          if (str && strcmp (str, "HI") == 0)
            visible = TRUE;
          g_free (str);

          return visible;
        }
        ]|

        Note that gtk_tree_model_filter_set_visible_func() or
        gtk_tree_model_filter_set_visible_column() can only be called
        once for a given filter model.
        """
        ...


    ...

class TreeModelSort(GObject.Object, TreeDragSource, TreeModel, TreeSortable):
    """
    The #GtkTreeModelSort is a model which implements the #GtkTreeSortable
    interface.  It does not hold any data itself, but rather is created with
    a child model and proxies its data.  It has identical column types to
    this child model, and the changes in the child are propagated.  The
    primary purpose of this model is to provide a way to sort a different
    model without modifying it. Note that the sort function used by
    #GtkTreeModelSort is not guaranteed to be stable.

    The use of this is best demonstrated through an example.  In the
    following sample code we create two #GtkTreeView widgets each with a
    view of the same data.  As the model is wrapped here by a
    #GtkTreeModelSort, the two #GtkTreeViews can each sort their
    view of the data without affecting the other.  By contrast, if we
    simply put the same model in each widget, then sorting the first would
    sort the second.

    ## Using a #GtkTreeModelSort

    |[<!-- language="C" -->
    {
      GtkTreeView *tree_view1;
      GtkTreeView *tree_view2;
      GtkTreeModel *sort_model1;
      GtkTreeModel *sort_model2;
      GtkTreeModel *child_model;

      // get the child model
      child_model = get_my_model ();

      // Create the first tree
      sort_model1 = gtk_tree_model_sort_new_with_model (child_model);
      tree_view1 = gtk_tree_view_new_with_model (sort_model1);

      // Create the second tree
      sort_model2 = gtk_tree_model_sort_new_with_model (child_model);
      tree_view2 = gtk_tree_view_new_with_model (sort_model2);

      // Now we can sort the two models independently
      gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),
                                            COLUMN_1, GTK_SORT_ASCENDING);
      gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),
                                            COLUMN_1, GTK_SORT_DESCENDING);
    }
    ]|

    To demonstrate how to access the underlying child model from the sort
    model, the next example will be a callback for the #GtkTreeSelection
    #GtkTreeSelection::changed signal.  In this callback, we get a string
    from COLUMN_1 of the model.  We then modify the string, find the same
    selected row on the child model, and change the row there.

    ## Accessing the child model of in a selection changed callback

    |[<!-- language="C" -->
    void
    selection_changed (GtkTreeSelection *selection, gpointer data)
    {
      GtkTreeModel *sort_model = NULL;
      GtkTreeModel *child_model;
      GtkTreeIter sort_iter;
      GtkTreeIter child_iter;
      char *some_data = NULL;
      char *modified_data;

      // Get the current selected row and the model.
      if (! gtk_tree_selection_get_selected (selection,
                                             &sort_model,
                                             &sort_iter))
        return;

      // Look up the current value on the selected row and get
      // a new value to change it to.
      gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &sort_iter,
                          COLUMN_1, &some_data,
                          -1);

      modified_data = change_the_data (some_data);
      g_free (some_data);

      // Get an iterator on the child model, instead of the sort model.
      gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),
                                                      &child_iter,
                                                      &sort_iter);

      // Get the child model and change the value of the row. In this
      // example, the child model is a GtkListStore. It could be any other
      // type of model, though.
      child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));
      gtk_list_store_set (GTK_LIST_STORE (child_model), &child_iter,
                          COLUMN_1, &modified_data,
                          -1);
      g_free (modified_data);
    }
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_with_model(cls, child_model: TreeModel) -> TreeModelSort:
        """
        Creates a new #GtkTreeModelSort, with @child_model as the child model.
        """
        ...

    def clear_cache(self) -> object:
        """
        This function should almost never be called.  It clears the @tree_model_sort
        of any cached iterators that haven’t been reffed with
        gtk_tree_model_ref_node().  This might be useful if the child model being
        sorted is static (and doesn’t change often) and there has been a lot of
        unreffed access to nodes.  As a side effect of this function, all unreffed
        iters will be invalid.
        """
        ...

    def convert_child_iter_to_iter(self, sort_iter: TreeIter, child_iter: TreeIter) -> bool:
        """
        Sets @sort_iter to point to the row in @tree_model_sort that corresponds to
        the row pointed at by @child_iter.  If @sort_iter was not set, %FALSE
        is returned.  Note: a boolean is only returned since 2.14.
        """
        ...

    def convert_child_path_to_path(self, child_path: TreePath) -> TreePath:
        """
        Converts @child_path to a path relative to @tree_model_sort.  That is,
        @child_path points to a path in the child model.  The returned path will
        point to the same row in the sorted model.  If @child_path isn’t a valid
        path on the child model, then %NULL is returned.
        """
        ...

    def convert_iter_to_child_iter(self, child_iter: TreeIter, sorted_iter: TreeIter) -> object:
        """
        Sets @child_iter to point to the row pointed to by @sorted_iter.
        """
        ...

    def convert_path_to_child_path(self, sorted_path: TreePath) -> TreePath:
        """
        Converts @sorted_path to a path on the child model of @tree_model_sort.
        That is, @sorted_path points to a location in @tree_model_sort.  The
        returned path will point to the same location in the model not being
        sorted.  If @sorted_path does not point to a location in the child model,
        %NULL is returned.
        """
        ...

    def get_model(self) -> TreeModel:
        """
        Returns the model the #GtkTreeModelSort is sorting.
        """
        ...

    def iter_is_valid(self, iter: TreeIter) -> bool:
        """
        > This function is slow. Only use it for debugging and/or testing
        > purposes.

        Checks if the given iter is a valid iter for this #GtkTreeModelSort.
        """
        ...

    def reset_default_sort_func(self) -> object:
        """
        This resets the default sort function to be in the “unsorted” state.  That
        is, it is in the same order as the child model. It will re-sort the model
        to be in the same order as the child model only if the #GtkTreeModelSort
        is in “unsorted” state.
        """
        ...


    ...

class TreeSelection(GObject.Object):
    """
    The #GtkTreeSelection object is a helper object to manage the selection
    for a #GtkTreeView widget.  The #GtkTreeSelection object is
    automatically created when a new #GtkTreeView widget is created, and
    cannot exist independently of this widget.  The primary reason the
    #GtkTreeSelection objects exists is for cleanliness of code and API.
    That is, there is no conceptual reason all these functions could not be
    methods on the #GtkTreeView widget instead of a separate function.

    The #GtkTreeSelection object is gotten from a #GtkTreeView by calling
    gtk_tree_view_get_selection().  It can be manipulated to check the
    selection status of the tree, as well as select and deselect individual
    rows.  Selection is done completely view side.  As a result, multiple
    views of the same model can have completely different selections.
    Additionally, you cannot change the selection of a row on the model that
    is not currently displayed by the view without expanding its parents
    first.

    One of the important things to remember when monitoring the selection of
    a view is that the #GtkTreeSelection::changed signal is mostly a hint.
    That is, it may only emit one signal when a range of rows is selected.
    Additionally, it may on occasion emit a #GtkTreeSelection::changed signal
    when nothing has happened (mostly as a result of programmers calling
    select_row on an already selected row).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def count_selected_rows(self) -> int:
        """
        Returns the number of rows that have been selected in @tree.
        """
        ...

    def get_mode(self) -> SelectionMode:
        """
        Gets the selection mode for @selection. See
        gtk_tree_selection_set_mode().
        """
        ...

    def get_select_function(self) -> TreeSelectionFunc:
        """
        Returns the current selection function.
        """
        ...

    def get_selected(self, model: TreeModel, iter: TreeIter) -> bool:
        """
        Sets @iter to the currently selected node, if @selection is set to
        %GTK_SELECTION_SINGLE or %GTK_SELECTION_BROWSE.

        The @iter argument may be %NULL if you just want to test if @selection
        has any selected nodes.

        The @model argument is filled with the current model as a convenience.

        This function will not work with %GTK_SELECTION_MULTIPLE. See
        gtk_tree_selection_get_selected_rows() instead.
        """
        ...

    def get_selected_rows(self, model: TreeModel) -> GLib.List:
        """
        Creates a list of path of all selected rows.

        Additionally, if you are planning on modifying the model after calling
        this function, you may want to convert the returned list into a list
        of #GtkTreeRowReferences.

        To do this, you can use gtk_tree_row_reference_new().

        To free the return value, use:

        |[<!-- language="C" -->
        g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
        ]|
        """
        ...

    def get_tree_view(self) -> TreeView:
        """
        Returns the tree view associated with @selection.
        """
        ...

    def get_user_data(self) -> object:
        """
        Returns the user data for the selection function.
        """
        ...

    def iter_is_selected(self, iter: TreeIter) -> bool:
        """
        Returns %TRUE if the row at @iter is currently selected.
        """
        ...

    def path_is_selected(self, path: TreePath) -> bool:
        """
        Returns %TRUE if the row pointed to by @path is currently selected.  If @path
        does not point to a valid location, %FALSE is returned
        """
        ...

    def select_all(self) -> object:
        """
        Selects all the nodes. @selection must be set to #GTK_SELECTION_MULTIPLE
        mode.
        """
        ...

    def select_iter(self, iter: TreeIter) -> object:
        """
        Selects the specified iterator.
        """
        ...

    def select_path(self, path: TreePath) -> object:
        """
        Select the row at @path.
        """
        ...

    def select_range(self, start_path: TreePath, end_path: TreePath) -> object:
        """
        Selects a range of nodes, determined by @start_path and @end_path inclusive.
        @selection must be set to #GTK_SELECTION_MULTIPLE mode.
        """
        ...

    def selected_foreach(self, func: TreeSelectionForeachFunc, data: _T.Optional[object]) -> object:
        """
        Calls a function for each selected node. Note that you cannot modify
        the tree or selection from within this function. As a result,
        gtk_tree_selection_get_selected_rows() might be more useful.
        """
        ...

    def set_mode(self, type: SelectionMode) -> object:
        """
        Sets the selection mode of the @selection.  If the previous type was
        #GTK_SELECTION_MULTIPLE, then the anchor is kept selected, if it was
        previously selected.
        """
        ...

    def set_select_function(self, func: _T.Optional[TreeSelectionFunc], data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        Sets the selection function.

        If set, this function is called before any node is selected or unselected,
        giving some control over which nodes are selected. The select function
        should return %TRUE if the state of the node may be toggled, and %FALSE
        if the state of the node should be left unchanged.
        """
        ...

    def unselect_all(self) -> object:
        """
        Unselects all the nodes.
        """
        ...

    def unselect_iter(self, iter: TreeIter) -> object:
        """
        Unselects the specified iterator.
        """
        ...

    def unselect_path(self, path: TreePath) -> object:
        """
        Unselects the row at @path.
        """
        ...

    def unselect_range(self, start_path: TreePath, end_path: TreePath) -> object:
        """
        Unselects a range of nodes, determined by @start_path and @end_path
        inclusive.
        """
        ...


    ...

class TreeStore(GObject.Object, Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable):
    """
    The #GtkTreeStore object is a list model for use with a #GtkTreeView
    widget.  It implements the #GtkTreeModel interface, and consequentially,
    can use all of the methods available there.  It also implements the
    #GtkTreeSortable interface so it can be sorted by the view.  Finally,
    it also implements the tree
    [drag and drop][gtk3-GtkTreeView-drag-and-drop]
    interfaces.

    # GtkTreeStore as GtkBuildable

    The GtkTreeStore implementation of the #GtkBuildable interface allows
    to specify the model columns with a `<columns>` element that may contain
    multiple `<column>` elements, each specifying one model column. The “type”
    attribute specifies the data type for the column.

    An example of a UI Definition fragment for a tree store:

    |[<!-- language="xml" -->
    <object class="GtkTreeStore">
      <columns>
        <column type="gchararray"/>
        <column type="gchararray"/>
        <column type="gint"/>
      </columns>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, n_columns: int, *args: object) -> TreeStore:
        """
        Creates a new tree store as with @n_columns columns each of the types passed
        in.  Note that only types derived from standard GObject fundamental types
        are supported.

        As an example, `gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,
        GDK_TYPE_PIXBUF);` will create a new #GtkTreeStore with three columns, of type
        #gint, #gchararray, and #GdkPixbuf respectively.
        """
        ...


    @classmethod
    def newv(cls, n_columns: int, types: object) -> TreeStore:
        """
        Non vararg creation function.  Used primarily by language bindings.
        """
        ...

    def append(self, iter: TreeIter, parent: _T.Optional[TreeIter]) -> object:
        """
        Appends a new row to @tree_store.  If @parent is non-%NULL, then it will append the
        new row after the last child of @parent, otherwise it will append a row to
        the top level.  @iter will be changed to point to this new row.  The row will
        be empty after this function is called.  To fill in values, you need to call
        gtk_tree_store_set() or gtk_tree_store_set_value().
        """
        ...

    def clear(self) -> object:
        """
        Removes all rows from @tree_store
        """
        ...

    def insert(self, iter: TreeIter, parent: _T.Optional[TreeIter], position: int) -> object:
        """
        Creates a new row at @position.  If parent is non-%NULL, then the row will be
        made a child of @parent.  Otherwise, the row will be created at the toplevel.
        If @position is -1 or is larger than the number of rows at that level, then
        the new row will be inserted to the end of the list.  @iter will be changed
        to point to this new row.  The row will be empty after this function is
        called.  To fill in values, you need to call gtk_tree_store_set() or
        gtk_tree_store_set_value().
        """
        ...

    def insert_after(self, iter: TreeIter, parent: _T.Optional[TreeIter], sibling: _T.Optional[TreeIter]) -> object:
        """
        Inserts a new row after @sibling.  If @sibling is %NULL, then the row will be
        prepended to @parent ’s children.  If @parent and @sibling are %NULL, then
        the row will be prepended to the toplevel.  If both @sibling and @parent are
        set, then @parent must be the parent of @sibling.  When @sibling is set,
        @parent is optional.

        @iter will be changed to point to this new row.  The row will be empty after
        this function is called.  To fill in values, you need to call
        gtk_tree_store_set() or gtk_tree_store_set_value().
        """
        ...

    def insert_before(self, iter: TreeIter, parent: _T.Optional[TreeIter], sibling: _T.Optional[TreeIter]) -> object:
        """
        Inserts a new row before @sibling.  If @sibling is %NULL, then the row will
        be appended to @parent ’s children.  If @parent and @sibling are %NULL, then
        the row will be appended to the toplevel.  If both @sibling and @parent are
        set, then @parent must be the parent of @sibling.  When @sibling is set,
        @parent is optional.

        @iter will be changed to point to this new row.  The row will be empty after
        this function is called.  To fill in values, you need to call
        gtk_tree_store_set() or gtk_tree_store_set_value().
        """
        ...

    def insert_with_values(self, iter: TreeIter, parent: _T.Optional[TreeIter], position: int, *args: object) -> object:
        """
        Creates a new row at @position. @iter will be changed to point to this
        new row. If @position is -1, or larger than the number of rows on the list, then
        the new row will be appended to the list. The row will be filled with
        the values given to this function.

        Calling
        `gtk_tree_store_insert_with_values (tree_store, iter, position, ...)`
        has the same effect as calling
        |[<!-- language="C" -->
        gtk_tree_store_insert (tree_store, iter, position);
        gtk_tree_store_set (tree_store, iter, ...);
        ]|
        with the different that the former will only emit a row_inserted signal,
        while the latter will emit row_inserted, row_changed and if the tree store
        is sorted, rows_reordered.  Since emitting the rows_reordered signal
        repeatedly can affect the performance of the program,
        gtk_tree_store_insert_with_values() should generally be preferred when
        inserting rows in a sorted tree store.
        """
        ...

    def insert_with_valuesv(self, iter: TreeIter, parent: _T.Optional[TreeIter], position: int, columns: object, values: object, n_values: int) -> object:
        """
        A variant of gtk_tree_store_insert_with_values() which takes
        the columns and values as two arrays, instead of varargs.  This
        function is mainly intended for language bindings.
        """
        ...

    def is_ancestor(self, iter: TreeIter, descendant: TreeIter) -> bool:
        """
        Returns %TRUE if @iter is an ancestor of @descendant.  That is, @iter is the
        parent (or grandparent or great-grandparent) of @descendant.
        """
        ...

    def iter_depth(self, iter: TreeIter) -> int:
        """
        Returns the depth of @iter.  This will be 0 for anything on the root level, 1
        for anything down a level, etc.
        """
        ...

    def iter_is_valid(self, iter: TreeIter) -> bool:
        """
        WARNING: This function is slow. Only use it for debugging and/or testing
        purposes.

        Checks if the given iter is a valid iter for this #GtkTreeStore.
        """
        ...

    def move_after(self, iter: TreeIter, position: _T.Optional[TreeIter]) -> object:
        """
        Moves @iter in @tree_store to the position after @position. @iter and
        @position should be in the same level. Note that this function only
        works with unsorted stores. If @position is %NULL, @iter will be moved
        to the start of the level.
        """
        ...

    def move_before(self, iter: TreeIter, position: _T.Optional[TreeIter]) -> object:
        """
        Moves @iter in @tree_store to the position before @position. @iter and
        @position should be in the same level. Note that this function only
        works with unsorted stores. If @position is %NULL, @iter will be
        moved to the end of the level.
        """
        ...

    def prepend(self, iter: TreeIter, parent: _T.Optional[TreeIter]) -> object:
        """
        Prepends a new row to @tree_store.  If @parent is non-%NULL, then it will prepend
        the new row before the first child of @parent, otherwise it will prepend a row
        to the top level.  @iter will be changed to point to this new row.  The row
        will be empty after this function is called.  To fill in values, you need to
        call gtk_tree_store_set() or gtk_tree_store_set_value().
        """
        ...

    def remove(self, iter: TreeIter) -> bool:
        """
        Removes @iter from @tree_store.  After being removed, @iter is set to the
        next valid row at that level, or invalidated if it previously pointed to the
        last one.
        """
        ...

    def reorder(self, parent: _T.Optional[TreeIter], new_order: object) -> object:
        """
        Reorders the children of @parent in @tree_store to follow the order
        indicated by @new_order. Note that this function only works with
        unsorted stores.
        """
        ...

    def set(self, iter: TreeIter, *args: object) -> object:
        """
        Sets the value of one or more cells in the row referenced by @iter.
        The variable argument list should contain integer column numbers,
        each column number followed by the value to be set.
        The list is terminated by a -1. For example, to set column 0 with type
        %G_TYPE_STRING to “Foo”, you would write
        `gtk_tree_store_set (store, iter, 0, "Foo", -1)`.

        The value will be referenced by the store if it is a %G_TYPE_OBJECT, and it
        will be copied if it is a %G_TYPE_STRING or %G_TYPE_BOXED.
        """
        ...

    def set_column_types(self, n_columns: int, types: object) -> object:
        """
        This function is meant primarily for #GObjects that inherit from
        #GtkTreeStore, and should only be used when constructing a new
        #GtkTreeStore.  It will not function after a row has been added,
        or a method on the #GtkTreeModel interface is called.
        """
        ...

    def set_valist(self, iter: TreeIter, var_args: list) -> object:
        """
        See gtk_tree_store_set(); this version takes a va_list for
        use by language bindings.
        """
        ...

    def set_value(self, iter: TreeIter, column: int, value: GObject.Value) -> object:
        """
        Sets the data in the cell specified by @iter and @column.
        The type of @value must be convertible to the type of the
        column.
        """
        ...

    def set_valuesv(self, iter: TreeIter, columns: object, values: object, n_values: int) -> object:
        """
        A variant of gtk_tree_store_set_valist() which takes
        the columns and values as two arrays, instead of varargs.  This
        function is mainly intended for language bindings or in case
        the number of columns to change is not known until run-time.
        """
        ...

    def swap(self, a: TreeIter, b: TreeIter) -> object:
        """
        Swaps @a and @b in the same level of @tree_store. Note that this function
        only works with unsorted stores.
        """
        ...


    ...

class TreeView(Container, Atk.ImplementorIface, Buildable, Scrollable):
    """
    Widget that displays any object that implements the #GtkTreeModel interface.

    Please refer to the
    [tree widget conceptual overview][TreeWidget]
    for an overview of all the objects and data types related
    to the tree widget and how they work together.

    Several different coordinate systems are exposed in the GtkTreeView API.
    These are:

    ![](tree-view-coordinates.png)

    Coordinate systems in GtkTreeView API:

    - Widget coordinates: Coordinates relative to the widget (usually `widget->window`).

    - Bin window coordinates: Coordinates relative to the window that GtkTreeView renders to.

    - Tree coordinates: Coordinates relative to the entire scrollable area of GtkTreeView. These
      coordinates start at (0, 0) for row 0 of the tree.

    Several functions are available for converting between the different
    coordinate systems.  The most common translations are between widget and bin
    window coordinates and between bin window and tree coordinates. For the
    former you can use gtk_tree_view_convert_widget_to_bin_window_coords()
    (and vice versa), for the latter gtk_tree_view_convert_bin_window_to_tree_coords()
    (and vice versa).

    # GtkTreeView as GtkBuildable

    The GtkTreeView implementation of the GtkBuildable interface accepts
    #GtkTreeViewColumn objects as `<child>` elements and exposes the internal
    #GtkTreeSelection in UI definitions.

    An example of a UI definition fragment with GtkTreeView:

    |[<!-- language="xml" -->
    <object class="GtkTreeView" id="treeview">
      <property name="model">liststore1</property>
      <child>
        <object class="GtkTreeViewColumn" id="test-column">
          <property name="title">Test</property>
          <child>
            <object class="GtkCellRendererText" id="test-renderer"/>
            <attributes>
              <attribute name="text">1</attribute>
            </attributes>
          </child>
        </object>
      </child>
      <child internal-child="selection">
        <object class="GtkTreeSelection" id="selection">
          <signal name="changed" handler="on_treeview_selection_changed"/>
        </object>
      </child>
    </object>
    ]|

    # CSS nodes

    |[<!-- language="plain" -->
    treeview.view
    ├── header
    │   ├── <column header>
    ┊   ┊
    │   ╰── <column header>
    │
    ╰── [rubberband]
    ]|

    GtkTreeView has a main CSS node with name treeview and style class .view.
    It has a subnode with name header, which is the parent for all the column
    header widgets' CSS nodes.
    For rubberband selection, a subnode with name rubberband is used.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkTreeView widget.
        """
        ...


    @classmethod
    def new_with_model(cls, model: TreeModel) -> Widget:
        """
        Creates a new #GtkTreeView widget with the model initialized to @model.
        """
        ...

    def append_column(self, column: TreeViewColumn) -> int:
        """
        Appends @column to the list of columns. If @tree_view has “fixed_height”
        mode enabled, then @column must have its “sizing” property set to be
        GTK_TREE_VIEW_COLUMN_FIXED.
        """
        ...

    def collapse_all(self) -> object:
        """
        Recursively collapses all visible, expanded nodes in @tree_view.
        """
        ...

    def collapse_row(self, path: TreePath) -> bool:
        """
        Collapses a row (hides its child rows, if they exist).
        """
        ...

    def columns_autosize(self) -> object:
        """
        Resizes all columns to their optimal width. Only works after the
        treeview has been realized.
        """
        ...

    def convert_bin_window_to_tree_coords(self, bx: int, by: int, tx: int, ty: int) -> object:
        """
        Converts bin_window coordinates to coordinates for the
        tree (the full scrollable area of the tree).
        """
        ...

    def convert_bin_window_to_widget_coords(self, bx: int, by: int, wx: int, wy: int) -> object:
        """
        Converts bin_window coordinates (see gtk_tree_view_get_bin_window())
        to widget relative coordinates.
        """
        ...

    def convert_tree_to_bin_window_coords(self, tx: int, ty: int, bx: int, by: int) -> object:
        """
        Converts tree coordinates (coordinates in full scrollable area of the tree)
        to bin_window coordinates.
        """
        ...

    def convert_tree_to_widget_coords(self, tx: int, ty: int, wx: int, wy: int) -> object:
        """
        Converts tree coordinates (coordinates in full scrollable area of the tree)
        to widget coordinates.
        """
        ...

    def convert_widget_to_bin_window_coords(self, wx: int, wy: int, bx: int, by: int) -> object:
        """
        Converts widget coordinates to coordinates for the bin_window
        (see gtk_tree_view_get_bin_window()).
        """
        ...

    def convert_widget_to_tree_coords(self, wx: int, wy: int, tx: int, ty: int) -> object:
        """
        Converts widget coordinates to coordinates for the
        tree (the full scrollable area of the tree).
        """
        ...

    def create_row_drag_icon(self, path: TreePath) -> cairo.Surface:
        """
        Creates a #cairo_surface_t representation of the row at @path.
        This image is used for a drag icon.
        """
        ...

    def enable_model_drag_dest(self, targets: object, n_targets: int, actions: Gdk.DragAction) -> object:
        """
        Turns @tree_view into a drop destination for automatic DND. Calling
        this method sets #GtkTreeView:reorderable to %FALSE.
        """
        ...

    def enable_model_drag_source(self, start_button_mask: Gdk.ModifierType, targets: object, n_targets: int, actions: Gdk.DragAction) -> object:
        """
        Turns @tree_view into a drag source for automatic DND. Calling this
        method sets #GtkTreeView:reorderable to %FALSE.
        """
        ...

    def expand_all(self) -> object:
        """
        Recursively expands all nodes in the @tree_view.
        """
        ...

    def expand_row(self, path: TreePath, open_all: bool) -> bool:
        """
        Opens the row so its children are visible.
        """
        ...

    def expand_to_path(self, path: TreePath) -> object:
        """
        Expands the row at @path. This will also expand all parent rows of
        @path as necessary.
        """
        ...

    def get_activate_on_single_click(self) -> bool:
        """
        Gets the setting set by gtk_tree_view_set_activate_on_single_click().
        """
        ...

    def get_background_area(self, path: _T.Optional[TreePath], column: _T.Optional[TreeViewColumn], rect: Gdk.Rectangle) -> object:
        """
        Fills the bounding rectangle in bin_window coordinates for the cell at the
        row specified by @path and the column specified by @column.  If @path is
        %NULL, or points to a node not found in the tree, the @y and @height fields of
        the rectangle will be filled with 0. If @column is %NULL, the @x and @width
        fields will be filled with 0.  The returned rectangle is equivalent to the
        @background_area passed to gtk_cell_renderer_render().  These background
        areas tile to cover the entire bin window.  Contrast with the @cell_area,
        returned by gtk_tree_view_get_cell_area(), which returns only the cell
        itself, excluding surrounding borders and the tree expander area.
        """
        ...

    def get_bin_window(self) -> Gdk.Window:
        """
        Returns the window that @tree_view renders to.
        This is used primarily to compare to `event->window`
        to confirm that the event on @tree_view is on the right window.
        """
        ...

    def get_cell_area(self, path: _T.Optional[TreePath], column: _T.Optional[TreeViewColumn], rect: Gdk.Rectangle) -> object:
        """
        Fills the bounding rectangle in bin_window coordinates for the cell at the
        row specified by @path and the column specified by @column.  If @path is
        %NULL, or points to a path not currently displayed, the @y and @height fields
        of the rectangle will be filled with 0. If @column is %NULL, the @x and @width
        fields will be filled with 0.  The sum of all cell rects does not cover the
        entire tree; there are extra pixels in between rows, for example. The
        returned rectangle is equivalent to the @cell_area passed to
        gtk_cell_renderer_render().  This function is only valid if @tree_view is
        realized.
        """
        ...

    def get_column(self, n: int) -> TreeViewColumn:
        """
        Gets the #GtkTreeViewColumn at the given position in the #tree_view.
        """
        ...

    def get_columns(self) -> GLib.List:
        """
        Returns a #GList of all the #GtkTreeViewColumn s currently in @tree_view.
        The returned list must be freed with g_list_free ().
        """
        ...

    def get_cursor(self, path: _T.Optional[TreePath], focus_column: _T.Optional[TreeViewColumn]) -> object:
        """
        Fills in @path and @focus_column with the current path and focus column.  If
        the cursor isn’t currently set, then *@path will be %NULL.  If no column
        currently has focus, then *@focus_column will be %NULL.

        The returned #GtkTreePath must be freed with gtk_tree_path_free() when
        you are done with it.
        """
        ...

    def get_dest_row_at_pos(self, drag_x: int, drag_y: int, path: _T.Optional[TreePath], pos: TreeViewDropPosition) -> bool:
        """
        Determines the destination row for a given position.  @drag_x and
        @drag_y are expected to be in widget coordinates.  This function is only
        meaningful if @tree_view is realized.  Therefore this function will always
        return %FALSE if @tree_view is not realized or does not have a model.
        """
        ...

    def get_drag_dest_row(self, path: _T.Optional[TreePath], pos: TreeViewDropPosition) -> object:
        """
        Gets information about the row that is highlighted for feedback.
        """
        ...

    def get_enable_search(self) -> bool:
        """
        Returns whether or not the tree allows to start interactive searching
        by typing in text.
        """
        ...

    def get_enable_tree_lines(self) -> bool:
        """
        Returns whether or not tree lines are drawn in @tree_view.
        """
        ...

    def get_expander_column(self) -> TreeViewColumn:
        """
        Returns the column that is the current expander column.
        This column has the expander arrow drawn next to it.
        """
        ...

    def get_fixed_height_mode(self) -> bool:
        """
        Returns whether fixed height mode is turned on for @tree_view.
        """
        ...

    def get_grid_lines(self) -> TreeViewGridLines:
        """
        Returns which grid lines are enabled in @tree_view.
        """
        ...

    def get_hadjustment(self) -> Adjustment:
        """
        Gets the #GtkAdjustment currently being used for the horizontal aspect.
        """
        ...

    def get_headers_clickable(self) -> bool:
        """
        Returns whether all header columns are clickable.
        """
        ...

    def get_headers_visible(self) -> bool:
        """
        Returns %TRUE if the headers on the @tree_view are visible.
        """
        ...

    def get_hover_expand(self) -> bool:
        """
        Returns whether hover expansion mode is turned on for @tree_view.
        """
        ...

    def get_hover_selection(self) -> bool:
        """
        Returns whether hover selection mode is turned on for @tree_view.
        """
        ...

    def get_level_indentation(self) -> int:
        """
        Returns the amount, in pixels, of extra indentation for child levels
        in @tree_view.
        """
        ...

    def get_model(self) -> TreeModel:
        """
        Returns the model the #GtkTreeView is based on.  Returns %NULL if the
        model is unset.
        """
        ...

    def get_n_columns(self) -> int:
        """
        Queries the number of columns in the given @tree_view.
        """
        ...

    def get_path_at_pos(self, x: int, y: int, path: _T.Optional[TreePath], column: _T.Optional[TreeViewColumn], cell_x: int, cell_y: int) -> bool:
        """
        Finds the path at the point (@x, @y), relative to bin_window coordinates
        (please see gtk_tree_view_get_bin_window()).
        That is, @x and @y are relative to an events coordinates. @x and @y must
        come from an event on the @tree_view only where `event->window ==
        gtk_tree_view_get_bin_window ()`. It is primarily for
        things like popup menus. If @path is non-%NULL, then it will be filled
        with the #GtkTreePath at that point.  This path should be freed with
        gtk_tree_path_free().  If @column is non-%NULL, then it will be filled
        with the column at that point.  @cell_x and @cell_y return the coordinates
        relative to the cell background (i.e. the @background_area passed to
        gtk_cell_renderer_render()).  This function is only meaningful if
        @tree_view is realized.  Therefore this function will always return %FALSE
        if @tree_view is not realized or does not have a model.

        For converting widget coordinates (eg. the ones you get from
        GtkWidget::query-tooltip), please see
        gtk_tree_view_convert_widget_to_bin_window_coords().
        """
        ...

    def get_reorderable(self) -> bool:
        """
        Retrieves whether the user can reorder the tree via drag-and-drop. See
        gtk_tree_view_set_reorderable().
        """
        ...

    def get_row_separator_func(self) -> TreeViewRowSeparatorFunc:
        """
        Returns the current row separator function.
        """
        ...

    def get_rubber_banding(self) -> bool:
        """
        Returns whether rubber banding is turned on for @tree_view.  If the
        selection mode is #GTK_SELECTION_MULTIPLE, rubber banding will allow the
        user to select multiple rows by dragging the mouse.
        """
        ...

    def get_rules_hint(self) -> bool:
        """
        Gets the setting set by gtk_tree_view_set_rules_hint().
        """
        ...

    def get_search_column(self) -> int:
        """
        Gets the column searched on by the interactive search code.
        """
        ...

    def get_search_entry(self) -> Entry:
        """
        Returns the #GtkEntry which is currently in use as interactive search
        entry for @tree_view.  In case the built-in entry is being used, %NULL
        will be returned.
        """
        ...

    def get_search_equal_func(self) -> TreeViewSearchEqualFunc:
        """
        Returns the compare function currently in use.
        """
        ...

    def get_search_position_func(self) -> TreeViewSearchPositionFunc:
        """
        Returns the positioning function currently in use.
        """
        ...

    def get_selection(self) -> TreeSelection:
        """
        Gets the #GtkTreeSelection associated with @tree_view.
        """
        ...

    def get_show_expanders(self) -> bool:
        """
        Returns whether or not expanders are drawn in @tree_view.
        """
        ...

    def get_tooltip_column(self) -> int:
        """
        Returns the column of @tree_view’s model which is being used for
        displaying tooltips on @tree_view’s rows.
        """
        ...

    def get_tooltip_context(self, x: int, y: int, keyboard_tip: bool, model: _T.Optional[TreeModel], path: TreePath, iter: TreeIter) -> bool:
        """
        This function is supposed to be used in a #GtkWidget::query-tooltip
        signal handler for #GtkTreeView.  The @x, @y and @keyboard_tip values
        which are received in the signal handler, should be passed to this
        function without modification.

        The return value indicates whether there is a tree view row at the given
        coordinates (%TRUE) or not (%FALSE) for mouse tooltips.  For keyboard
        tooltips the row returned will be the cursor row.  When %TRUE, then any of
        @model, @path and @iter which have been provided will be set to point to
        that row and the corresponding model.  @x and @y will always be converted
        to be relative to @tree_view’s bin_window if @keyboard_tooltip is %FALSE.
        """
        ...

    def get_vadjustment(self) -> Adjustment:
        """
        Gets the #GtkAdjustment currently being used for the vertical aspect.
        """
        ...

    def get_visible_range(self, start_path: TreePath, end_path: TreePath) -> bool:
        """
        Sets @start_path and @end_path to be the first and last visible path.
        Note that there may be invisible paths in between.

        The paths should be freed with gtk_tree_path_free() after use.
        """
        ...

    def get_visible_rect(self, visible_rect: Gdk.Rectangle) -> object:
        """
        Fills @visible_rect with the currently-visible region of the
        buffer, in tree coordinates. Convert to bin_window coordinates with
        gtk_tree_view_convert_tree_to_bin_window_coords().
        Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire
        scrollable area of the tree.
        """
        ...

    def insert_column(self, column: TreeViewColumn, position: int) -> int:
        """
        This inserts the @column into the @tree_view at @position.  If @position is
        -1, then the column is inserted at the end. If @tree_view has
        “fixed_height” mode enabled, then @column must have its “sizing” property
        set to be GTK_TREE_VIEW_COLUMN_FIXED.
        """
        ...

    def insert_column_with_attributes(self, position: int, title: str, cell: CellRenderer, *args: object) -> int:
        """
        Creates a new #GtkTreeViewColumn and inserts it into the @tree_view at
        @position.  If @position is -1, then the newly created column is inserted at
        the end.  The column is initialized with the attributes given. If @tree_view
        has “fixed_height” mode enabled, then the new column will have its sizing
        property set to be GTK_TREE_VIEW_COLUMN_FIXED.
        """
        ...

    def insert_column_with_data_func(self, position: int, title: str, cell: CellRenderer, func: TreeCellDataFunc, data: _T.Optional[object], dnotify: GLib.DestroyNotify) -> int:
        """
        Convenience function that inserts a new column into the #GtkTreeView
        with the given cell renderer and a #GtkTreeCellDataFunc to set cell renderer
        attributes (normally using data from the model). See also
        gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().
        If @tree_view has “fixed_height” mode enabled, then the new column will have its
        “sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED.
        """
        ...

    def is_blank_at_pos(self, x: int, y: int, path: _T.Optional[TreePath], column: _T.Optional[TreeViewColumn], cell_x: int, cell_y: int) -> bool:
        """
        Determine whether the point (@x, @y) in @tree_view is blank, that is no
        cell content nor an expander arrow is drawn at the location. If so, the
        location can be considered as the background. You might wish to take
        special action on clicks on the background, such as clearing a current
        selection, having a custom context menu or starting rubber banding.

        The @x and @y coordinate that are provided must be relative to bin_window
        coordinates.  That is, @x and @y must come from an event on @tree_view
        where `event->window == gtk_tree_view_get_bin_window ()`.

        For converting widget coordinates (eg. the ones you get from
        GtkWidget::query-tooltip), please see
        gtk_tree_view_convert_widget_to_bin_window_coords().

        The @path, @column, @cell_x and @cell_y arguments will be filled in
        likewise as for gtk_tree_view_get_path_at_pos().  Please see
        gtk_tree_view_get_path_at_pos() for more information.
        """
        ...

    def is_rubber_banding_active(self) -> bool:
        """
        Returns whether a rubber banding operation is currently being done
        in @tree_view.
        """
        ...

    def map_expanded_rows(self, func: TreeViewMappingFunc, data: _T.Optional[object]) -> object:
        """
        Calls @func on all expanded rows.
        """
        ...

    def move_column_after(self, column: TreeViewColumn, base_column: _T.Optional[TreeViewColumn]) -> object:
        """
        Moves @column to be after to @base_column.  If @base_column is %NULL, then
        @column is placed in the first position.
        """
        ...

    def remove_column(self, column: TreeViewColumn) -> int:
        """
        Removes @column from @tree_view.
        """
        ...

    def row_activated(self, path: TreePath, column: TreeViewColumn) -> object:
        """
        Activates the cell determined by @path and @column.
        """
        ...

    def row_expanded(self, path: TreePath) -> bool:
        """
        Returns %TRUE if the node pointed to by @path is expanded in @tree_view.
        """
        ...

    def scroll_to_cell(self, path: _T.Optional[TreePath], column: _T.Optional[TreeViewColumn], use_align: bool, row_align: float, col_align: float) -> object:
        """
        Moves the alignments of @tree_view to the position specified by @column and
        @path.  If @column is %NULL, then no horizontal scrolling occurs.  Likewise,
        if @path is %NULL no vertical scrolling occurs.  At a minimum, one of @column
        or @path need to be non-%NULL.  @row_align determines where the row is
        placed, and @col_align determines where @column is placed.  Both are expected
        to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means
        right/bottom alignment, 0.5 means center.

        If @use_align is %FALSE, then the alignment arguments are ignored, and the
        tree does the minimum amount of work to scroll the cell onto the screen.
        This means that the cell will be scrolled to the edge closest to its current
        position.  If the cell is currently visible on the screen, nothing is done.

        This function only works if the model is set, and @path is a valid row on the
        model.  If the model changes before the @tree_view is realized, the centered
        path will be modified to reflect this change.
        """
        ...

    def scroll_to_point(self, tree_x: int, tree_y: int) -> object:
        """
        Scrolls the tree view such that the top-left corner of the visible
        area is @tree_x, @tree_y, where @tree_x and @tree_y are specified
        in tree coordinates.  The @tree_view must be realized before
        this function is called.  If it isn't, you probably want to be
        using gtk_tree_view_scroll_to_cell().

        If either @tree_x or @tree_y are -1, then that direction isn’t scrolled.
        """
        ...

    def set_activate_on_single_click(self, single: bool) -> object:
        """
        Cause the #GtkTreeView::row-activated signal to be emitted
        on a single click instead of a double click.
        """
        ...

    def set_column_drag_function(self, func: _T.Optional[TreeViewColumnDropFunc], user_data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Sets a user function for determining where a column may be dropped when
        dragged.  This function is called on every column pair in turn at the
        beginning of a column drag to determine where a drop can take place.  The
        arguments passed to @func are: the @tree_view, the #GtkTreeViewColumn being
        dragged, the two #GtkTreeViewColumn s determining the drop spot, and
        @user_data.  If either of the #GtkTreeViewColumn arguments for the drop spot
        are %NULL, then they indicate an edge.  If @func is set to be %NULL, then
        @tree_view reverts to the default behavior of allowing all columns to be
        dropped everywhere.
        """
        ...

    def set_cursor(self, path: TreePath, focus_column: _T.Optional[TreeViewColumn], start_editing: bool) -> object:
        """
        Sets the current keyboard focus to be at @path, and selects it.  This is
        useful when you want to focus the user’s attention on a particular row.  If
        @focus_column is not %NULL, then focus is given to the column specified by
        it. Additionally, if @focus_column is specified, and @start_editing is
        %TRUE, then editing should be started in the specified cell.
        This function is often followed by @gtk_widget_grab_focus (@tree_view)
        in order to give keyboard focus to the widget.  Please note that editing
        can only happen when the widget is realized.

        If @path is invalid for @model, the current cursor (if any) will be unset
        and the function will return without failing.
        """
        ...

    def set_cursor_on_cell(self, path: TreePath, focus_column: _T.Optional[TreeViewColumn], focus_cell: _T.Optional[CellRenderer], start_editing: bool) -> object:
        """
        Sets the current keyboard focus to be at @path, and selects it.  This is
        useful when you want to focus the user’s attention on a particular row.  If
        @focus_column is not %NULL, then focus is given to the column specified by
        it. If @focus_column and @focus_cell are not %NULL, and @focus_column
        contains 2 or more editable or activatable cells, then focus is given to
        the cell specified by @focus_cell. Additionally, if @focus_column is
        specified, and @start_editing is %TRUE, then editing should be started in
        the specified cell.  This function is often followed by
        @gtk_widget_grab_focus (@tree_view) in order to give keyboard focus to the
        widget.  Please note that editing can only happen when the widget is
        realized.

        If @path is invalid for @model, the current cursor (if any) will be unset
        and the function will return without failing.
        """
        ...

    def set_destroy_count_func(self, func: _T.Optional[TreeDestroyCountFunc], data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        This function should almost never be used.  It is meant for private use by
        ATK for determining the number of visible children that are removed when the
        user collapses a row, or a row is deleted.
        """
        ...

    def set_drag_dest_row(self, path: _T.Optional[TreePath], pos: TreeViewDropPosition) -> object:
        """
        Sets the row that is highlighted for feedback.
        If @path is %NULL, an existing highlight is removed.
        """
        ...

    def set_enable_search(self, enable_search: bool) -> object:
        """
        If @enable_search is set, then the user can type in text to search through
        the tree interactively (this is sometimes called "typeahead find").

        Note that even if this is %FALSE, the user can still initiate a search
        using the “start-interactive-search” key binding.
        """
        ...

    def set_enable_tree_lines(self, enabled: bool) -> object:
        """
        Sets whether to draw lines interconnecting the expanders in @tree_view.
        This does not have any visible effects for lists.
        """
        ...

    def set_expander_column(self, column: _T.Optional[TreeViewColumn]) -> object:
        """
        Sets the column to draw the expander arrow at. It must be in @tree_view.
        If @column is %NULL, then the expander arrow is always at the first
        visible column.

        If you do not want expander arrow to appear in your tree, set the
        expander column to a hidden column.
        """
        ...

    def set_fixed_height_mode(self, enable: bool) -> object:
        """
        Enables or disables the fixed height mode of @tree_view.
        Fixed height mode speeds up #GtkTreeView by assuming that all
        rows have the same height.
        Only enable this option if all rows are the same height and all
        columns are of type %GTK_TREE_VIEW_COLUMN_FIXED.
        """
        ...

    def set_grid_lines(self, grid_lines: TreeViewGridLines) -> object:
        """
        Sets which grid lines to draw in @tree_view.
        """
        ...

    def set_hadjustment(self, adjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the #GtkAdjustment for the current horizontal aspect.
        """
        ...

    def set_headers_clickable(self, setting: bool) -> object:
        """
        Allow the column title buttons to be clicked.
        """
        ...

    def set_headers_visible(self, headers_visible: bool) -> object:
        """
        Sets the visibility state of the headers.
        """
        ...

    def set_hover_expand(self, expand: bool) -> object:
        """
        Enables or disables the hover expansion mode of @tree_view.
        Hover expansion makes rows expand or collapse if the pointer
        moves over them.
        """
        ...

    def set_hover_selection(self, hover: bool) -> object:
        """
        Enables or disables the hover selection mode of @tree_view.
        Hover selection makes the selected row follow the pointer.
        Currently, this works only for the selection modes
        %GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.
        """
        ...

    def set_level_indentation(self, indentation: int) -> object:
        """
        Sets the amount of extra indentation for child levels to use in @tree_view
        in addition to the default indentation.  The value should be specified in
        pixels, a value of 0 disables this feature and in this case only the default
        indentation will be used.
        This does not have any visible effects for lists.
        """
        ...

    def set_model(self, model: _T.Optional[TreeModel]) -> object:
        """
        Sets the model for a #GtkTreeView.  If the @tree_view already has a model
        set, it will remove it before setting the new model.  If @model is %NULL,
        then it will unset the old model.
        """
        ...

    def set_reorderable(self, reorderable: bool) -> object:
        """
        This function is a convenience function to allow you to reorder
        models that support the #GtkTreeDragSourceIface and the
        #GtkTreeDragDestIface.  Both #GtkTreeStore and #GtkListStore support
        these.  If @reorderable is %TRUE, then the user can reorder the
        model by dragging and dropping rows. The developer can listen to
        these changes by connecting to the model’s #GtkTreeModel::row-inserted
        and #GtkTreeModel::row-deleted signals. The reordering is implemented
        by setting up the tree view as a drag source and destination.
        Therefore, drag and drop can not be used in a reorderable view for any
        other purpose.

        This function does not give you any degree of control over the order -- any
        reordering is allowed.  If more control is needed, you should probably
        handle drag and drop manually.
        """
        ...

    def set_row_separator_func(self, func: _T.Optional[TreeViewRowSeparatorFunc], data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Sets the row separator function, which is used to determine
        whether a row should be drawn as a separator. If the row separator
        function is %NULL, no separators are drawn. This is the default value.
        """
        ...

    def set_rubber_banding(self, enable: bool) -> object:
        """
        Enables or disables rubber banding in @tree_view.  If the selection mode
        is #GTK_SELECTION_MULTIPLE, rubber banding will allow the user to select
        multiple rows by dragging the mouse.
        """
        ...

    def set_rules_hint(self, setting: bool) -> object:
        """
        Sets a hint for the theme to draw even/odd rows in the @tree_view
        with different colors, also known as "zebra striping".

        This function tells the GTK+ theme that the user interface for your
        application requires users to read across tree rows and associate
        cells with one another.

        Do not use it just because you prefer the appearance of the ruled
        tree; that’s a question for the theme. Some themes will draw tree
        rows in alternating colors even when rules are turned off, and
        users who prefer that appearance all the time can choose those
        themes. You should call this function only as a semantic hint to
        the theme engine that your tree makes alternating colors useful
        from a functional standpoint (since it has lots of columns,
        generally).
        """
        ...

    def set_search_column(self, column: int) -> object:
        """
        Sets @column as the column where the interactive search code should
        search in for the current model.

        If the search column is set, users can use the “start-interactive-search”
        key binding to bring up search popup. The enable-search property controls
        whether simply typing text will also start an interactive search.

        Note that @column refers to a column of the current model. The search
        column is reset to -1 when the model is changed.
        """
        ...

    def set_search_entry(self, entry: _T.Optional[Entry]) -> object:
        """
        Sets the entry which the interactive search code will use for this
        @tree_view.  This is useful when you want to provide a search entry
        in our interface at all time at a fixed position.  Passing %NULL for
        @entry will make the interactive search code use the built-in popup
        entry again.
        """
        ...

    def set_search_equal_func(self, search_equal_func: TreeViewSearchEqualFunc, search_user_data: _T.Optional[object], search_destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Sets the compare function for the interactive search capabilities; note
        that somewhat like strcmp() returning 0 for equality
        #GtkTreeViewSearchEqualFunc returns %FALSE on matches.
        """
        ...

    def set_search_position_func(self, func: _T.Optional[TreeViewSearchPositionFunc], data: _T.Optional[object], destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Sets the function to use when positioning the search dialog.
        """
        ...

    def set_show_expanders(self, enabled: bool) -> object:
        """
        Sets whether to draw and enable expanders and indent child rows in
        @tree_view.  When disabled there will be no expanders visible in trees
        and there will be no way to expand and collapse rows by default.  Also
        note that hiding the expanders will disable the default indentation.  You
        can set a custom indentation in this case using
        gtk_tree_view_set_level_indentation().
        This does not have any visible effects for lists.
        """
        ...

    def set_tooltip_cell(self, tooltip: Tooltip, path: _T.Optional[TreePath], column: _T.Optional[TreeViewColumn], cell: _T.Optional[CellRenderer]) -> object:
        """
        Sets the tip area of @tooltip to the area @path, @column and @cell have
        in common.  For example if @path is %NULL and @column is set, the tip
        area will be set to the full area covered by @column.  See also
        gtk_tooltip_set_tip_area().

        Note that if @path is not specified and @cell is set and part of a column
        containing the expander, the tooltip might not show and hide at the correct
        position.  In such cases @path must be set to the current node under the
        mouse cursor for this function to operate correctly.

        See also gtk_tree_view_set_tooltip_column() for a simpler alternative.
        """
        ...

    def set_tooltip_column(self, column: int) -> object:
        """
        If you only plan to have simple (text-only) tooltips on full rows, you
        can use this function to have #GtkTreeView handle these automatically
        for you. @column should be set to the column in @tree_view’s model
        containing the tooltip texts, or -1 to disable this feature.

        When enabled, #GtkWidget:has-tooltip will be set to %TRUE and
        @tree_view will connect a #GtkWidget::query-tooltip signal handler.

        Note that the signal handler sets the text with gtk_tooltip_set_markup(),
        so &, <, etc have to be escaped in the text.
        """
        ...

    def set_tooltip_row(self, tooltip: Tooltip, path: TreePath) -> object:
        """
        Sets the tip area of @tooltip to be the area covered by the row at @path.
        See also gtk_tree_view_set_tooltip_column() for a simpler alternative.
        See also gtk_tooltip_set_tip_area().
        """
        ...

    def set_vadjustment(self, adjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the #GtkAdjustment for the current vertical aspect.
        """
        ...

    def unset_rows_drag_dest(self) -> object:
        """
        Undoes the effect of
        gtk_tree_view_enable_model_drag_dest(). Calling this method sets
        #GtkTreeView:reorderable to %FALSE.
        """
        ...

    def unset_rows_drag_source(self) -> object:
        """
        Undoes the effect of
        gtk_tree_view_enable_model_drag_source(). Calling this method sets
        #GtkTreeView:reorderable to %FALSE.
        """
        ...


    ...

class TreeViewAccessible(ContainerAccessible, Atk.Component, Atk.Selection, Atk.Table, CellAccessibleParent):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class TreeViewColumn(GObject.InitiallyUnowned, Buildable, CellLayout):
    """
    The GtkTreeViewColumn object represents a visible column in a #GtkTreeView widget.
    It allows to set properties of the column header, and functions as a holding pen for
    the cell renderers which determine how the data in the column is displayed.

    Please refer to the [tree widget conceptual overview][TreeWidget]
    for an overview of all the objects and data types related to the tree widget and how
    they work together.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> TreeViewColumn:
        """
        Creates a new #GtkTreeViewColumn.
        """
        ...


    @classmethod
    def new_with_area(cls, area: CellArea) -> TreeViewColumn:
        """
        Creates a new #GtkTreeViewColumn using @area to render its cells.
        """
        ...


    @classmethod
    def new_with_attributes(cls, title: str, cell: CellRenderer, *args: object) -> TreeViewColumn:
        """
        Creates a new #GtkTreeViewColumn with a number of default values.
        This is equivalent to calling gtk_tree_view_column_set_title(),
        gtk_tree_view_column_pack_start(), and
        gtk_tree_view_column_set_attributes() on the newly created #GtkTreeViewColumn.

        Here’s a simple example:
        |[<!-- language="C" -->
         enum { TEXT_COLUMN, COLOR_COLUMN, N_COLUMNS };
         // ...
         {
           GtkTreeViewColumn *column;
           GtkCellRenderer   *renderer = gtk_cell_renderer_text_new ();
         
           column = gtk_tree_view_column_new_with_attributes ("Title",
                                                              renderer,
                                                              "text", TEXT_COLUMN,
                                                              "foreground", COLOR_COLUMN,
                                                              NULL);
         }
        ]|
        """
        ...

    def add_attribute(self, cell_renderer: CellRenderer, attribute: str, column: int) -> object:
        """
        Adds an attribute mapping to the list in @tree_column.  The @column is the
        column of the model to get a value from, and the @attribute is the
        parameter on @cell_renderer to be set from the value. So for example
        if column 2 of the model contains strings, you could have the
        “text” attribute of a #GtkCellRendererText get its values from
        column 2.
        """
        ...

    def cell_get_position(self, cell_renderer: CellRenderer, x_offset: int, width: int) -> bool:
        """
        Obtains the horizontal position and size of a cell in a column. If the
        cell is not found in the column, @start_pos and @width are not changed and
        %FALSE is returned.
        """
        ...

    def cell_get_size(self, cell_area: _T.Optional[Gdk.Rectangle], x_offset: int, y_offset: int, width: int, height: int) -> object:
        """
        Obtains the width and height needed to render the column.  This is used
        primarily by the #GtkTreeView.
        """
        ...

    def cell_is_visible(self) -> bool:
        """
        Returns %TRUE if any of the cells packed into the @tree_column are visible.
        For this to be meaningful, you must first initialize the cells with
        gtk_tree_view_column_cell_set_cell_data()
        """
        ...

    def cell_set_cell_data(self, tree_model: TreeModel, iter: TreeIter, is_expander: bool, is_expanded: bool) -> object:
        """
        Sets the cell renderer based on the @tree_model and @iter.  That is, for
        every attribute mapping in @tree_column, it will get a value from the set
        column on the @iter, and use that value to set the attribute on the cell
        renderer.  This is used primarily by the #GtkTreeView.
        """
        ...

    def clear(self) -> object:
        """
        Unsets all the mappings on all renderers on the @tree_column.
        """
        ...

    def clear_attributes(self, cell_renderer: CellRenderer) -> object:
        """
        Clears all existing attributes previously set with
        gtk_tree_view_column_set_attributes().
        """
        ...

    def clicked(self) -> object:
        """
        Emits the “clicked” signal on the column.  This function will only work if
        @tree_column is clickable.
        """
        ...

    def focus_cell(self, cell: CellRenderer) -> object:
        """
        Sets the current keyboard focus to be at @cell, if the column contains
        2 or more editable and activatable cells.
        """
        ...

    def get_alignment(self) -> float:
        """
        Returns the current x alignment of @tree_column.  This value can range
        between 0.0 and 1.0.
        """
        ...

    def get_button(self) -> Widget:
        """
        Returns the button used in the treeview column header
        """
        ...

    def get_clickable(self) -> bool:
        """
        Returns %TRUE if the user can click on the header for the column.
        """
        ...

    def get_expand(self) -> bool:
        """
        Returns %TRUE if the column expands to fill available space.
        """
        ...

    def get_fixed_width(self) -> int:
        """
        Gets the fixed width of the column.  This may not be the actual displayed
        width of the column; for that, use gtk_tree_view_column_get_width().
        """
        ...

    def get_max_width(self) -> int:
        """
        Returns the maximum width in pixels of the @tree_column, or -1 if no maximum
        width is set.
        """
        ...

    def get_min_width(self) -> int:
        """
        Returns the minimum width in pixels of the @tree_column, or -1 if no minimum
        width is set.
        """
        ...

    def get_reorderable(self) -> bool:
        """
        Returns %TRUE if the @tree_column can be reordered by the user.
        """
        ...

    def get_resizable(self) -> bool:
        """
        Returns %TRUE if the @tree_column can be resized by the end user.
        """
        ...

    def get_sizing(self) -> TreeViewColumnSizing:
        """
        Returns the current type of @tree_column.
        """
        ...

    def get_sort_column_id(self) -> int:
        """
        Gets the logical @sort_column_id that the model sorts on when this
        column is selected for sorting.
        See gtk_tree_view_column_set_sort_column_id().
        """
        ...

    def get_sort_indicator(self) -> bool:
        """
        Gets the value set by gtk_tree_view_column_set_sort_indicator().
        """
        ...

    def get_sort_order(self) -> SortType:
        """
        Gets the value set by gtk_tree_view_column_set_sort_order().
        """
        ...

    def get_spacing(self) -> int:
        """
        Returns the spacing of @tree_column.
        """
        ...

    def get_title(self) -> str:
        """
        Returns the title of the widget.
        """
        ...

    def get_tree_view(self) -> Widget:
        """
        Returns the #GtkTreeView wherein @tree_column has been inserted.
        If @column is currently not inserted in any tree view, %NULL is
        returned.
        """
        ...

    def get_visible(self) -> bool:
        """
        Returns %TRUE if @tree_column is visible.
        """
        ...

    def get_widget(self) -> Widget:
        """
        Returns the #GtkWidget in the button on the column header.
        If a custom widget has not been set then %NULL is returned.
        """
        ...

    def get_width(self) -> int:
        """
        Returns the current size of @tree_column in pixels.
        """
        ...

    def get_x_offset(self) -> int:
        """
        Returns the current X offset of @tree_column in pixels.
        """
        ...

    def pack_end(self, cell: CellRenderer, expand: bool) -> object:
        """
        Adds the @cell to end of the column. If @expand is %FALSE, then the @cell
        is allocated no more space than it needs. Any unused space is divided
        evenly between cells for which @expand is %TRUE.
        """
        ...

    def pack_start(self, cell: CellRenderer, expand: bool) -> object:
        """
        Packs the @cell into the beginning of the column. If @expand is %FALSE, then
        the @cell is allocated no more space than it needs. Any unused space is divided
        evenly between cells for which @expand is %TRUE.
        """
        ...

    def queue_resize(self) -> object:
        """
        Flags the column, and the cell renderers added to this column, to have
        their sizes renegotiated.
        """
        ...

    def set_alignment(self, xalign: float) -> object:
        """
        Sets the alignment of the title or custom widget inside the column header.
        The alignment determines its location inside the button -- 0.0 for left, 0.5
        for center, 1.0 for right.
        """
        ...

    def set_attributes(self, cell_renderer: CellRenderer, *args: object) -> object:
        """
        Sets the attributes in the list as the attributes of @tree_column.
        The attributes should be in attribute/column order, as in
        gtk_tree_view_column_add_attribute(). All existing attributes
        are removed, and replaced with the new attributes.
        """
        ...

    def set_cell_data_func(self, cell_renderer: CellRenderer, func: _T.Optional[TreeCellDataFunc], func_data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        Sets the #GtkTreeCellDataFunc to use for the column.  This
        function is used instead of the standard attributes mapping for
        setting the column value, and should set the value of @tree_column's
        cell renderer as appropriate.  @func may be %NULL to remove an
        older one.
        """
        ...

    def set_clickable(self, clickable: bool) -> object:
        """
        Sets the header to be active if @clickable is %TRUE.  When the header is
        active, then it can take keyboard focus, and can be clicked.
        """
        ...

    def set_expand(self, expand: bool) -> object:
        """
        Sets the column to take available extra space.  This space is shared equally
        amongst all columns that have the expand set to %TRUE.  If no column has this
        option set, then the last column gets all extra space.  By default, every
        column is created with this %FALSE.

        Along with “fixed-width”, the “expand” property changes when the column is
        resized by the user.
        """
        ...

    def set_fixed_width(self, fixed_width: int) -> object:
        """
        If @fixed_width is not -1, sets the fixed width of @tree_column; otherwise
        unsets it.  The effective value of @fixed_width is clamped between the
        minimum and maximum width of the column; however, the value stored in the
        “fixed-width” property is not clamped.  If the column sizing is
        #GTK_TREE_VIEW_COLUMN_GROW_ONLY or #GTK_TREE_VIEW_COLUMN_AUTOSIZE, setting
        a fixed width overrides the automatically calculated width.  Note that
        @fixed_width is only a hint to GTK+; the width actually allocated to the
        column may be greater or less than requested.

        Along with “expand”, the “fixed-width” property changes when the column is
        resized by the user.
        """
        ...

    def set_max_width(self, max_width: int) -> object:
        """
        Sets the maximum width of the @tree_column.  If @max_width is -1, then the
        maximum width is unset.  Note, the column can actually be wider than max
        width if it’s the last column in a view.  In this case, the column expands to
        fill any extra space.
        """
        ...

    def set_min_width(self, min_width: int) -> object:
        """
        Sets the minimum width of the @tree_column.  If @min_width is -1, then the
        minimum width is unset.
        """
        ...

    def set_reorderable(self, reorderable: bool) -> object:
        """
        If @reorderable is %TRUE, then the column can be reordered by the end user
        dragging the header.
        """
        ...

    def set_resizable(self, resizable: bool) -> object:
        """
        If @resizable is %TRUE, then the user can explicitly resize the column by
        grabbing the outer edge of the column button.  If resizable is %TRUE and
        sizing mode of the column is #GTK_TREE_VIEW_COLUMN_AUTOSIZE, then the sizing
        mode is changed to #GTK_TREE_VIEW_COLUMN_GROW_ONLY.
        """
        ...

    def set_sizing(self, type: TreeViewColumnSizing) -> object:
        """
        Sets the growth behavior of @tree_column to @type.
        """
        ...

    def set_sort_column_id(self, sort_column_id: int) -> object:
        """
        Sets the logical @sort_column_id that this column sorts on when this column
        is selected for sorting.  Doing so makes the column header clickable.
        """
        ...

    def set_sort_indicator(self, setting: bool) -> object:
        """
        Call this function with a @setting of %TRUE to display an arrow in
        the header button indicating the column is sorted. Call
        gtk_tree_view_column_set_sort_order() to change the direction of
        the arrow.
        """
        ...

    def set_sort_order(self, order: SortType) -> object:
        """
        Changes the appearance of the sort indicator.

        This does not actually sort the model.  Use
        gtk_tree_view_column_set_sort_column_id() if you want automatic sorting
        support.  This function is primarily for custom sorting behavior, and should
        be used in conjunction with gtk_tree_sortable_set_sort_column_id() to do
        that. For custom models, the mechanism will vary.

        The sort indicator changes direction to indicate normal sort or reverse sort.
        Note that you must have the sort indicator enabled to see anything when
        calling this function; see gtk_tree_view_column_set_sort_indicator().
        """
        ...

    def set_spacing(self, spacing: int) -> object:
        """
        Sets the spacing field of @tree_column, which is the number of pixels to
        place between cell renderers packed into it.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the title of the @tree_column.  If a custom widget has been set, then
        this value is ignored.
        """
        ...

    def set_visible(self, visible: bool) -> object:
        """
        Sets the visibility of @tree_column.
        """
        ...

    def set_widget(self, widget: _T.Optional[Widget]) -> object:
        """
        Sets the widget in the header to be @widget.  If widget is %NULL, then the
        header button is set with a #GtkLabel set to the title of @tree_column.
        """
        ...


    ...

class UIManager(GObject.Object, Buildable):
    """
    A #GtkUIManager constructs a user interface (menus and toolbars) from
    one or more UI definitions, which reference actions from one or more
    action groups.

    > GtkUIManager is deprecated since GTK+ 3.10. To construct user interfaces
    > from XML definitions, you should use #GtkBuilder, #GMenuModel, et al. To
    > work with actions, use #GAction, #GtkActionable et al. These newer classes
    > support richer functionality and integration with various desktop shells.
    > It should be possible to migrate most/all functionality from GtkUIManager.

    # UI Definitions # {#XML-UI}

    The UI definitions are specified in an XML format which can be
    roughly described by the following DTD.

    > Do not confuse the GtkUIManager UI Definitions described here with
    > the similarly named [GtkBuilder UI Definitions][BUILDER-UI].

    |[
    <!ELEMENT ui          (menubar|toolbar|popup|accelerator)* >
    <!ELEMENT menubar     (menuitem|separator|placeholder|menu)* >
    <!ELEMENT menu        (menuitem|separator|placeholder|menu)* >
    <!ELEMENT popup       (menuitem|separator|placeholder|menu)* >
    <!ELEMENT toolbar     (toolitem|separator|placeholder)* >
    <!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)* >
    <!ELEMENT menuitem     EMPTY >
    <!ELEMENT toolitem     (menu?) >
    <!ELEMENT separator    EMPTY >
    <!ELEMENT accelerator  EMPTY >
    <!ATTLIST menubar      name                      #IMPLIED
                           action                    #IMPLIED >
    <!ATTLIST toolbar      name                      #IMPLIED
                           action                    #IMPLIED >
    <!ATTLIST popup        name                      #IMPLIED
                           action                    #IMPLIED
                           accelerators (true|false) #IMPLIED >
    <!ATTLIST placeholder  name                      #IMPLIED
                           action                    #IMPLIED >
    <!ATTLIST separator    name                      #IMPLIED
                           action                    #IMPLIED
                           expand       (true|false) #IMPLIED >
    <!ATTLIST menu         name                      #IMPLIED
                           action                    #REQUIRED
                           position     (top|bot)    #IMPLIED >
    <!ATTLIST menuitem     name                      #IMPLIED
                           action                    #REQUIRED
                           position     (top|bot)    #IMPLIED
                           always-show-image (true|false) #IMPLIED >
    <!ATTLIST toolitem     name                      #IMPLIED
                           action                    #REQUIRED
                           position     (top|bot)    #IMPLIED >
    <!ATTLIST accelerator  name                      #IMPLIED
                           action                    #REQUIRED >
    ]|

    There are some additional restrictions beyond those specified in the
    DTD, e.g. every toolitem must have a toolbar in its anchestry and
    every menuitem must have a menubar or popup in its anchestry. Since
    a #GMarkupParser is used to parse the UI description, it must not only
    be valid XML, but valid markup.

    If a name is not specified, it defaults to the action. If an action is
    not specified either, the element name is used. The name and action
    attributes must not contain “/” characters after parsing (since that
    would mess up path lookup) and must be usable as XML attributes when
    enclosed in doublequotes, thus they must not “"” characters or references
    to the &quot; entity.

    # A UI definition #

    |[<!-- language="xml" -->
    <ui>
      <menubar>
        <menu name="FileMenu" action="FileMenuAction">
          <menuitem name="New" action="New2Action" />
          <placeholder name="FileMenuAdditions" />
        </menu>
        <menu name="JustifyMenu" action="JustifyMenuAction">
          <menuitem name="Left" action="justify-left"/>
          <menuitem name="Centre" action="justify-center"/>
          <menuitem name="Right" action="justify-right"/>
          <menuitem name="Fill" action="justify-fill"/>
        </menu>
      </menubar>
      <toolbar action="toolbar1">
        <placeholder name="JustifyToolItems">
          <separator/>
          <toolitem name="Left" action="justify-left"/>
          <toolitem name="Centre" action="justify-center"/>
          <toolitem name="Right" action="justify-right"/>
          <toolitem name="Fill" action="justify-fill"/>
          <separator/>
        </placeholder>
      </toolbar>
    </ui>
    ]|

    The constructed widget hierarchy is very similar to the element tree
    of the XML, with the exception that placeholders are merged into their
    parents. The correspondence of XML elements to widgets should be
    almost obvious:

    - menubar

       a #GtkMenuBar

    - toolbar

       a #GtkToolbar

    - popup

       a toplevel #GtkMenu

    - menu

       a #GtkMenu attached to a menuitem

    - menuitem

       a #GtkMenuItem subclass, the exact type depends on the action

    - toolitem

       a #GtkToolItem subclass, the exact type depends on the
       action. Note that toolitem elements may contain a menu element,
       but only if their associated action specifies a
       #GtkMenuToolButton as proxy.

    - separator

       a #GtkSeparatorMenuItem or #GtkSeparatorToolItem

    - accelerator

       a keyboard accelerator

    The “position” attribute determines where a constructed widget is positioned
    wrt. to its siblings in the partially constructed tree. If it is
    “top”, the widget is prepended, otherwise it is appended.

    # UI Merging # {#UI-Merging}

    The most remarkable feature of #GtkUIManager is that it can overlay a set
    of menuitems and toolitems over another one, and demerge them later.

    Merging is done based on the names of the XML elements. Each element is
    identified by a path which consists of the names of its anchestors, separated
    by slashes. For example, the menuitem named “Left” in the example above
    has the path `/ui/menubar/JustifyMenu/Left` and the
    toolitem with the same name has path
    `/ui/toolbar1/JustifyToolItems/Left`.

    # Accelerators #

    Every action has an accelerator path. Accelerators are installed together
    with menuitem proxies, but they can also be explicitly added with
    `<accelerator>` elements in the UI definition. This makes it possible to
    have accelerators for actions even if they have no visible proxies.

    # Smart Separators # {#Smart-Separators}

    The separators created by #GtkUIManager are “smart”, i.e. they do not show up
    in the UI unless they end up between two visible menu or tool items. Separators
    which are located at the very beginning or end of the menu or toolbar
    containing them, or multiple separators next to each other, are hidden. This
    is a useful feature, since the merging of UI elements from multiple sources
    can make it hard or impossible to determine in advance whether a separator
    will end up in such an unfortunate position.

    For separators in toolbars, you can set `expand="true"` to
    turn them from a small, visible separator to an expanding, invisible one.
    Toolitems following an expanding separator are effectively right-aligned.

    # Empty Menus

    Submenus pose similar problems to separators inconnection with merging. It is
    impossible to know in advance whether they will end up empty after merging.
    #GtkUIManager offers two ways to treat empty submenus:

    - make them disappear by hiding the menu item they’re attached to

    - add an insensitive “Empty” item

    The behaviour is chosen based on the “hide_if_empty” property of the action
    to which the submenu is associated.

    # GtkUIManager as GtkBuildable # {#GtkUIManager-BUILDER-UI}

    The GtkUIManager implementation of the GtkBuildable interface accepts
    GtkActionGroup objects as `<child>` elements in UI definitions.

    A GtkUIManager UI definition as described above can be embedded in
    an GtkUIManager `<object>` element in a GtkBuilder UI definition.

    The widgets that are constructed by a GtkUIManager can be embedded in
    other parts of the constructed user interface with the help of the
    “constructor” attribute. See the example below.

    ## An embedded GtkUIManager UI definition

    |[<!-- language="xml" -->
    <object class="GtkUIManager" id="uiman">
      <child>
        <object class="GtkActionGroup" id="actiongroup">
          <child>
            <object class="GtkAction" id="file">
              <property name="label">_File</property>
            </object>
          </child>
        </object>
      </child>
      <ui>
        <menubar name="menubar1">
          <menu action="file">
          </menu>
        </menubar>
      </ui>
    </object>
    <object class="GtkWindow" id="main-window">
      <child>
        <object class="GtkMenuBar" id="menubar1" constructor="uiman"/>
      </child>
    </object>
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> UIManager:
        """
        Creates a new ui manager object.
        """
        ...

    def add_ui(self, merge_id: int, path: str, name: str, action: _T.Optional[str], type: UIManagerItemType, top: bool) -> object:
        """
        Adds a UI element to the current contents of @manager.

        If @type is %GTK_UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or
        separator if such an element can be inserted at the place determined by
        @path. Otherwise @type must indicate an element that can be inserted at
        the place determined by @path.

        If @path points to a menuitem or toolitem, the new element will be inserted
        before or after this item, depending on @top.
        """
        ...

    def add_ui_from_file(self, filename: str) -> int:
        """
        Parses a file containing a [UI definition][XML-UI] and
        merges it with the current contents of @manager.
        """
        ...

    def add_ui_from_resource(self, resource_path: str) -> int:
        """
        Parses a resource file containing a [UI definition][XML-UI] and
        merges it with the current contents of @manager.
        """
        ...

    def add_ui_from_string(self, buffer: str, length: int) -> int:
        """
        Parses a string containing a [UI definition][XML-UI] and merges it with
        the current contents of @manager. An enclosing `<ui>` element is added if
        it is missing.
        """
        ...

    def ensure_update(self) -> object:
        """
        Makes sure that all pending updates to the UI have been completed.

        This may occasionally be necessary, since #GtkUIManager updates the
        UI in an idle function. A typical example where this function is
        useful is to enforce that the menubar and toolbar have been added to
        the main window before showing it:
        |[<!-- language="C" -->
        gtk_container_add (GTK_CONTAINER (window), vbox);
        g_signal_connect (merge, "add-widget",
                          G_CALLBACK (add_widget), vbox);
        gtk_ui_manager_add_ui_from_file (merge, "my-menus");
        gtk_ui_manager_add_ui_from_file (merge, "my-toolbars");
        gtk_ui_manager_ensure_update (merge);
        gtk_widget_show (window);
        ]|
        """
        ...

    def get_accel_group(self) -> AccelGroup:
        """
        Returns the #GtkAccelGroup associated with @manager.
        """
        ...

    def get_action(self, path: str) -> Action:
        """
        Looks up an action by following a path. See gtk_ui_manager_get_widget()
        for more information about paths.
        """
        ...

    def get_action_groups(self) -> GLib.List:
        """
        Returns the list of action groups associated with @manager.
        """
        ...

    def get_add_tearoffs(self) -> bool:
        """
        Returns whether menus generated by this #GtkUIManager
        will have tearoff menu items.
        """
        ...

    def get_toplevels(self, types: UIManagerItemType) -> GLib.SList:
        """
        Obtains a list of all toplevel widgets of the requested types.
        """
        ...

    def get_ui(self) -> str:
        """
        Creates a [UI definition][XML-UI] of the merged UI.
        """
        ...

    def get_widget(self, path: str) -> Widget:
        """
        Looks up a widget by following a path.
        The path consists of the names specified in the XML description of the UI.
        separated by “/”. Elements which don’t have a name or action attribute in
        the XML (e.g. `<popup>`) can be addressed by their XML element name
        (e.g. "popup"). The root element ("/ui") can be omitted in the path.

        Note that the widget found by following a path that ends in a `<menu>`;
        element is the menuitem to which the menu is attached, not the menu it
        manages.

        Also note that the widgets constructed by a ui manager are not tied to
        the lifecycle of the ui manager. If you add the widgets returned by this
        function to some container or explicitly ref them, they will survive the
        destruction of the ui manager.
        """
        ...

    def insert_action_group(self, action_group: ActionGroup, pos: int) -> object:
        """
        Inserts an action group into the list of action groups associated
        with @manager. Actions in earlier groups hide actions with the same
        name in later groups.

        If @pos is larger than the number of action groups in @manager, or
        negative, @action_group will be inserted at the end of the internal
        list.
        """
        ...

    def new_merge_id(self) -> int:
        """
        Returns an unused merge id, suitable for use with
        gtk_ui_manager_add_ui().
        """
        ...

    def remove_action_group(self, action_group: ActionGroup) -> object:
        """
        Removes an action group from the list of action groups associated
        with @manager.
        """
        ...

    def remove_ui(self, merge_id: int) -> object:
        """
        Unmerges the part of @manager's content identified by @merge_id.
        """
        ...

    def set_add_tearoffs(self, add_tearoffs: bool) -> object:
        """
        Sets the “add_tearoffs” property, which controls whether menus
        generated by this #GtkUIManager will have tearoff menu items.

        Note that this only affects regular menus. Generated popup
        menus never have tearoff menu items.
        """
        ...


    ...

class VBox(Box, Atk.ImplementorIface, Buildable, Orientable):
    """
    A #GtkVBox is a container that organizes child widgets into a single column.

    Use the #GtkBox packing interface to determine the arrangement,
    spacing, height, and alignment of #GtkVBox children.

    All children are allocated the same width.

    GtkVBox has been deprecated. You can use #GtkBox with a #GtkOrientable:orientation
    set to %GTK_ORIENTATION_VERTICAL instead when calling gtk_box_new(),
    which is a very quick and easy change.

    If you have derived your own classes from GtkVBox, you can change the
    inheritance to derive directly from #GtkBox, and set the #GtkOrientable:orientation
    property to %GTK_ORIENTATION_VERTICAL in your instance init function,
    with a call like:

    |[<!-- language="C" -->
      gtk_orientable_set_orientation (GTK_ORIENTABLE (object),
                                      GTK_ORIENTATION_VERTICAL);
    ]|

    If you have a grid-like layout composed of nested boxes, and you don’t
    need first-child or last-child styling, the recommendation is to switch
    to #GtkGrid. For more information about migrating to #GtkGrid, see
    [Migrating from other containers to GtkGrid][gtk-migrating-GtkGrid].
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, homogeneous: bool, spacing: int) -> Widget:
        """
        Creates a new #GtkVBox.
        """
        ...


    ...

class VButtonBox(ButtonBox, Atk.ImplementorIface, Buildable, Orientable):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new vertical button box.
        """
        ...


    ...

class VPaned(Paned, Atk.ImplementorIface, Buildable, Orientable):
    """
    The VPaned widget is a container widget with two
    children arranged vertically. The division between
    the two panes is adjustable by the user by dragging
    a handle. See #GtkPaned for details.

    GtkVPaned has been deprecated, use #GtkPaned instead.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Create a new #GtkVPaned
        """
        ...


    ...

class VScale(Scale, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkVScale widget is used to allow the user to select a value using
    a vertical slider. To create one, use gtk_hscale_new_with_range().

    The position to show the current value, and the number of decimal places
    shown can be set using the parent #GtkScale class’s functions.

    GtkVScale has been deprecated, use #GtkScale instead.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, adjustment: Adjustment) -> Widget:
        """
        Creates a new #GtkVScale.
        """
        ...


    @classmethod
    def new_with_range(cls, min: float, max: float, step: float) -> Widget:
        """
        Creates a new vertical scale widget that lets the user input a
        number between @min and @max (including @min and @max) with the
        increment @step.  @step must be nonzero; it’s the distance the
        slider moves when using the arrow keys to adjust the scale value.

        Note that the way in which the precision is derived works best if @step
        is a power of ten. If the resulting precision is not suitable for your
        needs, use gtk_scale_set_digits() to correct it.
        """
        ...


    ...

class VScrollbar(Scrollbar, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkVScrollbar widget is a widget arranged vertically creating a
    scrollbar. See #GtkScrollbar for details on
    scrollbars. #GtkAdjustment pointers may be added to handle the
    adjustment of the scrollbar or it may be left %NULL in which case one
    will be created for you. See #GtkScrollbar for a description of what the
    fields in an adjustment represent for a scrollbar.

    GtkVScrollbar has been deprecated, use #GtkScrollbar instead.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, adjustment: _T.Optional[Adjustment]) -> Widget:
        """
        Creates a new vertical scrollbar.
        """
        ...


    ...

class VSeparator(Separator, Atk.ImplementorIface, Buildable, Orientable):
    """
    The #GtkVSeparator widget is a vertical separator, used to group the
    widgets within a window. It displays a vertical line with a shadow to
    make it appear sunken into the interface.

    GtkVSeparator has been deprecated, use #GtkSeparator instead.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a new #GtkVSeparator.
        """
        ...


    ...

class Viewport(Bin, Atk.ImplementorIface, Buildable, Scrollable):
    """
    The #GtkViewport widget acts as an adaptor class, implementing
    scrollability for child widgets that lack their own scrolling
    capabilities. Use GtkViewport to scroll child widgets such as
    #GtkGrid, #GtkBox, and so on.

    If a widget has native scrolling abilities, such as #GtkTextView,
    #GtkTreeView or #GtkIconView, it can be added to a #GtkScrolledWindow
    with gtk_container_add(). If a widget does not, you must first add the
    widget to a #GtkViewport, then add the viewport to the scrolled window.
    gtk_container_add() does this automatically if a child that does not
    implement #GtkScrollable is added to a #GtkScrolledWindow, so you can
    ignore the presence of the viewport.

    The GtkViewport will start scrolling content only if allocated less
    than the child widget’s minimum size in a given orientation.

    # CSS nodes

    GtkViewport has a single CSS node with name viewport.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, hadjustment: _T.Optional[Adjustment], vadjustment: _T.Optional[Adjustment]) -> Widget:
        """
        Creates a new #GtkViewport with the given adjustments, or with default
        adjustments if none are given.
        """
        ...

    def get_bin_window(self) -> Gdk.Window:
        """
        Gets the bin window of the #GtkViewport.
        """
        ...

    def get_hadjustment(self) -> Adjustment:
        """
        Returns the horizontal adjustment of the viewport.
        """
        ...

    def get_shadow_type(self) -> ShadowType:
        """
        Gets the shadow type of the #GtkViewport. See
        gtk_viewport_set_shadow_type().
        """
        ...

    def get_vadjustment(self) -> Adjustment:
        """
        Returns the vertical adjustment of the viewport.
        """
        ...

    def get_view_window(self) -> Gdk.Window:
        """
        Gets the view window of the #GtkViewport.
        """
        ...

    def set_hadjustment(self, adjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the horizontal adjustment of the viewport.
        """
        ...

    def set_shadow_type(self, type: ShadowType) -> object:
        """
        Sets the shadow type of the viewport.
        """
        ...

    def set_vadjustment(self, adjustment: _T.Optional[Adjustment]) -> object:
        """
        Sets the vertical adjustment of the viewport.
        """
        ...


    ...

class VolumeButton(ScaleButton, Atk.ImplementorIface, Actionable, Activatable, Buildable, Orientable):
    """
    #GtkVolumeButton is a subclass of #GtkScaleButton that has
    been tailored for use as a volume control widget with suitable
    icons, tooltips and accessible labels.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Widget:
        """
        Creates a #GtkVolumeButton, with a range between 0.0 and 1.0, with
        a stepping of 0.02. Volume values can be obtained and modified using
        the functions from #GtkScaleButton.
        """
        ...


    ...

class Widget(GObject.InitiallyUnowned, Atk.ImplementorIface, Buildable):
    """
    GtkWidget is the base class all widgets in GTK+ derive from. It manages the
    widget lifecycle, states and style.

    # Height-for-width Geometry Management # {#geometry-management}

    GTK+ uses a height-for-width (and width-for-height) geometry management
    system. Height-for-width means that a widget can change how much
    vertical space it needs, depending on the amount of horizontal space
    that it is given (and similar for width-for-height). The most common
    example is a label that reflows to fill up the available width, wraps
    to fewer lines, and therefore needs less height.

    Height-for-width geometry management is implemented in GTK+ by way
    of five virtual methods:

    - #GtkWidgetClass.get_request_mode()
    - #GtkWidgetClass.get_preferred_width()
    - #GtkWidgetClass.get_preferred_height()
    - #GtkWidgetClass.get_preferred_height_for_width()
    - #GtkWidgetClass.get_preferred_width_for_height()
    - #GtkWidgetClass.get_preferred_height_and_baseline_for_width()

    There are some important things to keep in mind when implementing
    height-for-width and when using it in container implementations.

    The geometry management system will query a widget hierarchy in
    only one orientation at a time. When widgets are initially queried
    for their minimum sizes it is generally done in two initial passes
    in the #GtkSizeRequestMode chosen by the toplevel.

    For example, when queried in the normal
    %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH mode:
    First, the default minimum and natural width for each widget
    in the interface will be computed using gtk_widget_get_preferred_width().
    Because the preferred widths for each container depend on the preferred
    widths of their children, this information propagates up the hierarchy,
    and finally a minimum and natural width is determined for the entire
    toplevel. Next, the toplevel will use the minimum width to query for the
    minimum height contextual to that width using
    gtk_widget_get_preferred_height_for_width(), which will also be a highly
    recursive operation. The minimum height for the minimum width is normally
    used to set the minimum size constraint on the toplevel
    (unless gtk_window_set_geometry_hints() is explicitly used instead).

    After the toplevel window has initially requested its size in both
    dimensions it can go on to allocate itself a reasonable size (or a size
    previously specified with gtk_window_set_default_size()). During the
    recursive allocation process it’s important to note that request cycles
    will be recursively executed while container widgets allocate their children.
    Each container widget, once allocated a size, will go on to first share the
    space in one orientation among its children and then request each child's
    height for its target allocated width or its width for allocated height,
    depending. In this way a #GtkWidget will typically be requested its size
    a number of times before actually being allocated a size. The size a
    widget is finally allocated can of course differ from the size it has
    requested. For this reason, #GtkWidget caches a  small number of results
    to avoid re-querying for the same sizes in one allocation cycle.

    See
    [GtkContainer’s geometry management section][container-geometry-management]
    to learn more about how height-for-width allocations are performed
    by container widgets.

    If a widget does move content around to intelligently use up the
    allocated size then it must support the request in both
    #GtkSizeRequestModes even if the widget in question only
    trades sizes in a single orientation.

    For instance, a #GtkLabel that does height-for-width word wrapping
    will not expect to have #GtkWidgetClass.get_preferred_height() called
    because that call is specific to a width-for-height request. In this
    case the label must return the height required for its own minimum
    possible width. By following this rule any widget that handles
    height-for-width or width-for-height requests will always be allocated
    at least enough space to fit its own content.

    Here are some examples of how a %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
    generally deals with width-for-height requests, for #GtkWidgetClass.get_preferred_height()
    it will do:

    |[<!-- language="C" -->
    static void
    foo_widget_get_preferred_height (GtkWidget *widget,
                                     gint *min_height,
                                     gint *nat_height)
    {
       if (i_am_in_height_for_width_mode)
         {
           gint min_width, nat_width;

           GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
                                                               &min_width,
                                                               &nat_width);
           GTK_WIDGET_GET_CLASS (widget)->get_preferred_height_for_width
                                                              (widget,
                                                               min_width,
                                                               min_height,
                                                               nat_height);
         }
       else
         {
            ... some widgets do both. For instance, if a GtkLabel is
            rotated to 90 degrees it will return the minimum and
            natural height for the rotated label here.
         }
    }
    ]|

    And in #GtkWidgetClass.get_preferred_width_for_height() it will simply return
    the minimum and natural width:
    |[<!-- language="C" -->
    static void
    foo_widget_get_preferred_width_for_height (GtkWidget *widget,
                                               gint for_height,
                                               gint *min_width,
                                               gint *nat_width)
    {
       if (i_am_in_height_for_width_mode)
         {
           GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
                                                               min_width,
                                                               nat_width);
         }
       else
         {
            ... again if a widget is sometimes operating in
            width-for-height mode (like a rotated GtkLabel) it can go
            ahead and do its real width for height calculation here.
         }
    }
    ]|

    Often a widget needs to get its own request during size request or
    allocation. For example, when computing height it may need to also
    compute width. Or when deciding how to use an allocation, the widget
    may need to know its natural size. In these cases, the widget should
    be careful to call its virtual methods directly, like this:

    |[<!-- language="C" -->
    GTK_WIDGET_GET_CLASS(widget)->get_preferred_width (widget,
                                                       &min,
                                                       &natural);
    ]|

    It will not work to use the wrapper functions, such as
    gtk_widget_get_preferred_width() inside your own size request
    implementation. These return a request adjusted by #GtkSizeGroup
    and by the #GtkWidgetClass.adjust_size_request() virtual method. If a
    widget used the wrappers inside its virtual method implementations,
    then the adjustments (such as widget margins) would be applied
    twice. GTK+ therefore does not allow this and will warn if you try
    to do it.

    Of course if you are getting the size request for
    another widget, such as a child of a
    container, you must use the wrapper APIs.
    Otherwise, you would not properly consider widget margins,
    #GtkSizeGroup, and so forth.

    Since 3.10 GTK+ also supports baseline vertical alignment of widgets. This
    means that widgets are positioned such that the typographical baseline of
    widgets in the same row are aligned. This happens if a widget supports baselines,
    has a vertical alignment of %GTK_ALIGN_BASELINE, and is inside a container
    that supports baselines and has a natural “row” that it aligns to the baseline,
    or a baseline assigned to it by the grandparent.

    Baseline alignment support for a widget is done by the #GtkWidgetClass.get_preferred_height_and_baseline_for_width()
    virtual function. It allows you to report a baseline in combination with the
    minimum and natural height. If there is no baseline you can return -1 to indicate
    this. The default implementation of this virtual function calls into the
    #GtkWidgetClass.get_preferred_height() and #GtkWidgetClass.get_preferred_height_for_width(),
    so if baselines are not supported it doesn’t need to be implemented.

    If a widget ends up baseline aligned it will be allocated all the space in the parent
    as if it was %GTK_ALIGN_FILL, but the selected baseline can be found via gtk_widget_get_allocated_baseline().
    If this has a value other than -1 you need to align the widget such that the baseline
    appears at the position.

    # Style Properties

    #GtkWidget introduces “style
    properties” - these are basically object properties that are stored
    not on the object, but in the style object associated to the widget. Style
    properties are set in [resource files][gtk3-Resource-Files].
    This mechanism is used for configuring such things as the location of the
    scrollbar arrows through the theme, giving theme authors more control over the
    look of applications without the need to write a theme engine in C.

    Use gtk_widget_class_install_style_property() to install style properties for
    a widget class, gtk_widget_class_find_style_property() or
    gtk_widget_class_list_style_properties() to get information about existing
    style properties and gtk_widget_style_get_property(), gtk_widget_style_get() or
    gtk_widget_style_get_valist() to obtain the value of a style property.

    # GtkWidget as GtkBuildable

    The GtkWidget implementation of the GtkBuildable interface supports a
    custom `<accelerator>` element, which has attributes named ”key”, ”modifiers”
    and ”signal” and allows to specify accelerators.

    An example of a UI definition fragment specifying an accelerator:

    |[<!-- language="xml" -->
    <object class="GtkButton">
      <accelerator key="q" modifiers="GDK_CONTROL_MASK" signal="clicked"/>
    </object>
    ]|

    In addition to accelerators, GtkWidget also support a custom `<accessible>`
    element, which supports actions and relations. Properties on the accessible
    implementation of an object can be set by accessing the internal child
    “accessible” of a #GtkWidget.

    An example of a UI definition fragment specifying an accessible:

    |[<!-- language="xml" -->
    <object class="GtkLabel" id="label1"/>
      <property name="label">I am a Label for a Button</property>
    </object>
    <object class="GtkButton" id="button1">
      <accessibility>
        <action action_name="click" translatable="yes">Click the button.</action>
        <relation target="label1" type="labelled-by"/>
      </accessibility>
      <child internal-child="accessible">
        <object class="AtkObject" id="a11y-button1">
          <property name="accessible-name">Clickable Button</property>
        </object>
      </child>
    </object>
    ]|

    Finally, GtkWidget allows style information such as style classes to
    be associated with widgets, using the custom `<style>` element:

    |[<!-- language="xml" -->
    <object class="GtkButton" id="button1">
      <style>
        <class name="my-special-button-class"/>
        <class name="dark-button"/>
      </style>
    </object>
    ]|

    # Building composite widgets from template XML ## {#composite-templates}

    GtkWidget exposes some facilities to automate the procedure
    of creating composite widgets using #GtkBuilder interface description
    language.

    To create composite widgets with #GtkBuilder XML, one must associate
    the interface description with the widget class at class initialization
    time using gtk_widget_class_set_template().

    The interface description semantics expected in composite template descriptions
    is slightly different from regular #GtkBuilder XML.

    Unlike regular interface descriptions, gtk_widget_class_set_template() will
    expect a `<template>` tag as a direct child of the toplevel `<interface>`
    tag. The `<template>` tag must specify the “class” attribute which must be
    the type name of the widget. Optionally, the “parent” attribute may be
    specified to specify the direct parent type of the widget type, this is
    ignored by the GtkBuilder but required for Glade to introspect what kind
    of properties and internal children exist for a given type when the actual
    type does not exist.

    The XML which is contained inside the `<template>` tag behaves as if it were
    added to the `<object>` tag defining "widget" itself. You may set properties
    on @widget by inserting `<property>` tags into the `<template>` tag, and also
    add `<child>` tags to add children and extend "widget" in the normal way you
    would with `<object>` tags.

    Additionally, `<object>` tags can also be added before and after the initial
    `<template>` tag in the normal way, allowing one to define auxiliary objects
    which might be referenced by other widgets declared as children of the
    `<template>` tag.

    An example of a GtkBuilder Template Definition:

    |[<!-- language="xml" -->
    <interface>
      <template class="FooWidget" parent="GtkBox">
        <property name="orientation">GTK_ORIENTATION_HORIZONTAL</property>
        <property name="spacing">4</property>
        <child>
          <object class="GtkButton" id="hello_button">
            <property name="label">Hello World</property>
            <signal name="clicked" handler="hello_button_clicked" object="FooWidget" swapped="yes"/>
          </object>
        </child>
        <child>
          <object class="GtkButton" id="goodbye_button">
            <property name="label">Goodbye World</property>
          </object>
        </child>
      </template>
    </interface>
    ]|

    Typically, you'll place the template fragment into a file that is
    bundled with your project, using #GResource. In order to load the
    template, you need to call gtk_widget_class_set_template_from_resource()
    from the class initialization of your #GtkWidget type:

    |[<!-- language="C" -->
    static void
    foo_widget_class_init (FooWidgetClass *klass)
    {
      // ...

      gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
                                                   "/com/example/ui/foowidget.ui");
    }
    ]|

    You will also need to call gtk_widget_init_template() from the instance
    initialization function:

    |[<!-- language="C" -->
    static void
    foo_widget_init (FooWidget *self)
    {
      // ...
      gtk_widget_init_template (GTK_WIDGET (self));
    }
    ]|

    You can access widgets defined in the template using the
    gtk_widget_get_template_child() function, but you will typically declare
    a pointer in the instance private data structure of your type using the same
    name as the widget in the template definition, and call
    gtk_widget_class_bind_template_child_private() with that name, e.g.

    |[<!-- language="C" -->
    typedef struct {
      GtkWidget *hello_button;
      GtkWidget *goodbye_button;
    } FooWidgetPrivate;

    G_DEFINE_TYPE_WITH_PRIVATE (FooWidget, foo_widget, GTK_TYPE_BOX)

    static void
    foo_widget_class_init (FooWidgetClass *klass)
    {
      // ...
      gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
                                                   "/com/example/ui/foowidget.ui");
      gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
                                                    FooWidget, hello_button);
      gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
                                                    FooWidget, goodbye_button);
    }

    static void
    foo_widget_init (FooWidget *widget)
    {

    }
    ]|

    You can also use gtk_widget_class_bind_template_callback() to connect a signal
    callback defined in the template with a function visible in the scope of the
    class, e.g.

    |[<!-- language="C" -->
    // the signal handler has the instance and user data swapped
    // because of the swapped="yes" attribute in the template XML
    static void
    hello_button_clicked (FooWidget *self,
                          GtkButton *button)
    {
      g_print ("Hello, world!\n");
    }

    static void
    foo_widget_class_init (FooWidgetClass *klass)
    {
      // ...
      gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
                                                   "/com/example/ui/foowidget.ui");
      gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);
    }
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, type: GObject.Type, first_property_name: str, *args: object) -> Widget:
        """
        This is a convenience function for creating a widget and setting
        its properties in one go. For example you might write:
        `gtk_widget_new (GTK_TYPE_LABEL, "label", "Hello World", "xalign",
        0.0, NULL)` to create a left-aligned label. Equivalent to
        g_object_new(), but returns a widget so you don’t have to
        cast the object yourself.
        """
        ...

    def activate(self) -> bool:
        """
        For widgets that can be “activated” (buttons, menu items, etc.)
        this function activates them. Activation is what happens when you
        press Enter on a widget during key navigation. If @widget isn't
        activatable, the function returns %FALSE.
        """
        ...

    def add_accelerator(self, accel_signal: str, accel_group: AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: AccelFlags) -> object:
        """
        Installs an accelerator for this @widget in @accel_group that causes
        @accel_signal to be emitted if the accelerator is activated.
        The @accel_group needs to be added to the widget’s toplevel via
        gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
        Accelerators added through this function are not user changeable during
        runtime. If you want to support accelerators that can be changed by the
        user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
        gtk_menu_item_set_accel_path() instead.
        """
        ...

    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask) -> object:
        """
        Adds the device events in the bitfield @events to the event mask for
        @widget. See gtk_widget_set_device_events() for details.
        """
        ...

    def add_events(self, events: int) -> object:
        """
        Adds the events in the bitfield @events to the event mask for
        @widget. See gtk_widget_set_events() and the
        [input handling overview][event-masks] for details.
        """
        ...

    def add_mnemonic_label(self, label: Widget) -> object:
        """
        Adds a widget to the list of mnemonic labels for
        this widget. (See gtk_widget_list_mnemonic_labels()). Note the
        list of mnemonic labels for the widget is cleared when the
        widget is destroyed, so the caller must make sure to update
        its internal state at this point as well, by using a connection
        to the #GtkWidget::destroy signal or a weak notifier.
        """
        ...

    def add_tick_callback(self, callback: TickCallback, user_data: _T.Optional[object], notify: GLib.DestroyNotify) -> int:
        """
        Queues an animation frame update and adds a callback to be called
        before each frame. Until the tick callback is removed, it will be
        called frequently (usually at the frame rate of the output device
        or as quickly as the application can be repainted, whichever is
        slower). For this reason, is most suitable for handling graphics
        that change every frame or every few frames. The tick callback does
        not automatically imply a relayout or repaint. If you want a
        repaint or relayout, and aren’t changing widget properties that
        would trigger that (for example, changing the text of a #GtkLabel),
        then you will have to call gtk_widget_queue_resize() or
        gtk_widget_queue_draw_area() yourself.

        gdk_frame_clock_get_frame_time() should generally be used for timing
        continuous animations and
        gdk_frame_timings_get_predicted_presentation_time() if you are
        trying to display isolated frames at particular times.

        This is a more convenient alternative to connecting directly to the
        #GdkFrameClock::update signal of #GdkFrameClock, since you don't
        have to worry about when a #GdkFrameClock is assigned to a widget.
        """
        ...

    def can_activate_accel(self, signal_id: int) -> bool:
        """
        Determines whether an accelerator that activates the signal
        identified by @signal_id can currently be activated.
        This is done by emitting the #GtkWidget::can-activate-accel
        signal on @widget; if the signal isn’t overridden by a
        handler or in a derived widget, then the default check is
        that the widget must be sensitive, and the widget and all
        its ancestors mapped.
        """
        ...

    def child_focus(self, direction: DirectionType) -> bool:
        """
        This function is used by custom widget implementations; if you're
        writing an app, you’d use gtk_widget_grab_focus() to move the focus
        to a particular widget, and gtk_container_set_focus_chain() to
        change the focus tab order. So you may want to investigate those
        functions instead.

        gtk_widget_child_focus() is called by containers as the user moves
        around the window using keyboard shortcuts. @direction indicates
        what kind of motion is taking place (up, down, left, right, tab
        forward, tab backward). gtk_widget_child_focus() emits the
        #GtkWidget::focus signal; widgets override the default handler
        for this signal in order to implement appropriate focus behavior.

        The default ::focus handler for a widget should return %TRUE if
        moving in @direction left the focus on a focusable location inside
        that widget, and %FALSE if moving in @direction moved the focus
        outside the widget. If returning %TRUE, widgets normally
        call gtk_widget_grab_focus() to place the focus accordingly;
        if returning %FALSE, they don’t modify the current focus location.
        """
        ...

    def child_notify(self, child_property: str) -> object:
        """
        Emits a #GtkWidget::child-notify signal for the
        [child property][child-properties] @child_property
        on @widget.

        This is the analogue of g_object_notify() for child properties.

        Also see gtk_container_child_notify().
        """
        ...

    def class_path(self, path_length: int, path: str, path_reversed: str) -> object:
        """
        Same as gtk_widget_path(), but always uses the name of a widget’s type,
        never uses a custom name set with gtk_widget_set_name().
        """
        ...

    def compute_expand(self, orientation: Orientation) -> bool:
        """
        Computes whether a container should give this widget extra space
        when possible. Containers should check this, rather than
        looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().

        This function already checks whether the widget is visible, so
        visibility does not need to be checked separately. Non-visible
        widgets are not expanded.

        The computed expand value uses either the expand setting explicitly
        set on the widget itself, or, if none has been explicitly set,
        the widget may expand if some of its children do.
        """
        ...

    def create_pango_context(self) -> Pango.Context:
        """
        Creates a new #PangoContext with the appropriate font map,
        font options, font description, and base direction for drawing
        text for this widget. See also gtk_widget_get_pango_context().
        """
        ...

    def create_pango_layout(self, text: _T.Optional[str]) -> Pango.Layout:
        """
        Creates a new #PangoLayout with the appropriate font map,
        font description, and base direction for drawing text for
        this widget.

        If you keep a #PangoLayout created in this way around, you need
        to re-create it when the widget #PangoContext is replaced.
        This can be tracked by using the #GtkWidget::screen-changed signal
        on the widget.
        """
        ...

    def destroy(self) -> object:
        """
        Destroys a widget.

        When a widget is destroyed all references it holds on other objects
        will be released:

         - if the widget is inside a container, it will be removed from its
         parent
         - if the widget is a container, all its children will be destroyed,
         recursively
         - if the widget is a top level, it will be removed from the list
         of top level widgets that GTK+ maintains internally

        It's expected that all references held on the widget will also
        be released; you should connect to the #GtkWidget::destroy signal
        if you hold a reference to @widget and you wish to remove it when
        this function is called. It is not necessary to do so if you are
        implementing a #GtkContainer, as you'll be able to use the
        #GtkContainerClass.remove() virtual function for that.

        It's important to notice that gtk_widget_destroy() will only cause
        the @widget to be finalized if no additional references, acquired
        using g_object_ref(), are held on it. In case additional references
        are in place, the @widget will be in an "inert" state after calling
        this function; @widget will still point to valid memory, allowing you
        to release the references you hold, but you may not query the widget's
        own state.

        You should typically call this function on top level widgets, and
        rarely on child widgets.

        See also: gtk_container_remove()
        """
        ...

    def destroyed(self, widget_pointer: Widget) -> object:
        """
        This function sets *@widget_pointer to %NULL if @widget_pointer !=
        %NULL.  It’s intended to be used as a callback connected to the
        “destroy” signal of a widget. You connect gtk_widget_destroyed()
        as a signal handler, and pass the address of your widget variable
        as user data. Then when the widget is destroyed, the variable will
        be set to %NULL. Useful for example to avoid multiple copies
        of the same dialog.
        """
        ...

    def device_is_shadowed(self, device: Gdk.Device) -> bool:
        """
        Returns %TRUE if @device has been shadowed by a GTK+
        device grab on another widget, so it would stop sending
        events to @widget. This may be used in the
        #GtkWidget::grab-notify signal to check for specific
        devices. See gtk_device_grab_add().
        """
        ...

    def drag_begin(self, targets: TargetList, actions: Gdk.DragAction, button: int, event: _T.Optional[Gdk.Event]) -> Gdk.DragContext:
        """
        This function is equivalent to gtk_drag_begin_with_coordinates(),
        passing -1, -1 as coordinates.
        """
        ...

    def drag_begin_with_coordinates(self, targets: TargetList, actions: Gdk.DragAction, button: int, event: _T.Optional[Gdk.Event], x: int, y: int) -> Gdk.DragContext:
        """
        Initiates a drag on the source side. The function only needs to be used
        when the application is starting drags itself, and is not needed when
        gtk_drag_source_set() is used.

        The @event is used to retrieve the timestamp that will be used internally to
        grab the pointer.  If @event is %NULL, then %GDK_CURRENT_TIME will be used.
        However, you should try to pass a real event in all cases, since that can be
        used to get information about the drag.

        Generally there are three cases when you want to start a drag by hand by
        calling this function:

        1. During a #GtkWidget::button-press-event handler, if you want to start a drag
        immediately when the user presses the mouse button.  Pass the @event
        that you have in your #GtkWidget::button-press-event handler.

        2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
        when the mouse moves past a certain threshold distance after a button-press.
        Pass the @event that you have in your #GtkWidget::motion-notify-event handler.

        3. During a timeout handler, if you want to start a drag after the mouse
        button is held down for some time.  Try to save the last event that you got
        from the mouse, using gdk_event_copy(), and pass it to this function
        (remember to free the event with gdk_event_free() when you are done).
        If you really cannot pass a real event, pass %NULL instead.
        """
        ...

    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool:
        """
        Checks to see if a mouse drag starting at (@start_x, @start_y) and ending
        at (@current_x, @current_y) has passed the GTK+ drag threshold, and thus
        should trigger the beginning of a drag-and-drop operation.
        """
        ...

    def drag_dest_add_image_targets(self) -> object:
        """
        Add the image targets supported by #GtkSelectionData to
        the target list of the drag destination. The targets
        are added with @info = 0. If you need another value,
        use gtk_target_list_add_image_targets() and
        gtk_drag_dest_set_target_list().
        """
        ...

    def drag_dest_add_text_targets(self) -> object:
        """
        Add the text targets supported by #GtkSelectionData to
        the target list of the drag destination. The targets
        are added with @info = 0. If you need another value,
        use gtk_target_list_add_text_targets() and
        gtk_drag_dest_set_target_list().
        """
        ...

    def drag_dest_add_uri_targets(self) -> object:
        """
        Add the URI targets supported by #GtkSelectionData to
        the target list of the drag destination. The targets
        are added with @info = 0. If you need another value,
        use gtk_target_list_add_uri_targets() and
        gtk_drag_dest_set_target_list().
        """
        ...

    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: _T.Optional[TargetList]) -> Gdk.Atom:
        """
        Looks for a match between the supported targets of @context and the
        @dest_target_list, returning the first matching target, otherwise
        returning %GDK_NONE. @dest_target_list should usually be the return
        value from gtk_drag_dest_get_target_list(), but some widgets may
        have different valid targets for different parts of the widget; in
        that case, they will have to implement a drag_motion handler that
        passes the correct target list to this function.
        """
        ...

    def drag_dest_get_target_list(self) -> TargetList:
        """
        Returns the list of targets this widget can accept from
        drag-and-drop.
        """
        ...

    def drag_dest_get_track_motion(self) -> bool:
        """
        Returns whether the widget has been configured to always
        emit #GtkWidget::drag-motion signals.
        """
        ...

    def drag_dest_set(self, flags: DestDefaults, targets: _T.Optional[object], n_targets: int, actions: Gdk.DragAction) -> object:
        """
        Sets a widget as a potential drop destination, and adds default behaviors.

        The default behaviors listed in @flags have an effect similar
        to installing default handlers for the widget’s drag-and-drop signals
        (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
        for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
        sufficient to connect to the widget’s #GtkWidget::drag-data-received
        signal to get primitive, but consistent drag-and-drop support.

        Things become more complicated when you try to preview the dragged data,
        as described in the documentation for #GtkWidget::drag-motion. The default
        behaviors described by @flags make some assumptions, that can conflict
        with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
        invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
        and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
        Especially the later is dramatic, when your own #GtkWidget::drag-motion
        handler calls gtk_drag_get_data() to inspect the dragged data.

        There’s no way to set a default action here, you can use the
        #GtkWidget::drag-motion callback for that. Here’s an example which selects
        the action to use depending on whether the control key is pressed or not:
        |[<!-- language="C" -->
        static void
        drag_motion (GtkWidget *widget,
                     GdkDragContext *context,
                     gint x,
                     gint y,
                     guint time)
        {
          GdkModifierType mask;

          gdk_window_get_pointer (gtk_widget_get_window (widget),
                                  NULL, NULL, &mask);
          if (mask & GDK_CONTROL_MASK)
            gdk_drag_status (context, GDK_ACTION_COPY, time);
          else
            gdk_drag_status (context, GDK_ACTION_MOVE, time);
        }
        ]|
        """
        ...

    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool) -> object:
        """
        Sets this widget as a proxy for drops to another window.
        """
        ...

    def drag_dest_set_target_list(self, target_list: _T.Optional[TargetList]) -> object:
        """
        Sets the target types that this widget can accept from drag-and-drop.
        The widget must first be made into a drag destination with
        gtk_drag_dest_set().
        """
        ...

    def drag_dest_set_track_motion(self, track_motion: bool) -> object:
        """
        Tells the widget to emit #GtkWidget::drag-motion and
        #GtkWidget::drag-leave events regardless of the targets and the
        %GTK_DEST_DEFAULT_MOTION flag.

        This may be used when a widget wants to do generic
        actions regardless of the targets that the source offers.
        """
        ...

    def drag_dest_unset(self) -> object:
        """
        Clears information about a drop destination set with
        gtk_drag_dest_set(). The widget will no longer receive
        notification of drags.
        """
        ...

    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int) -> object:
        """
        Gets the data associated with a drag. When the data
        is received or the retrieval fails, GTK+ will emit a
        #GtkWidget::drag-data-received signal. Failure of the retrieval
        is indicated by the length field of the @selection_data
        signal parameter being negative. However, when gtk_drag_get_data()
        is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
        then the widget will not receive notification of failed
        drops.
        """
        ...

    def drag_highlight(self) -> object:
        """
        Highlights a widget as a currently hovered drop target.
        To end the highlight, call gtk_drag_unhighlight().
        GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
        """
        ...

    def drag_source_add_image_targets(self) -> object:
        """
        Add the writable image targets supported by #GtkSelectionData to
        the target list of the drag source. The targets
        are added with @info = 0. If you need another value,
        use gtk_target_list_add_image_targets() and
        gtk_drag_source_set_target_list().
        """
        ...

    def drag_source_add_text_targets(self) -> object:
        """
        Add the text targets supported by #GtkSelectionData to
        the target list of the drag source.  The targets
        are added with @info = 0. If you need another value,
        use gtk_target_list_add_text_targets() and
        gtk_drag_source_set_target_list().
        """
        ...

    def drag_source_add_uri_targets(self) -> object:
        """
        Add the URI targets supported by #GtkSelectionData to
        the target list of the drag source.  The targets
        are added with @info = 0. If you need another value,
        use gtk_target_list_add_uri_targets() and
        gtk_drag_source_set_target_list().
        """
        ...

    def drag_source_get_target_list(self) -> TargetList:
        """
        Gets the list of targets this widget can provide for
        drag-and-drop.
        """
        ...

    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: _T.Optional[object], n_targets: int, actions: Gdk.DragAction) -> object:
        """
        Sets up a widget so that GTK+ will start a drag operation when the user
        clicks and drags on the widget. The widget must have a window.
        """
        ...

    def drag_source_set_icon_gicon(self, icon: Gio.Icon) -> object:
        """
        Sets the icon that will be used for drags from a particular source
        to @icon. See the docs for #GtkIconTheme for more details.
        """
        ...

    def drag_source_set_icon_name(self, icon_name: str) -> object:
        """
        Sets the icon that will be used for drags from a particular source
        to a themed icon. See the docs for #GtkIconTheme for more details.
        """
        ...

    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf) -> object:
        """
        Sets the icon that will be used for drags from a particular widget
        from a #GdkPixbuf. GTK+ retains a reference for @pixbuf and will
        release it when it is no longer needed.
        """
        ...

    def drag_source_set_icon_stock(self, stock_id: str) -> object:
        """
        Sets the icon that will be used for drags from a particular source
        to a stock icon.
        """
        ...

    def drag_source_set_target_list(self, target_list: _T.Optional[TargetList]) -> object:
        """
        Changes the target types that this widget offers for drag-and-drop.
        The widget must first be made into a drag source with
        gtk_drag_source_set().
        """
        ...

    def drag_source_unset(self) -> object:
        """
        Undoes the effects of gtk_drag_source_set().
        """
        ...

    def drag_unhighlight(self) -> object:
        """
        Removes a highlight set by gtk_drag_highlight() from
        a widget.
        """
        ...

    def draw(self, cr: cairo.Context) -> object:
        """
        Draws @widget to @cr. The top left corner of the widget will be
        drawn to the currently set origin point of @cr.

        You should pass a cairo context as @cr argument that is in an
        original state. Otherwise the resulting drawing is undefined. For
        example changing the operator using cairo_set_operator() or the
        line width using cairo_set_line_width() might have unwanted side
        effects.
        You may however change the context’s transform matrix - like with
        cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
        region with cairo_clip() prior to calling this function. Also, it
        is fine to modify the context with cairo_save() and
        cairo_push_group() prior to calling this function.

        Note that special-purpose widgets may contain special code for
        rendering to the screen and might appear differently on screen
        and when rendered using gtk_widget_draw().
        """
        ...

    def ensure_style(self) -> object:
        """
        Ensures that @widget has a style (@widget->style).

        Not a very useful function; most of the time, if you
        want the style, the widget is realized, and realized
        widgets are guaranteed to have a style already.
        """
        ...

    def error_bell(self) -> object:
        """
        Notifies the user about an input-related error on this widget.
        If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
        gdk_window_beep(), otherwise it does nothing.

        Note that the effect of gdk_window_beep() can be configured in many
        ways, depending on the windowing backend and the desktop environment
        or window manager that is used.
        """
        ...

    def event(self, event: Gdk.Event) -> bool:
        """
        Rarely-used function. This function is used to emit
        the event signals on a widget (those signals should never
        be emitted without using this function to do so).
        If you want to synthesize an event though, don’t use this function;
        instead, use gtk_main_do_event() so the event will behave as if
        it were in the event queue. Don’t synthesize expose events; instead,
        use gdk_window_invalidate_rect() to invalidate a region of the
        window.
        """
        ...

    def freeze_child_notify(self) -> object:
        """
        Stops emission of #GtkWidget::child-notify signals on @widget. The
        signals are queued until gtk_widget_thaw_child_notify() is called
        on @widget.

        This is the analogue of g_object_freeze_notify() for child properties.
        """
        ...

    def get_accessible(self) -> Atk.Object:
        """
        Returns the accessible object that describes the widget to an
        assistive technology.

        If accessibility support is not available, this #AtkObject
        instance may be a no-op. Likewise, if no class-specific #AtkObject
        implementation is available for the widget instance in question,
        it will inherit an #AtkObject implementation from the first ancestor
        class for which such an implementation is defined.

        The documentation of the
        [ATK](http://developer.gnome.org/atk/stable/)
        library contains more information about accessible objects and their uses.
        """
        ...

    def get_action_group(self, prefix: str) -> Gio.ActionGroup:
        """
        Retrieves the #GActionGroup that was registered using @prefix. The resulting
        #GActionGroup may have been registered to @widget or any #GtkWidget in its
        ancestry.

        If no action group was found matching @prefix, then %NULL is returned.
        """
        ...

    def get_allocated_baseline(self) -> int:
        """
        Returns the baseline that has currently been allocated to @widget.
        This function is intended to be used when implementing handlers
        for the #GtkWidget::draw function, and when allocating child
        widgets in #GtkWidget::size_allocate.
        """
        ...

    def get_allocated_height(self) -> int:
        """
        Returns the height that has currently been allocated to @widget.
        This function is intended to be used when implementing handlers
        for the #GtkWidget::draw function.
        """
        ...

    def get_allocated_size(self, allocation: Allocation, baseline: int) -> object:
        """
        Retrieves the widget’s allocated size.

        This function returns the last values passed to
        gtk_widget_size_allocate_with_baseline(). The value differs from
        the size returned in gtk_widget_get_allocation() in that functions
        like gtk_widget_set_halign() can adjust the allocation, but not
        the value returned by this function.

        If a widget is not visible, its allocated size is 0.
        """
        ...

    def get_allocated_width(self) -> int:
        """
        Returns the width that has currently been allocated to @widget.
        This function is intended to be used when implementing handlers
        for the #GtkWidget::draw function.
        """
        ...

    def get_allocation(self, allocation: Allocation) -> object:
        """
        Retrieves the widget’s allocation.

        Note, when implementing a #GtkContainer: a widget’s allocation will
        be its “adjusted” allocation, that is, the widget’s parent
        container typically calls gtk_widget_size_allocate() with an
        allocation, and that allocation is then adjusted (to handle margin
        and alignment for example) before assignment to the widget.
        gtk_widget_get_allocation() returns the adjusted allocation that
        was actually assigned to the widget. The adjusted allocation is
        guaranteed to be completely contained within the
        gtk_widget_size_allocate() allocation, however. So a #GtkContainer
        is guaranteed that its children stay inside the assigned bounds,
        but not that they have exactly the bounds the container assigned.
        There is no way to get the original allocation assigned by
        gtk_widget_size_allocate(), since it isn’t stored; if a container
        implementation needs that information it will have to track it itself.
        """
        ...

    def get_ancestor(self, widget_type: GObject.Type) -> Widget:
        """
        Gets the first ancestor of @widget with type @widget_type. For example,
        `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
        the first #GtkBox that’s an ancestor of @widget. No reference will be
        added to the returned widget; it should not be unreferenced. See note
        about checking for a toplevel #GtkWindow in the docs for
        gtk_widget_get_toplevel().

        Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
        considers @widget to be an ancestor of itself.
        """
        ...

    def get_app_paintable(self) -> bool:
        """
        Determines whether the application intends to draw on the widget in
        an #GtkWidget::draw handler.

        See gtk_widget_set_app_paintable()
        """
        ...

    def get_can_default(self) -> bool:
        """
        Determines whether @widget can be a default widget. See
        gtk_widget_set_can_default().
        """
        ...

    def get_can_focus(self) -> bool:
        """
        Determines whether @widget can own the input focus. See
        gtk_widget_set_can_focus().
        """
        ...

    def get_child_requisition(self, requisition: Requisition) -> object:
        """
        This function is only for use in widget implementations. Obtains
        @widget->requisition, unless someone has forced a particular
        geometry on the widget (e.g. with gtk_widget_set_size_request()),
        in which case it returns that geometry instead of the widget's
        requisition.

        This function differs from gtk_widget_size_request() in that
        it retrieves the last size request value from @widget->requisition,
        while gtk_widget_size_request() actually calls the "size_request" method
        on @widget to compute the size request and fill in @widget->requisition,
        and only then returns @widget->requisition.

        Because this function does not call the “size_request” method, it
        can only be used when you know that @widget->requisition is
        up-to-date, that is, gtk_widget_size_request() has been called
        since the last time a resize was queued. In general, only container
        implementations have this information; applications should use
        gtk_widget_size_request().
        """
        ...

    def get_child_visible(self) -> bool:
        """
        Gets the value set with gtk_widget_set_child_visible().
        If you feel a need to use this function, your code probably
        needs reorganization.

        This function is only useful for container implementations and
        never should be called by an application.
        """
        ...

    def get_clip(self, clip: Allocation) -> object:
        """
        Retrieves the widget’s clip area.

        The clip area is the area in which all of @widget's drawing will
        happen. Other toolkits call it the bounding box.

        Historically, in GTK+ the clip area has been equal to the allocation
        retrieved via gtk_widget_get_allocation().
        """
        ...

    def get_clipboard(self, selection: Gdk.Atom) -> Clipboard:
        """
        Returns the clipboard object for the given selection to
        be used with @widget. @widget must have a #GdkDisplay
        associated with it, so must be attached to a toplevel
        window.
        """
        ...

    def get_composite_name(self) -> str:
        """
        Obtains the composite name of a widget.
        """
        ...

    def get_device_enabled(self, device: Gdk.Device) -> bool:
        """
        Returns whether @device can interact with @widget and its
        children. See gtk_widget_set_device_enabled().
        """
        ...

    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask:
        """
        Returns the events mask for the widget corresponding to an specific device. These
        are the events that the widget will receive when @device operates on it.
        """
        ...

    def get_direction(self) -> TextDirection:
        """
        Gets the reading direction for a particular widget. See
        gtk_widget_set_direction().
        """
        ...

    def get_display(self) -> Gdk.Display:
        """
        Get the #GdkDisplay for the toplevel window associated with
        this widget. This function can only be called after the widget
        has been added to a widget hierarchy with a #GtkWindow at the top.

        In general, you should only create display specific
        resources when a widget has been realized, and you should
        free those resources when the widget is unrealized.
        """
        ...

    def get_double_buffered(self) -> bool:
        """
        Determines whether the widget is double buffered.

        See gtk_widget_set_double_buffered()
        """
        ...

    def get_events(self) -> int:
        """
        Returns the event mask (see #GdkEventMask) for the widget. These are the
        events that the widget will receive.

        Note: Internally, the widget event mask will be the logical OR of the event
        mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
        event mask necessary to cater for every #GtkEventController created for the
        widget.
        """
        ...

    def get_focus_on_click(self) -> bool:
        """
        Returns whether the widget should grab focus when it is clicked with the mouse.
        See gtk_widget_set_focus_on_click().
        """
        ...

    def get_font_map(self) -> Pango.FontMap:
        """
        Gets the font map that has been set with gtk_widget_set_font_map().
        """
        ...

    def get_font_options(self) -> cairo.FontOptions:
        """
        Returns the #cairo_font_options_t used for Pango rendering. When not set,
        the defaults font options for the #GdkScreen will be used.
        """
        ...

    def get_frame_clock(self) -> Gdk.FrameClock:
        """
        Obtains the frame clock for a widget. The frame clock is a global
        “ticker” that can be used to drive animations and repaints.  The
        most common reason to get the frame clock is to call
        gdk_frame_clock_get_frame_time(), in order to get a time to use for
        animating. For example you might record the start of the animation
        with an initial value from gdk_frame_clock_get_frame_time(), and
        then update the animation by calling
        gdk_frame_clock_get_frame_time() again during each repaint.

        gdk_frame_clock_request_phase() will result in a new frame on the
        clock, but won’t necessarily repaint any widgets. To repaint a
        widget, you have to use gtk_widget_queue_draw() which invalidates
        the widget (thus scheduling it to receive a draw on the next
        frame). gtk_widget_queue_draw() will also end up requesting a frame
        on the appropriate frame clock.

        A widget’s frame clock will not change while the widget is
        mapped. Reparenting a widget (which implies a temporary unmap) can
        change the widget’s frame clock.

        Unrealized widgets do not have a frame clock.
        """
        ...

    def get_halign(self) -> Align:
        """
        Gets the value of the #GtkWidget:halign property.

        For backwards compatibility reasons this method will never return
        %GTK_ALIGN_BASELINE, but instead it will convert it to
        %GTK_ALIGN_FILL. Baselines are not supported for horizontal
        alignment.
        """
        ...

    def get_has_tooltip(self) -> bool:
        """
        Returns the current value of the has-tooltip property.  See
        #GtkWidget:has-tooltip for more information.
        """
        ...

    def get_has_window(self) -> bool:
        """
        Determines whether @widget has a #GdkWindow of its own. See
        gtk_widget_set_has_window().
        """
        ...

    def get_hexpand(self) -> bool:
        """
        Gets whether the widget would like any available extra horizontal
        space. When a user resizes a #GtkWindow, widgets with expand=TRUE
        generally receive the extra space. For example, a list or
        scrollable area or document in your window would often be set to
        expand.

        Containers should use gtk_widget_compute_expand() rather than
        this function, to see whether a widget, or any of its children,
        has the expand flag set. If any child of a widget wants to
        expand, the parent may ask to expand also.

        This function only looks at the widget’s own hexpand flag, rather
        than computing whether the entire widget tree rooted at this widget
        wants to expand.
        """
        ...

    def get_hexpand_set(self) -> bool:
        """
        Gets whether gtk_widget_set_hexpand() has been used to
        explicitly set the expand flag on this widget.

        If hexpand is set, then it overrides any computed
        expand value based on child widgets. If hexpand is not
        set, then the expand value depends on whether any
        children of the widget would like to expand.

        There are few reasons to use this function, but it’s here
        for completeness and consistency.
        """
        ...

    def get_mapped(self) -> bool:
        """
        Whether the widget is mapped.
        """
        ...

    def get_margin_bottom(self) -> int:
        """
        Gets the value of the #GtkWidget:margin-bottom property.
        """
        ...

    def get_margin_end(self) -> int:
        """
        Gets the value of the #GtkWidget:margin-end property.
        """
        ...

    def get_margin_left(self) -> int:
        """
        Gets the value of the #GtkWidget:margin-left property.
        """
        ...

    def get_margin_right(self) -> int:
        """
        Gets the value of the #GtkWidget:margin-right property.
        """
        ...

    def get_margin_start(self) -> int:
        """
        Gets the value of the #GtkWidget:margin-start property.
        """
        ...

    def get_margin_top(self) -> int:
        """
        Gets the value of the #GtkWidget:margin-top property.
        """
        ...

    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType:
        """
        Returns the modifier mask the @widget’s windowing system backend
        uses for a particular purpose.

        See gdk_keymap_get_modifier_mask().
        """
        ...

    def get_modifier_style(self) -> RcStyle:
        """
        Returns the current modifier style for the widget. (As set by
        gtk_widget_modify_style().) If no style has previously set, a new
        #GtkRcStyle will be created with all values unset, and set as the
        modifier style for the widget. If you make changes to this rc
        style, you must call gtk_widget_modify_style(), passing in the
        returned rc style, to make sure that your changes take effect.

        Caution: passing the style back to gtk_widget_modify_style() will
        normally end up destroying it, because gtk_widget_modify_style() copies
        the passed-in style and sets the copy as the new modifier style,
        thus dropping any reference to the old modifier style. Add a reference
        to the modifier style if you want to keep it alive.
        """
        ...

    def get_name(self) -> str:
        """
        Retrieves the name of a widget. See gtk_widget_set_name() for the
        significance of widget names.
        """
        ...

    def get_no_show_all(self) -> bool:
        """
        Returns the current value of the #GtkWidget:no-show-all property,
        which determines whether calls to gtk_widget_show_all()
        will affect this widget.
        """
        ...

    def get_opacity(self) -> float:
        """
        Fetches the requested opacity for this widget.
        See gtk_widget_set_opacity().
        """
        ...

    def get_pango_context(self) -> Pango.Context:
        """
        Gets a #PangoContext with the appropriate font map, font description,
        and base direction for this widget. Unlike the context returned
        by gtk_widget_create_pango_context(), this context is owned by
        the widget (it can be used until the screen for the widget changes
        or the widget is removed from its toplevel), and will be updated to
        match any changes to the widget’s attributes. This can be tracked
        by using the #GtkWidget::screen-changed signal on the widget.
        """
        ...

    def get_parent(self) -> Widget:
        """
        Returns the parent container of @widget.
        """
        ...

    def get_parent_window(self) -> Gdk.Window:
        """
        Gets @widget’s parent window, or %NULL if it does not have one.
        """
        ...

    def get_path(self) -> WidgetPath:
        """
        Returns the #GtkWidgetPath representing @widget, if the widget
        is not connected to a toplevel widget, a partial path will be
        created.
        """
        ...

    def get_pointer(self, x: int, y: int) -> object:
        """
        Obtains the location of the mouse pointer in widget coordinates.
        Widget coordinates are a bit odd; for historical reasons, they are
        defined as @widget->window coordinates for widgets that return %TRUE for
        gtk_widget_get_has_window(); and are relative to @widget->allocation.x,
        @widget->allocation.y otherwise.
        """
        ...

    def get_preferred_height(self, minimum_height: int, natural_height: int) -> object:
        """
        Retrieves a widget’s initial minimum and natural height.

        This call is specific to width-for-height requests.

        The returned request will be modified by the
        GtkWidgetClass::adjust_size_request virtual method and by any
        #GtkSizeGroups that have been applied. That is, the returned request
        is the one that should be used for layout, not necessarily the one
        returned by the widget itself.
        """
        ...

    def get_preferred_height_and_baseline_for_width(self, width: int, minimum_height: int, natural_height: int, minimum_baseline: int, natural_baseline: int) -> object:
        """
        Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
        the specified @width, or the default height if @width is -1. The baselines may be -1 which means
        that no baseline is requested for this widget.

        The returned request will be modified by the
        GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
        and by any #GtkSizeGroups that have been applied. That is, the returned request
        is the one that should be used for layout, not necessarily the one
        returned by the widget itself.
        """
        ...

    def get_preferred_height_for_width(self, width: int, minimum_height: int, natural_height: int) -> object:
        """
        Retrieves a widget’s minimum and natural height if it would be given
        the specified @width.

        The returned request will be modified by the
        GtkWidgetClass::adjust_size_request virtual method and by any
        #GtkSizeGroups that have been applied. That is, the returned request
        is the one that should be used for layout, not necessarily the one
        returned by the widget itself.
        """
        ...

    def get_preferred_size(self, minimum_size: Requisition, natural_size: Requisition) -> object:
        """
        Retrieves the minimum and natural size of a widget, taking
        into account the widget’s preference for height-for-width management.

        This is used to retrieve a suitable size by container widgets which do
        not impose any restrictions on the child placement. It can be used
        to deduce toplevel window and menu sizes as well as child widgets in
        free-form containers such as GtkLayout.

        Handle with care. Note that the natural height of a height-for-width
        widget will generally be a smaller size than the minimum height, since the required
        height for the natural width is generally smaller than the required height for
        the minimum width.

        Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
        baseline alignment.
        """
        ...

    def get_preferred_width(self, minimum_width: int, natural_width: int) -> object:
        """
        Retrieves a widget’s initial minimum and natural width.

        This call is specific to height-for-width requests.

        The returned request will be modified by the
        GtkWidgetClass::adjust_size_request virtual method and by any
        #GtkSizeGroups that have been applied. That is, the returned request
        is the one that should be used for layout, not necessarily the one
        returned by the widget itself.
        """
        ...

    def get_preferred_width_for_height(self, height: int, minimum_width: int, natural_width: int) -> object:
        """
        Retrieves a widget’s minimum and natural width if it would be given
        the specified @height.

        The returned request will be modified by the
        GtkWidgetClass::adjust_size_request virtual method and by any
        #GtkSizeGroups that have been applied. That is, the returned request
        is the one that should be used for layout, not necessarily the one
        returned by the widget itself.
        """
        ...

    def get_realized(self) -> bool:
        """
        Determines whether @widget is realized.
        """
        ...

    def get_receives_default(self) -> bool:
        """
        Determines whether @widget is always treated as the default widget
        within its toplevel when it has the focus, even if another widget
        is the default.

        See gtk_widget_set_receives_default().
        """
        ...

    def get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the widget prefers a height-for-width layout
        or a width-for-height layout.

        #GtkBin widgets generally propagate the preference of
        their child, container widgets need to request something either in
        context of their children or in context of their allocation
        capabilities.
        """
        ...

    def get_requisition(self, requisition: Requisition) -> object:
        """
        Retrieves the widget’s requisition.

        This function should only be used by widget implementations in
        order to figure whether the widget’s requisition has actually
        changed after some internal state change (so that they can call
        gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).

        Normally, gtk_widget_size_request() should be used.
        """
        ...

    def get_root_window(self) -> Gdk.Window:
        """
        Get the root window where this widget is located. This function can
        only be called after the widget has been added to a widget
        hierarchy with #GtkWindow at the top.

        The root window is useful for such purposes as creating a popup
        #GdkWindow associated with the window. In general, you should only
        create display specific resources when a widget has been realized,
        and you should free those resources when the widget is unrealized.
        """
        ...

    def get_scale_factor(self) -> int:
        """
        Retrieves the internal scale factor that maps from window coordinates
        to the actual device pixels. On traditional systems this is 1, on
        high density outputs, it can be a higher value (typically 2).

        See gdk_window_get_scale_factor().
        """
        ...

    def get_screen(self) -> Gdk.Screen:
        """
        Get the #GdkScreen from the toplevel window associated with
        this widget. This function can only be called after the widget
        has been added to a widget hierarchy with a #GtkWindow
        at the top.

        In general, you should only create screen specific
        resources when a widget has been realized, and you should
        free those resources when the widget is unrealized.
        """
        ...

    def get_sensitive(self) -> bool:
        """
        Returns the widget’s sensitivity (in the sense of returning
        the value that has been set using gtk_widget_set_sensitive()).

        The effective sensitivity of a widget is however determined by both its
        own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
        """
        ...

    def get_settings(self) -> Settings:
        """
        Gets the settings object holding the settings used for this widget.

        Note that this function can only be called when the #GtkWidget
        is attached to a toplevel, since the settings object is specific
        to a particular #GdkScreen.
        """
        ...

    def get_size_request(self, width: int, height: int) -> object:
        """
        Gets the size request that was explicitly set for the widget using
        gtk_widget_set_size_request(). A value of -1 stored in @width or
        @height indicates that that dimension has not been set explicitly
        and the natural requisition of the widget will be used instead. See
        gtk_widget_set_size_request(). To get the size a widget will
        actually request, call gtk_widget_get_preferred_size() instead of
        this function.
        """
        ...

    def get_state(self) -> StateType:
        """
        Returns the widget’s state. See gtk_widget_set_state().
        """
        ...

    def get_state_flags(self) -> StateFlags:
        """
        Returns the widget state as a flag set. It is worth mentioning
        that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
        returned, that is, also based on parent insensitivity, even if
        @widget itself is sensitive.

        Also note that if you are looking for a way to obtain the
        #GtkStateFlags to pass to a #GtkStyleContext method, you
        should look at gtk_style_context_get_state().
        """
        ...

    def get_style(self) -> Style:
        """
        Simply an accessor function that returns @widget->style.
        """
        ...

    def get_style_context(self) -> StyleContext:
        """
        Returns the style context associated to @widget. The returned object is
        guaranteed to be the same for the lifetime of @widget.
        """
        ...

    def get_support_multidevice(self) -> bool:
        """
        Returns %TRUE if @widget is multiple pointer aware. See
        gtk_widget_set_support_multidevice() for more information.
        """
        ...

    def get_template_child(self, widget_type: GObject.Type, name: str) -> GObject.Object:
        """
        Fetch an object build from the template XML for @widget_type in this @widget instance.

        This will only report children which were previously declared with
        gtk_widget_class_bind_template_child_full() or one of its
        variants.

        This function is only meant to be called for code which is private to the @widget_type which
        declared the child and is meant for language bindings which cannot easily make use
        of the GObject structure offsets.
        """
        ...

    def get_tooltip_markup(self) -> str:
        """
        Gets the contents of the tooltip for @widget.
        """
        ...

    def get_tooltip_text(self) -> str:
        """
        Gets the contents of the tooltip for @widget.
        """
        ...

    def get_tooltip_window(self) -> Window:
        """
        Returns the #GtkWindow of the current tooltip. This can be the
        GtkWindow created by default, or the custom tooltip window set
        using gtk_widget_set_tooltip_window().
        """
        ...

    def get_toplevel(self) -> Widget:
        """
        This function returns the topmost widget in the container hierarchy
        @widget is a part of. If @widget has no parent widgets, it will be
        returned as the topmost widget. No reference will be added to the
        returned widget; it should not be unreferenced.

        Note the difference in behavior vs. gtk_widget_get_ancestor();
        `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
        would return
        %NULL if @widget wasn’t inside a toplevel window, and if the
        window was inside a #GtkWindow-derived widget which was in turn
        inside the toplevel #GtkWindow. While the second case may
        seem unlikely, it actually happens when a #GtkPlug is embedded
        inside a #GtkSocket within the same application.

        To reliably find the toplevel #GtkWindow, use
        gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
        on the result. For instance, to get the title of a widget's toplevel
        window, one might use:
        |[<!-- language="C" -->
        static const char *
        get_widget_toplevel_title (GtkWidget *widget)
        {
          GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
          if (GTK_IS_WINDOW (toplevel))
            {
              return gtk_window_get_title (GTK_WINDOW (toplevel));
            }

          return NULL;
        }
        ]|
        """
        ...

    def get_valign(self) -> Align:
        """
        Gets the value of the #GtkWidget:valign property.

        For backwards compatibility reasons this method will never return
        %GTK_ALIGN_BASELINE, but instead it will convert it to
        %GTK_ALIGN_FILL. If your widget want to support baseline aligned
        children it must use gtk_widget_get_valign_with_baseline(), or
        `g_object_get (widget, "valign", &value, NULL)`, which will
        also report the true value.
        """
        ...

    def get_valign_with_baseline(self) -> Align:
        """
        Gets the value of the #GtkWidget:valign property, including
        %GTK_ALIGN_BASELINE.
        """
        ...

    def get_vexpand(self) -> bool:
        """
        Gets whether the widget would like any available extra vertical
        space.

        See gtk_widget_get_hexpand() for more detail.
        """
        ...

    def get_vexpand_set(self) -> bool:
        """
        Gets whether gtk_widget_set_vexpand() has been used to
        explicitly set the expand flag on this widget.

        See gtk_widget_get_hexpand_set() for more detail.
        """
        ...

    def get_visible(self) -> bool:
        """
        Determines whether the widget is visible. If you want to
        take into account whether the widget’s parent is also marked as
        visible, use gtk_widget_is_visible() instead.

        This function does not check if the widget is obscured in any way.

        See gtk_widget_set_visible().
        """
        ...

    def get_visual(self) -> Gdk.Visual:
        """
        Gets the visual that will be used to render @widget.
        """
        ...

    def get_window(self) -> Gdk.Window:
        """
        Returns the widget’s window if it is realized, %NULL otherwise
        """
        ...

    def grab_add(self) -> object:
        """
        Makes @widget the current grabbed widget.

        This means that interaction with other widgets in the same
        application is blocked and mouse as well as keyboard events
        are delivered to this widget.

        If @widget is not sensitive, it is not set as the current
        grabbed widget and this function does nothing.
        """
        ...

    def grab_default(self) -> object:
        """
        Causes @widget to become the default widget. @widget must be able to be
        a default widget; typically you would ensure this yourself
        by calling gtk_widget_set_can_default() with a %TRUE value.
        The default widget is activated when
        the user presses Enter in a window. Default widgets must be
        activatable, that is, gtk_widget_activate() should affect them. Note
        that #GtkEntry widgets require the “activates-default” property
        set to %TRUE before they activate the default widget when Enter
        is pressed and the #GtkEntry is focused.
        """
        ...

    def grab_focus(self) -> object:
        """
        Causes @widget to have the keyboard focus for the #GtkWindow it's
        inside. @widget must be a focusable widget, such as a #GtkEntry;
        something like #GtkFrame won’t work.

        More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
        gtk_widget_set_can_focus() to modify that flag.

        The widget also needs to be realized and mapped. This is indicated by the
        related signals. Grabbing the focus immediately after creating the widget
        will likely fail and cause critical warnings.
        """
        ...

    def grab_remove(self) -> object:
        """
        Removes the grab from the given widget.

        You have to pair calls to gtk_grab_add() and gtk_grab_remove().

        If @widget does not have the grab, this function does nothing.
        """
        ...

    def has_default(self) -> bool:
        """
        Determines whether @widget is the current default widget within its
        toplevel. See gtk_widget_set_can_default().
        """
        ...

    def has_focus(self) -> bool:
        """
        Determines if the widget has the global input focus. See
        gtk_widget_is_focus() for the difference between having the global
        input focus, and only having the focus within a toplevel.
        """
        ...

    def has_grab(self) -> bool:
        """
        Determines whether the widget is currently grabbing events, so it
        is the only widget receiving input events (keyboard and mouse).

        See also gtk_grab_add().
        """
        ...

    def has_rc_style(self) -> bool:
        """
        Determines if the widget style has been looked up through the rc mechanism.
        """
        ...

    def has_screen(self) -> bool:
        """
        Checks whether there is a #GdkScreen is associated with
        this widget. All toplevel widgets have an associated
        screen, and all widgets added into a hierarchy with a toplevel
        window at the top.
        """
        ...

    def has_visible_focus(self) -> bool:
        """
        Determines if the widget should show a visible indication that
        it has the global input focus. This is a convenience function for
        use in ::draw handlers that takes into account whether focus
        indication should currently be shown in the toplevel window of
        @widget. See gtk_window_get_focus_visible() for more information
        about focus indication.

        To find out if the widget has the global input focus, use
        gtk_widget_has_focus().
        """
        ...

    def hide(self) -> object:
        """
        Reverses the effects of gtk_widget_show(), causing the widget to be
        hidden (invisible to the user).
        """
        ...

    def hide_on_delete(self) -> bool:
        """
        Utility function; intended to be connected to the #GtkWidget::delete-event
        signal on a #GtkWindow. The function calls gtk_widget_hide() on its
        argument, then returns %TRUE. If connected to ::delete-event, the
        result is that clicking the close button for a window (on the
        window frame, top right corner usually) will hide but not destroy
        the window. By default, GTK+ destroys windows when ::delete-event
        is received.
        """
        ...

    def in_destruction(self) -> bool:
        """
        Returns whether the widget is currently being destroyed.
        This information can sometimes be used to avoid doing
        unnecessary work.
        """
        ...

    def init_template(self) -> object:
        """
        Creates and initializes child widgets defined in templates. This
        function must be called in the instance initializer for any
        class which assigned itself a template using gtk_widget_class_set_template()

        It is important to call this function in the instance initializer
        of a #GtkWidget subclass and not in #GObject.constructed() or
        #GObject.constructor() for two reasons.

        One reason is that generally derived widgets will assume that parent
        class composite widgets have been created in their instance
        initializers.

        Another reason is that when calling g_object_new() on a widget with
        composite templates, it’s important to build the composite widgets
        before the construct properties are set. Properties passed to g_object_new()
        should take precedence over properties set in the private template XML.
        """
        ...

    def input_shape_combine_region(self, region: _T.Optional[cairo.Region]) -> object:
        """
        Sets an input shape for this widget’s GDK window. This allows for
        windows which react to mouse click in a nonrectangular region, see
        gdk_window_input_shape_combine_region() for more information.
        """
        ...

    def insert_action_group(self, name: str, group: _T.Optional[Gio.ActionGroup]) -> object:
        """
        Inserts @group into @widget. Children of @widget that implement
        #GtkActionable can then be associated with actions in @group by
        setting their “action-name” to
        @prefix.`action-name`.

        If @group is %NULL, a previously inserted group for @name is removed
        from @widget.
        """
        ...

    def intersect(self, area: Gdk.Rectangle, intersection: Gdk.Rectangle) -> bool:
        """
        Computes the intersection of a @widget’s area and @area, storing
        the intersection in @intersection, and returns %TRUE if there was
        an intersection.  @intersection may be %NULL if you’re only
        interested in whether there was an intersection.
        """
        ...

    def is_ancestor(self, ancestor: Widget) -> bool:
        """
        Determines whether @widget is somewhere inside @ancestor, possibly with
        intermediate containers.
        """
        ...

    def is_composited(self) -> bool:
        """
        Whether @widget can rely on having its alpha channel
        drawn correctly. On X11 this function returns whether a
        compositing manager is running for @widget’s screen.

        Please note that the semantics of this call will change
        in the future if used on a widget that has a composited
        window in its hierarchy (as set by gdk_window_set_composited()).
        """
        ...

    def is_drawable(self) -> bool:
        """
        Determines whether @widget can be drawn to. A widget can be drawn
        to if it is mapped and visible.
        """
        ...

    def is_focus(self) -> bool:
        """
        Determines if the widget is the focus widget within its
        toplevel. (This does not mean that the #GtkWidget:has-focus property is
        necessarily set; #GtkWidget:has-focus will only be set if the
        toplevel widget additionally has the global input focus.)
        """
        ...

    def is_sensitive(self) -> bool:
        """
        Returns the widget’s effective sensitivity, which means
        it is sensitive itself and also its parent widget is sensitive
        """
        ...

    def is_toplevel(self) -> bool:
        """
        Determines whether @widget is a toplevel widget.

        Currently only #GtkWindow and #GtkInvisible (and out-of-process
        #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
        widget.
        """
        ...

    def is_visible(self) -> bool:
        """
        Determines whether the widget and all its parents are marked as
        visible.

        This function does not check if the widget is obscured in any way.

        See also gtk_widget_get_visible() and gtk_widget_set_visible()
        """
        ...

    def keynav_failed(self, direction: DirectionType) -> bool:
        """
        This function should be called whenever keyboard navigation within
        a single widget hits a boundary. The function emits the
        #GtkWidget::keynav-failed signal on the widget and its return
        value should be interpreted in a way similar to the return value of
        gtk_widget_child_focus():

        When %TRUE is returned, stay in the widget, the failed keyboard
        navigation is OK and/or there is nowhere we can/should move the
        focus to.

        When %FALSE is returned, the caller should continue with keyboard
        navigation outside the widget, e.g. by calling
        gtk_widget_child_focus() on the widget’s toplevel.

        The default ::keynav-failed handler returns %FALSE for
        %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
        values of #GtkDirectionType it returns %TRUE.

        Whenever the default handler returns %TRUE, it also calls
        gtk_widget_error_bell() to notify the user of the failed keyboard
        navigation.

        A use case for providing an own implementation of ::keynav-failed
        (either by connecting to it or by overriding it) would be a row of
        #GtkEntry widgets where the user should be able to navigate the
        entire row with the cursor keys, as e.g. known from user interfaces
        that require entering license keys.
        """
        ...

    def list_accel_closures(self) -> GLib.List:
        """
        Lists the closures used by @widget for accelerator group connections
        with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
        The closures can be used to monitor accelerator changes on @widget,
        by connecting to the @GtkAccelGroup::accel-changed signal of the
        #GtkAccelGroup of a closure which can be found out with
        gtk_accel_group_from_accel_closure().
        """
        ...

    def list_action_prefixes(self) -> object:
        """
        Retrieves a %NULL-terminated array of strings containing the prefixes of
        #GActionGroup's available to @widget.
        """
        ...

    def list_mnemonic_labels(self) -> GLib.List:
        """
        Returns a newly allocated list of the widgets, normally labels, for
        which this widget is the target of a mnemonic (see for example,
        gtk_label_set_mnemonic_widget()).

        The widgets in the list are not individually referenced. If you
        want to iterate through the list and perform actions involving
        callbacks that might destroy the widgets, you
        must call `g_list_foreach (result,
        (GFunc)g_object_ref, NULL)` first, and then unref all the
        widgets afterwards.
        """
        ...

    def map(self) -> object:
        """
        This function is only for use in widget implementations. Causes
        a widget to be mapped if it isn’t already.
        """
        ...

    def mnemonic_activate(self, group_cycling: bool) -> bool:
        """
        Emits the #GtkWidget::mnemonic-activate signal.
        """
        ...

    def modify_base(self, state: StateType, color: _T.Optional[Gdk.Color]) -> object:
        """
        Sets the base color for a widget in a particular state.
        All other style values are left untouched. The base color
        is the background color used along with the text color
        (see gtk_widget_modify_text()) for widgets such as #GtkEntry
        and #GtkTextView. See also gtk_widget_modify_style().

        > Note that “no window” widgets (which have the %GTK_NO_WINDOW
        > flag set) draw on their parent container’s window and thus may
        > not draw any background themselves. This is the case for e.g.
        > #GtkLabel.
        >
        > To modify the background of such widgets, you have to set the
        > base color on their parent; if you want to set the background
        > of a rectangular area around a label, try placing the label in
        > a #GtkEventBox widget and setting the base color on that.
        """
        ...

    def modify_bg(self, state: StateType, color: _T.Optional[Gdk.Color]) -> object:
        """
        Sets the background color for a widget in a particular state.

        All other style values are left untouched.
        See also gtk_widget_modify_style().

        > Note that “no window” widgets (which have the %GTK_NO_WINDOW
        > flag set) draw on their parent container’s window and thus may
        > not draw any background themselves. This is the case for e.g.
        > #GtkLabel.
        >
        > To modify the background of such widgets, you have to set the
        > background color on their parent; if you want to set the background
        > of a rectangular area around a label, try placing the label in
        > a #GtkEventBox widget and setting the background color on that.
        """
        ...

    def modify_cursor(self, primary: _T.Optional[Gdk.Color], secondary: _T.Optional[Gdk.Color]) -> object:
        """
        Sets the cursor color to use in a widget, overriding the #GtkWidget
        cursor-color and secondary-cursor-color
        style properties.

        All other style values are left untouched.
        See also gtk_widget_modify_style().
        """
        ...

    def modify_fg(self, state: StateType, color: _T.Optional[Gdk.Color]) -> object:
        """
        Sets the foreground color for a widget in a particular state.

        All other style values are left untouched.
        See also gtk_widget_modify_style().
        """
        ...

    def modify_font(self, font_desc: _T.Optional[Pango.FontDescription]) -> object:
        """
        Sets the font to use for a widget.

        All other style values are left untouched.
        See also gtk_widget_modify_style().
        """
        ...

    def modify_style(self, style: RcStyle) -> object:
        """
        Modifies style values on the widget.

        Modifications made using this technique take precedence over
        style values set via an RC file, however, they will be overridden
        if a style is explicitly set on the widget using gtk_widget_set_style().
        The #GtkRcStyle-struct is designed so each field can either be
        set or unset, so it is possible, using this function, to modify some
        style values and leave the others unchanged.

        Note that modifications made with this function are not cumulative
        with previous calls to gtk_widget_modify_style() or with such
        functions as gtk_widget_modify_fg(). If you wish to retain
        previous values, you must first call gtk_widget_get_modifier_style(),
        make your modifications to the returned style, then call
        gtk_widget_modify_style() with that style. On the other hand,
        if you first call gtk_widget_modify_style(), subsequent calls
        to such functions gtk_widget_modify_fg() will have a cumulative
        effect with the initial modifications.
        """
        ...

    def modify_text(self, state: StateType, color: _T.Optional[Gdk.Color]) -> object:
        """
        Sets the text color for a widget in a particular state.

        All other style values are left untouched.
        The text color is the foreground color used along with the
        base color (see gtk_widget_modify_base()) for widgets such
        as #GtkEntry and #GtkTextView.
        See also gtk_widget_modify_style().
        """
        ...

    def override_background_color(self, state: StateFlags, color: _T.Optional[Gdk.RGBA]) -> object:
        """
        Sets the background color to use for a widget.

        All other style values are left untouched.
        See gtk_widget_override_color().
        """
        ...

    def override_color(self, state: StateFlags, color: _T.Optional[Gdk.RGBA]) -> object:
        """
        Sets the color to use for a widget.

        All other style values are left untouched.

        This function does not act recursively. Setting the color of a
        container does not affect its children. Note that some widgets that
        you may not think of as containers, for instance #GtkButtons,
        are actually containers.

        This API is mostly meant as a quick way for applications to
        change a widget appearance. If you are developing a widgets
        library and intend this change to be themeable, it is better
        done by setting meaningful CSS classes in your
        widget/container implementation through gtk_style_context_add_class().

        This way, your widget library can install a #GtkCssProvider
        with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
        to provide a default styling for those widgets that need so, and
        this theming may fully overridden by the user’s theme.

        Note that for complex widgets this may bring in undesired
        results (such as uniform background color everywhere), in
        these cases it is better to fully style such widgets through a
        #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
        priority.
        """
        ...

    def override_cursor(self, cursor: _T.Optional[Gdk.RGBA], secondary_cursor: _T.Optional[Gdk.RGBA]) -> object:
        """
        Sets the cursor color to use in a widget, overriding the
        cursor-color and secondary-cursor-color
        style properties. All other style values are left untouched.
        See also gtk_widget_modify_style().

        Note that the underlying properties have the #GdkColor type,
        so the alpha value in @primary and @secondary will be ignored.
        """
        ...

    def override_font(self, font_desc: _T.Optional[Pango.FontDescription]) -> object:
        """
        Sets the font to use for a widget. All other style values are
        left untouched. See gtk_widget_override_color().
        """
        ...

    def override_symbolic_color(self, name: str, color: _T.Optional[Gdk.RGBA]) -> object:
        """
        Sets a symbolic color for a widget.

        All other style values are left untouched.
        See gtk_widget_override_color() for overriding the foreground
        or background color.
        """
        ...

    def path(self, path_length: int, path: str, path_reversed: str) -> object:
        """
        Obtains the full path to @widget. The path is simply the name of a
        widget and all its parents in the container hierarchy, separated by
        periods. The name of a widget comes from
        gtk_widget_get_name(). Paths are used to apply styles to a widget
        in gtkrc configuration files. Widget names are the type of the
        widget by default (e.g. “GtkButton”) or can be set to an
        application-specific value with gtk_widget_set_name(). By setting
        the name of a widget, you allow users or theme authors to apply
        styles to that specific widget in their gtkrc
        file. @path_reversed_p fills in the path in reverse order,
        i.e. starting with @widget’s name instead of starting with the name
        of @widget’s outermost ancestor.
        """
        ...

    def queue_allocate(self) -> object:
        """
        This function is only for use in widget implementations.

        Flags the widget for a rerun of the GtkWidgetClass::size_allocate
        function. Use this function instead of gtk_widget_queue_resize()
        when the @widget's size request didn't change but it wants to
        reposition its contents.

        An example user of this function is gtk_widget_set_halign().
        """
        ...

    def queue_compute_expand(self) -> object:
        """
        Mark @widget as needing to recompute its expand flags. Call
        this function when setting legacy expand child properties
        on the child of a container.

        See gtk_widget_compute_expand().
        """
        ...

    def queue_draw(self) -> object:
        """
        Equivalent to calling gtk_widget_queue_draw_area() for the
        entire area of a widget.
        """
        ...

    def queue_draw_area(self, x: int, y: int, width: int, height: int) -> object:
        """
        Convenience function that calls gtk_widget_queue_draw_region() on
        the region created from the given coordinates.

        The region here is specified in widget coordinates.
        Widget coordinates are a bit odd; for historical reasons, they are
        defined as @widget->window coordinates for widgets that return %TRUE for
        gtk_widget_get_has_window(), and are relative to @widget->allocation.x,
        @widget->allocation.y otherwise.

        @width or @height may be 0, in this case this function does
        nothing. Negative values for @width and @height are not allowed.
        """
        ...

    def queue_draw_region(self, region: cairo.Region) -> object:
        """
        Invalidates the area of @widget defined by @region by calling
        gdk_window_invalidate_region() on the widget’s window and all its
        child windows. Once the main loop becomes idle (after the current
        batch of events has been processed, roughly), the window will
        receive expose events for the union of all regions that have been
        invalidated.

        Normally you would only use this function in widget
        implementations. You might also use it to schedule a redraw of a
        #GtkDrawingArea or some portion thereof.
        """
        ...

    def queue_resize(self) -> object:
        """
        This function is only for use in widget implementations.
        Flags a widget to have its size renegotiated; should
        be called when a widget for some reason has a new size request.
        For example, when you change the text in a #GtkLabel, #GtkLabel
        queues a resize to ensure there’s enough space for the new text.

        Note that you cannot call gtk_widget_queue_resize() on a widget
        from inside its implementation of the GtkWidgetClass::size_allocate
        virtual method. Calls to gtk_widget_queue_resize() from inside
        GtkWidgetClass::size_allocate will be silently ignored.
        """
        ...

    def queue_resize_no_redraw(self) -> object:
        """
        This function works like gtk_widget_queue_resize(),
        except that the widget is not invalidated.
        """
        ...

    def realize(self) -> object:
        """
        Creates the GDK (windowing system) resources associated with a
        widget.  For example, @widget->window will be created when a widget
        is realized.  Normally realization happens implicitly; if you show
        a widget and all its parent containers, then the widget will be
        realized and mapped automatically.

        Realizing a widget requires all
        the widget’s parent widgets to be realized; calling
        gtk_widget_realize() realizes the widget’s parents in addition to
        @widget itself. If a widget is not yet inside a toplevel window
        when you realize it, bad things will happen.

        This function is primarily used in widget implementations, and
        isn’t very useful otherwise. Many times when you think you might
        need it, a better approach is to connect to a signal that will be
        called after the widget is realized automatically, such as
        #GtkWidget::draw. Or simply g_signal_connect () to the
        #GtkWidget::realize signal.
        """
        ...

    def region_intersect(self, region: cairo.Region) -> cairo.Region:
        """
        Computes the intersection of a @widget’s area and @region, returning
        the intersection. The result may be empty, use cairo_region_is_empty() to
        check.
        """
        ...

    def register_window(self, window: Gdk.Window) -> object:
        """
        Registers a #GdkWindow with the widget and sets it up so that
        the widget receives events for it. Call gtk_widget_unregister_window()
        when destroying the window.

        Before 3.8 you needed to call gdk_window_set_user_data() directly to set
        this up. This is now deprecated and you should use gtk_widget_register_window()
        instead. Old code will keep working as is, although some new features like
        transparency might not work perfectly.
        """
        ...

    def remove_accelerator(self, accel_group: AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool:
        """
        Removes an accelerator from @widget, previously installed with
        gtk_widget_add_accelerator().
        """
        ...

    def remove_mnemonic_label(self, label: Widget) -> object:
        """
        Removes a widget from the list of mnemonic labels for
        this widget. (See gtk_widget_list_mnemonic_labels()). The widget
        must have previously been added to the list with
        gtk_widget_add_mnemonic_label().
        """
        ...

    def remove_tick_callback(self, id: int) -> object:
        """
        Removes a tick callback previously registered with
        gtk_widget_add_tick_callback().
        """
        ...

    def render_icon(self, stock_id: str, size: int, detail: _T.Optional[str]) -> GdkPixbuf.Pixbuf:
        """
        A convenience function that uses the theme settings for @widget
        to look up @stock_id and render it to a pixbuf. @stock_id should
        be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. @size
        should be a size such as #GTK_ICON_SIZE_MENU. @detail should be a
        string that identifies the widget or code doing the rendering, so
        that theme engines can special-case rendering for that widget or
        code.

        The pixels in the returned #GdkPixbuf are shared with the rest of
        the application and should not be modified. The pixbuf should be
        freed after use with g_object_unref().
        """
        ...

    def render_icon_pixbuf(self, stock_id: str, size: int) -> GdkPixbuf.Pixbuf:
        """
        A convenience function that uses the theme engine and style
        settings for @widget to look up @stock_id and render it to
        a pixbuf. @stock_id should be a stock icon ID such as
        #GTK_STOCK_OPEN or #GTK_STOCK_OK. @size should be a size
        such as #GTK_ICON_SIZE_MENU.

        The pixels in the returned #GdkPixbuf are shared with the rest of
        the application and should not be modified. The pixbuf should be freed
        after use with g_object_unref().
        """
        ...

    def reparent(self, new_parent: Widget) -> object:
        """
        Moves a widget from one #GtkContainer to another, handling reference
        count issues to avoid destroying the widget.
        """
        ...

    def reset_rc_styles(self) -> object:
        """
        Reset the styles of @widget and all descendents, so when
        they are looked up again, they get the correct values
        for the currently loaded RC file settings.

        This function is not useful for applications.
        """
        ...

    def reset_style(self) -> object:
        """
        Updates the style context of @widget and all descendants
        by updating its widget path. #GtkContainers may want
        to use this on a child when reordering it in a way that a different
        style might apply to it. See also gtk_container_get_path_for_child().
        """
        ...

    def send_expose(self, event: Gdk.Event) -> int:
        """
        Very rarely-used function. This function is used to emit
        an expose event on a widget. This function is not normally used
        directly. The only time it is used is when propagating an expose
        event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
        and that is normally done using gtk_container_propagate_draw().

        If you want to force an area of a window to be redrawn,
        use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
        To cause the redraw to be done immediately, follow that call
        with a call to gdk_window_process_updates().
        """
        ...

    def send_focus_change(self, event: Gdk.Event) -> bool:
        """
        Sends the focus change @event to @widget

        This function is not meant to be used by applications. The only time it
        should be used is when it is necessary for a #GtkWidget to assign focus
        to a widget that is semantically owned by the first widget even though
        it’s not a direct child - for instance, a search entry in a floating
        window similar to the quick search in #GtkTreeView.

        An example of its usage is:

        |[<!-- language="C" -->
          GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);

          fevent->focus_change.type = GDK_FOCUS_CHANGE;
          fevent->focus_change.in = TRUE;
          fevent->focus_change.window = _gtk_widget_get_window (widget);
          if (fevent->focus_change.window != NULL)
            g_object_ref (fevent->focus_change.window);

          gtk_widget_send_focus_change (widget, fevent);

          gdk_event_free (event);
        ]|
        """
        ...

    def set_accel_path(self, accel_path: _T.Optional[str], accel_group: _T.Optional[AccelGroup]) -> object:
        """
        Given an accelerator group, @accel_group, and an accelerator path,
        @accel_path, sets up an accelerator in @accel_group so whenever the
        key binding that is defined for @accel_path is pressed, @widget
        will be activated.  This removes any accelerators (for any
        accelerator group) installed by previous calls to
        gtk_widget_set_accel_path(). Associating accelerators with
        paths allows them to be modified by the user and the modifications
        to be saved for future use. (See gtk_accel_map_save().)

        This function is a low level function that would most likely
        be used by a menu creation system like #GtkUIManager. If you
        use #GtkUIManager, setting up accelerator paths will be done
        automatically.

        Even when you you aren’t using #GtkUIManager, if you only want to
        set up accelerators on menu items gtk_menu_item_set_accel_path()
        provides a somewhat more convenient interface.

        Note that @accel_path string will be stored in a #GQuark. Therefore, if you
        pass a static string, you can save some memory by interning it first with
        g_intern_static_string().
        """
        ...

    def set_allocation(self, allocation: Allocation) -> object:
        """
        Sets the widget’s allocation.  This should not be used
        directly, but from within a widget’s size_allocate method.

        The allocation set should be the “adjusted” or actual
        allocation. If you’re implementing a #GtkContainer, you want to use
        gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
        The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
        allocation inside gtk_widget_size_allocate() to create an adjusted
        allocation.
        """
        ...

    def set_app_paintable(self, app_paintable: bool) -> object:
        """
        Sets whether the application intends to draw on the widget in
        an #GtkWidget::draw handler.

        This is a hint to the widget and does not affect the behavior of
        the GTK+ core; many widgets ignore this flag entirely. For widgets
        that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
        the effect is to suppress default themed drawing of the widget's
        background. (Children of the widget will still be drawn.) The application
        is then entirely responsible for drawing the widget background.

        Note that the background is still drawn when the widget is mapped.
        """
        ...

    def set_can_default(self, can_default: bool) -> object:
        """
        Specifies whether @widget can be a default widget. See
        gtk_widget_grab_default() for details about the meaning of
        “default”.
        """
        ...

    def set_can_focus(self, can_focus: bool) -> object:
        """
        Specifies whether @widget can own the input focus. See
        gtk_widget_grab_focus() for actually setting the input focus on a
        widget.
        """
        ...

    def set_child_visible(self, is_visible: bool) -> object:
        """
        Sets whether @widget should be mapped along with its when its parent
        is mapped and @widget has been shown with gtk_widget_show().

        The child visibility can be set for widget before it is added to
        a container with gtk_widget_set_parent(), to avoid mapping
        children unnecessary before immediately unmapping them. However
        it will be reset to its default state of %TRUE when the widget
        is removed from a container.

        Note that changing the child visibility of a widget does not
        queue a resize on the widget. Most of the time, the size of
        a widget is computed from all visible children, whether or
        not they are mapped. If this is not the case, the container
        can queue a resize itself.

        This function is only useful for container implementations and
        never should be called by an application.
        """
        ...

    def set_clip(self, clip: Allocation) -> object:
        """
        Sets the widget’s clip.  This must not be used directly,
        but from within a widget’s size_allocate method.
        It must be called after gtk_widget_set_allocation() (or after chaining up
        to the parent class), because that function resets the clip.

        The clip set should be the area that @widget draws on. If @widget is a
        #GtkContainer, the area must contain all children's clips.

        If this function is not called by @widget during a ::size-allocate handler,
        the clip will be set to @widget's allocation.
        """
        ...

    def set_composite_name(self, name: str) -> object:
        """
        Sets a widgets composite name. The widget must be
        a composite child of its parent; see gtk_widget_push_composite_child().
        """
        ...

    def set_device_enabled(self, device: Gdk.Device, enabled: bool) -> object:
        """
        Enables or disables a #GdkDevice to interact with @widget
        and all its children.

        It does so by descending through the #GdkWindow hierarchy
        and enabling the same mask that is has for core events
        (i.e. the one that gdk_window_get_events() returns).
        """
        ...

    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask) -> object:
        """
        Sets the device event mask (see #GdkEventMask) for a widget. The event
        mask determines which events a widget will receive from @device. Keep
        in mind that different widgets have different default event masks, and by
        changing the event mask you may disrupt a widget’s functionality,
        so be careful. This function must be called while a widget is
        unrealized. Consider gtk_widget_add_device_events() for widgets that are
        already realized, or if you want to preserve the existing event
        mask. This function can’t be used with windowless widgets (which return
        %FALSE from gtk_widget_get_has_window());
        to get events on those widgets, place them inside a #GtkEventBox
        and receive events on the event box.
        """
        ...

    def set_direction(self, dir: TextDirection) -> object:
        """
        Sets the reading direction on a particular widget. This direction
        controls the primary direction for widgets containing text,
        and also the direction in which the children of a container are
        packed. The ability to set the direction is present in order
        so that correct localization into languages with right-to-left
        reading directions can be done. Generally, applications will
        let the default reading direction present, except for containers
        where the containers are arranged in an order that is explicitly
        visual rather than logical (such as buttons for text justification).

        If the direction is set to %GTK_TEXT_DIR_NONE, then the value
        set by gtk_widget_set_default_direction() will be used.
        """
        ...

    def set_double_buffered(self, double_buffered: bool) -> object:
        """
        Widgets are double buffered by default; you can use this function
        to turn off the buffering. “Double buffered” simply means that
        gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
        automatically around expose events sent to the
        widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
        window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
        buffer to the screen. The result is that users see the window
        update in one smooth step, and don’t see individual graphics
        primitives being rendered.

        In very simple terms, double buffered widgets don’t flicker,
        so you would only use this function to turn off double buffering
        if you had special needs and really knew what you were doing.

        Note: if you turn off double-buffering, you have to handle
        expose events, since even the clearing to the background color or
        pixmap will not happen automatically (as it is done in
        gdk_window_begin_draw_frame()).

        In 3.10 GTK and GDK have been restructured for translucent drawing. Since
        then expose events for double-buffered widgets are culled into a single
        event to the toplevel GDK window. If you now unset double buffering, you
        will cause a separate rendering pass for every widget. This will likely
        cause rendering problems - in particular related to stacking - and usually
        increases rendering times significantly.
        """
        ...

    def set_events(self, events: int) -> object:
        """
        Sets the event mask (see #GdkEventMask) for a widget. The event
        mask determines which events a widget will receive. Keep in mind
        that different widgets have different default event masks, and by
        changing the event mask you may disrupt a widget’s functionality,
        so be careful. This function must be called while a widget is
        unrealized. Consider gtk_widget_add_events() for widgets that are
        already realized, or if you want to preserve the existing event
        mask. This function can’t be used with widgets that have no window.
        (See gtk_widget_get_has_window()).  To get events on those widgets,
        place them inside a #GtkEventBox and receive events on the event
        box.
        """
        ...

    def set_focus_on_click(self, focus_on_click: bool) -> object:
        """
        Sets whether the widget should grab focus when it is clicked with the mouse.
        Making mouse clicks not grab focus is useful in places like toolbars where
        you don’t want the keyboard focus removed from the main area of the
        application.
        """
        ...

    def set_font_map(self, font_map: _T.Optional[Pango.FontMap]) -> object:
        """
        Sets the font map to use for Pango rendering. When not set, the widget
        will inherit the font map from its parent.
        """
        ...

    def set_font_options(self, options: _T.Optional[cairo.FontOptions]) -> object:
        """
        Sets the #cairo_font_options_t used for Pango rendering in this widget.
        When not set, the default font options for the #GdkScreen will be used.
        """
        ...

    def set_halign(self, align: Align) -> object:
        """
        Sets the horizontal alignment of @widget.
        See the #GtkWidget:halign property.
        """
        ...

    def set_has_tooltip(self, has_tooltip: bool) -> object:
        """
        Sets the has-tooltip property on @widget to @has_tooltip.  See
        #GtkWidget:has-tooltip for more information.
        """
        ...

    def set_has_window(self, has_window: bool) -> object:
        """
        Specifies whether @widget has a #GdkWindow of its own. Note that
        all realized widgets have a non-%NULL “window” pointer
        (gtk_widget_get_window() never returns a %NULL window when a widget
        is realized), but for many of them it’s actually the #GdkWindow of
        one of its parent widgets. Widgets that do not create a %window for
        themselves in #GtkWidget::realize must announce this by
        calling this function with @has_window = %FALSE.

        This function should only be called by widget implementations,
        and they should call it in their init() function.
        """
        ...

    def set_hexpand(self, expand: bool) -> object:
        """
        Sets whether the widget would like any available extra horizontal
        space. When a user resizes a #GtkWindow, widgets with expand=TRUE
        generally receive the extra space. For example, a list or
        scrollable area or document in your window would often be set to
        expand.

        Call this function to set the expand flag if you would like your
        widget to become larger horizontally when the window has extra
        room.

        By default, widgets automatically expand if any of their children
        want to expand. (To see if a widget will automatically expand given
        its current children and state, call gtk_widget_compute_expand(). A
        container can decide how the expandability of children affects the
        expansion of the container by overriding the compute_expand virtual
        method on #GtkWidget.).

        Setting hexpand explicitly with this function will override the
        automatic expand behavior.

        This function forces the widget to expand or not to expand,
        regardless of children.  The override occurs because
        gtk_widget_set_hexpand() sets the hexpand-set property (see
        gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
        value to be used, rather than looking at children and widget state.
        """
        ...

    def set_hexpand_set(self, set: bool) -> object:
        """
        Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
        be used.

        The hexpand-set property will be set automatically when you call
        gtk_widget_set_hexpand() to set hexpand, so the most likely
        reason to use this function would be to unset an explicit expand
        flag.

        If hexpand is set, then it overrides any computed
        expand value based on child widgets. If hexpand is not
        set, then the expand value depends on whether any
        children of the widget would like to expand.

        There are few reasons to use this function, but it’s here
        for completeness and consistency.
        """
        ...

    def set_mapped(self, mapped: bool) -> object:
        """
        Marks the widget as being mapped.

        This function should only ever be called in a derived widget's
        “map” or “unmap” implementation.
        """
        ...

    def set_margin_bottom(self, margin: int) -> object:
        """
        Sets the bottom margin of @widget.
        See the #GtkWidget:margin-bottom property.
        """
        ...

    def set_margin_end(self, margin: int) -> object:
        """
        Sets the end margin of @widget.
        See the #GtkWidget:margin-end property.
        """
        ...

    def set_margin_left(self, margin: int) -> object:
        """
        Sets the left margin of @widget.
        See the #GtkWidget:margin-left property.
        """
        ...

    def set_margin_right(self, margin: int) -> object:
        """
        Sets the right margin of @widget.
        See the #GtkWidget:margin-right property.
        """
        ...

    def set_margin_start(self, margin: int) -> object:
        """
        Sets the start margin of @widget.
        See the #GtkWidget:margin-start property.
        """
        ...

    def set_margin_top(self, margin: int) -> object:
        """
        Sets the top margin of @widget.
        See the #GtkWidget:margin-top property.
        """
        ...

    def set_name(self, name: str) -> object:
        """
        Widgets can be named, which allows you to refer to them from a
        CSS file. You can apply a style to widgets with a particular name
        in the CSS file. See the documentation for the CSS syntax (on the
        same page as the docs for #GtkStyleContext).

        Note that the CSS syntax has certain special characters to delimit
        and represent elements in a selector (period, #, >, *...), so using
        these will make your widget impossible to match by name. Any combination
        of alphanumeric symbols, dashes and underscores will suffice.
        """
        ...

    def set_no_show_all(self, no_show_all: bool) -> object:
        """
        Sets the #GtkWidget:no-show-all property, which determines whether
        calls to gtk_widget_show_all() will affect this widget.

        This is mostly for use in constructing widget hierarchies with externally
        controlled visibility, see #GtkUIManager.
        """
        ...

    def set_opacity(self, opacity: float) -> object:
        """
        Request the @widget to be rendered partially transparent,
        with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
        are clamped to the [0,1] range.).
        This works on both toplevel widget, and child widgets, although there
        are some limitations:

        For toplevel widgets this depends on the capabilities of the windowing
        system. On X11 this has any effect only on X screens with a compositing manager
        running. See gtk_widget_is_composited(). On Windows it should work
        always, although setting a window’s opacity after the window has been
        shown causes it to flicker once on Windows.

        For child widgets it doesn’t work if any affected widget has a native window, or
        disables double buffering.
        """
        ...

    def set_parent(self, parent: Widget) -> object:
        """
        This function is useful only when implementing subclasses of
        #GtkContainer.
        Sets the container as the parent of @widget, and takes care of
        some details such as updating the state and style of the child
        to reflect its new location. The opposite function is
        gtk_widget_unparent().
        """
        ...

    def set_parent_window(self, parent_window: Gdk.Window) -> object:
        """
        Sets a non default parent window for @widget.

        For #GtkWindow classes, setting a @parent_window effects whether
        the window is a toplevel window or can be embedded into other
        widgets.

        For #GtkWindow classes, this needs to be called before the
        window is realized.
        """
        ...

    def set_realized(self, realized: bool) -> object:
        """
        Marks the widget as being realized. This function must only be
        called after all #GdkWindows for the @widget have been created
        and registered.

        This function should only ever be called in a derived widget's
        “realize” or “unrealize” implementation.
        """
        ...

    def set_receives_default(self, receives_default: bool) -> object:
        """
        Specifies whether @widget will be treated as the default widget
        within its toplevel when it has the focus, even if another widget
        is the default.

        See gtk_widget_grab_default() for details about the meaning of
        “default”.
        """
        ...

    def set_redraw_on_allocate(self, redraw_on_allocate: bool) -> object:
        """
        Sets whether the entire widget is queued for drawing when its size
        allocation changes. By default, this setting is %TRUE and
        the entire widget is redrawn on every size change. If your widget
        leaves the upper left unchanged when made bigger, turning this
        setting off will improve performance.

        Note that for widgets where gtk_widget_get_has_window() is %FALSE
        setting this flag to %FALSE turns off all allocation on resizing:
        the widget will not even redraw if its position changes; this is to
        allow containers that don’t draw anything to avoid excess
        invalidations. If you set this flag on a widget with no window that
        does draw on @widget->window, you are
        responsible for invalidating both the old and new allocation of the
        widget when the widget is moved and responsible for invalidating
        regions newly when the widget increases size.
        """
        ...

    def set_sensitive(self, sensitive: bool) -> object:
        """
        Sets the sensitivity of a widget. A widget is sensitive if the user
        can interact with it. Insensitive widgets are “grayed out” and the
        user can’t interact with them. Insensitive widgets are known as
        “inactive”, “disabled”, or “ghosted” in some other toolkits.
        """
        ...

    def set_size_request(self, width: int, height: int) -> object:
        """
        Sets the minimum size of a widget; that is, the widget’s size
        request will be at least @width by @height. You can use this
        function to force a widget to be larger than it normally would be.

        In most cases, gtk_window_set_default_size() is a better choice for
        toplevel windows than this function; setting the default size will
        still allow users to shrink the window. Setting the size request
        will force them to leave the window at least as large as the size
        request. When dealing with window sizes,
        gtk_window_set_geometry_hints() can be a useful function as well.

        Note the inherent danger of setting any fixed size - themes,
        translations into other languages, different fonts, and user action
        can all change the appropriate size for a given widget. So, it's
        basically impossible to hardcode a size that will always be
        correct.

        The size request of a widget is the smallest size a widget can
        accept while still functioning well and drawing itself correctly.
        However in some strange cases a widget may be allocated less than
        its requested size, and in many cases a widget may be allocated more
        space than it requested.

        If the size request in a given direction is -1 (unset), then
        the “natural” size request of the widget will be used instead.

        The size request set here does not include any margin from the
        #GtkWidget properties margin-left, margin-right, margin-top, and
        margin-bottom, but it does include pretty much all other padding
        or border properties set by any subclass of #GtkWidget.
        """
        ...

    def set_state(self, state: StateType) -> object:
        """
        This function is for use in widget implementations. Sets the state
        of a widget (insensitive, prelighted, etc.) Usually you should set
        the state using wrapper functions such as gtk_widget_set_sensitive().
        """
        ...

    def set_state_flags(self, flags: StateFlags, clear: bool) -> object:
        """
        This function is for use in widget implementations. Turns on flag
        values in the current widget state (insensitive, prelighted, etc.).

        This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
        %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
        direction, use gtk_widget_set_direction().

        It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
        will be propagated down to all non-internal children if @widget is a
        #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
        down to all #GtkContainer children by different means than turning on the
        state flag down the hierarchy, both gtk_widget_get_state_flags() and
        gtk_widget_is_sensitive() will make use of these.
        """
        ...

    def set_style(self, style: _T.Optional[Style]) -> object:
        """
        Used to set the #GtkStyle for a widget (@widget->style). Since
        GTK 3, this function does nothing, the passed in style is ignored.
        """
        ...

    def set_support_multidevice(self, support_multidevice: bool) -> object:
        """
        Enables or disables multiple pointer awareness. If this setting is %TRUE,
        @widget will start receiving multiple, per device enter/leave events. Note
        that if custom #GdkWindows are created in #GtkWidget::realize,
        gdk_window_set_support_multidevice() will have to be called manually on them.
        """
        ...

    def set_tooltip_markup(self, markup: _T.Optional[str]) -> object:
        """
        Sets @markup as the contents of the tooltip, which is marked up with
         the [Pango text markup language][PangoMarkupFormat].

        This function will take care of setting #GtkWidget:has-tooltip to %TRUE
        and of the default handler for the #GtkWidget::query-tooltip signal.

        See also the #GtkWidget:tooltip-markup property and
        gtk_tooltip_set_markup().
        """
        ...

    def set_tooltip_text(self, text: _T.Optional[str]) -> object:
        """
        Sets @text as the contents of the tooltip. This function will take
        care of setting #GtkWidget:has-tooltip to %TRUE and of the default
        handler for the #GtkWidget::query-tooltip signal.

        See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
        """
        ...

    def set_tooltip_window(self, custom_window: _T.Optional[Window]) -> object:
        """
        Replaces the default window used for displaying
        tooltips with @custom_window. GTK+ will take care of showing and
        hiding @custom_window at the right moment, to behave likewise as
        the default tooltip window. If @custom_window is %NULL, the default
        tooltip window will be used.
        """
        ...

    def set_valign(self, align: Align) -> object:
        """
        Sets the vertical alignment of @widget.
        See the #GtkWidget:valign property.
        """
        ...

    def set_vexpand(self, expand: bool) -> object:
        """
        Sets whether the widget would like any available extra vertical
        space.

        See gtk_widget_set_hexpand() for more detail.
        """
        ...

    def set_vexpand_set(self, set: bool) -> object:
        """
        Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
        be used.

        See gtk_widget_set_hexpand_set() for more detail.
        """
        ...

    def set_visible(self, visible: bool) -> object:
        """
        Sets the visibility state of @widget. Note that setting this to
        %TRUE doesn’t mean the widget is actually viewable, see
        gtk_widget_get_visible().

        This function simply calls gtk_widget_show() or gtk_widget_hide()
        but is nicer to use when the visibility of the widget depends on
        some condition.
        """
        ...

    def set_visual(self, visual: _T.Optional[Gdk.Visual]) -> object:
        """
        Sets the visual that should be used for by widget and its children for
        creating #GdkWindows. The visual must be on the same #GdkScreen as
        returned by gtk_widget_get_screen(), so handling the
        #GtkWidget::screen-changed signal is necessary.

        Setting a new @visual will not cause @widget to recreate its windows,
        so you should call this function before @widget is realized.
        """
        ...

    def set_window(self, window: Gdk.Window) -> object:
        """
        Sets a widget’s window. This function should only be used in a
        widget’s #GtkWidget::realize implementation. The %window passed is
        usually either new window created with gdk_window_new(), or the
        window of its parent widget as returned by
        gtk_widget_get_parent_window().

        Widgets must indicate whether they will create their own #GdkWindow
        by calling gtk_widget_set_has_window(). This is usually done in the
        widget’s init() function.

        Note that this function does not add any reference to @window.
        """
        ...

    def shape_combine_region(self, region: _T.Optional[cairo.Region]) -> object:
        """
        Sets a shape for this widget’s GDK window. This allows for
        transparent windows etc., see gdk_window_shape_combine_region()
        for more information.
        """
        ...

    def show(self) -> object:
        """
        Flags a widget to be displayed. Any widget that isn’t shown will
        not appear on the screen. If you want to show all the widgets in a
        container, it’s easier to call gtk_widget_show_all() on the
        container, instead of individually showing the widgets.

        Remember that you have to show the containers containing a widget,
        in addition to the widget itself, before it will appear onscreen.

        When a toplevel container is shown, it is immediately realized and
        mapped; other shown widgets are realized and mapped when their
        toplevel container is realized and mapped.
        """
        ...

    def show_all(self) -> object:
        """
        Recursively shows a widget, and any child widgets (if the widget is
        a container).
        """
        ...

    def show_now(self) -> object:
        """
        Shows a widget. If the widget is an unmapped toplevel widget
        (i.e. a #GtkWindow that has not yet been shown), enter the main
        loop and wait for the window to actually be mapped. Be careful;
        because the main loop is running, anything can happen during
        this function.
        """
        ...

    def size_allocate(self, allocation: Allocation) -> object:
        """
        This function is only used by #GtkContainer subclasses, to assign a size
        and position to their child widgets.

        In this function, the allocation may be adjusted. It will be forced
        to a 1x1 minimum size, and the adjust_size_allocation virtual
        method on the child will be used to adjust the allocation. Standard
        adjustments include removing the widget’s margins, and applying the
        widget’s #GtkWidget:halign and #GtkWidget:valign properties.

        For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
        instead.
        """
        ...

    def size_allocate_with_baseline(self, allocation: Allocation, baseline: int) -> object:
        """
        This function is only used by #GtkContainer subclasses, to assign a size,
        position and (optionally) baseline to their child widgets.

        In this function, the allocation and baseline may be adjusted. It
        will be forced to a 1x1 minimum size, and the
        adjust_size_allocation virtual and adjust_baseline_allocation
        methods on the child will be used to adjust the allocation and
        baseline. Standard adjustments include removing the widget's
        margins, and applying the widget’s #GtkWidget:halign and
        #GtkWidget:valign properties.

        If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
        baseline argument is ignored and -1 is used instead.
        """
        ...

    def size_request(self, requisition: Requisition) -> object:
        """
        This function is typically used when implementing a #GtkContainer
        subclass.  Obtains the preferred size of a widget. The container
        uses this information to arrange its child widgets and decide what
        size allocations to give them with gtk_widget_size_allocate().

        You can also call this function from an application, with some
        caveats. Most notably, getting a size request requires the widget
        to be associated with a screen, because font information may be
        needed. Multihead-aware applications should keep this in mind.

        Also remember that the size request is not necessarily the size
        a widget will actually be allocated.
        """
        ...

    def style_attach(self) -> object:
        """
        This function attaches the widget’s #GtkStyle to the widget's
        #GdkWindow. It is a replacement for

        |[
        widget->style = gtk_style_attach (widget->style, widget->window);
        ]|

        and should only ever be called in a derived widget’s “realize”
        implementation which does not chain up to its parent class'
        “realize” implementation, because one of the parent classes
        (finally #GtkWidget) would attach the style itself.
        """
        ...

    def style_get(self, first_property_name: str, *args: object) -> object:
        """
        Gets the values of a multiple style properties of @widget.
        """
        ...

    def style_get_property(self, property_name: str, value: GObject.Value) -> object:
        """
        Gets the value of a style property of @widget.
        """
        ...

    def style_get_valist(self, first_property_name: str, var_args: list) -> object:
        """
        Non-vararg variant of gtk_widget_style_get(). Used primarily by language
        bindings.
        """
        ...

    def thaw_child_notify(self) -> object:
        """
        Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
        This causes all queued #GtkWidget::child-notify signals on @widget to be
        emitted.
        """
        ...

    def translate_coordinates(self, dest_widget: Widget, src_x: int, src_y: int, dest_x: int, dest_y: int) -> bool:
        """
        Translate coordinates relative to @src_widget’s allocation to coordinates
        relative to @dest_widget’s allocations. In order to perform this
        operation, both widgets must be realized, and must share a common
        toplevel.
        """
        ...

    def trigger_tooltip_query(self) -> object:
        """
        Triggers a tooltip query on the display where the toplevel of @widget
        is located. See gtk_tooltip_trigger_tooltip_query() for more
        information.
        """
        ...

    def unmap(self) -> object:
        """
        This function is only for use in widget implementations. Causes
        a widget to be unmapped if it’s currently mapped.
        """
        ...

    def unparent(self) -> object:
        """
        This function is only for use in widget implementations.
        Should be called by implementations of the remove method
        on #GtkContainer, to dissociate a child from the container.
        """
        ...

    def unrealize(self) -> object:
        """
        This function is only useful in widget implementations.
        Causes a widget to be unrealized (frees all GDK resources
        associated with the widget, such as @widget->window).
        """
        ...

    def unregister_window(self, window: Gdk.Window) -> object:
        """
        Unregisters a #GdkWindow from the widget that was previously set up with
        gtk_widget_register_window(). You need to call this when the window is
        no longer used by the widget, such as when you destroy it.
        """
        ...

    def unset_state_flags(self, flags: StateFlags) -> object:
        """
        This function is for use in widget implementations. Turns off flag
        values for the current widget state (insensitive, prelighted, etc.).
        See gtk_widget_set_state_flags().
        """
        ...


    ...

class WidgetAccessible(Accessible, Atk.Component):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Window(Bin, Atk.ImplementorIface, Buildable):
    """
    A GtkWindow is a toplevel window which can contain other widgets.
    Windows normally have decorations that are under the control
    of the windowing system and allow the user to manipulate the window
    (resize it, move it, close it,...).

    # GtkWindow as GtkBuildable

    The GtkWindow implementation of the #GtkBuildable interface supports a
    custom `<accel-groups>` element, which supports any number of `<group>`
    elements representing the #GtkAccelGroup objects you want to add to
    your window (synonymous with gtk_window_add_accel_group().

    It also supports the `<initial-focus>` element, whose name property names
    the widget to receive the focus when the window is mapped.

    An example of a UI definition fragment with accel groups:

    |[<!-- language="xml" -->
    <object class="GtkWindow">
      <accel-groups>
        <group name="accelgroup1"/>
      </accel-groups>
      <initial-focus name="thunderclap"/>
    </object>

    ...

    <object class="GtkAccelGroup" id="accelgroup1"/>
    ]|

    The GtkWindow implementation of the #GtkBuildable interface supports
    setting a child as the titlebar by specifying “titlebar” as the “type”
    attribute of a `<child>` element.

    # CSS nodes

    |[<!-- language="plain" -->
    window.background
    ├── decoration
    ├── <titlebar child>.titlebar [.default-decoration]
    ╰── <child>
    ]|

    GtkWindow has a main CSS node with name window and style class .background,
    and a subnode with name decoration.

    Style classes that are typically used with the main CSS node are .csd (when
    client-side decorations are in use), .solid-csd (for client-side decorations
    without invisible borders), .ssd (used by mutter when rendering server-side
    decorations). GtkWindow also represents window states with the following
    style classes on the main node: .tiled, .maximized, .fullscreen. Specialized
    types of window often add their own discriminating style classes, such as
    .popup or .tooltip.

    GtkWindow adds the .titlebar and .default-decoration style classes to the
    widget that is added as a titlebar child.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, type: WindowType) -> Widget:
        """
        Creates a new #GtkWindow, which is a toplevel window that can
        contain other widgets. Nearly always, the type of the window should
        be #GTK_WINDOW_TOPLEVEL. If you’re implementing something like a
        popup menu from scratch (which is a bad idea, just use #GtkMenu),
        you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
        dialogs, though in some other toolkits dialogs are called “popups”.
        In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
        On X11, popup windows are not controlled by the
        [window manager][gtk-X11-arch].

        If you simply want an undecorated window (no window borders), use
        gtk_window_set_decorated(), don’t use #GTK_WINDOW_POPUP.

        All top-level windows created by gtk_window_new() are stored in
        an internal top-level window list.  This list can be obtained from
        gtk_window_list_toplevels().  Due to Gtk+ keeping a reference to
        the window internally, gtk_window_new() does not return a reference
        to the caller.

        To delete a #GtkWindow, call gtk_widget_destroy().
        """
        ...

    def activate_default(self) -> bool:
        """
        Activates the default widget for the window, unless the current
        focused widget has been configured to receive the default action
        (see gtk_widget_set_receives_default()), in which case the
        focused widget is activated.
        """
        ...

    def activate_focus(self) -> bool:
        """
        Activates the current focused widget within the window.
        """
        ...

    def activate_key(self, event: Gdk.EventKey) -> bool:
        """
        Activates mnemonics and accelerators for this #GtkWindow. This is normally
        called by the default ::key_press_event handler for toplevel windows,
        however in some cases it may be useful to call this directly when
        overriding the standard key handling for a toplevel window.
        """
        ...

    def add_accel_group(self, accel_group: AccelGroup) -> object:
        """
        Associate @accel_group with @window, such that calling
        gtk_accel_groups_activate() on @window will activate accelerators
        in @accel_group.
        """
        ...

    def add_mnemonic(self, keyval: int, target: Widget) -> object:
        """
        Adds a mnemonic to this window.
        """
        ...

    def begin_move_drag(self, button: int, root_x: int, root_y: int, timestamp: int) -> object:
        """
        Starts moving a window. This function is used if an application has
        window movement grips. When GDK can support it, the window movement
        will be done using the standard mechanism for the
        [window manager][gtk-X11-arch] or windowing
        system. Otherwise, GDK will try to emulate window movement,
        potentially not all that well, depending on the windowing system.
        """
        ...

    def begin_resize_drag(self, edge: Gdk.WindowEdge, button: int, root_x: int, root_y: int, timestamp: int) -> object:
        """
        Starts resizing a window. This function is used if an application
        has window resizing controls. When GDK can support it, the resize
        will be done using the standard mechanism for the
        [window manager][gtk-X11-arch] or windowing
        system. Otherwise, GDK will try to emulate window resizing,
        potentially not all that well, depending on the windowing system.
        """
        ...

    def close(self) -> object:
        """
        Requests that the window is closed, similar to what happens
        when a window manager close button is clicked.

        This function can be used with close buttons in custom
        titlebars.
        """
        ...

    def deiconify(self) -> object:
        """
        Asks to deiconify (i.e. unminimize) the specified @window. Note
        that you shouldn’t assume the window is definitely deiconified
        afterward, because other entities (e.g. the user or
        [window manager][gtk-X11-arch])) could iconify it
        again before your code which assumes deiconification gets to run.

        You can track iconification via the “window-state-event” signal
        on #GtkWidget.
        """
        ...

    def fullscreen(self) -> object:
        """
        Asks to place @window in the fullscreen state. Note that you
        shouldn’t assume the window is definitely full screen afterward,
        because other entities (e.g. the user or
        [window manager][gtk-X11-arch]) could unfullscreen it
        again, and not all window managers honor requests to fullscreen
        windows. But normally the window will end up fullscreen. Just
        don’t write code that crashes if not.

        You can track the fullscreen state via the “window-state-event” signal
        on #GtkWidget.
        """
        ...

    def fullscreen_on_monitor(self, screen: Gdk.Screen, monitor: int) -> object:
        """
        Asks to place @window in the fullscreen state. Note that you shouldn't assume
        the window is definitely full screen afterward.

        You can track the fullscreen state via the "window-state-event" signal
        on #GtkWidget.
        """
        ...

    def get_accept_focus(self) -> bool:
        """
        Gets the value set by gtk_window_set_accept_focus().
        """
        ...

    def get_application(self) -> Application:
        """
        Gets the #GtkApplication associated with the window (if any).
        """
        ...

    def get_attached_to(self) -> Widget:
        """
        Fetches the attach widget for this window. See
        gtk_window_set_attached_to().
        """
        ...

    def get_decorated(self) -> bool:
        """
        Returns whether the window has been set to have decorations
        such as a title bar via gtk_window_set_decorated().
        """
        ...

    def get_default_size(self, width: int, height: int) -> object:
        """
        Gets the default size of the window. A value of -1 for the width or
        height indicates that a default size has not been explicitly set
        for that dimension, so the “natural” size of the window will be
        used.
        """
        ...

    def get_default_widget(self) -> Widget:
        """
        Returns the default widget for @window. See
        gtk_window_set_default() for more details.
        """
        ...

    def get_deletable(self) -> bool:
        """
        Returns whether the window has been set to have a close button
        via gtk_window_set_deletable().
        """
        ...

    def get_destroy_with_parent(self) -> bool:
        """
        Returns whether the window will be destroyed with its transient parent. See
        gtk_window_set_destroy_with_parent ().
        """
        ...

    def get_focus(self) -> Widget:
        """
        Retrieves the current focused widget within the window.
        Note that this is the widget that would have the focus
        if the toplevel window focused; if the toplevel window
        is not focused then  `gtk_widget_has_focus (widget)` will
        not be %TRUE for the widget.
        """
        ...

    def get_focus_on_map(self) -> bool:
        """
        Gets the value set by gtk_window_set_focus_on_map().
        """
        ...

    def get_focus_visible(self) -> bool:
        """
        Gets the value of the #GtkWindow:focus-visible property.
        """
        ...

    def get_gravity(self) -> Gdk.Gravity:
        """
        Gets the value set by gtk_window_set_gravity().
        """
        ...

    def get_group(self) -> WindowGroup:
        """
        Returns the group for @window or the default group, if
        @window is %NULL or if @window does not have an explicit
        window group.
        """
        ...

    def get_has_resize_grip(self) -> bool:
        """
        Determines whether the window may have a resize grip.
        """
        ...

    def get_hide_titlebar_when_maximized(self) -> bool:
        """
        Returns whether the window has requested to have its titlebar hidden
        when maximized. See gtk_window_set_hide_titlebar_when_maximized ().
        """
        ...

    def get_icon(self) -> GdkPixbuf.Pixbuf:
        """
        Gets the value set by gtk_window_set_icon() (or if you've
        called gtk_window_set_icon_list(), gets the first icon in
        the icon list).
        """
        ...

    def get_icon_list(self) -> GLib.List:
        """
        Retrieves the list of icons set by gtk_window_set_icon_list().
        The list is copied, but the reference count on each
        member won’t be incremented.
        """
        ...

    def get_icon_name(self) -> str:
        """
        Returns the name of the themed icon for the window,
        see gtk_window_set_icon_name().
        """
        ...

    def get_mnemonic_modifier(self) -> Gdk.ModifierType:
        """
        Returns the mnemonic modifier for this window. See
        gtk_window_set_mnemonic_modifier().
        """
        ...

    def get_mnemonics_visible(self) -> bool:
        """
        Gets the value of the #GtkWindow:mnemonics-visible property.
        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the window is modal. See gtk_window_set_modal().
        """
        ...

    def get_opacity(self) -> float:
        """
        Fetches the requested opacity for this window. See
        gtk_window_set_opacity().
        """
        ...

    def get_position(self, root_x: int, root_y: int) -> object:
        """
        This function returns the position you need to pass to
        gtk_window_move() to keep @window in its current position.
        This means that the meaning of the returned value varies with
        window gravity. See gtk_window_move() for more details.

        The reliability of this function depends on the windowing system
        currently in use. Some windowing systems, such as Wayland, do not
        support a global coordinate system, and thus the position of the
        window will always be (0, 0). Others, like X11, do not have a reliable
        way to obtain the geometry of the decorations of a window if they are
        provided by the window manager. Additionally, on X11, window manager
        have been known to mismanage window gravity, which result in windows
        moving even if you use the coordinates of the current position as
        returned by this function.

        If you haven’t changed the window gravity, its gravity will be
        #GDK_GRAVITY_NORTH_WEST. This means that gtk_window_get_position()
        gets the position of the top-left corner of the window manager
        frame for the window. gtk_window_move() sets the position of this
        same top-left corner.

        If a window has gravity #GDK_GRAVITY_STATIC the window manager
        frame is not relevant, and thus gtk_window_get_position() will
        always produce accurate results. However you can’t use static
        gravity to do things like place a window in a corner of the screen,
        because static gravity ignores the window manager decorations.

        Ideally, this function should return appropriate values if the
        window has client side decorations, assuming that the windowing
        system supports global coordinates.

        In practice, saving the window position should not be left to
        applications, as they lack enough knowledge of the windowing
        system and the window manager state to effectively do so. The
        appropriate way to implement saving the window position is to
        use a platform-specific protocol, wherever that is available.
        """
        ...

    def get_resizable(self) -> bool:
        """
        Gets the value set by gtk_window_set_resizable().
        """
        ...

    def get_resize_grip_area(self, rect: Gdk.Rectangle) -> bool:
        """
        If a window has a resize grip, this will retrieve the grip
        position, width and height into the specified #GdkRectangle.
        """
        ...

    def get_role(self) -> str:
        """
        Returns the role of the window. See gtk_window_set_role() for
        further explanation.
        """
        ...

    def get_screen(self) -> Gdk.Screen:
        """
        Returns the #GdkScreen associated with @window.
        """
        ...

    def get_size(self, width: _T.Optional[int], height: _T.Optional[int]) -> object:
        """
        Obtains the current size of @window.

        If @window is not visible on screen, this function return the size GTK+
        will suggest to the [window manager][gtk-X11-arch] for the initial window
        size (but this is not reliably the same as the size the window manager
        will actually select). See: gtk_window_set_default_size().

        Depending on the windowing system and the window manager constraints,
        the size returned by this function may not match the size set using
        gtk_window_resize(); additionally, since gtk_window_resize() may be
        implemented as an asynchronous operation, GTK+ cannot guarantee in any
        way that this code:

        |[<!-- language="C" -->
          // width and height are set elsewhere
          gtk_window_resize (window, width, height);

          int new_width, new_height;
          gtk_window_get_size (window, &new_width, &new_height);
        ]|

        will result in `new_width` and `new_height` matching `width` and
        `height`, respectively.

        This function will return the logical size of the #GtkWindow,
        excluding the widgets used in client side decorations; there is,
        however, no guarantee that the result will be completely accurate
        because client side decoration may include widgets that depend on
        the user preferences and that may not be visibile at the time you
        call this function.

        The dimensions returned by this function are suitable for being
        stored across sessions; use gtk_window_set_default_size() to
        restore them when before showing the window.

        To avoid potential race conditions, you should only call this
        function in response to a size change notification, for instance
        inside a handler for the #GtkWidget::size-allocate signal, or
        inside a handler for the #GtkWidget::configure-event signal:

        |[<!-- language="C" -->
        static void
        on_size_allocate (GtkWidget *widget, GtkAllocation *allocation)
        {
          int new_width, new_height;

          gtk_window_get_size (GTK_WINDOW (widget), &new_width, &new_height);

          ...
        }
        ]|

        Note that, if you connect to the #GtkWidget::size-allocate signal,
        you should not use the dimensions of the #GtkAllocation passed to
        the signal handler, as the allocation may contain client side
        decorations added by GTK+, depending on the windowing system in
        use.

        If you are getting a window size in order to position the window
        on the screen, you should, instead, simply set the window’s semantic
        type with gtk_window_set_type_hint(), which allows the window manager
        to e.g. center dialogs. Also, if you set the transient parent of
        dialogs with gtk_window_set_transient_for() window managers will
        often center the dialog over its parent window. It's much preferred
        to let the window manager handle these cases rather than doing it
        yourself, because all apps will behave consistently and according to
        user or system preferences, if the window manager handles it. Also,
        the window manager can take into account the size of the window
        decorations and border that it may add, and of which GTK+ has no
        knowledge. Additionally, positioning windows in global screen coordinates
        may not be allowed by the windowing system. For more information,
        see: gtk_window_set_position().
        """
        ...

    def get_skip_pager_hint(self) -> bool:
        """
        Gets the value set by gtk_window_set_skip_pager_hint().
        """
        ...

    def get_skip_taskbar_hint(self) -> bool:
        """
        Gets the value set by gtk_window_set_skip_taskbar_hint()
        """
        ...

    def get_title(self) -> str:
        """
        Retrieves the title of the window. See gtk_window_set_title().
        """
        ...

    def get_titlebar(self) -> Widget:
        """
        Returns the custom titlebar that has been set with
        gtk_window_set_titlebar().
        """
        ...

    def get_transient_for(self) -> Window:
        """
        Fetches the transient parent for this window. See
        gtk_window_set_transient_for().
        """
        ...

    def get_type_hint(self) -> Gdk.WindowTypeHint:
        """
        Gets the type hint for this window. See gtk_window_set_type_hint().
        """
        ...

    def get_urgency_hint(self) -> bool:
        """
        Gets the value set by gtk_window_set_urgency_hint()
        """
        ...

    def get_window_type(self) -> WindowType:
        """
        Gets the type of the window. See #GtkWindowType.
        """
        ...

    def has_group(self) -> bool:
        """
        Returns whether @window has an explicit window group.
        """
        ...

    def has_toplevel_focus(self) -> bool:
        """
        Returns whether the input focus is within this GtkWindow.
        For real toplevel windows, this is identical to gtk_window_is_active(),
        but for embedded windows, like #GtkPlug, the results will differ.
        """
        ...

    def iconify(self) -> object:
        """
        Asks to iconify (i.e. minimize) the specified @window. Note that
        you shouldn’t assume the window is definitely iconified afterward,
        because other entities (e.g. the user or
        [window manager][gtk-X11-arch]) could deiconify it
        again, or there may not be a window manager in which case
        iconification isn’t possible, etc. But normally the window will end
        up iconified. Just don’t write code that crashes if not.

        It’s permitted to call this function before showing a window,
        in which case the window will be iconified before it ever appears
        onscreen.

        You can track iconification via the “window-state-event” signal
        on #GtkWidget.
        """
        ...

    def is_active(self) -> bool:
        """
        Returns whether the window is part of the current active toplevel.
        (That is, the toplevel window receiving keystrokes.)
        The return value is %TRUE if the window is active toplevel
        itself, but also if it is, say, a #GtkPlug embedded in the active toplevel.
        You might use this function if you wanted to draw a widget
        differently in an active window from a widget in an inactive window.
        See gtk_window_has_toplevel_focus()
        """
        ...

    def is_maximized(self) -> bool:
        """
        Retrieves the current maximized state of @window.

        Note that since maximization is ultimately handled by the window
        manager and happens asynchronously to an application request, you
        shouldn’t assume the return value of this function changing
        immediately (or at all), as an effect of calling
        gtk_window_maximize() or gtk_window_unmaximize().
        """
        ...

    def maximize(self) -> object:
        """
        Asks to maximize @window, so that it becomes full-screen. Note that
        you shouldn’t assume the window is definitely maximized afterward,
        because other entities (e.g. the user or
        [window manager][gtk-X11-arch]) could unmaximize it
        again, and not all window managers support maximization. But
        normally the window will end up maximized. Just don’t write code
        that crashes if not.

        It’s permitted to call this function before showing a window,
        in which case the window will be maximized when it appears onscreen
        initially.

        You can track maximization via the “window-state-event” signal
        on #GtkWidget, or by listening to notifications on the
        #GtkWindow:is-maximized property.
        """
        ...

    def mnemonic_activate(self, keyval: int, modifier: Gdk.ModifierType) -> bool:
        """
        Activates the targets associated with the mnemonic.
        """
        ...

    def move(self, x: int, y: int) -> object:
        """
        Asks the [window manager][gtk-X11-arch] to move
        @window to the given position.  Window managers are free to ignore
        this; most window managers ignore requests for initial window
        positions (instead using a user-defined placement algorithm) and
        honor requests after the window has already been shown.

        Note: the position is the position of the gravity-determined
        reference point for the window. The gravity determines two things:
        first, the location of the reference point in root window
        coordinates; and second, which point on the window is positioned at
        the reference point.

        By default the gravity is #GDK_GRAVITY_NORTH_WEST, so the reference
        point is simply the @x, @y supplied to gtk_window_move(). The
        top-left corner of the window decorations (aka window frame or
        border) will be placed at @x, @y.  Therefore, to position a window
        at the top left of the screen, you want to use the default gravity
        (which is #GDK_GRAVITY_NORTH_WEST) and move the window to 0,0.

        To position a window at the bottom right corner of the screen, you
        would set #GDK_GRAVITY_SOUTH_EAST, which means that the reference
        point is at @x + the window width and @y + the window height, and
        the bottom-right corner of the window border will be placed at that
        reference point. So, to place a window in the bottom right corner
        you would first set gravity to south east, then write:
        `gtk_window_move (window, gdk_screen_width () - window_width,
        gdk_screen_height () - window_height)` (note that this
        example does not take multi-head scenarios into account).

        The [Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec)
        has a nice table of gravities in the “implementation notes” section.

        The gtk_window_get_position() documentation may also be relevant.
        """
        ...

    def parse_geometry(self, geometry: str) -> bool:
        """
        Parses a standard X Window System geometry string - see the
        manual page for X (type “man X”) for details on this.
        gtk_window_parse_geometry() does work on all GTK+ ports
        including Win32 but is primarily intended for an X environment.

        If either a size or a position can be extracted from the
        geometry string, gtk_window_parse_geometry() returns %TRUE
        and calls gtk_window_set_default_size() and/or gtk_window_move()
        to resize/move the window.

        If gtk_window_parse_geometry() returns %TRUE, it will also
        set the #GDK_HINT_USER_POS and/or #GDK_HINT_USER_SIZE hints
        indicating to the window manager that the size/position of
        the window was user-specified. This causes most window
        managers to honor the geometry.

        Note that for gtk_window_parse_geometry() to work as expected, it has
        to be called when the window has its “final” size, i.e. after calling
        gtk_widget_show_all() on the contents and gtk_window_set_geometry_hints()
        on the window.
        |[<!-- language="C" -->
        #include <gtk/gtk.h>

        static void
        fill_with_content (GtkWidget *vbox)
        {
          // fill with content...
        }

        int
        main (int argc, char *argv[])
        {
          GtkWidget *window, *vbox;
          GdkGeometry size_hints = {
            100, 50, 0, 0, 100, 50, 10,
            10, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST
          };

          gtk_init (&argc, &argv);

          window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
          vbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);

          gtk_container_add (GTK_CONTAINER (window), vbox);
          fill_with_content (vbox);
          gtk_widget_show_all (vbox);

          gtk_window_set_geometry_hints (GTK_WINDOW (window),
        	  			    NULL,
        				    &size_hints,
        				    GDK_HINT_MIN_SIZE |
        				    GDK_HINT_BASE_SIZE |
        				    GDK_HINT_RESIZE_INC);

          if (argc > 1)
            {
              gboolean res;
              res = gtk_window_parse_geometry (GTK_WINDOW (window),
                                               argv[1]);
              if (! res)
                fprintf (stderr,
                         "Failed to parse “%s”\n",
                         argv[1]);
            }

          gtk_widget_show_all (window);
          gtk_main ();

          return 0;
        }
        ]|
        """
        ...

    def present(self) -> object:
        """
        Presents a window to the user. This function should not be used
        as when it is called, it is too late to gather a valid timestamp
        to allow focus stealing prevention to work correctly.
        """
        ...

    def present_with_time(self, timestamp: int) -> object:
        """
        Presents a window to the user. This may mean raising the window
        in the stacking order, deiconifying it, moving it to the current
        desktop, and/or giving it the keyboard focus, possibly dependent
        on the user’s platform, window manager, and preferences.

        If @window is hidden, this function calls gtk_widget_show()
        as well.

        This function should be used when the user tries to open a window
        that’s already open. Say for example the preferences dialog is
        currently open, and the user chooses Preferences from the menu
        a second time; use gtk_window_present() to move the already-open dialog
        where the user can see it.

        Presents a window to the user in response to a user interaction. The
        timestamp should be gathered when the window was requested to be shown
        (when clicking a link for example), rather than once the window is
        ready to be shown.
        """
        ...

    def propagate_key_event(self, event: Gdk.EventKey) -> bool:
        """
        Propagate a key press or release event to the focus widget and
        up the focus container chain until a widget handles @event.
        This is normally called by the default ::key_press_event and
        ::key_release_event handlers for toplevel windows,
        however in some cases it may be useful to call this directly when
        overriding the standard key handling for a toplevel window.
        """
        ...

    def remove_accel_group(self, accel_group: AccelGroup) -> object:
        """
        Reverses the effects of gtk_window_add_accel_group().
        """
        ...

    def remove_mnemonic(self, keyval: int, target: Widget) -> object:
        """
        Removes a mnemonic from this window.
        """
        ...

    def reshow_with_initial_size(self) -> object:
        """
        Hides @window, then reshows it, resetting the
        default size and position of the window. Used
        by GUI builders only.
        """
        ...

    def resize(self, width: int, height: int) -> object:
        """
        Resizes the window as if the user had done so, obeying geometry
        constraints. The default geometry constraint is that windows may
        not be smaller than their size request; to override this
        constraint, call gtk_widget_set_size_request() to set the window's
        request to a smaller value.

        If gtk_window_resize() is called before showing a window for the
        first time, it overrides any default size set with
        gtk_window_set_default_size().

        Windows may not be resized smaller than 1 by 1 pixels.

        When using client side decorations, GTK+ will do its best to adjust
        the given size so that the resulting window size matches the
        requested size without the title bar, borders and shadows added for
        the client side decorations, but there is no guarantee that the
        result will be totally accurate because these widgets added for
        client side decorations depend on the theme and may not be realized
        or visible at the time gtk_window_resize() is issued.

        If the GtkWindow has a titlebar widget (see gtk_window_set_titlebar()), then
        typically, gtk_window_resize() will compensate for the height of the titlebar
        widget only if the height is known when the resulting GtkWindow configuration
        is issued.
        For example, if new widgets are added after the GtkWindow configuration
        and cause the titlebar widget to grow in height, this will result in a
        window content smaller that specified by gtk_window_resize() and not
        a larger window.
        """
        ...

    def resize_grip_is_visible(self) -> bool:
        """
        Determines whether a resize grip is visible for the specified window.
        """
        ...

    def resize_to_geometry(self, width: int, height: int) -> object:
        """
        Like gtk_window_resize(), but @width and @height are interpreted
        in terms of the base size and increment set with
        gtk_window_set_geometry_hints.
        """
        ...

    def set_accept_focus(self, setting: bool) -> object:
        """
        Windows may set a hint asking the desktop environment not to receive
        the input focus. This function sets this hint.
        """
        ...

    def set_application(self, application: _T.Optional[Application]) -> object:
        """
        Sets or unsets the #GtkApplication associated with the window.

        The application will be kept alive for at least as long as it has any windows
        associated with it (see g_application_hold() for a way to keep it alive
        without windows).

        Normally, the connection between the application and the window will remain
        until the window is destroyed, but you can explicitly remove it by setting
        the @application to %NULL.

        This is equivalent to calling gtk_application_remove_window() and/or
        gtk_application_add_window() on the old/new applications as relevant.
        """
        ...

    def set_attached_to(self, attach_widget: _T.Optional[Widget]) -> object:
        """
        Marks @window as attached to @attach_widget. This creates a logical binding
        between the window and the widget it belongs to, which is used by GTK+ to
        propagate information such as styling or accessibility to @window as if it
        was a children of @attach_widget.

        Examples of places where specifying this relation is useful are for instance
        a #GtkMenu created by a #GtkComboBox, a completion popup window
        created by #GtkEntry or a typeahead search entry created by #GtkTreeView.

        Note that this function should not be confused with
        gtk_window_set_transient_for(), which specifies a window manager relation
        between two toplevels instead.

        Passing %NULL for @attach_widget detaches the window.
        """
        ...

    def set_decorated(self, setting: bool) -> object:
        """
        By default, windows are decorated with a title bar, resize
        controls, etc.  Some [window managers][gtk-X11-arch]
        allow GTK+ to disable these decorations, creating a
        borderless window. If you set the decorated property to %FALSE
        using this function, GTK+ will do its best to convince the window
        manager not to decorate the window. Depending on the system, this
        function may not have any effect when called on a window that is
        already visible, so you should call it before calling gtk_widget_show().

        On Windows, this function always works, since there’s no window manager
        policy involved.
        """
        ...

    def set_default(self, default_widget: _T.Optional[Widget]) -> object:
        """
        The default widget is the widget that’s activated when the user
        presses Enter in a dialog (for example). This function sets or
        unsets the default widget for a #GtkWindow. When setting (rather
        than unsetting) the default widget it’s generally easier to call
        gtk_widget_grab_default() on the widget. Before making a widget
        the default widget, you must call gtk_widget_set_can_default() on
        the widget you’d like to make the default.
        """
        ...

    def set_default_geometry(self, width: int, height: int) -> object:
        """
        Like gtk_window_set_default_size(), but @width and @height are interpreted
        in terms of the base size and increment set with
        gtk_window_set_geometry_hints.
        """
        ...

    def set_default_size(self, width: int, height: int) -> object:
        """
        Sets the default size of a window. If the window’s “natural” size
        (its size request) is larger than the default, the default will be
        ignored. More generally, if the default size does not obey the
        geometry hints for the window (gtk_window_set_geometry_hints() can
        be used to set these explicitly), the default size will be clamped
        to the nearest permitted size.

        Unlike gtk_widget_set_size_request(), which sets a size request for
        a widget and thus would keep users from shrinking the window, this
        function only sets the initial size, just as if the user had
        resized the window themselves. Users can still shrink the window
        again as they normally would. Setting a default size of -1 means to
        use the “natural” default size (the size request of the window).

        For more control over a window’s initial size and how resizing works,
        investigate gtk_window_set_geometry_hints().

        For some uses, gtk_window_resize() is a more appropriate function.
        gtk_window_resize() changes the current size of the window, rather
        than the size to be used on initial display. gtk_window_resize() always
        affects the window itself, not the geometry widget.

        The default size of a window only affects the first time a window is
        shown; if a window is hidden and re-shown, it will remember the size
        it had prior to hiding, rather than using the default size.

        Windows can’t actually be 0x0 in size, they must be at least 1x1, but
        passing 0 for @width and @height is OK, resulting in a 1x1 default size.

        If you use this function to reestablish a previously saved window size,
        note that the appropriate size to save is the one returned by
        gtk_window_get_size(). Using the window allocation directly will not
        work in all circumstances and can lead to growing or shrinking windows.
        """
        ...

    def set_deletable(self, setting: bool) -> object:
        """
        By default, windows have a close button in the window frame. Some
        [window managers][gtk-X11-arch] allow GTK+ to
        disable this button. If you set the deletable property to %FALSE
        using this function, GTK+ will do its best to convince the window
        manager not to show a close button. Depending on the system, this
        function may not have any effect when called on a window that is
        already visible, so you should call it before calling gtk_widget_show().

        On Windows, this function always works, since there’s no window manager
        policy involved.
        """
        ...

    def set_destroy_with_parent(self, setting: bool) -> object:
        """
        If @setting is %TRUE, then destroying the transient parent of @window
        will also destroy @window itself. This is useful for dialogs that
        shouldn’t persist beyond the lifetime of the main window they're
        associated with, for example.
        """
        ...

    def set_focus(self, focus: _T.Optional[Widget]) -> object:
        """
        If @focus is not the current focus widget, and is focusable, sets
        it as the focus widget for the window. If @focus is %NULL, unsets
        the focus widget for this window. To set the focus to a particular
        widget in the toplevel, it is usually more convenient to use
        gtk_widget_grab_focus() instead of this function.
        """
        ...

    def set_focus_on_map(self, setting: bool) -> object:
        """
        Windows may set a hint asking the desktop environment not to receive
        the input focus when the window is mapped.  This function sets this
        hint.
        """
        ...

    def set_focus_visible(self, setting: bool) -> object:
        """
        Sets the #GtkWindow:focus-visible property.
        """
        ...

    def set_geometry_hints(self, geometry_widget: _T.Optional[Widget], geometry: _T.Optional[Gdk.Geometry], geom_mask: Gdk.WindowHints) -> object:
        """
        This function sets up hints about how a window can be resized by
        the user.  You can set a minimum and maximum size; allowed resize
        increments (e.g. for xterm, you can only resize by the size of a
        character); aspect ratios; and more. See the #GdkGeometry struct.
        """
        ...

    def set_gravity(self, gravity: Gdk.Gravity) -> object:
        """
        Window gravity defines the meaning of coordinates passed to
        gtk_window_move(). See gtk_window_move() and #GdkGravity for
        more details.

        The default window gravity is #GDK_GRAVITY_NORTH_WEST which will
        typically “do what you mean.”
        """
        ...

    def set_has_resize_grip(self, value: bool) -> object:
        """
        Sets whether @window has a corner resize grip.

        Note that the resize grip is only shown if the window
        is actually resizable and not maximized. Use
        gtk_window_resize_grip_is_visible() to find out if the
        resize grip is currently shown.
        """
        ...

    def set_has_user_ref_count(self, setting: bool) -> object:
        """
        Tells GTK+ whether to drop its extra reference to the window
        when gtk_widget_destroy() is called.

        This function is only exported for the benefit of language
        bindings which may need to keep the window alive until their
        wrapper object is garbage collected. There is no justification
        for ever calling this function in an application.
        """
        ...

    def set_hide_titlebar_when_maximized(self, setting: bool) -> object:
        """
        If @setting is %TRUE, then @window will request that it’s titlebar
        should be hidden when maximized.
        This is useful for windows that don’t convey any information other
        than the application name in the titlebar, to put the available
        screen space to better use. If the underlying window system does not
        support the request, the setting will not have any effect.

        Note that custom titlebars set with gtk_window_set_titlebar() are
        not affected by this. The application is in full control of their
        content and visibility anyway.
        """
        ...

    def set_icon(self, icon: _T.Optional[GdkPixbuf.Pixbuf]) -> object:
        """
        Sets up the icon representing a #GtkWindow. This icon is used when
        the window is minimized (also known as iconified).  Some window
        managers or desktop environments may also place it in the window
        frame, or display it in other contexts. On others, the icon is not
        used at all, so your mileage may vary.

        The icon should be provided in whatever size it was naturally
        drawn; that is, don’t scale the image before passing it to
        GTK+. Scaling is postponed until the last minute, when the desired
        final size is known, to allow best quality.

        If you have your icon hand-drawn in multiple sizes, use
        gtk_window_set_icon_list(). Then the best size will be used.

        This function is equivalent to calling gtk_window_set_icon_list()
        with a 1-element list.

        See also gtk_window_set_default_icon_list() to set the icon
        for all windows in your application in one go.
        """
        ...

    def set_icon_from_file(self, filename: str) -> bool:
        """
        Sets the icon for @window.
        Warns on failure if @err is %NULL.

        This function is equivalent to calling gtk_window_set_icon()
        with a pixbuf created by loading the image from @filename.
        """
        ...

    def set_icon_list(self, list: GLib.List) -> object:
        """
        Sets up the icon representing a #GtkWindow. The icon is used when
        the window is minimized (also known as iconified).  Some window
        managers or desktop environments may also place it in the window
        frame, or display it in other contexts. On others, the icon is not
        used at all, so your mileage may vary.

        gtk_window_set_icon_list() allows you to pass in the same icon in
        several hand-drawn sizes. The list should contain the natural sizes
        your icon is available in; that is, don’t scale the image before
        passing it to GTK+. Scaling is postponed until the last minute,
        when the desired final size is known, to allow best quality.

        By passing several sizes, you may improve the final image quality
        of the icon, by reducing or eliminating automatic image scaling.

        Recommended sizes to provide: 16x16, 32x32, 48x48 at minimum, and
        larger images (64x64, 128x128) if you have them.

        See also gtk_window_set_default_icon_list() to set the icon
        for all windows in your application in one go.

        Note that transient windows (those who have been set transient for another
        window using gtk_window_set_transient_for()) will inherit their
        icon from their transient parent. So there’s no need to explicitly
        set the icon on transient windows.
        """
        ...

    def set_icon_name(self, name: _T.Optional[str]) -> object:
        """
        Sets the icon for the window from a named themed icon.
        See the docs for #GtkIconTheme for more details.
        On some platforms, the window icon is not used at all.

        Note that this has nothing to do with the WM_ICON_NAME
        property which is mentioned in the ICCCM.
        """
        ...

    def set_keep_above(self, setting: bool) -> object:
        """
        Asks to keep @window above, so that it stays on top. Note that
        you shouldn’t assume the window is definitely above afterward,
        because other entities (e.g. the user or
        [window manager][gtk-X11-arch]) could not keep it above,
        and not all window managers support keeping windows above. But
        normally the window will end kept above. Just don’t write code
        that crashes if not.

        It’s permitted to call this function before showing a window,
        in which case the window will be kept above when it appears onscreen
        initially.

        You can track the above state via the “window-state-event” signal
        on #GtkWidget.

        Note that, according to the
        [Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec),
        the above state is mainly meant for user preferences and should not
        be used by applications e.g. for drawing attention to their
        dialogs.
        """
        ...

    def set_keep_below(self, setting: bool) -> object:
        """
        Asks to keep @window below, so that it stays in bottom. Note that
        you shouldn’t assume the window is definitely below afterward,
        because other entities (e.g. the user or
        [window manager][gtk-X11-arch]) could not keep it below,
        and not all window managers support putting windows below. But
        normally the window will be kept below. Just don’t write code
        that crashes if not.

        It’s permitted to call this function before showing a window,
        in which case the window will be kept below when it appears onscreen
        initially.

        You can track the below state via the “window-state-event” signal
        on #GtkWidget.

        Note that, according to the
        [Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec),
        the above state is mainly meant for user preferences and should not
        be used by applications e.g. for drawing attention to their
        dialogs.
        """
        ...

    def set_mnemonic_modifier(self, modifier: Gdk.ModifierType) -> object:
        """
        Sets the mnemonic modifier for this window.
        """
        ...

    def set_mnemonics_visible(self, setting: bool) -> object:
        """
        Sets the #GtkWindow:mnemonics-visible property.
        """
        ...

    def set_modal(self, modal: bool) -> object:
        """
        Sets a window modal or non-modal. Modal windows prevent interaction
        with other windows in the same application. To keep modal dialogs
        on top of main application windows, use
        gtk_window_set_transient_for() to make the dialog transient for the
        parent; most [window managers][gtk-X11-arch]
        will then disallow lowering the dialog below the parent.
        """
        ...

    def set_opacity(self, opacity: float) -> object:
        """
        Request the windowing system to make @window partially transparent,
        with opacity 0 being fully transparent and 1 fully opaque. (Values
        of the opacity parameter are clamped to the [0,1] range.) On X11
        this has any effect only on X screens with a compositing manager
        running. See gtk_widget_is_composited(). On Windows it should work
        always.

        Note that setting a window’s opacity after the window has been
        shown causes it to flicker once on Windows.
        """
        ...

    def set_position(self, position: WindowPosition) -> object:
        """
        Sets a position constraint for this window. If the old or new
        constraint is %GTK_WIN_POS_CENTER_ALWAYS, this will also cause
        the window to be repositioned to satisfy the new constraint.
        """
        ...

    def set_resizable(self, resizable: bool) -> object:
        """
        Sets whether the user can resize a window. Windows are user resizable
        by default.
        """
        ...

    def set_role(self, role: str) -> object:
        """
        This function is only useful on X11, not with other GTK+ targets.

        In combination with the window title, the window role allows a
        [window manager][gtk-X11-arch] to identify "the
        same" window when an application is restarted. So for example you
        might set the “toolbox” role on your app’s toolbox window, so that
        when the user restarts their session, the window manager can put
        the toolbox back in the same place.

        If a window already has a unique title, you don’t need to set the
        role, since the WM can use the title to identify the window when
        restoring the session.
        """
        ...

    def set_screen(self, screen: Gdk.Screen) -> object:
        """
        Sets the #GdkScreen where the @window is displayed; if
        the window is already mapped, it will be unmapped, and
        then remapped on the new screen.
        """
        ...

    def set_skip_pager_hint(self, setting: bool) -> object:
        """
        Windows may set a hint asking the desktop environment not to display
        the window in the pager. This function sets this hint.
        (A "pager" is any desktop navigation tool such as a workspace
        switcher that displays a thumbnail representation of the windows
        on the screen.)
        """
        ...

    def set_skip_taskbar_hint(self, setting: bool) -> object:
        """
        Windows may set a hint asking the desktop environment not to display
        the window in the task bar. This function sets this hint.
        """
        ...

    def set_startup_id(self, startup_id: str) -> object:
        """
        Startup notification identifiers are used by desktop environment to
        track application startup, to provide user feedback and other
        features. This function changes the corresponding property on the
        underlying GdkWindow. Normally, startup identifier is managed
        automatically and you should only use this function in special cases
        like transferring focus from other processes. You should use this
        function before calling gtk_window_present() or any equivalent
        function generating a window map event.

        This function is only useful on X11, not with other GTK+ targets.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the title of the #GtkWindow. The title of a window will be
        displayed in its title bar; on the X Window System, the title bar
        is rendered by the [window manager][gtk-X11-arch],
        so exactly how the title appears to users may vary
        according to a user’s exact configuration. The title should help a
        user distinguish this window from other windows they may have
        open. A good title might include the application name and current
        document filename, for example.
        """
        ...

    def set_titlebar(self, titlebar: _T.Optional[Widget]) -> object:
        """
        Sets a custom titlebar for @window.

        A typical widget used here is #GtkHeaderBar, as it provides various features
        expected of a titlebar while allowing the addition of child widgets to it.

        If you set a custom titlebar, GTK+ will do its best to convince
        the window manager not to put its own titlebar on the window.
        Depending on the system, this function may not work for a window
        that is already visible, so you set the titlebar before calling
        gtk_widget_show().
        """
        ...

    def set_transient_for(self, parent: _T.Optional[Window]) -> object:
        """
        Dialog windows should be set transient for the main application
        window they were spawned from. This allows
        [window managers][gtk-X11-arch] to e.g. keep the
        dialog on top of the main window, or center the dialog over the
        main window. gtk_dialog_new_with_buttons() and other convenience
        functions in GTK+ will sometimes call
        gtk_window_set_transient_for() on your behalf.

        Passing %NULL for @parent unsets the current transient window.

        On Wayland, this function can also be used to attach a new
        #GTK_WINDOW_POPUP to a #GTK_WINDOW_TOPLEVEL parent already mapped
        on screen so that the #GTK_WINDOW_POPUP will be created as a
        subsurface-based window #GDK_WINDOW_SUBSURFACE which can be
        positioned at will relatively to the #GTK_WINDOW_TOPLEVEL surface.

        On Windows, this function puts the child window on top of the parent,
        much as the window manager would have done on X.
        """
        ...

    def set_type_hint(self, hint: Gdk.WindowTypeHint) -> object:
        """
        By setting the type hint for the window, you allow the window
        manager to decorate and handle the window in a way which is
        suitable to the function of the window in your application.

        This function should be called before the window becomes visible.

        gtk_dialog_new_with_buttons() and other convenience functions in GTK+
        will sometimes call gtk_window_set_type_hint() on your behalf.
        """
        ...

    def set_urgency_hint(self, setting: bool) -> object:
        """
        Windows may set a hint asking the desktop environment to draw
        the users attention to the window. This function sets this hint.
        """
        ...

    def set_wmclass(self, wmclass_name: str, wmclass_class: str) -> object:
        """
        Don’t use this function. It sets the X Window System “class” and
        “name” hints for a window.  According to the ICCCM, you should
        always set these to the same value for all windows in an
        application, and GTK+ sets them to that value by default, so calling
        this function is sort of pointless. However, you may want to call
        gtk_window_set_role() on each window in your application, for the
        benefit of the session manager. Setting the role allows the window
        manager to restore window positions when loading a saved session.
        """
        ...

    def stick(self) -> object:
        """
        Asks to stick @window, which means that it will appear on all user
        desktops. Note that you shouldn’t assume the window is definitely
        stuck afterward, because other entities (e.g. the user or
        [window manager][gtk-X11-arch] could unstick it
        again, and some window managers do not support sticking
        windows. But normally the window will end up stuck. Just don't
        write code that crashes if not.

        It’s permitted to call this function before showing a window.

        You can track stickiness via the “window-state-event” signal
        on #GtkWidget.
        """
        ...

    def unfullscreen(self) -> object:
        """
        Asks to toggle off the fullscreen state for @window. Note that you
        shouldn’t assume the window is definitely not full screen
        afterward, because other entities (e.g. the user or
        [window manager][gtk-X11-arch]) could fullscreen it
        again, and not all window managers honor requests to unfullscreen
        windows. But normally the window will end up restored to its normal
        state. Just don’t write code that crashes if not.

        You can track the fullscreen state via the “window-state-event” signal
        on #GtkWidget.
        """
        ...

    def unmaximize(self) -> object:
        """
        Asks to unmaximize @window. Note that you shouldn’t assume the
        window is definitely unmaximized afterward, because other entities
        (e.g. the user or [window manager][gtk-X11-arch])
        could maximize it again, and not all window
        managers honor requests to unmaximize. But normally the window will
        end up unmaximized. Just don’t write code that crashes if not.

        You can track maximization via the “window-state-event” signal
        on #GtkWidget.
        """
        ...

    def unstick(self) -> object:
        """
        Asks to unstick @window, which means that it will appear on only
        one of the user’s desktops. Note that you shouldn’t assume the
        window is definitely unstuck afterward, because other entities
        (e.g. the user or [window manager][gtk-X11-arch]) could
        stick it again. But normally the window will
        end up unstuck. Just don’t write code that crashes if not.

        You can track stickiness via the “window-state-event” signal
        on #GtkWidget.
        """
        ...


    ...

class WindowAccessible(ContainerAccessible, Atk.Component, Atk.Window):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class WindowGroup(GObject.Object):
    """
    A #GtkWindowGroup restricts the effect of grabs to windows
    in the same group, thereby making window groups almost behave
    like separate applications.

    A window can be a member in at most one window group at a time.
    Windows that have not been explicitly assigned to a group are
    implicitly treated like windows of the default window group.

    GtkWindowGroup objects are referenced by each window in the group,
    so once you have added all windows to a GtkWindowGroup, you can drop
    the initial reference to the window group with g_object_unref(). If the
    windows in the window group are subsequently destroyed, then they will
    be removed from the window group and drop their references on the window
    group; when all window have been removed, the window group will be
    freed.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> WindowGroup:
        """
        Creates a new #GtkWindowGroup object. Grabs added with
        gtk_grab_add() only affect windows within the same #GtkWindowGroup.
        """
        ...

    def add_window(self, window: Window) -> object:
        """
        Adds a window to a #GtkWindowGroup.
        """
        ...

    def get_current_device_grab(self, device: Gdk.Device) -> Widget:
        """
        Returns the current grab widget for @device, or %NULL if none.
        """
        ...

    def get_current_grab(self) -> Widget:
        """
        Gets the current grab widget of the given group,
        see gtk_grab_add().
        """
        ...

    def list_windows(self) -> GLib.List:
        """
        Returns a list of the #GtkWindows that belong to @window_group.
        """
        ...

    def remove_window(self, window: Window) -> object:
        """
        Removes a window from a #GtkWindowGroup.
        """
        ...


    ...

class Template(object):
    """
    Generate a UI from a Builder file
    """

    def __init__(self, string: _T.Optional[str] = None, filename: _T.Optional[str] = None, resource_path: _T.Optional[str] = None) -> None:
        ...


    @classmethod
    def from_file(cls, filename: str) -> 'Template':
        ...


    @classmethod
    def from_string(cls, string: str) -> 'Template':
        ...


    @classmethod
    def from_resource(cls, resource_path: str) -> 'Template':
        ...

    def __call__(self, cls: type) -> _T.Callable[[type], type]:
        ...

    class Child(Widget):
        def __init__(self, name: _T.Optional[str] = ...):
            ...

    class Callback(object):
        def __init__(self, name: _T.Optional[str] = ...):
            ...

        def __call__(self, func: _T.Callable[[None], None]):
            ...

    ...



