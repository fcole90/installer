"""
Stub file for Pango. Autogenerated with gi-stubgen.
"""

import typing as _T  # noqa
from enum import Enum

from gi.repository import GLib, GObject, HarfBuzz, cairo

ANALYSIS_FLAG_CENTERED_BASELINE = 1
"""
Whether the segment should be shifted to center around the baseline.

This is mainly used in vertical writing directions.
"""

ANALYSIS_FLAG_IS_ELLIPSIS = 2
"""
Whether this run holds ellipsized text.
"""

ANALYSIS_FLAG_NEED_HYPHEN = 4
"""
Whether to add a hyphen at the end of the run during shaping.
"""

ATTR_INDEX_FROM_TEXT_BEGINNING = 0
"""
Value for @start_index in `PangoAttribute` that indicates
the beginning of the text.
"""

ATTR_INDEX_TO_TEXT_END = 4294967295
"""
Value for @end_index in `PangoAttribute` that indicates
the end of the text.
"""

GLYPH_EMPTY = 268435455
"""
A `PangoGlyph` value that indicates a zero-width empty glpyh.

This is useful for example in shaper modules, to use as the glyph for
various zero-width Unicode characters (those passing [func@is_zero_width]).
"""

GLYPH_INVALID_INPUT = 4294967295
"""
A `PangoGlyph` value for invalid input.

`PangoLayout` produces one such glyph per invalid input UTF-8 byte and such
a glyph is rendered as a crossed box.

Note that this value is defined such that it has the %PANGO_GLYPH_UNKNOWN_FLAG
set.
"""

GLYPH_UNKNOWN_FLAG = 268435456
"""
Flag used in `PangoGlyph` to turn a `gunichar` value of a valid Unicode
character into an unknown-character glyph for that `gunichar`.

Such unknown-character glyphs may be rendered as a 'hex box'.
"""

SCALE = 1024
"""
The scale between dimensions used for Pango distances and device units.

The definition of device units is dependent on the output device; it will
typically be pixels for a screen, and points for a printer. %PANGO_SCALE is
currently 1024, but this may be changed in the future.

When setting font sizes, device units are always considered to be
points (as in "12 point font"), rather than pixels.
"""

VERSION_MAJOR = 1
"""
The major component of the version of Pango available at compile-time.
"""

VERSION_MICRO = 6
"""
The micro component of the version of Pango available at compile-time.
"""

VERSION_MINOR = 50
"""
The minor component of the version of Pango available at compile-time.
"""

VERSION_STRING = "1.50.6"
"""
A string literal containing the version of Pango available at compile-time.
"""


class Alignment(Enum):
    """
    `PangoAlignment` describes how to align the lines of a `PangoLayout`
    within the available space.

    If the `PangoLayout` is set to justify using [method@Pango.Layout.set_justify],
    this only affects partial lines.

    See [method@Pango.Layout.set_auto_dir] for how text direction affects
    the interpretation of `PangoAlignment` values.
    """
    LEFT = 0
    CENTER = 1
    RIGHT = 2

class AttrType(Enum):
    """
    The `PangoAttrType` distinguishes between different types of attributes.

    Along with the predefined values, it is possible to allocate additional
    values for custom attributes using [func@AttrType.register]. The predefined
    values are given below. The type of structure used to store the attribute is
    listed in parentheses after the description.
    """
    INVALID = 0
    LANGUAGE = 1
    FAMILY = 2
    STYLE = 3
    WEIGHT = 4
    VARIANT = 5
    STRETCH = 6
    SIZE = 7
    FONT_DESC = 8
    FOREGROUND = 9
    BACKGROUND = 10
    UNDERLINE = 11
    STRIKETHROUGH = 12
    RISE = 13
    SHAPE = 14
    SCALE = 15
    FALLBACK = 16
    LETTER_SPACING = 17
    UNDERLINE_COLOR = 18
    STRIKETHROUGH_COLOR = 19
    ABSOLUTE_SIZE = 20
    GRAVITY = 21
    GRAVITY_HINT = 22
    FONT_FEATURES = 23
    FOREGROUND_ALPHA = 24
    BACKGROUND_ALPHA = 25
    ALLOW_BREAKS = 26
    SHOW = 27
    INSERT_HYPHENS = 28
    OVERLINE = 29
    OVERLINE_COLOR = 30
    LINE_HEIGHT = 31
    ABSOLUTE_LINE_HEIGHT = 32
    TEXT_TRANSFORM = 33
    WORD = 34
    SENTENCE = 35
    BASELINE_SHIFT = 36
    FONT_SCALE = 37

class BaselineShift(Enum):
    """
    An enumeration that affects baseline shifts between runs.
    """
    NONE = 0
    SUPERSCRIPT = 1
    SUBSCRIPT = 2

class BidiType(Enum):
    """
    `PangoBidiType` represents the bidirectional character
    type of a Unicode character.

    The values in this enumeration are specified by the
    [Unicode bidirectional algorithm](http://www.unicode.org/reports/tr9/).
    """
    L = 0
    LRE = 1
    LRO = 2
    R = 3
    AL = 4
    RLE = 5
    RLO = 6
    PDF = 7
    EN = 8
    ES = 9
    ET = 10
    AN = 11
    CS = 12
    NSM = 13
    BN = 14
    B = 15
    S = 16
    WS = 17
    ON = 18
    LRI = 19
    RLI = 20
    FSI = 21
    PDI = 22

class CoverageLevel(Enum):
    """
    `PangoCoverageLevel` is used to indicate how well a font can
    represent a particular Unicode character for a particular script.

    Since 1.44, only %PANGO_COVERAGE_NONE and %PANGO_COVERAGE_EXACT
    will be returned.
    """
    NONE = 0
    FALLBACK = 1
    APPROXIMATE = 2
    EXACT = 3

class Direction(Enum):
    """
    `PangoDirection` represents a direction in the Unicode bidirectional
    algorithm.

    Not every value in this enumeration makes sense for every usage of
    `PangoDirection`; for example, the return value of [func@unichar_direction]
    and [func@find_base_dir] cannot be `PANGO_DIRECTION_WEAK_LTR` or
    `PANGO_DIRECTION_WEAK_RTL`, since every character is either neutral
    or has a strong direction; on the other hand `PANGO_DIRECTION_NEUTRAL`
    doesn't make sense to pass to [func@itemize_with_base_dir].

    The `PANGO_DIRECTION_TTB_LTR`, `PANGO_DIRECTION_TTB_RTL` values come from
    an earlier interpretation of this enumeration as the writing direction
    of a block of text and are no longer used. See `PangoGravity` for how
    vertical text is handled in Pango.

    If you are interested in text direction, you should really use fribidi
    directly. `PangoDirection` is only retained because it is used in some
    public apis.
    """
    LTR = 0
    RTL = 1
    TTB_LTR = 2
    TTB_RTL = 3
    WEAK_LTR = 4
    WEAK_RTL = 5
    NEUTRAL = 6

class EllipsizeMode(Enum):
    """
    `PangoEllipsizeMode` describes what sort of ellipsization
    should be applied to text.

    In the ellipsization process characters are removed from the
    text in order to make it fit to a given width and replaced
    with an ellipsis.
    """
    NONE = 0
    START = 1
    MIDDLE = 2
    END = 3

class FontScale(Enum):
    """
    An enumeration that affects font sizes for superscript
    and subscript positioning and for (emulated) Small Caps.
    """
    NONE = 0
    SUPERSCRIPT = 1
    SUBSCRIPT = 2
    SMALL_CAPS = 3

class Gravity(Enum):
    """
    `PangoGravity` represents the orientation of glyphs in a segment
    of text.

    This is useful when rendering vertical text layouts. In those situations,
    the layout is rotated using a non-identity [struct@Pango.Matrix], and then
    glyph orientation is controlled using `PangoGravity`.

    Not every value in this enumeration makes sense for every usage of
    `PangoGravity`; for example, %PANGO_GRAVITY_AUTO only can be passed to
    [method@Pango.Context.set_base_gravity] and can only be returned by
    [method@Pango.Context.get_base_gravity].

    See also: [enum@Pango.GravityHint]
    """
    SOUTH = 0
    EAST = 1
    NORTH = 2
    WEST = 3
    AUTO = 4

class GravityHint(Enum):
    """
    `PangoGravityHint` defines how horizontal scripts should behave in a
    vertical context.

    That is, English excerpts in a vertical paragraph for example.

    See also [enum@Pango.Gravity]
    """
    NATURAL = 0
    STRONG = 1
    LINE = 2

class Overline(Enum):
    """
    The `PangoOverline` enumeration is used to specify whether text
    should be overlined, and if so, the type of line.
    """
    NONE = 0
    SINGLE = 1

class RenderPart(Enum):
    """
    `PangoRenderPart` defines different items to render for such
    purposes as setting colors.
    """
    FOREGROUND = 0
    BACKGROUND = 1
    UNDERLINE = 2
    STRIKETHROUGH = 3
    OVERLINE = 4

class Script(Enum):
    """
    The `PangoScript` enumeration identifies different writing
    systems.

    The values correspond to the names as defined in the Unicode standard. See
    [Unicode Standard Annex 24: Script names](http://www.unicode.org/reports/tr24/)

    Note that this enumeration is deprecated and will not be updated to include values
    in newer versions of the Unicode standard. Applications should use the
    [enum@GLib.UnicodeScript] enumeration instead,
    whose values are interchangeable with `PangoScript`.
    """
    INVALID_CODE = -1
    COMMON = 0
    INHERITED = 1
    ARABIC = 2
    ARMENIAN = 3
    BENGALI = 4
    BOPOMOFO = 5
    CHEROKEE = 6
    COPTIC = 7
    CYRILLIC = 8
    DESERET = 9
    DEVANAGARI = 10
    ETHIOPIC = 11
    GEORGIAN = 12
    GOTHIC = 13
    GREEK = 14
    GUJARATI = 15
    GURMUKHI = 16
    HAN = 17
    HANGUL = 18
    HEBREW = 19
    HIRAGANA = 20
    KANNADA = 21
    KATAKANA = 22
    KHMER = 23
    LAO = 24
    LATIN = 25
    MALAYALAM = 26
    MONGOLIAN = 27
    MYANMAR = 28
    OGHAM = 29
    OLD_ITALIC = 30
    ORIYA = 31
    RUNIC = 32
    SINHALA = 33
    SYRIAC = 34
    TAMIL = 35
    TELUGU = 36
    THAANA = 37
    THAI = 38
    TIBETAN = 39
    CANADIAN_ABORIGINAL = 40
    YI = 41
    TAGALOG = 42
    HANUNOO = 43
    BUHID = 44
    TAGBANWA = 45
    BRAILLE = 46
    CYPRIOT = 47
    LIMBU = 48
    OSMANYA = 49
    SHAVIAN = 50
    LINEAR_B = 51
    TAI_LE = 52
    UGARITIC = 53
    NEW_TAI_LUE = 54
    BUGINESE = 55
    GLAGOLITIC = 56
    TIFINAGH = 57
    SYLOTI_NAGRI = 58
    OLD_PERSIAN = 59
    KHAROSHTHI = 60
    UNKNOWN = 61
    BALINESE = 62
    CUNEIFORM = 63
    PHOENICIAN = 64
    PHAGS_PA = 65
    NKO = 66
    KAYAH_LI = 67
    LEPCHA = 68
    REJANG = 69
    SUNDANESE = 70
    SAURASHTRA = 71
    CHAM = 72
    OL_CHIKI = 73
    VAI = 74
    CARIAN = 75
    LYCIAN = 76
    LYDIAN = 77
    BATAK = 78
    BRAHMI = 79
    MANDAIC = 80
    CHAKMA = 81
    MEROITIC_CURSIVE = 82
    MEROITIC_HIEROGLYPHS = 83
    MIAO = 84
    SHARADA = 85
    SORA_SOMPENG = 86
    TAKRI = 87
    BASSA_VAH = 88
    CAUCASIAN_ALBANIAN = 89
    DUPLOYAN = 90
    ELBASAN = 91
    GRANTHA = 92
    KHOJKI = 93
    KHUDAWADI = 94
    LINEAR_A = 95
    MAHAJANI = 96
    MANICHAEAN = 97
    MENDE_KIKAKUI = 98
    MODI = 99
    MRO = 100
    NABATAEAN = 101
    OLD_NORTH_ARABIAN = 102
    OLD_PERMIC = 103
    PAHAWH_HMONG = 104
    PALMYRENE = 105
    PAU_CIN_HAU = 106
    PSALTER_PAHLAVI = 107
    SIDDHAM = 108
    TIRHUTA = 109
    WARANG_CITI = 110
    AHOM = 111
    ANATOLIAN_HIEROGLYPHS = 112
    HATRAN = 113
    MULTANI = 114
    OLD_HUNGARIAN = 115
    SIGNWRITING = 116

class Stretch(Enum):
    """
    An enumeration specifying the width of the font relative to other designs
    within a family.
    """
    ULTRA_CONDENSED = 0
    EXTRA_CONDENSED = 1
    CONDENSED = 2
    SEMI_CONDENSED = 3
    NORMAL = 4
    SEMI_EXPANDED = 5
    EXPANDED = 6
    EXTRA_EXPANDED = 7
    ULTRA_EXPANDED = 8

class Style(Enum):
    """
    An enumeration specifying the various slant styles possible for a font.
    """
    NORMAL = 0
    OBLIQUE = 1
    ITALIC = 2

class TabAlign(Enum):
    """
    `PangoTabAlign` specifies where the text appears relative to the tab stop
    position.
    """
    LEFT = 0
    RIGHT = 1
    CENTER = 2
    DECIMAL = 3

class TextTransform(Enum):
    """
    An enumeration that affects how Pango treats characters during shaping.
    """
    NONE = 0
    LOWERCASE = 1
    UPPERCASE = 2
    CAPITALIZE = 3

class Underline(Enum):
    """
    The `PangoUnderline` enumeration is used to specify whether text
    should be underlined, and if so, the type of underlining.
    """
    NONE = 0
    SINGLE = 1
    DOUBLE = 2
    LOW = 3
    ERROR = 4
    SINGLE_LINE = 5
    DOUBLE_LINE = 6
    ERROR_LINE = 7

class Variant(Enum):
    """
    An enumeration specifying capitalization variant of the font.
    """
    NORMAL = 0
    SMALL_CAPS = 1
    ALL_SMALL_CAPS = 2
    PETITE_CAPS = 3
    ALL_PETITE_CAPS = 4
    UNICASE = 5
    TITLE_CAPS = 6

class Weight(Enum):
    """
    An enumeration specifying the weight (boldness) of a font.

    Weight is specified as a numeric value ranging from 100 to 1000.
    This enumeration simply provides some common, predefined values.
    """
    THIN = 100
    ULTRALIGHT = 200
    LIGHT = 300
    SEMILIGHT = 350
    BOOK = 380
    NORMAL = 400
    MEDIUM = 500
    SEMIBOLD = 600
    BOLD = 700
    ULTRABOLD = 800
    HEAVY = 900
    ULTRAHEAVY = 1000

class WrapMode(Enum):
    """
    `PangoWrapMode` describes how to wrap the lines of a `PangoLayout`
    to the desired width.

    For @PANGO_WRAP_WORD, Pango uses break opportunities that are determined
    by the Unicode line breaking algorithm. For @PANGO_WRAP_CHAR, Pango allows
    breaking at grapheme boundaries that are determined by the Unicode text
    segmentation algorithm.
    """
    WORD = 0
    CHAR = 1
    WORD_CHAR = 2

class FontMask(Enum):
    """
    The bits in a `PangoFontMask` correspond to the set fields in a
    `PangoFontDescription`.
    """
    FAMILY = 1
    STYLE = 2
    VARIANT = 4
    WEIGHT = 8
    STRETCH = 16
    SIZE = 32
    GRAVITY = 64
    VARIATIONS = 128

class LayoutDeserializeFlags(Enum):
    """
    Flags that influence the behavior of [func@Pango.Layout.deserialize].

    New members may be added to this enumeration over time.
    """
    DEFAULT = 0
    CONTEXT = 1

class LayoutSerializeFlags(Enum):
    """
    Flags that influence the behavior of [method@Pango.Layout.serialize].

    New members may be added to this enumeration over time.
    """
    DEFAULT = 0
    CONTEXT = 1
    OUTPUT = 2

class ShapeFlags(Enum):
    """
    Flags influencing the shaping process.

    `PangoShapeFlags` can be passed to [func@Pango.shape_with_flags].
    """
    NONE = 0
    ROUND_POSITIONS = 1

class ShowFlags(Enum):
    """
    These flags affect how Pango treats characters that are normally
    not visible in the output.
    """
    NONE = 0
    SPACES = 1
    LINE_BREAKS = 2
    IGNORABLES = 4


def attr_allow_breaks_new(allow_breaks: bool) -> Attribute:
    """
    Create a new allow-breaks attribute.

    If breaks are disabled, the range will be kept in a
    single run, as far as possible.
    """
    ...

def attr_background_alpha_new(alpha: int) -> Attribute:
    """
    Create a new background alpha attribute.
    """
    ...

def attr_background_new(red: int, green: int, blue: int) -> Attribute:
    """
    Create a new background color attribute.
    """
    ...

def attr_baseline_shift_new(shift: int) -> Attribute:
    """
    Create a new baseline displacement attribute.

    The effect of this attribute is to shift the baseline of a run,
    relative to the run of preceding run.

    <picture>
      <source srcset="baseline-shift-dark.png" media="(prefers-color-scheme: dark)">
      <img alt="Baseline Shift" src="baseline-shift-light.png">
    </picture>
    """
    ...

def attr_break(text: str, length: int, attr_list: AttrList, offset: int, attrs: object, attrs_len: int) -> object:
    """
    Apply customization from attributes to the breaks in @attrs.

    The line breaks are assumed to have been produced
    by [func@Pango.default_break] and [func@Pango.tailor_break].
    """
    ...

def attr_fallback_new(enable_fallback: bool) -> Attribute:
    """
    Create a new font fallback attribute.

    If fallback is disabled, characters will only be
    used from the closest matching font on the system.
    No fallback will be done to other fonts on the system
    that might contain the characters in the text.
    """
    ...

def attr_family_new(family: str) -> Attribute:
    """
    Create a new font family attribute.
    """
    ...

def attr_font_scale_new(scale: FontScale) -> Attribute:
    """
    Create a new font scale attribute.

    The effect of this attribute is to change the font size of a run,
    relative to the size of preceding run.
    """
    ...

def attr_foreground_alpha_new(alpha: int) -> Attribute:
    """
    Create a new foreground alpha attribute.
    """
    ...

def attr_foreground_new(red: int, green: int, blue: int) -> Attribute:
    """
    Create a new foreground color attribute.
    """
    ...

def attr_gravity_hint_new(hint: GravityHint) -> Attribute:
    """
    Create a new gravity hint attribute.
    """
    ...

def attr_gravity_new(gravity: Gravity) -> Attribute:
    """
    Create a new gravity attribute.
    """
    ...

def attr_insert_hyphens_new(insert_hyphens: bool) -> Attribute:
    """
    Create a new insert-hyphens attribute.

    Pango will insert hyphens when breaking lines in
    the middle of a word. This attribute can be used
    to suppress the hyphen.
    """
    ...

def attr_letter_spacing_new(letter_spacing: int) -> Attribute:
    """
    Create a new letter-spacing attribute.
    """
    ...

def attr_line_height_new(factor: float) -> Attribute:
    """
    Modify the height of logical line extents by a factor.

    This affects the values returned by
    [method@Pango.LayoutLine.get_extents],
    [method@Pango.LayoutLine.get_pixel_extents] and
    [method@Pango.LayoutIter.get_line_extents].
    """
    ...

def attr_line_height_new_absolute(height: int) -> Attribute:
    """
    Override the height of logical line extents to be @height.

    This affects the values returned by
    [method@Pango.LayoutLine.get_extents],
    [method@Pango.LayoutLine.get_pixel_extents] and
    [method@Pango.LayoutIter.get_line_extents].
    """
    ...

def attr_overline_color_new(red: int, green: int, blue: int) -> Attribute:
    """
    Create a new overline color attribute.

    This attribute modifies the color of overlines.
    If not set, overlines will use the foreground color.
    """
    ...

def attr_overline_new(overline: Overline) -> Attribute:
    """
    Create a new overline-style attribute.
    """
    ...

def attr_rise_new(rise: int) -> Attribute:
    """
    Create a new baseline displacement attribute.
    """
    ...

def attr_scale_new(scale_factor: float) -> Attribute:
    """
    Create a new font size scale attribute.

    The base font for the affected text will have
    its size multiplied by @scale_factor.
    """
    ...

def attr_sentence_new() -> Attribute:
    """
    Marks the range of the attribute as a single sentence.

    Note that this may require adjustments to word and
    sentence classification around the range.
    """
    ...

def attr_show_new(flags: ShowFlags) -> Attribute:
    """
    Create a new attribute that influences how invisible
    characters are rendered.
    """
    ...

def attr_stretch_new(stretch: Stretch) -> Attribute:
    """
    Create a new font stretch attribute.
    """
    ...

def attr_strikethrough_color_new(red: int, green: int, blue: int) -> Attribute:
    """
    Create a new strikethrough color attribute.

    This attribute modifies the color of strikethrough lines.
    If not set, strikethrough lines will use the foreground color.
    """
    ...

def attr_strikethrough_new(strikethrough: bool) -> Attribute:
    """
    Create a new strike-through attribute.
    """
    ...

def attr_style_new(style: Style) -> Attribute:
    """
    Create a new font slant style attribute.
    """
    ...

def attr_text_transform_new(transform: TextTransform) -> Attribute:
    """
    Create a new attribute that influences how characters
    are transformed during shaping.
    """
    ...

def attr_underline_color_new(red: int, green: int, blue: int) -> Attribute:
    """
    Create a new underline color attribute.

    This attribute modifies the color of underlines.
    If not set, underlines will use the foreground color.
    """
    ...

def attr_underline_new(underline: Underline) -> Attribute:
    """
    Create a new underline-style attribute.
    """
    ...

def attr_variant_new(variant: Variant) -> Attribute:
    """
    Create a new font variant attribute (normal or small caps).
    """
    ...

def attr_weight_new(weight: Weight) -> Attribute:
    """
    Create a new font weight attribute.
    """
    ...

def attr_word_new() -> Attribute:
    """
    Marks the range of the attribute as a single word.

    Note that this may require adjustments to word and
    sentence classification around the range.
    """
    ...

def break(text: str, length: int, analysis: Analysis, attrs: object, attrs_len: int) -> object:
    """
    Determines possible line, word, and character breaks
    for a string of Unicode text with a single analysis.

    For most purposes you may want to use [func@Pango.get_log_attrs].
    """
    ...

def default_break(text: str, length: int, analysis: _T.Optional[Analysis], attrs: LogAttr, attrs_len: int) -> object:
    """
    This is the default break algorithm.

    It applies rules from the [Unicode Line Breaking Algorithm](http://www.unicode.org/unicode/reports/tr14/)
    without language-specific tailoring, therefore the @analyis argument is unused
    and can be %NULL.

    See [func@Pango.tailor_break] for language-specific breaks.

    See [func@Pango.attr_break] for attribute-based customization.
    """
    ...

def extents_to_pixels(inclusive: _T.Optional[Rectangle], nearest: _T.Optional[Rectangle]) -> object:
    """
    Converts extents from Pango units to device units.

    The conversion is done by dividing by the %PANGO_SCALE factor and
    performing rounding.

    The @inclusive rectangle is converted by flooring the x/y coordinates
    and extending width/height, such that the final rectangle completely
    includes the original rectangle.

    The @nearest rectangle is converted by rounding the coordinates
    of the rectangle to the nearest device unit (pixel).

    The rule to which argument to use is: if you want the resulting device-space
    rectangle to completely contain the original rectangle, pass it in as
    @inclusive. If you want two touching-but-not-overlapping rectangles stay
    touching-but-not-overlapping after rounding to device units, pass them in
    as @nearest.
    """
    ...

def find_base_dir(text: str, length: int) -> Direction:
    """
    Searches a string the first character that has a strong
    direction, according to the Unicode bidirectional algorithm.
    """
    ...

def find_paragraph_boundary(text: str, length: int, paragraph_delimiter_index: int, next_paragraph_start: int) -> object:
    """
    Locates a paragraph boundary in @text.

    A boundary is caused by delimiter characters, such as
    a newline, carriage return, carriage return-newline pair,
    or Unicode paragraph separator character.

    The index of the run of delimiters is returned in
    @paragraph_delimiter_index. The index of the start of the
    next paragraph (index after all delimiters) is stored n
    @next_paragraph_start.

    If no delimiters are found, both @paragraph_delimiter_index
    and @next_paragraph_start are filled with the length of @text
    (an index one off the end).
    """
    ...

def get_log_attrs(text: str, length: int, level: int, language: Language, attrs: object, attrs_len: int) -> object:
    """
    Computes a `PangoLogAttr` for each character in @text.

    The @attrs array must have one `PangoLogAttr` for
    each position in @text; if @text contains N characters,
    it has N+1 positions, including the last position at the
    end of the text. @text should be an entire paragraph;
    logical attributes can't be computed without context
    (for example you need to see spaces on either side of
    a word to know the word is a word).
    """
    ...

def get_mirror_char(ch: str, mirrored_ch: str) -> bool:
    """
    Returns the mirrored character of a Unicode character.

    Mirror characters are determined by the Unicode mirrored property.
    """
    ...

def is_zero_width(ch: str) -> bool:
    """
    Checks if a character that should not be normally rendered.

    This includes all Unicode characters with "ZERO WIDTH" in their name,
    as well as *bidi* formatting characters, and a few other ones.

    This is totally different from [func@GLib.unichar_iszerowidth] and is at best misnamed.
    """
    ...

def itemize(context: Context, text: str, start_index: int, length: int, attrs: AttrList, cached_iter: _T.Optional[AttrIterator]) -> GLib.List:
    """
    Breaks a piece of text into segments with consistent directional
    level and font.

    Each byte of @text will be contained in exactly one of the items in the
    returned list; the generated list of items will be in logical order (the
    start offsets of the items are ascending).

    @cached_iter should be an iterator over @attrs currently positioned
    at a range before or containing @start_index; @cached_iter will be
    advanced to the range covering the position just after
    @start_index + @length. (i.e. if itemizing in a loop, just keep passing
    in the same @cached_iter).
    """
    ...

def itemize_with_base_dir(context: Context, base_dir: Direction, text: str, start_index: int, length: int, attrs: AttrList, cached_iter: _T.Optional[AttrIterator]) -> GLib.List:
    """
    Like `pango_itemize()`, but with an explicitly specified base direction.

    The base direction is used when computing bidirectional levels.
    [func@itemize] gets the base direction from the `PangoContext`
    (see [method@Pango.Context.set_base_dir]).
    """
    ...

def log2vis_get_embedding_levels(text: str, length: int, pbase_dir: Direction) -> int:
    """
    Return the bidirectional embedding levels of the input paragraph.

    The bidirectional embedding levels are defined by the [Unicode Bidirectional
    Algorithm](http://www.unicode.org/reports/tr9/).

    If the input base direction is a weak direction, the direction of the
    characters in the text will determine the final resolved direction.
    """
    ...

def markup_parser_finish(context: GLib.MarkupParseContext, attr_list: AttrList, text: str, accel_char: str) -> bool:
    """
    Finishes parsing markup.

    After feeding a Pango markup parser some data with [method@GLib.MarkupParseContext.parse],
    use this function to get the list of attributes and text out of the
    markup. This function will not free @context, use [method@GLib.MarkupParseContext.free]
    to do so.
    """
    ...

def markup_parser_new(accel_marker: str) -> GLib.MarkupParseContext:
    """
    Incrementally parses marked-up text to create a plain-text string
    and an attribute list.

    See the [Pango Markup](pango_markup.html) docs for details about the
    supported markup.

    If @accel_marker is nonzero, the given character will mark the
    character following it as an accelerator. For example, @accel_marker
    might be an ampersand or underscore. All characters marked
    as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
    and the first character so marked will be returned in @accel_char,
    when calling [func@markup_parser_finish]. Two @accel_marker characters
    following each other produce a single literal @accel_marker character.

    To feed markup to the parser, use [method@GLib.MarkupParseContext.parse]
    on the returned [struct@GLib.MarkupParseContext]. When done with feeding markup
    to the parser, use [func@markup_parser_finish] to get the data out
    of it, and then use [method@GLib.MarkupParseContext.free] to free it.

    This function is designed for applications that read Pango markup
    from streams. To simply parse a string containing Pango markup,
    the [func@Pango.parse_markup] API is recommended instead.
    """
    ...

def parse_enum(type: GObject.Type, str: _T.Optional[str], value: int, warn: bool, possible_values: str) -> bool:
    """
    Parses an enum type and stores the result in @value.

    If @str does not match the nick name of any of the possible values
    for the enum and is not an integer, %FALSE is returned, a warning
    is issued if @warn is %TRUE, and a string representing the list of
    possible values is stored in @possible_values. The list is
    slash-separated, eg. "none/start/middle/end".

    If failed and @possible_values is not %NULL, returned string should
    be freed using g_free().
    """
    ...

def parse_markup(markup_text: str, length: int, accel_marker: str, attr_list: AttrList, text: str, accel_char: str) -> bool:
    """
    Parses marked-up text to create a plain-text string and an attribute list.

    See the [Pango Markup](pango_markup.html) docs for details about the
    supported markup.

    If @accel_marker is nonzero, the given character will mark the
    character following it as an accelerator. For example, @accel_marker
    might be an ampersand or underscore. All characters marked
    as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
    and the first character so marked will be returned in @accel_char.
    Two @accel_marker characters following each other produce a single
    literal @accel_marker character.

    To parse a stream of pango markup incrementally, use [func@markup_parser_new].

    If any error happens, none of the output arguments are touched except
    for @error.
    """
    ...

def parse_stretch(str: str, stretch: Stretch, warn: bool) -> bool:
    """
    Parses a font stretch.

    The allowed values are
    "ultra_condensed", "extra_condensed", "condensed",
    "semi_condensed", "normal", "semi_expanded", "expanded",
    "extra_expanded" and "ultra_expanded". Case variations are
    ignored and the '_' characters may be omitted.
    """
    ...

def parse_style(str: str, style: Style, warn: bool) -> bool:
    """
    Parses a font style.

    The allowed values are "normal", "italic" and "oblique", case
    variations being
    ignored.
    """
    ...

def parse_variant(str: str, variant: Variant, warn: bool) -> bool:
    """
    Parses a font variant.

    The allowed values are "normal", "small-caps", "all-small-caps",
    "petite-caps", "all-petite-caps", "unicase" and "title-caps",
    case variations being ignored.
    """
    ...

def parse_weight(str: str, weight: Weight, warn: bool) -> bool:
    """
    Parses a font weight.

    The allowed values are "heavy",
    "ultrabold", "bold", "normal", "light", "ultraleight"
    and integers. Case variations are ignored.
    """
    ...

def quantize_line_geometry(thickness: int, position: int) -> object:
    """
    Quantizes the thickness and position of a line to whole device pixels.

    This is typically used for underline or strikethrough. The purpose of
    this function is to avoid such lines looking blurry.

    Care is taken to make sure @thickness is at least one pixel when this
    function returns, but returned @position may become zero as a result
    of rounding.
    """
    ...

def read_line(stream: _T.Optional[object], str: GLib.String) -> int:
    """
    Reads an entire line from a file into a buffer.

    Lines may be delimited with '\n', '\r', '\n\r', or '\r\n'. The delimiter
    is not written into the buffer. Text after a '#' character is treated as
    a comment and skipped. '\' can be used to escape a # character.
    '\' proceeding a line delimiter combines adjacent lines. A '\' proceeding
    any other character is ignored and written into the output buffer
    unmodified.
    """
    ...

def reorder_items(items: GLib.List) -> GLib.List:
    """
    Reorder items from logical order to visual order.

    The visual order is determined from the associated directional
    levels of the items. The original list is unmodified.

    (Please open a bug if you use this function.
     It is not a particularly convenient interface, and the code
     is duplicated elsewhere in Pango for that reason.)
    """
    ...

def scan_int(pos: str, out: int) -> bool:
    """
    Scans an integer.

    Leading white space is skipped.
    """
    ...

def scan_string(pos: str, out: GLib.String) -> bool:
    """
    Scans a string into a `GString` buffer.

    The string may either be a sequence of non-white-space characters,
    or a quoted string with '"'. Instead a quoted string, '\"' represents
    a literal quote. Leading white space outside of quotes is skipped.
    """
    ...

def scan_word(pos: str, out: GLib.String) -> bool:
    """
    Scans a word into a `GString` buffer.

    A word consists of [A-Za-z_] followed by zero or more
    [A-Za-z_0-9]. Leading white space is skipped.
    """
    ...

def shape(text: str, length: int, analysis: Analysis, glyphs: GlyphString) -> object:
    """
    Convert the characters in @text into glyphs.

    Given a segment of text and the corresponding `PangoAnalysis` structure
    returned from [func@Pango.itemize], convert the characters into glyphs. You
    may also pass in only a substring of the item from [func@Pango.itemize].

    It is recommended that you use [func@Pango.shape_full] instead, since
    that API allows for shaping interaction happening across text item
    boundaries.

    Note that the extra attributes in the @analyis that is returned from
    [func@Pango.itemize] have indices that are relative to the entire paragraph,
    so you need to subtract the item offset from their indices before
    calling [func@Pango.shape].
    """
    ...

def shape_full(item_text: str, item_length: int, paragraph_text: _T.Optional[str], paragraph_length: int, analysis: Analysis, glyphs: GlyphString) -> object:
    """
    Convert the characters in @text into glyphs.

    Given a segment of text and the corresponding `PangoAnalysis` structure
    returned from [func@Pango.itemize], convert the characters into glyphs.
    You may also pass in only a substring of the item from [func@Pango.itemize].

    This is similar to [func@Pango.shape], except it also can optionally take
    the full paragraph text as input, which will then be used to perform
    certain cross-item shaping interactions. If you have access to the broader
    text of which @item_text is part of, provide the broader text as
    @paragraph_text. If @paragraph_text is %NULL, item text is used instead.

    Note that the extra attributes in the @analyis that is returned from
    [func@Pango.itemize] have indices that are relative to the entire paragraph,
    so you do not pass the full paragraph text as @paragraph_text, you need
    to subtract the item offset from their indices before calling
    [func@Pango.shape_full].
    """
    ...

def shape_item(item: Item, paragraph_text: _T.Optional[str], paragraph_length: int, log_attrs: _T.Optional[LogAttr], glyphs: GlyphString, flags: ShapeFlags) -> object:
    """
    Convert the characters in @item into glyphs.

    This is similar to [func@Pango.shape_with_flags], except it takes a
    `PangoItem` instead of separate @item_text and @analysis arguments.
    It also takes @log_attrs, which may be used in implementing text
    transforms.

    Note that the extra attributes in the @analyis that is returned from
    [func@Pango.itemize] have indices that are relative to the entire paragraph,
    so you do not pass the full paragraph text as @paragraph_text, you need
    to subtract the item offset from their indices before calling
    [func@Pango.shape_with_flags].
    """
    ...

def shape_with_flags(item_text: str, item_length: int, paragraph_text: _T.Optional[str], paragraph_length: int, analysis: Analysis, glyphs: GlyphString, flags: ShapeFlags) -> object:
    """
    Convert the characters in @text into glyphs.

    Given a segment of text and the corresponding `PangoAnalysis` structure
    returned from [func@Pango.itemize], convert the characters into glyphs.
    You may also pass in only a substring of the item from [func@Pango.itemize].

    This is similar to [func@Pango.shape_full], except it also takes flags
    that can influence the shaping process.

    Note that the extra attributes in the @analyis that is returned from
    [func@Pango.itemize] have indices that are relative to the entire paragraph,
    so you do not pass the full paragraph text as @paragraph_text, you need
    to subtract the item offset from their indices before calling
    [func@Pango.shape_with_flags].
    """
    ...

def skip_space(pos: str) -> bool:
    """
    Skips 0 or more characters of white space.
    """
    ...

def split_file_list(str: str) -> object:
    """
    Splits a %G_SEARCHPATH_SEPARATOR-separated list of files, stripping
    white space and substituting ~/ with $HOME/.
    """
    ...

def tailor_break(text: str, length: int, analysis: Analysis, offset: int, attrs: object, attrs_len: int) -> object:
    """
    Apply language-specific tailoring to the breaks in @attrs.

    The line breaks are assumed to have been produced by [func@Pango.default_break].

    If @offset is not -1, it is used to apply attributes from @analysis that are
    relevant to line breaking.

    Note that it is better to pass -1 for @offset and use [func@Pango.attr_break]
    to apply attributes to the whole paragraph.
    """
    ...

def trim_string(str: str) -> str:
    """
    Trims leading and trailing whitespace from a string.
    """
    ...

def unichar_direction(ch: str) -> Direction:
    """
    Determines the inherent direction of a character.

    The inherent direction is either `PANGO_DIRECTION_LTR`, `PANGO_DIRECTION_RTL`,
    or `PANGO_DIRECTION_NEUTRAL`.

    This function is useful to categorize characters into left-to-right
    letters, right-to-left letters, and everything else. If full Unicode
    bidirectional type of a character is needed, [func@Pango.BidiType.for_unichar]
    can be used instead.
    """
    ...

def units_from_double(d: float) -> int:
    """
    Converts a floating-point number to Pango units.

    The conversion is done by multiplying @d by %PANGO_SCALE and
    rounding the result to nearest integer.
    """
    ...

def units_to_double(i: int) -> float:
    """
    Converts a number in Pango units to floating-point.

    The conversion is done by dividing @i by %PANGO_SCALE.
    """
    ...

def version() -> int:
    """
    Returns the encoded version of Pango available at run-time.

    This is similar to the macro %PANGO_VERSION except that the macro
    returns the encoded version available at compile-time. A version
    number can be encoded into an integer using PANGO_VERSION_ENCODE().
    """
    ...

def version_check(required_major: int, required_minor: int, required_micro: int) -> str:
    """
    Checks that the Pango library in use is compatible with the
    given version.

    Generally you would pass in the constants %PANGO_VERSION_MAJOR,
    %PANGO_VERSION_MINOR, %PANGO_VERSION_MICRO as the three arguments
    to this function; that produces a check that the library in use at
    run-time is compatible with the version of Pango the application or
    module was compiled against.

    Compatibility is defined by two things: first the version
    of the running library is newer than the version
    @required_major.required_minor.@required_micro. Second
    the running library must be binary compatible with the
    version @required_major.required_minor.@required_micro
    (same major version.)

    For compile-time version checking use PANGO_VERSION_CHECK().
    """
    ...

def version_string() -> str:
    """
    Returns the version of Pango available at run-time.

    This is similar to the macro %PANGO_VERSION_STRING except that the
    macro returns the version available at compile-time.
    """
    ...

class Context(GObject.Object):
    """
    A `PangoContext` stores global information used to control the
    itemization process.

    The information stored by `PangoContext` includes the fontmap used
    to look up fonts, and default values such as the default language,
    default gravity, or default font.

    To obtain a `PangoContext`, use [method@Pango.FontMap.create_context].
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Context:
        """
        Creates a new `PangoContext` initialized to default values.

        This function is not particularly useful as it should always
        be followed by a [method@Pango.Context.set_font_map] call, and the
        function [method@Pango.FontMap.create_context] does these two steps
        together and hence users are recommended to use that.

        If you are using Pango as part of a higher-level system,
        that system may have it's own way of create a `PangoContext`.
        For instance, the GTK toolkit has, among others,
        `gtk_widget_get_pango_context()`. Use those instead.
        """
        ...

    def changed(self) -> object:
        """
        Forces a change in the context, which will cause any `PangoLayout`
        using this context to re-layout.

        This function is only useful when implementing a new backend
        for Pango, something applications won't do. Backends should
        call this function if they have attached extra data to the context
        and such data is changed.
        """
        ...

    def get_base_dir(self) -> Direction:
        """
        Retrieves the base direction for the context.

        See [method@Pango.Context.set_base_dir].
        """
        ...

    def get_base_gravity(self) -> Gravity:
        """
        Retrieves the base gravity for the context.

        See [method@Pango.Context.set_base_gravity].
        """
        ...

    def get_font_description(self) -> FontDescription:
        """
        Retrieve the default font description for the context.
        """
        ...

    def get_font_map(self) -> FontMap:
        """
        Gets the `PangoFontMap` used to look up fonts for this context.
        """
        ...

    def get_gravity(self) -> Gravity:
        """
        Retrieves the gravity for the context.

        This is similar to [method@Pango.Context.get_base_gravity],
        except for when the base gravity is %PANGO_GRAVITY_AUTO for
        which [func@Pango.Gravity.get_for_matrix] is used to return the
        gravity from the current context matrix.
        """
        ...

    def get_gravity_hint(self) -> GravityHint:
        """
        Retrieves the gravity hint for the context.

        See [method@Pango.Context.set_gravity_hint] for details.
        """
        ...

    def get_language(self) -> Language:
        """
        Retrieves the global language tag for the context.
        """
        ...

    def get_matrix(self) -> Matrix:
        """
        Gets the transformation matrix that will be applied when
        rendering with this context.

        See [method@Pango.Context.set_matrix].
        """
        ...

    def get_metrics(self, desc: _T.Optional[FontDescription], language: _T.Optional[Language]) -> FontMetrics:
        """
        Get overall metric information for a particular font description.

        Since the metrics may be substantially different for different scripts,
        a language tag can be provided to indicate that the metrics should be
        retrieved that correspond to the script(s) used by that language.

        The `PangoFontDescription` is interpreted in the same way as by [func@itemize],
        and the family name may be a comma separated list of names. If characters
        from multiple of these families would be used to render the string, then
        the returned fonts would be a composite of the metrics for the fonts loaded
        for the individual families.
        """
        ...

    def get_round_glyph_positions(self) -> bool:
        """
        Returns whether font rendering with this context should
        round glyph positions and widths.
        """
        ...

    def get_serial(self) -> int:
        """
        Returns the current serial number of @context.

        The serial number is initialized to an small number larger than zero
        when a new context is created and is increased whenever the context
        is changed using any of the setter functions, or the `PangoFontMap` it
        uses to find fonts has changed. The serial may wrap, but will never
        have the value 0. Since it can wrap, never compare it with "less than",
        always use "not equals".

        This can be used to automatically detect changes to a `PangoContext`,
        and is only useful when implementing objects that need update when their
        `PangoContext` changes, like `PangoLayout`.
        """
        ...

    def list_families(self, families: object, n_families: int) -> object:
        """
        List all families for a context.
        """
        ...

    def load_font(self, desc: FontDescription) -> Font:
        """
        Loads the font in one of the fontmaps in the context
        that is the closest match for @desc.
        """
        ...

    def load_fontset(self, desc: FontDescription, language: Language) -> Fontset:
        """
        Load a set of fonts in the context that can be used to render
        a font matching @desc.
        """
        ...

    def set_base_dir(self, direction: Direction) -> object:
        """
        Sets the base direction for the context.

        The base direction is used in applying the Unicode bidirectional
        algorithm; if the @direction is %PANGO_DIRECTION_LTR or
        %PANGO_DIRECTION_RTL, then the value will be used as the paragraph
        direction in the Unicode bidirectional algorithm. A value of
        %PANGO_DIRECTION_WEAK_LTR or %PANGO_DIRECTION_WEAK_RTL is used only
        for paragraphs that do not contain any strong characters themselves.
        """
        ...

    def set_base_gravity(self, gravity: Gravity) -> object:
        """
        Sets the base gravity for the context.

        The base gravity is used in laying vertical text out.
        """
        ...

    def set_font_description(self, desc: FontDescription) -> object:
        """
        Set the default font description for the context
        """
        ...

    def set_font_map(self, font_map: FontMap) -> object:
        """
        Sets the font map to be searched when fonts are looked-up
        in this context.

        This is only for internal use by Pango backends, a `PangoContext`
        obtained via one of the recommended methods should already have a
        suitable font map.
        """
        ...

    def set_gravity_hint(self, hint: GravityHint) -> object:
        """
        Sets the gravity hint for the context.

        The gravity hint is used in laying vertical text out, and
        is only relevant if gravity of the context as returned by
        [method@Pango.Context.get_gravity] is set to %PANGO_GRAVITY_EAST
        or %PANGO_GRAVITY_WEST.
        """
        ...

    def set_language(self, language: Language) -> object:
        """
        Sets the global language tag for the context.

        The default language for the locale of the running process
        can be found using [func@Pango.Language.get_default].
        """
        ...

    def set_matrix(self, matrix: _T.Optional[Matrix]) -> object:
        """
        Sets the transformation matrix that will be applied when rendering
        with this context.

        Note that reported metrics are in the user space coordinates before
        the application of the matrix, not device-space coordinates after the
        application of the matrix. So, they don't scale with the matrix, though
        they may change slightly for different matrices, depending on how the
        text is fit to the pixel grid.
        """
        ...

    def set_round_glyph_positions(self, round_positions: bool) -> object:
        """
        Sets whether font rendering with this context should
        round glyph positions and widths to integral positions,
        in device units.

        This is useful when the renderer can't handle subpixel
        positioning of glyphs.

        The default value is to round glyph positions, to remain
        compatible with previous Pango behavior.
        """
        ...


    ...

class Coverage(GObject.Object):
    """
    A `PangoCoverage` structure is a map from Unicode characters
    to [enum@Pango.CoverageLevel] values.

    It is often necessary in Pango to determine if a particular
    font can represent a particular character, and also how well
    it can represent that character. The `PangoCoverage` is a data
    structure that is used to represent that information. It is an
    opaque structure with no public fields.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Coverage:
        """
        Create a new `PangoCoverage`
        """
        ...

    def copy(self) -> Coverage:
        """
        Copy an existing `PangoCoverage`.
        """
        ...

    def get(self, index_: int) -> CoverageLevel:
        """
        Determine whether a particular index is covered by @coverage.
        """
        ...

    def max(self, other: Coverage) -> object:
        """
        Set the coverage for each index in @coverage to be the max (better)
        value of the current coverage for the index and the coverage for
        the corresponding index in @other.
        """
        ...

    def ref(self) -> Coverage:
        """
        Increase the reference count on the `PangoCoverage` by one.
        """
        ...

    def set(self, index_: int, level: CoverageLevel) -> object:
        """
        Modify a particular index within @coverage
        """
        ...

    def to_bytes(self, bytes: object, n_bytes: int) -> object:
        """
        Convert a `PangoCoverage` structure into a flat binary format.
        """
        ...

    def unref(self) -> object:
        """
        Decrease the reference count on the `PangoCoverage` by one.

        If the result is zero, free the coverage and all associated memory.
        """
        ...


    ...

class Font(GObject.Object):
    """
    A `PangoFont` is used to represent a font in a
    rendering-system-independent manner.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def describe(self) -> FontDescription:
        """
        Returns a description of the font, with font size set in points.

        Use [method@Pango.Font.describe_with_absolute_size] if you want
        the font size in device units.
        """
        ...

    def describe_with_absolute_size(self) -> FontDescription:
        """
        Returns a description of the font, with absolute font size set
        in device units.

        Use [method@Pango.Font.describe] if you want the font size in points.
        """
        ...

    def get_coverage(self, language: Language) -> Coverage:
        """
        Computes the coverage map for a given font and language tag.
        """
        ...

    def get_face(self) -> FontFace:
        """
        Gets the `PangoFontFace` to which @font belongs.
        """
        ...

    def get_features(self, features: object, len: int, num_features: int) -> object:
        """
        Obtain the OpenType features that are provided by the font.

        These are passed to the rendering system, together with features
        that have been explicitly set via attributes.

        Note that this does not include OpenType features which the
        rendering system enables by default.
        """
        ...

    def get_font_map(self) -> FontMap:
        """
        Gets the font map for which the font was created.

        Note that the font maintains a *weak* reference to
        the font map, so if all references to font map are
        dropped, the font map will be finalized even if there
        are fonts created with the font map that are still alive.
        In that case this function will return %NULL.

        It is the responsibility of the user to ensure that the
        font map is kept alive. In most uses this is not an issue
        as a `PangoContext` holds a reference to the font map.
        """
        ...

    def get_glyph_extents(self, glyph: Glyph, ink_rect: Rectangle, logical_rect: Rectangle) -> object:
        """
        Gets the logical and ink extents of a glyph within a font.

        The coordinate system for each rectangle has its origin at the
        base line and horizontal origin of the character with increasing
        coordinates extending to the right and down. The macros PANGO_ASCENT(),
        PANGO_DESCENT(), PANGO_LBEARING(), and PANGO_RBEARING() can be used to convert
        from the extents rectangle to more traditional font metrics. The units
        of the rectangles are in 1/PANGO_SCALE of a device unit.

        If @font is %NULL, this function gracefully sets some sane values in the
        output variables and returns.
        """
        ...

    def get_hb_font(self) -> HarfBuzz.font_t:
        """
        Get a `hb_font_t` object backing this font.

        Note that the objects returned by this function are cached
        and immutable. If you need to make changes to the `hb_font_t`,
        use [hb_font_create_sub_font()](https://harfbuzz.github.io/harfbuzz-hb-font.html#hb-font-create-sub-font).
        """
        ...

    def get_languages(self) -> object:
        """
        Returns the languages that are supported by @font.

        If the font backend does not provide this information,
        %NULL is returned. For the fontconfig backend, this
        corresponds to the FC_LANG member of the FcPattern.

        The returned array is only valid as long as the font
        and its fontmap are valid.
        """
        ...

    def get_metrics(self, language: _T.Optional[Language]) -> FontMetrics:
        """
        Gets overall metric information for a font.

        Since the metrics may be substantially different for different scripts,
        a language tag can be provided to indicate that the metrics should be
        retrieved that correspond to the script(s) used by that language.

        If @font is %NULL, this function gracefully sets some sane values in the
        output variables and returns.
        """
        ...

    def has_char(self, wc: str) -> bool:
        """
        Returns whether the font provides a glyph for this character.
        """
        ...

    def serialize(self) -> GLib.Bytes:
        """
        Serializes the @font in a way that can be uniquely identified.

        There are no guarantees about the format of the output across different
        versions of Pango.

        The intended use of this function is testing, benchmarking and debugging.
        The format is not meant as a permanent storage format.

        To recreate a font from its serialized form, use [func@Pango.Font.deserialize].
        """
        ...


    ...

class FontFace(GObject.Object):
    """
    A `PangoFontFace` is used to represent a group of fonts with
    the same family, slant, weight, and width, but varying sizes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def describe(self) -> FontDescription:
        """
        Returns a font description that matches the face.

        The resulting font description will have the family, style,
        variant, weight and stretch of the face, but its size field
        will be unset.
        """
        ...

    def get_face_name(self) -> str:
        """
        Gets a name representing the style of this face.

        Note that a font family may contain multiple faces
        with the same name (e.g. a variable and a non-variable
        face for the same style).
        """
        ...

    def get_family(self) -> FontFamily:
        """
        Gets the `PangoFontFamily` that @face belongs to.
        """
        ...

    def is_synthesized(self) -> bool:
        """
        Returns whether a `PangoFontFace` is synthesized.

        This will be the case if the underlying font rendering engine
        creates this face from another face, by shearing, emboldening,
        lightening or modifying it in some other way.
        """
        ...

    def list_sizes(self, sizes: _T.Optional[object], n_sizes: int) -> object:
        """
        List the available sizes for a font.

        This is only applicable to bitmap fonts. For scalable fonts, stores
        %NULL at the location pointed to by @sizes and 0 at the location pointed
        to by @n_sizes. The sizes returned are in Pango units and are sorted
        in ascending order.
        """
        ...


    ...

class FontFamily(GObject.Object):
    """
    A `PangoFontFamily` is used to represent a family of related
    font faces.

    The font faces in a family share a common design, but differ in
    slant, weight, width or other aspects.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_face(self, name: _T.Optional[str]) -> FontFace:
        """
        Gets the `PangoFontFace` of @family with the given name.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the name of the family.

        The name is unique among all fonts for the font backend and can
        be used in a `PangoFontDescription` to specify that a face from
        this family is desired.
        """
        ...

    def is_monospace(self) -> bool:
        """
        A monospace font is a font designed for text display where the the
        characters form a regular grid.

        For Western languages this would
        mean that the advance width of all characters are the same, but
        this categorization also includes Asian fonts which include
        double-width characters: characters that occupy two grid cells.
        g_unichar_iswide() returns a result that indicates whether a
        character is typically double-width in a monospace font.

        The best way to find out the grid-cell size is to call
        [method@Pango.FontMetrics.get_approximate_digit_width], since the
        results of [method@Pango.FontMetrics.get_approximate_char_width] may
        be affected by double-width characters.
        """
        ...

    def is_variable(self) -> bool:
        """
        A variable font is a font which has axes that can be modified to
        produce different faces.

        Such axes are also known as _variations_; see
        [method@Pango.FontDescription.set_variations] for more information.
        """
        ...

    def list_faces(self, faces: object, n_faces: int) -> object:
        """
        Lists the different font faces that make up @family.

        The faces in a family share a common design, but differ in slant, weight,
        width and other aspects.

        Note that the returned faces are not in any particular order, and
        multiple faces may have the same name or characteristics.

        `PangoFontFamily` also implemented the [iface@Gio.ListModel] interface
        for enumerating faces.
        """
        ...


    ...

class FontMap(GObject.Object):
    """
    A `PangoFontMap` represents the set of fonts available for a
    particular rendering system.

    This is a virtual object with implementations being specific to
    particular rendering systems.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def changed(self) -> object:
        """
        Forces a change in the context, which will cause any `PangoContext`
        using this fontmap to change.

        This function is only useful when implementing a new backend
        for Pango, something applications won't do. Backends should
        call this function if they have attached extra data to the
        context and such data is changed.
        """
        ...

    def create_context(self) -> Context:
        """
        Creates a `PangoContext` connected to @fontmap.

        This is equivalent to [ctor@Pango.Context.new] followed by
        [method@Pango.Context.set_font_map].

        If you are using Pango as part of a higher-level system,
        that system may have it's own way of create a `PangoContext`.
        For instance, the GTK toolkit has, among others,
        gtk_widget_get_pango_context(). Use those instead.
        """
        ...

    def get_family(self, name: str) -> FontFamily:
        """
        Gets a font family by name.
        """
        ...

    def get_serial(self) -> int:
        """
        Returns the current serial number of @fontmap.

        The serial number is initialized to an small number larger than zero
        when a new fontmap is created and is increased whenever the fontmap
        is changed. It may wrap, but will never have the value 0. Since it can
        wrap, never compare it with "less than", always use "not equals".

        The fontmap can only be changed using backend-specific API, like changing
        fontmap resolution.

        This can be used to automatically detect changes to a `PangoFontMap`,
        like in `PangoContext`.
        """
        ...

    def list_families(self, families: object, n_families: int) -> object:
        """
        List all families for a fontmap.

        Note that the returned families are not in any particular order.

        `PangoFontMap` also implemented the [iface@Gio.ListModel] interface
        for enumerating families.
        """
        ...

    def load_font(self, context: Context, desc: FontDescription) -> Font:
        """
        Load the font in the fontmap that is the closest match for @desc.
        """
        ...

    def load_fontset(self, context: Context, desc: FontDescription, language: Language) -> Fontset:
        """
        Load a set of fonts in the fontmap that can be used to render
        a font matching @desc.
        """
        ...


    ...

class Fontset(GObject.Object):
    """
    A `PangoFontset` represents a set of `PangoFont` to use when rendering text.

    A `PangoFontset` is the result of resolving a `PangoFontDescription`
    against a particular `PangoContext`. It has operations for finding the
    component font for a particular Unicode character, and for finding a
    composite set of metrics for the entire fontset.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def foreach(self, func: FontsetForeachFunc, data: _T.Optional[object]) -> object:
        """
        Iterates through all the fonts in a fontset, calling @func for
        each one.

        If @func returns %TRUE, that stops the iteration.
        """
        ...

    def get_font(self, wc: int) -> Font:
        """
        Returns the font in the fontset that contains the best
        glyph for a Unicode character.
        """
        ...

    def get_metrics(self) -> FontMetrics:
        """
        Get overall metric information for the fonts in the fontset.
        """
        ...


    ...

class FontsetSimple(Fontset):
    """
    `PangoFontsetSimple` is a implementation of the abstract
    `PangoFontset` base class as an array of fonts.

    When creating a `PangoFontsetSimple`, you have to provide
    the array of fonts that make up the fontset.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, language: Language) -> FontsetSimple:
        """
        Creates a new `PangoFontsetSimple` for the given language.
        """
        ...

    def append(self, font: Font) -> object:
        """
        Adds a font to the fontset.

        The fontset takes ownership of @font.
        """
        ...

    def size(self) -> int:
        """
        Returns the number of fonts in the fontset.
        """
        ...


    ...

class Layout(GObject.Object):
    """
    A `PangoLayout` structure represents an entire paragraph of text.

    While complete access to the layout capabilities of Pango is provided
    using the detailed interfaces for itemization and shaping, using
    that functionality directly involves writing a fairly large amount
    of code. `PangoLayout` provides a high-level driver for formatting
    entire paragraphs of text at once. This includes paragraph-level
    functionality such as line breaking, justification, alignment and
    ellipsization.

    A `PangoLayout` is initialized with a `PangoContext`, UTF-8 string
    and set of attributes for that string. Once that is done, the set of
    formatted lines can be extracted from the object, the layout can be
    rendered, and conversion between logical character positions within
    the layout's text, and the physical position of the resulting glyphs
    can be made.

    There are a number of parameters to adjust the formatting of a
    `PangoLayout`. The following image shows adjustable parameters
    (on the left) and font metrics (on the right):

    <picture>
      <source srcset="layout-dark.png" media="(prefers-color-scheme: dark)">
      <img alt="Pango Layout Parameters" src="layout-light.png">
    </picture>

    The following images demonstrate the effect of alignment and
    justification on the layout of text:

    | | |
    | --- | --- |
    | ![align=left](align-left.png) | ![align=left, justify](align-left-justify.png) |
    | ![align=center](align-center.png) | ![align=center, justify](align-center-justify.png) |
    | ![align=right](align-right.png) | ![align=right, justify](align-right-justify.png) |


    It is possible, as well, to ignore the 2-D setup,
    and simply treat the results of a `PangoLayout` as a list of lines.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, context: Context) -> Layout:
        """
        Create a new `PangoLayout` object with attributes initialized to
        default values for a particular `PangoContext`.
        """
        ...

    def context_changed(self) -> object:
        """
        Forces recomputation of any state in the `PangoLayout` that
        might depend on the layout's context.

        This function should be called if you make changes to the context
        subsequent to creating the layout.
        """
        ...

    def copy(self) -> Layout:
        """
        Creates a deep copy-by-value of the layout.

        The attribute list, tab array, and text from the original layout
        are all copied by value.
        """
        ...

    def get_alignment(self) -> Alignment:
        """
        Gets the alignment for the layout: how partial lines are
        positioned within the horizontal space available.
        """
        ...

    def get_attributes(self) -> AttrList:
        """
        Gets the attribute list for the layout, if any.
        """
        ...

    def get_auto_dir(self) -> bool:
        """
        Gets whether to calculate the base direction for the layout
        according to its contents.

        See [method@Pango.Layout.set_auto_dir].
        """
        ...

    def get_baseline(self) -> int:
        """
        Gets the Y position of baseline of the first line in @layout.
        """
        ...

    def get_caret_pos(self, index_: int, strong_pos: Rectangle, weak_pos: Rectangle) -> object:
        """
        Given an index within a layout, determines the positions that of the
        strong and weak cursors if the insertion point is at that index.

        This is a variant of [method@Pango.Layout.get_cursor_pos] that applies
        font metric information about caret slope and offset to the positions
        it returns.

        <picture>
          <source srcset="caret-metrics-dark.png" media="(prefers-color-scheme: dark)">
          <img alt="Caret metrics" src="caret-metrics-light.png">
        </picture>
        """
        ...

    def get_character_count(self) -> int:
        """
        Returns the number of Unicode characters in the
        the text of @layout.
        """
        ...

    def get_context(self) -> Context:
        """
        Retrieves the `PangoContext` used for this layout.
        """
        ...

    def get_cursor_pos(self, index_: int, strong_pos: Rectangle, weak_pos: Rectangle) -> object:
        """
        Given an index within a layout, determines the positions that of the
        strong and weak cursors if the insertion point is at that index.

        The position of each cursor is stored as a zero-width rectangle
        with the height of the run extents.

        <picture>
          <source srcset="cursor-positions-dark.png" media="(prefers-color-scheme: dark)">
          <img alt="Cursor positions" src="cursor-positions-light.png">
        </picture>

        The strong cursor location is the location where characters of the
        directionality equal to the base direction of the layout are inserted.
        The weak cursor location is the location where characters of the
        directionality opposite to the base direction of the layout are inserted.

        The following example shows text with both a strong and a weak cursor.

        <picture>
          <source srcset="split-cursor-dark.png" media="(prefers-color-scheme: dark)">
          <img alt="Strong and weak cursors" src="split-cursor-light.png">
        </picture>

        The strong cursor has a little arrow pointing to the right, the weak
        cursor to the left. Typing a 'c' in this situation will insert the
        character after the 'b', and typing another Hebrew character, like 'ג',
        will insert it at the end.
        """
        ...

    def get_direction(self, index: int) -> Direction:
        """
        Gets the text direction at the given character position in @layout.
        """
        ...

    def get_ellipsize(self) -> EllipsizeMode:
        """
        Gets the type of ellipsization being performed for @layout.

        See [method@Pango.Layout.set_ellipsize].

        Use [method@Pango.Layout.is_ellipsized] to query whether any
        paragraphs were actually ellipsized.
        """
        ...

    def get_extents(self, ink_rect: Rectangle, logical_rect: Rectangle) -> object:
        """
        Computes the logical and ink extents of @layout.

        Logical extents are usually what you want for positioning things. Note
        that both extents may have non-zero x and y. You may want to use those
        to offset where you render the layout. Not doing that is a very typical
        bug that shows up as right-to-left layouts not being correctly positioned
        in a layout with a set width.

        The extents are given in layout coordinates and in Pango units; layout
        coordinates begin at the top left corner of the layout.
        """
        ...

    def get_font_description(self) -> FontDescription:
        """
        Gets the font description for the layout, if any.
        """
        ...

    def get_height(self) -> int:
        """
        Gets the height of layout used for ellipsization.

        See [method@Pango.Layout.set_height] for details.
        """
        ...

    def get_indent(self) -> int:
        """
        Gets the paragraph indent width in Pango units.

        A negative value indicates a hanging indentation.
        """
        ...

    def get_iter(self) -> LayoutIter:
        """
        Returns an iterator to iterate over the visual extents of the layout.
        """
        ...

    def get_justify(self) -> bool:
        """
        Gets whether each complete line should be stretched to fill the entire
        width of the layout.
        """
        ...

    def get_justify_last_line(self) -> bool:
        """
        Gets whether the last line should be stretched
        to fill the entire width of the layout.
        """
        ...

    def get_line(self, line: int) -> LayoutLine:
        """
        Retrieves a particular line from a `PangoLayout`.

        Use the faster [method@Pango.Layout.get_line_readonly] if you do not
        plan to modify the contents of the line (glyphs, glyph widths, etc.).
        """
        ...

    def get_line_count(self) -> int:
        """
        Retrieves the count of lines for the @layout.
        """
        ...

    def get_line_readonly(self, line: int) -> LayoutLine:
        """
        Retrieves a particular line from a `PangoLayout`.

        This is a faster alternative to [method@Pango.Layout.get_line],
        but the user is not expected to modify the contents of the line
        (glyphs, glyph widths, etc.).
        """
        ...

    def get_line_spacing(self) -> float:
        """
        Gets the line spacing factor of @layout.

        See [method@Pango.Layout.set_line_spacing].
        """
        ...

    def get_lines(self) -> GLib.SList:
        """
        Returns the lines of the @layout as a list.

        Use the faster [method@Pango.Layout.get_lines_readonly] if you do not
        plan to modify the contents of the lines (glyphs, glyph widths, etc.).
        """
        ...

    def get_lines_readonly(self) -> GLib.SList:
        """
        Returns the lines of the @layout as a list.

        This is a faster alternative to [method@Pango.Layout.get_lines],
        but the user is not expected to modify the contents of the lines
        (glyphs, glyph widths, etc.).
        """
        ...

    def get_log_attrs(self, attrs: object, n_attrs: int) -> object:
        """
        Retrieves an array of logical attributes for each character in
        the @layout.
        """
        ...

    def get_log_attrs_readonly(self, n_attrs: int) -> object:
        """
        Retrieves an array of logical attributes for each character in
        the @layout.

        This is a faster alternative to [method@Pango.Layout.get_log_attrs].
        The returned array is part of @layout and must not be modified.
        Modifying the layout will invalidate the returned array.

        The number of attributes returned in @n_attrs will be one more
        than the total number of characters in the layout, since there
        need to be attributes corresponding to both the position before
        the first character and the position after the last character.
        """
        ...

    def get_pixel_extents(self, ink_rect: Rectangle, logical_rect: Rectangle) -> object:
        """
        Computes the logical and ink extents of @layout in device units.

        This function just calls [method@Pango.Layout.get_extents] followed by
        two [func@extents_to_pixels] calls, rounding @ink_rect and @logical_rect
        such that the rounded rectangles fully contain the unrounded one (that is,
        passes them as first argument to [func@Pango.extents_to_pixels]).
        """
        ...

    def get_pixel_size(self, width: int, height: int) -> object:
        """
        Determines the logical width and height of a `PangoLayout` in device
        units.

        [method@Pango.Layout.get_size] returns the width and height
        scaled by %PANGO_SCALE. This is simply a convenience function
        around [method@Pango.Layout.get_pixel_extents].
        """
        ...

    def get_serial(self) -> int:
        """
        Returns the current serial number of @layout.

        The serial number is initialized to an small number larger than zero
        when a new layout is created and is increased whenever the layout is
        changed using any of the setter functions, or the `PangoContext` it
        uses has changed. The serial may wrap, but will never have the value 0.
        Since it can wrap, never compare it with "less than", always use "not equals".

        This can be used to automatically detect changes to a `PangoLayout`,
        and is useful for example to decide whether a layout needs redrawing.
        To force the serial to be increased, use
        [method@Pango.Layout.context_changed].
        """
        ...

    def get_single_paragraph_mode(self) -> bool:
        """
        Obtains whether @layout is in single paragraph mode.

        See [method@Pango.Layout.set_single_paragraph_mode].
        """
        ...

    def get_size(self, width: int, height: int) -> object:
        """
        Determines the logical width and height of a `PangoLayout` in Pango
        units.

        This is simply a convenience function around [method@Pango.Layout.get_extents].
        """
        ...

    def get_spacing(self) -> int:
        """
        Gets the amount of spacing between the lines of the layout.
        """
        ...

    def get_tabs(self) -> TabArray:
        """
        Gets the current `PangoTabArray` used by this layout.

        If no `PangoTabArray` has been set, then the default tabs are
        in use and %NULL is returned. Default tabs are every 8 spaces.

        The return value should be freed with [method@Pango.TabArray.free].
        """
        ...

    def get_text(self) -> str:
        """
        Gets the text in the layout.

        The returned text should not be freed or modified.
        """
        ...

    def get_unknown_glyphs_count(self) -> int:
        """
        Counts the number of unknown glyphs in @layout.

        This function can be used to determine if there are any fonts
        available to render all characters in a certain string, or when
        used in combination with %PANGO_ATTR_FALLBACK, to check if a
        certain font supports all the characters in the string.
        """
        ...

    def get_width(self) -> int:
        """
        Gets the width to which the lines of the `PangoLayout` should wrap.
        """
        ...

    def get_wrap(self) -> WrapMode:
        """
        Gets the wrap mode for the layout.

        Use [method@Pango.Layout.is_wrapped] to query whether
        any paragraphs were actually wrapped.
        """
        ...

    def index_to_line_x(self, index_: int, trailing: bool, line: int, x_pos: int) -> object:
        """
        Converts from byte @index_ within the @layout to line and X position.

        The X position is measured from the left edge of the line.
        """
        ...

    def index_to_pos(self, index_: int, pos: Rectangle) -> object:
        """
        Converts from an index within a `PangoLayout` to the onscreen position
        corresponding to the grapheme at that index.

        The return value is represented as rectangle. Note that `pos->x` is
        always the leading edge of the grapheme and `pos->x + pos->width` the
        trailing edge of the grapheme. If the directionality of the grapheme
        is right-to-left, then `pos->width` will be negative.
        """
        ...

    def is_ellipsized(self) -> bool:
        """
        Queries whether the layout had to ellipsize any paragraphs.

        This returns %TRUE if the ellipsization mode for @layout
        is not %PANGO_ELLIPSIZE_NONE, a positive width is set on @layout,
        and there are paragraphs exceeding that width that have to be
        ellipsized.
        """
        ...

    def is_wrapped(self) -> bool:
        """
        Queries whether the layout had to wrap any paragraphs.

        This returns %TRUE if a positive width is set on @layout,
        ellipsization mode of @layout is set to %PANGO_ELLIPSIZE_NONE,
        and there are paragraphs exceeding the layout width that have
        to be wrapped.
        """
        ...

    def move_cursor_visually(self, strong: bool, old_index: int, old_trailing: int, direction: int, new_index: int, new_trailing: int) -> object:
        """
        Computes a new cursor position from an old position and a direction.

        If @direction is positive, then the new position will cause the strong
        or weak cursor to be displayed one position to right of where it was
        with the old cursor position. If @direction is negative, it will be
        moved to the left.

        In the presence of bidirectional text, the correspondence between
        logical and visual order will depend on the direction of the current
        run, and there may be jumps when the cursor is moved off of the end
        of a run.

        Motion here is in cursor positions, not in characters, so a single
        call to this function may move the cursor over multiple characters
        when multiple characters combine to form a single grapheme.
        """
        ...

    def serialize(self, flags: LayoutSerializeFlags) -> GLib.Bytes:
        """
        Serializes the @layout for later deserialization via [func@Pango.Layout.deserialize].

        There are no guarantees about the format of the output across different
        versions of Pango and [func@Pango.Layout.deserialize] will reject data
        that it cannot parse.

        The intended use of this function is testing, benchmarking and debugging.
        The format is not meant as a permanent storage format.
        """
        ...

    def set_alignment(self, alignment: Alignment) -> object:
        """
        Sets the alignment for the layout: how partial lines are
        positioned within the horizontal space available.

        The default alignment is %PANGO_ALIGN_LEFT.
        """
        ...

    def set_attributes(self, attrs: _T.Optional[AttrList]) -> object:
        """
        Sets the text attributes for a layout object.

        References @attrs, so the caller can unref its reference.
        """
        ...

    def set_auto_dir(self, auto_dir: bool) -> object:
        """
        Sets whether to calculate the base direction
        for the layout according to its contents.

        When this flag is on (the default), then paragraphs in @layout that
        begin with strong right-to-left characters (Arabic and Hebrew principally),
        will have right-to-left layout, paragraphs with letters from other scripts
        will have left-to-right layout. Paragraphs with only neutral characters
        get their direction from the surrounding paragraphs.

        When %FALSE, the choice between left-to-right and right-to-left
        layout is done according to the base direction of the layout's
        `PangoContext`. (See [method@Pango.Context.set_base_dir]).

        When the auto-computed direction of a paragraph differs from the
        base direction of the context, the interpretation of
        %PANGO_ALIGN_LEFT and %PANGO_ALIGN_RIGHT are swapped.
        """
        ...

    def set_ellipsize(self, ellipsize: EllipsizeMode) -> object:
        """
        Sets the type of ellipsization being performed for @layout.

        Depending on the ellipsization mode @ellipsize text is
        removed from the start, middle, or end of text so they
        fit within the width and height of layout set with
        [method@Pango.Layout.set_width] and [method@Pango.Layout.set_height].

        If the layout contains characters such as newlines that
        force it to be layed out in multiple paragraphs, then whether
        each paragraph is ellipsized separately or the entire layout
        is ellipsized as a whole depends on the set height of the layout.

        The default value is %PANGO_ELLIPSIZE_NONE.

        See [method@Pango.Layout.set_height] for details.
        """
        ...

    def set_font_description(self, desc: _T.Optional[FontDescription]) -> object:
        """
        Sets the default font description for the layout.

        If no font description is set on the layout, the
        font description from the layout's context is used.
        """
        ...

    def set_height(self, height: int) -> object:
        """
        Sets the height to which the `PangoLayout` should be ellipsized at.

        There are two different behaviors, based on whether @height is positive
        or negative.

        If @height is positive, it will be the maximum height of the layout. Only
        lines would be shown that would fit, and if there is any text omitted,
        an ellipsis added. At least one line is included in each paragraph regardless
        of how small the height value is. A value of zero will render exactly one
        line for the entire layout.

        If @height is negative, it will be the (negative of) maximum number of lines
        per paragraph. That is, the total number of lines shown may well be more than
        this value if the layout contains multiple paragraphs of text.
        The default value of -1 means that the first line of each paragraph is ellipsized.
        This behavior may be changed in the future to act per layout instead of per
        paragraph. File a bug against pango at
        [https://gitlab.gnome.org/gnome/pango](https://gitlab.gnome.org/gnome/pango)
        if your code relies on this behavior.

        Height setting only has effect if a positive width is set on
        @layout and ellipsization mode of @layout is not %PANGO_ELLIPSIZE_NONE.
        The behavior is undefined if a height other than -1 is set and
        ellipsization mode is set to %PANGO_ELLIPSIZE_NONE, and may change in the
        future.
        """
        ...

    def set_indent(self, indent: int) -> object:
        """
        Sets the width in Pango units to indent each paragraph.

        A negative value of @indent will produce a hanging indentation.
        That is, the first line will have the full width, and subsequent
        lines will be indented by the absolute value of @indent.

        The indent setting is ignored if layout alignment is set to
        %PANGO_ALIGN_CENTER.

        The default value is 0.
        """
        ...

    def set_justify(self, justify: bool) -> object:
        """
        Sets whether each complete line should be stretched to fill the
        entire width of the layout.

        Stretching is typically done by adding whitespace, but for some scripts
        (such as Arabic), the justification may be done in more complex ways,
        like extending the characters.

        Note that this setting is not implemented and so is ignored in
        Pango older than 1.18.

        Note that tabs and justification conflict with each other:
        Justification will move content away from its tab-aligned
        positions.

        The default value is %FALSE.

        Also see [method@Pango.Layout.set_justify_last_line].
        """
        ...

    def set_justify_last_line(self, justify: bool) -> object:
        """
        Sets whether the last line should be stretched to fill the
        entire width of the layout.

        This only has an effect if [method@Pango.Layout.set_justify] has
        been called as well.

        The default value is %FALSE.
        """
        ...

    def set_line_spacing(self, factor: float) -> object:
        """
        Sets a factor for line spacing.

        Typical values are: 0, 1, 1.5, 2. The default values is 0.

        If @factor is non-zero, lines are placed so that

            baseline2 = baseline1 + factor * height2

        where height2 is the line height of the second line
        (as determined by the font(s)). In this case, the spacing
        set with [method@Pango.Layout.set_spacing] is ignored.

        If @factor is zero (the default), spacing is applied as before.

        Note: for semantics that are closer to the CSS line-height
        property, see [func@Pango.attr_line_height_new].
        """
        ...

    def set_markup(self, markup: str, length: int) -> object:
        """
        Sets the layout text and attribute list from marked-up text.

        See [Pango Markup](pango_markup.html)).

        Replaces the current text and attribute list.

        This is the same as [method@Pango.Layout.set_markup_with_accel],
        but the markup text isn't scanned for accelerators.
        """
        ...

    def set_markup_with_accel(self, markup: str, length: int, accel_marker: str, accel_char: str) -> object:
        """
        Sets the layout text and attribute list from marked-up text.

        See [Pango Markup](pango_markup.html)).

        Replaces the current text and attribute list.

        If @accel_marker is nonzero, the given character will mark the
        character following it as an accelerator. For example, @accel_marker
        might be an ampersand or underscore. All characters marked
        as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
        and the first character so marked will be returned in @accel_char.
        Two @accel_marker characters following each other produce a single
        literal @accel_marker character.
        """
        ...

    def set_single_paragraph_mode(self, setting: bool) -> object:
        """
        Sets the single paragraph mode of @layout.

        If @setting is %TRUE, do not treat newlines and similar characters
        as paragraph separators; instead, keep all text in a single paragraph,
        and display a glyph for paragraph separator characters. Used when
        you want to allow editing of newlines on a single text line.

        The default value is %FALSE.
        """
        ...

    def set_spacing(self, spacing: int) -> object:
        """
        Sets the amount of spacing in Pango units between
        the lines of the layout.

        When placing lines with spacing, Pango arranges things so that

            line2.top = line1.bottom + spacing

        The default value is 0.

        Note: Since 1.44, Pango is using the line height (as determined
        by the font) for placing lines when the line spacing factor is set
        to a non-zero value with [method@Pango.Layout.set_line_spacing].
        In that case, the @spacing set with this function is ignored.

        Note: for semantics that are closer to the CSS line-height
        property, see [func@Pango.attr_line_height_new].
        """
        ...

    def set_tabs(self, tabs: _T.Optional[TabArray]) -> object:
        """
        Sets the tabs to use for @layout, overriding the default tabs.

        `PangoLayout` will place content at the next tab position
        whenever it meets a Tab character (U+0009).

        By default, tabs are every 8 spaces. If @tabs is %NULL, the
        default tabs are reinstated. @tabs is copied into the layout;
        you must free your copy of @tabs yourself.

        Note that tabs and justification conflict with each other:
        Justification will move content away from its tab-aligned
        positions. The same is true for alignments other than
        %PANGO_ALIGN_LEFT.
        """
        ...

    def set_text(self, text: str, length: int) -> object:
        """
        Sets the text of the layout.

        This function validates @text and renders invalid UTF-8
        with a placeholder glyph.

        Note that if you have used [method@Pango.Layout.set_markup] or
        [method@Pango.Layout.set_markup_with_accel] on @layout before, you
        may want to call [method@Pango.Layout.set_attributes] to clear the
        attributes set on the layout from the markup as this function does
        not clear attributes.
        """
        ...

    def set_width(self, width: int) -> object:
        """
        Sets the width to which the lines of the `PangoLayout` should wrap or
        ellipsized.

        The default value is -1: no width set.
        """
        ...

    def set_wrap(self, wrap: WrapMode) -> object:
        """
        Sets the wrap mode.

        The wrap mode only has effect if a width is set on the layout
        with [method@Pango.Layout.set_width]. To turn off wrapping,
        set the width to -1.

        The default value is %PANGO_WRAP_WORD.
        """
        ...

    def write_to_file(self, flags: LayoutSerializeFlags, filename: str) -> bool:
        """
        A convenience method to serialize a layout to a file.

        It is equivalent to calling [method@Pango.Layout.serialize]
        followed by [func@GLib.file_set_contents].

        See those two functions for details on the arguments.

        It is mostly intended for use inside a debugger to quickly dump
        a layout to a file for later inspection.
        """
        ...

    def xy_to_index(self, x: int, y: int, index_: int, trailing: int) -> bool:
        """
        Converts from X and Y position within a layout to the byte index to the
        character at that logical position.

        If the Y position is not inside the layout, the closest position is
        chosen (the position will be clamped inside the layout). If the X position
        is not within the layout, then the start or the end of the line is
        chosen as described for [method@Pango.LayoutLine.x_to_index]. If either
        the X or Y positions were not inside the layout, then the function returns
        %FALSE; on an exact hit, it returns %TRUE.
        """
        ...


    ...

class Renderer(GObject.Object):
    """
    `PangoRenderer` is a base class for objects that can render text
    provided as `PangoGlyphString` or `PangoLayout`.

    By subclassing `PangoRenderer` and overriding operations such as
    @draw_glyphs and @draw_rectangle, renderers for particular font
    backends and destinations can be created.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def activate(self) -> object:
        """
        Does initial setup before rendering operations on @renderer.

        [method@Pango.Renderer.deactivate] should be called when done drawing.
        Calls such as [method@Pango.Renderer.draw_layout] automatically
        activate the layout before drawing on it.

        Calls to [method@Pango.Renderer.activate] and
        [method@Pango.Renderer.deactivate] can be nested and the
        renderer will only be initialized and deinitialized once.
        """
        ...

    def deactivate(self) -> object:
        """
        Cleans up after rendering operations on @renderer.

        See docs for [method@Pango.Renderer.activate].
        """
        ...

    def draw_error_underline(self, x: int, y: int, width: int, height: int) -> object:
        """
        Draw a squiggly line that approximately covers the given rectangle
        in the style of an underline used to indicate a spelling error.

        The width of the underline is rounded to an integer number
        of up/down segments and the resulting rectangle is centered
        in the original rectangle.

        This should be called while @renderer is already active.
        Use [method@Pango.Renderer.activate] to activate a renderer.
        """
        ...

    def draw_glyph(self, font: Font, glyph: Glyph, x: float, y: float) -> object:
        """
        Draws a single glyph with coordinates in device space.
        """
        ...

    def draw_glyph_item(self, text: _T.Optional[str], glyph_item: GlyphItem, x: int, y: int) -> object:
        """
        Draws the glyphs in @glyph_item with the specified `PangoRenderer`,
        embedding the text associated with the glyphs in the output if the
        output format supports it.

        This is useful for rendering text in PDF.

        Note that this method does not handle attributes in @glyph_item.
        If you want colors, shapes and lines handled automatically according
        to those attributes, you need to use pango_renderer_draw_layout_line()
        or pango_renderer_draw_layout().

        Note that @text is the start of the text for layout, which is then
        indexed by `glyph_item->item->offset`.

        If @text is %NULL, this simply calls [method@Pango.Renderer.draw_glyphs].

        The default implementation of this method simply falls back to
        [method@Pango.Renderer.draw_glyphs].
        """
        ...

    def draw_glyphs(self, font: Font, glyphs: GlyphString, x: int, y: int) -> object:
        """
        Draws the glyphs in @glyphs with the specified `PangoRenderer`.
        """
        ...

    def draw_layout(self, layout: Layout, x: int, y: int) -> object:
        """
        Draws @layout with the specified `PangoRenderer`.

        This is equivalent to drawing the lines of the layout, at their
        respective positions relative to @x, @y.
        """
        ...

    def draw_layout_line(self, line: LayoutLine, x: int, y: int) -> object:
        """
        Draws @line with the specified `PangoRenderer`.

        This draws the glyph items that make up the line, as well as
        shapes, backgrounds and lines that are specified by the attributes
        of those items.
        """
        ...

    def draw_rectangle(self, part: RenderPart, x: int, y: int, width: int, height: int) -> object:
        """
        Draws an axis-aligned rectangle in user space coordinates with the
        specified `PangoRenderer`.

        This should be called while @renderer is already active.
        Use [method@Pango.Renderer.activate] to activate a renderer.
        """
        ...

    def draw_trapezoid(self, part: RenderPart, y1_: float, x11: float, x21: float, y2: float, x12: float, x22: float) -> object:
        """
        Draws a trapezoid with the parallel sides aligned with the X axis
        using the given `PangoRenderer`; coordinates are in device space.
        """
        ...

    def get_alpha(self, part: RenderPart) -> int:
        """
        Gets the current alpha for the specified part.
        """
        ...

    def get_color(self, part: RenderPart) -> Color:
        """
        Gets the current rendering color for the specified part.
        """
        ...

    def get_layout(self) -> Layout:
        """
        Gets the layout currently being rendered using @renderer.

        Calling this function only makes sense from inside a subclass's
        methods, like in its draw_shape vfunc, for example.

        The returned layout should not be modified while still being
        rendered.
        """
        ...

    def get_layout_line(self) -> LayoutLine:
        """
        Gets the layout line currently being rendered using @renderer.

        Calling this function only makes sense from inside a subclass's
        methods, like in its draw_shape vfunc, for example.

        The returned layout line should not be modified while still being
        rendered.
        """
        ...

    def get_matrix(self) -> Matrix:
        """
        Gets the transformation matrix that will be applied when
        rendering.

        See [method@Pango.Renderer.set_matrix].
        """
        ...

    def part_changed(self, part: RenderPart) -> object:
        """
        Informs Pango that the way that the rendering is done
        for @part has changed.

        This should be called if the rendering changes in a way that would
        prevent multiple pieces being joined together into one drawing call.
        For instance, if a subclass of `PangoRenderer` was to add a stipple
        option for drawing underlines, it needs to call

        ```
        pango_renderer_part_changed (render, PANGO_RENDER_PART_UNDERLINE);
        ```

        When the stipple changes or underlines with different stipples
        might be joined together. Pango automatically calls this for
        changes to colors. (See [method@Pango.Renderer.set_color])
        """
        ...

    def set_alpha(self, part: RenderPart, alpha: int) -> object:
        """
        Sets the alpha for part of the rendering.

        Note that the alpha may only be used if a color is
        specified for @part as well.
        """
        ...

    def set_color(self, part: RenderPart, color: _T.Optional[Color]) -> object:
        """
        Sets the color for part of the rendering.

        Also see [method@Pango.Renderer.set_alpha].
        """
        ...

    def set_matrix(self, matrix: _T.Optional[Matrix]) -> object:
        """
        Sets the transformation matrix that will be applied when rendering.
        """
        ...


    ...


