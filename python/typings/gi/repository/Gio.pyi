"""
Stub file for Gio. Autogenerated with gi-stubgen.
"""

import typing as _T  # noqa
from enum import Enum

from gi.repository import GLib, GObject

DBUS_METHOD_INVOCATION_HANDLED = "true"
"""
The value returned by handlers of the signals generated by
the `gdbus-codegen` tool to indicate that a method call has been
handled by an implementation. It is equal to %TRUE, but using
this macro is sometimes more readable.

In code that needs to be backwards-compatible with older GLib,
use %TRUE instead, often written like this:

|[
  g_dbus_method_invocation_return_error (invocation, ...);
  return TRUE;    // handled
]|
"""

DBUS_METHOD_INVOCATION_UNHANDLED = "false"
"""
The value returned by handlers of the signals generated by
the `gdbus-codegen` tool to indicate that a method call has not been
handled by an implementation. It is equal to %FALSE, but using
this macro is sometimes more readable.

In code that needs to be backwards-compatible with older GLib,
use %FALSE instead.
"""

DEBUG_CONTROLLER_EXTENSION_POINT_NAME = "gio-debug-controller"
"""
Extension point for debug control functionality.
See [Extending GIO][extending-gio].
"""

DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME = "gio-desktop-app-info-lookup"
"""
Extension point for default handler to URI association. See
[Extending GIO][extending-gio].
"""

DRIVE_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device"
"""
The string used to obtain a Unix device path with g_drive_get_identifier().
"""

FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete"
"""
A key in the "access" namespace for checking deletion privileges.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.

This attribute will be %TRUE if the user is able to delete the file.
"""

FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute"
"""
A key in the "access" namespace for getting execution privileges.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.

This attribute will be %TRUE if the user is able to execute the file.
"""

FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read"
"""
A key in the "access" namespace for getting read privileges.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.

This attribute will be %TRUE if the user is able to read the file.
"""

FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename"
"""
A key in the "access" namespace for checking renaming privileges.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.

This attribute will be %TRUE if the user is able to rename the file.
"""

FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash"
"""
A key in the "access" namespace for checking trashing privileges.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.

This attribute will be %TRUE if the user is able to move the file to
the trash.
"""

FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write"
"""
A key in the "access" namespace for getting write privileges.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.

This attribute will be %TRUE if the user is able to write to the file.
"""

FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive"
"""
A key in the "dos" namespace for checking if the file's archive flag
is set.

This attribute is %TRUE if the archive flag is set.

This attribute is only available for DOS file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT = "dos::is-mountpoint"
"""
A key in the "dos" namespace for checking if the file is a NTFS mount point
(a volume mount or a junction point).

This attribute is %TRUE if file is a reparse point of type
[IO_REPARSE_TAG_MOUNT_POINT](https://msdn.microsoft.com/en-us/library/dd541667.aspx).

This attribute is only available for DOS file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system"
"""
A key in the "dos" namespace for checking if the file's backup flag
is set.

This attribute is %TRUE if the backup flag is set.

This attribute is only available for DOS file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG = "dos::reparse-point-tag"
"""
A key in the "dos" namespace for getting the file NTFS reparse tag.

This value is 0 for files that are not reparse points.

See the [Reparse Tags](https://msdn.microsoft.com/en-us/library/dd541667.aspx)
page for possible reparse tag values.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_ETAG_VALUE = "etag::value"
"""
A key in the "etag" namespace for getting the value of the file's
entity tag.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free"
"""
A key in the "filesystem" namespace for getting the number of bytes
of free space left on the file system.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
"""

FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly"
"""
A key in the "filesystem" namespace for checking if the file system
is read only.

Is set to %TRUE if the file system is read only.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_FILESYSTEM_REMOTE = "filesystem::remote"
"""
A key in the "filesystem" namespace for checking if the file system
is remote.

Is set to %TRUE if the file system is remote.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size"
"""
A key in the "filesystem" namespace for getting the total size (in
bytes) of the file system, used in g_file_query_filesystem_info().

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
"""

FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type"
"""
A key in the "filesystem" namespace for getting the file system's type.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_FILESYSTEM_USED = "filesystem::used"
"""
A key in the "filesystem" namespace for getting the number of bytes
used by data on the file system.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
"""

FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview"
"""
A key in the "filesystem" namespace for hinting a file manager
application whether it should preview (e.g. thumbnail) files on the
file system.

The value for this key contain a #GFilesystemPreviewType.
"""

FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend"
"""
A key in the "gvfs" namespace that gets the name of the current
GVFS backend in use.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_ID_FILE = "id::file"
"""
A key in the "id" namespace for getting a file identifier.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.

An example use would be during listing files, to avoid recursive
directory scanning.
"""

FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem"
"""
A key in the "id" namespace for getting the file system identifier.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.

An example use would be during drag and drop to see if the source
and target are on the same filesystem (default to move) or not (default
to copy).
"""

FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject"
"""
A key in the "mountable" namespace for checking if a file (of
type G_FILE_TYPE_MOUNTABLE) can be ejected.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount"
"""
A key in the "mountable" namespace for checking if a file (of
type G_FILE_TYPE_MOUNTABLE) is mountable.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll"
"""
A key in the "mountable" namespace for checking if a file (of
type G_FILE_TYPE_MOUNTABLE) can be polled.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start"
"""
A key in the "mountable" namespace for checking if a file (of
type G_FILE_TYPE_MOUNTABLE) can be started.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded"
"""
A key in the "mountable" namespace for checking if a file (of
type G_FILE_TYPE_MOUNTABLE) can be started degraded.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop"
"""
A key in the "mountable" namespace for checking if a file (of
type G_FILE_TYPE_MOUNTABLE) can be stopped.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount"
"""
A key in the "mountable" namespace for checking if a file (of
type G_FILE_TYPE_MOUNTABLE)  is unmountable.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi"
"""
A key in the "mountable" namespace for getting the HAL UDI for the mountable
file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic"
"""
A key in the "mountable" namespace for checking if a file (of
type G_FILE_TYPE_MOUNTABLE) is automatically polled for media.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type"
"""
A key in the "mountable" namespace for getting the #GDriveStartStopType.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device"
"""
A key in the "mountable" namespace for getting the unix device.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file"
"""
A key in the "mountable" namespace for getting the unix device file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_OWNER_GROUP = "owner::group"
"""
A key in the "owner" namespace for getting the file owner's group.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_OWNER_USER = "owner::user"
"""
A key in the "owner" namespace for getting the user name of the
file's owner.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real"
"""
A key in the "owner" namespace for getting the real name of the
user that owns the file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_PREVIEW_ICON = "preview::icon"
"""
A key in the "preview" namespace for getting a #GIcon that can be
used to get preview of the file.

For example, it may be a low resolution thumbnail without metadata.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.

The value for this key should contain a #GIcon.
"""

FILE_ATTRIBUTE_RECENT_MODIFIED = "recent::modified"
"""
A key in the "recent" namespace for getting time, when the metadata for the
file in `recent:///` was last changed.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_INT64.
"""

FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context"
"""
A key in the "selinux" namespace for getting the file's SELinux
context.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.

Note that this attribute is only available if GLib has been built
with SELinux support.
"""

FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size"
"""
A key in the "standard" namespace for getting the amount of disk space
that is consumed by the file (in bytes).

This will generally be larger than the file size (due to block size
overhead) but can occasionally be smaller (for example, for sparse files).

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
"""

FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type"
"""
A key in the "standard" namespace for getting the content type of the file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.

The value for this key should contain a valid content type.
"""

FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name"
"""
A key in the "standard" namespace for getting the copy name of the file.

The copy name is an optional version of the name. If available it's always
in UTF8, and corresponds directly to the original filename (only transcoded to
UTF8). This is useful if you want to copy the file to another filesystem that
might have a different encoding. If the filename is not a valid string in the
encoding selected for the filesystem it is in then the copy name will not be set.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description"
"""
A key in the "standard" namespace for getting the description of the file.

The description is a utf8 string that describes the file, generally containing
the filename, but can also contain further information. Example descriptions
could be "filename (on hostname)" for a remote file or "filename (in trash)"
for a file in the trash. This is useful for instance as the window title
when displaying a directory or for a bookmarks menu.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name"
"""
A key in the "standard" namespace for getting the display name of the file.

A display name is guaranteed to be in UTF-8 and can thus be displayed in
the UI. It is guaranteed to be set on every file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name"
"""
A key in the "standard" namespace for edit name of the file.

An edit name is similar to the display name, but it is meant to be
used when you want to rename the file in the UI. The display name
might contain information you don't want in the new filename (such as
"(invalid unicode)" if the filename was in an invalid encoding).

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type"
"""
A key in the "standard" namespace for getting the fast content type.

The fast content type isn't as reliable as the regular one, as it
only uses the filename to guess it, but it is faster to calculate than the
regular content type.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon"
"""
A key in the "standard" namespace for getting the icon for the file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.

The value for this key should contain a #GIcon.
"""

FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup"
"""
A key in the "standard" namespace for checking if a file is a backup file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden"
"""
A key in the "standard" namespace for checking if a file is hidden.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink"
"""
A key in the "standard" namespace for checking if the file is a symlink.
Typically the actual type is something else, if we followed the symlink
to get the type.

On Windows NTFS mountpoints are considered to be symlinks as well.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual"
"""
A key in the "standard" namespace for checking if a file is virtual.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = "standard::is-volatile"
"""
A key in the "standard" namespace for checking if a file is
volatile. This is meant for opaque, non-POSIX-like backends to
indicate that the URI is not persistent. Applications should look
at %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET for the persistent URI.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_STANDARD_NAME = "standard::name"
"""
A key in the "standard" namespace for getting the name of the file.

The name is the on-disk filename which may not be in any known encoding,
and can thus not be generally displayed as is. It is guaranteed to be set on
every file.

Use %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME if you need to display the
name in a user interface.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
"""

FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size"
"""
A key in the "standard" namespace for getting the file's size (in bytes).

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
"""

FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order"
"""
A key in the "standard" namespace for setting the sort order of a file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_INT32.

An example use would be in file managers, which would use this key
to set the order files are displayed. Files with smaller sort order
should be sorted first, and files without sort order as if sort order
was zero.
"""

FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = "standard::symbolic-icon"
"""
A key in the "standard" namespace for getting the symbolic icon for the file.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.

The value for this key should contain a #GIcon.
"""

FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target"
"""
A key in the "standard" namespace for getting the symlink target, if the file
is a symlink.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
"""

FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri"
"""
A key in the "standard" namespace for getting the target URI for the file, in
the case of %G_FILE_TYPE_SHORTCUT or %G_FILE_TYPE_MOUNTABLE files.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type"
"""
A key in the "standard" namespace for storing file types.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.

The value for this key should contain a #GFileType.
"""

FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed"
"""
A key in the "thumbnail" namespace for checking if thumbnailing failed.

This attribute is %TRUE if thumbnailing failed.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = "thumbnail::is-valid"
"""
A key in the "thumbnail" namespace for checking whether the thumbnail is outdated.

This attribute is %TRUE if the thumbnail is up-to-date with the file it represents,
and %FALSE if the file has been modified since the thumbnail was generated.

If %G_FILE_ATTRIBUTE_THUMBNAILING_FAILED is %TRUE and this attribute is %FALSE,
it indicates that thumbnailing may be attempted again and may succeed.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path"
"""
A key in the "thumbnail" namespace for getting the path to the thumbnail
image.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
"""

FILE_ATTRIBUTE_TIME_ACCESS = "time::access"
"""
A key in the "time" namespace for getting the time the file was last
accessed.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64, and
contains the time since the file was last accessed, in seconds since the
UNIX epoch.
"""

FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec"
"""
A key in the "time" namespace for getting the microseconds of the time
the file was last accessed.

This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_ACCESS.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_TIME_CHANGED = "time::changed"
"""
A key in the "time" namespace for getting the time the file was last
changed.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64,
and contains the time since the file was last changed, in seconds since
the UNIX epoch.

This corresponds to the traditional UNIX ctime.
"""

FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec"
"""
A key in the "time" namespace for getting the microseconds of the time
the file was last changed.

This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_CHANGED.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_TIME_CREATED = "time::created"
"""
A key in the "time" namespace for getting the time the file was created.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64,
and contains the time since the file was created, in seconds since the UNIX
epoch.

This may correspond to Linux `stx_btime`, FreeBSD `st_birthtim`, NetBSD
`st_birthtime` or NTFS `ctime`.
"""

FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec"
"""
A key in the "time" namespace for getting the microseconds of the time
the file was created.

This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_CREATED.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified"
"""
A key in the "time" namespace for getting the time the file was last
modified.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64, and
contains the time since the file was modified, in seconds since the UNIX
epoch.
"""

FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec"
"""
A key in the "time" namespace for getting the microseconds of the time
the file was last modified.

This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_MODIFIED.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date"
"""
A key in the "trash" namespace for getting the deletion date and time
of a file inside the `trash:///` folder.

The format of the returned string is `YYYY-MM-DDThh:mm:ss`.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
"""

FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count"
"""
A key in the "trash" namespace for getting the number of (toplevel) items
that are present in the `trash:///` folder.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_TRASH_ORIG_PATH = "trash::orig-path"
"""
A key in the "trash" namespace for getting the original path of a file
inside the `trash:///` folder before it was trashed.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
"""

FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks"
"""
A key in the "unix" namespace for getting the number of blocks allocated
for the file.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
"""

FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size"
"""
A key in the "unix" namespace for getting the block size for the file
system.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device"
"""
A key in the "unix" namespace for getting the device id of the device the
file is located on (see stat() documentation).

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_UNIX_GID = "unix::gid"
"""
A key in the "unix" namespace for getting the group ID for the file.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_UNIX_INODE = "unix::inode"
"""
A key in the "unix" namespace for getting the inode of the file.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
"""

FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint"
"""
A key in the "unix" namespace for checking if the file represents a
UNIX mount point.

This attribute is %TRUE if the file is a UNIX mount point.

Since 2.58, `/` is considered to be a mount point.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
"""

FILE_ATTRIBUTE_UNIX_MODE = "unix::mode"
"""
A key in the "unix" namespace for getting the mode of the file
(e.g. whether the file is a regular file, symlink, etc).

See the documentation for `lstat()`: this attribute is equivalent to
the `st_mode` member of `struct stat`, and includes both the file type
and permissions.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink"
"""
A key in the "unix" namespace for getting the number of hard links
for a file.

See the documentation for `lstat()`.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev"
"""
A key in the "unix" namespace for getting the device ID for the file
(if it is a special file).

See the documentation for `lstat()`.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

FILE_ATTRIBUTE_UNIX_UID = "unix::uid"
"""
A key in the "unix" namespace for getting the user ID for the file.

This attribute is only available for UNIX file systems.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
"""

MEMORY_MONITOR_EXTENSION_POINT_NAME = "gio-memory-monitor"
"""
Extension point for memory usage monitoring functionality.
See [Extending GIO][extending-gio].
"""

MENU_ATTRIBUTE_ACTION = "action"
"""
The menu item attribute which holds the action name of the item.  Action
names are namespaced with an identifier for the action group in which the
action resides. For example, "win." for window-specific actions and "app."
for application-wide actions.

See also g_menu_model_get_item_attribute() and g_menu_item_set_attribute().
"""

MENU_ATTRIBUTE_ACTION_NAMESPACE = "action-namespace"
"""
The menu item attribute that holds the namespace for all action names in
menus that are linked from this item.
"""

MENU_ATTRIBUTE_ICON = "icon"
"""
The menu item attribute which holds the icon of the item.

The icon is stored in the format returned by g_icon_serialize().

This attribute is intended only to represent 'noun' icons such as
favicons for a webpage, or application icons.  It should not be used
for 'verbs' (ie: stock icons).
"""

MENU_ATTRIBUTE_LABEL = "label"
"""
The menu item attribute which holds the label of the item.
"""

MENU_ATTRIBUTE_TARGET = "target"
"""
The menu item attribute which holds the target with which the item's action
will be activated.

See also g_menu_item_set_action_and_target()
"""

MENU_LINK_SECTION = "section"
"""
The name of the link that associates a menu item with a section.  The linked
menu will usually be shown in place of the menu item, using the item's label
as a header.

See also g_menu_item_set_link().
"""

MENU_LINK_SUBMENU = "submenu"
"""
The name of the link that associates a menu item with a submenu.

See also g_menu_item_set_link().
"""

NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor"

NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor"
"""
Extension point for network status monitoring functionality.
See [Extending GIO][extending-gio].
"""

POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME = "gio-power-profile-monitor"
"""
Extension point for power profile usage monitoring functionality.
See [Extending GIO][extending-gio].
"""

PROXY_EXTENSION_POINT_NAME = "gio-proxy"
"""
Extension point for proxy functionality.
See [Extending GIO][extending-gio].
"""

PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver"
"""
Extension point for proxy resolving functionality.
See [Extending GIO][extending-gio].
"""

SETTINGS_BACKEND_EXTENSION_POINT_NAME = "gsettings-backend"
"""
Extension point for #GSettingsBackend functionality.
"""

TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend"
"""
Extension point for TLS functionality via #GTlsBackend.
See [Extending GIO][extending-gio].
"""

TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2"
"""
The purpose used to verify the client certificate in a TLS connection.
Used by TLS servers.
"""

TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1"
"""
The purpose used to verify the server certificate in a TLS connection. This
is the most common purpose in use. Used by TLS clients.
"""

VFS_EXTENSION_POINT_NAME = "gio-vfs"
"""
Extension point for #GVfs functionality.
See [Extending GIO][extending-gio].
"""

VOLUME_IDENTIFIER_KIND_CLASS = "class"
"""
The string used to obtain the volume class with g_volume_get_identifier().

Known volume classes include `device`, `network`, and `loop`. Other
classes may be added in the future.

This is intended to be used by applications to classify #GVolume
instances into different sections - for example a file manager or
file chooser can use this information to show `network` volumes under
a "Network" heading and `device` volumes under a "Devices" heading.
"""

VOLUME_IDENTIFIER_KIND_HAL_UDI = "hal-udi"
"""
The string used to obtain a Hal UDI with g_volume_get_identifier().
"""

VOLUME_IDENTIFIER_KIND_LABEL = "label"
"""
The string used to obtain a filesystem label with g_volume_get_identifier().
"""

VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount"
"""
The string used to obtain a NFS mount with g_volume_get_identifier().
"""

VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device"
"""
The string used to obtain a Unix device path with g_volume_get_identifier().
"""

VOLUME_IDENTIFIER_KIND_UUID = "uuid"
"""
The string used to obtain a UUID with g_volume_get_identifier().
"""

VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor"
"""
Extension point for volume monitor functionality.
See [Extending GIO][extending-gio].
"""


class BusType(Enum):
    """
    An enumeration for well-known message buses.
    """
    STARTER = -1
    NONE = 0
    SYSTEM = 1
    SESSION = 2

class ConverterResult(Enum):
    """
    Results returned from g_converter_convert().
    """
    ERROR = 0
    CONVERTED = 1
    FINISHED = 2
    FLUSHED = 3

class CredentialsType(Enum):
    """
    Enumeration describing different kinds of native credential types.
    """
    INVALID = 0
    LINUX_UCRED = 1
    FREEBSD_CMSGCRED = 2
    OPENBSD_SOCKPEERCRED = 3
    SOLARIS_UCRED = 4
    NETBSD_UNPCBID = 5
    APPLE_XUCRED = 6
    WIN32_PID = 7

class DBusMessageByteOrder(Enum):
    """
    Enumeration used to describe the byte order of a D-Bus message.
    """
    BIG_ENDIAN = 66
    LITTLE_ENDIAN = 108

class DBusMessageHeaderField(Enum):
    """
    Header fields used in #GDBusMessage.
    """
    INVALID = 0
    PATH = 1
    INTERFACE = 2
    MEMBER = 3
    ERROR_NAME = 4
    REPLY_SERIAL = 5
    DESTINATION = 6
    SENDER = 7
    SIGNATURE = 8
    NUM_UNIX_FDS = 9

class DBusMessageType(Enum):
    """
    Message types used in #GDBusMessage.
    """
    INVALID = 0
    METHOD_CALL = 1
    METHOD_RETURN = 2
    ERROR = 3
    SIGNAL = 4

class DataStreamByteOrder(Enum):
    """
    #GDataStreamByteOrder is used to ensure proper endianness of streaming data sources
    across various machine architectures.
    """
    BIG_ENDIAN = 0
    LITTLE_ENDIAN = 1
    HOST_ENDIAN = 2

class DataStreamNewlineType(Enum):
    """
    #GDataStreamNewlineType is used when checking for or setting the line endings for a given file.
    """
    LF = 0
    CR = 1
    CR_LF = 2
    ANY = 3

class DriveStartStopType(Enum):
    """
    Enumeration describing how a drive can be started/stopped.
    """
    UNKNOWN = 0
    SHUTDOWN = 1
    NETWORK = 2
    MULTIDISK = 3
    PASSWORD = 4

class EmblemOrigin(Enum):
    """
    GEmblemOrigin is used to add information about the origin of the emblem
    to #GEmblem.
    """
    UNKNOWN = 0
    DEVICE = 1
    LIVEMETADATA = 2
    TAG = 3

class FileAttributeStatus(Enum):
    """
    Used by g_file_set_attributes_from_info() when setting file attributes.
    """
    UNSET = 0
    SET = 1
    ERROR_SETTING = 2

class FileAttributeType(Enum):
    """
    The data types for file attributes.
    """
    INVALID = 0
    STRING = 1
    BYTE_STRING = 2
    BOOLEAN = 3
    UINT32 = 4
    INT32 = 5
    UINT64 = 6
    INT64 = 7
    OBJECT = 8
    STRINGV = 9

class FileMonitorEvent(Enum):
    """
    Specifies what type of event a monitor event is.
    """
    CHANGED = 0
    CHANGES_DONE_HINT = 1
    DELETED = 2
    CREATED = 3
    ATTRIBUTE_CHANGED = 4
    PRE_UNMOUNT = 5
    UNMOUNTED = 6
    MOVED = 7
    RENAMED = 8
    MOVED_IN = 9
    MOVED_OUT = 10

class FileType(Enum):
    """
    Indicates the file's on-disk type.

    On Windows systems a file will never have %G_FILE_TYPE_SYMBOLIC_LINK type;
    use #GFileInfo and %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK to determine
    whether a file is a symlink or not. This is due to the fact that NTFS does
    not have a single filesystem object type for symbolic links - it has
    files that symlink to files, and directories that symlink to directories.
    #GFileType enumeration cannot precisely represent this important distinction,
    which is why all Windows symlinks will continue to be reported as
    %G_FILE_TYPE_REGULAR or %G_FILE_TYPE_DIRECTORY.
    """
    UNKNOWN = 0
    REGULAR = 1
    DIRECTORY = 2
    SYMBOLIC_LINK = 3
    SPECIAL = 4
    SHORTCUT = 5
    MOUNTABLE = 6

class FilesystemPreviewType(Enum):
    """
    Indicates a hint from the file system whether files should be
    previewed in a file manager. Returned as the value of the key
    %G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW.
    """
    IF_ALWAYS = 0
    IF_LOCAL = 1
    NEVER = 2

class IOModuleScopeFlags(Enum):
    """
    Flags for use with g_io_module_scope_new().
    """
    NONE = 0
    BLOCK_DUPLICATES = 1

class MemoryMonitorWarningLevel(Enum):
    """
    Memory availability warning levels.

    Note that because new values might be added, it is recommended that applications check
    #GMemoryMonitorWarningLevel as ranges, for example:
    |[<!-- language="C" -->
    if (warning_level > G_MEMORY_MONITOR_WARNING_LEVEL_LOW)
      drop_caches ();
    ]|
    """
    LOW = 50
    MEDIUM = 100
    CRITICAL = 255

class MountOperationResult(Enum):
    """
    #GMountOperationResult is returned as a result when a request for
    information is send by the mounting operation.
    """
    HANDLED = 0
    ABORTED = 1
    UNHANDLED = 2

class NetworkConnectivity(Enum):
    """
    The host's network connectivity state, as reported by #GNetworkMonitor.
    """
    LOCAL = 1
    LIMITED = 2
    PORTAL = 3
    FULL = 4

class NotificationPriority(Enum):
    """
    Priority levels for #GNotifications.
    """
    NORMAL = 0
    LOW = 1
    HIGH = 2
    URGENT = 3

class PasswordSave(Enum):
    """
    #GPasswordSave is used to indicate the lifespan of a saved password.

    #Gvfs stores passwords in the Gnome keyring when this flag allows it
    to, and later retrieves it again from there.
    """
    NEVER = 0
    FOR_SESSION = 1
    PERMANENTLY = 2

class PollableReturn(Enum):
    """
    Return value for various IO operations that signal errors via the
    return value and not necessarily via a #GError.

    This enum exists to be able to return errors to callers without having to
    allocate a #GError. Allocating #GErrors can be quite expensive for
    regularly happening errors like %G_IO_ERROR_WOULD_BLOCK.

    In case of %G_POLLABLE_RETURN_FAILED a #GError should be set for the
    operation to give details about the error that happened.
    """
    FAILED = 0
    OK = 1
    WOULD_BLOCK = -27

class ResolverRecordType(Enum):
    """
    The type of record that g_resolver_lookup_records() or
    g_resolver_lookup_records_async() should retrieve. The records are returned
    as lists of #GVariant tuples. Each record type has different values in
    the variant tuples returned.

    %G_RESOLVER_RECORD_SRV records are returned as variants with the signature
    `(qqqs)`, containing a `guint16` with the priority, a `guint16` with the
    weight, a `guint16` with the port, and a string of the hostname.

    %G_RESOLVER_RECORD_MX records are returned as variants with the signature
    `(qs)`, representing a `guint16` with the preference, and a string containing
    the mail exchanger hostname.

    %G_RESOLVER_RECORD_TXT records are returned as variants with the signature
    `(as)`, representing an array of the strings in the text record. Note: Most TXT
    records only contain a single string, but
    [RFC 1035](https://tools.ietf.org/html/rfc1035#section-3.3.14) does allow a
    record to contain multiple strings. The RFC which defines the interpretation
    of a specific TXT record will likely require concatenation of multiple
    strings if they are present, as with
    [RFC 7208](https://tools.ietf.org/html/rfc7208#section-3.3).

    %G_RESOLVER_RECORD_SOA records are returned as variants with the signature
    `(ssuuuuu)`, representing a string containing the primary name server, a
    string containing the administrator, the serial as a `guint32`, the refresh
    interval as a `guint32`, the retry interval as a `guint32`, the expire timeout
    as a `guint32`, and the TTL as a `guint32`.

    %G_RESOLVER_RECORD_NS records are returned as variants with the signature
    `(s)`, representing a string of the hostname of the name server.
    """
    SRV = 1
    MX = 2
    TXT = 3
    SOA = 4
    NS = 5

class SocketClientEvent(Enum):
    """
    Describes an event occurring on a #GSocketClient. See the
    #GSocketClient::event signal for more details.

    Additional values may be added to this type in the future.
    """
    RESOLVING = 0
    RESOLVED = 1
    CONNECTING = 2
    CONNECTED = 3
    PROXY_NEGOTIATING = 4
    PROXY_NEGOTIATED = 5
    TLS_HANDSHAKING = 6
    TLS_HANDSHAKED = 7
    COMPLETE = 8

class SocketFamily(Enum):
    """
    The protocol family of a #GSocketAddress. (These values are
    identical to the system defines %AF_INET, %AF_INET6 and %AF_UNIX,
    if available.)
    """
    INVALID = 0
    UNIX = 1
    IPV4 = 2
    IPV6 = 10

class SocketListenerEvent(Enum):
    """
    Describes an event occurring on a #GSocketListener. See the
    #GSocketListener::event signal for more details.

    Additional values may be added to this type in the future.
    """
    BINDING = 0
    BOUND = 1
    LISTENING = 2
    LISTENED = 3

class SocketProtocol(Enum):
    """
    A protocol identifier is specified when creating a #GSocket, which is a
    family/type specific identifier, where 0 means the default protocol for
    the particular family/type.

    This enum contains a set of commonly available and used protocols. You
    can also pass any other identifiers handled by the platform in order to
    use protocols not listed here.
    """
    UNKNOWN = -1
    DEFAULT = 0
    TCP = 6
    UDP = 17
    SCTP = 132

class SocketType(Enum):
    """
    Flags used when creating a #GSocket. Some protocols may not implement
    all the socket types.
    """
    INVALID = 0
    STREAM = 1
    DATAGRAM = 2
    SEQPACKET = 3

class TlsAuthenticationMode(Enum):
    """
    The client authentication mode for a #GTlsServerConnection.
    """
    NONE = 0
    REQUESTED = 1
    REQUIRED = 2

class TlsCertificateRequestFlags(Enum):
    """
    Flags for g_tls_interaction_request_certificate(),
    g_tls_interaction_request_certificate_async(), and
    g_tls_interaction_invoke_request_certificate().
    """
    NONE = 0

class TlsChannelBindingType(Enum):
    """
    The type of TLS channel binding data to retrieve from #GTlsConnection
    or #GDtlsConnection, as documented by RFC 5929. The
    [`tls-unique-for-telnet`](https://tools.ietf.org/html/rfc5929#section-5)
    binding type is not currently implemented.
    """
    UNIQUE = 0
    SERVER_END_POINT = 1

class TlsDatabaseLookupFlags(Enum):
    """
    Flags for g_tls_database_lookup_certificate_for_handle(),
    g_tls_database_lookup_certificate_issuer(),
    and g_tls_database_lookup_certificates_issued_by().
    """
    NONE = 0
    KEYPAIR = 1

class TlsInteractionResult(Enum):
    """
    #GTlsInteractionResult is returned by various functions in #GTlsInteraction
    when finishing an interaction request.
    """
    UNHANDLED = 0
    HANDLED = 1
    FAILED = 2

class TlsProtocolVersion(Enum):
    """
    The TLS or DTLS protocol version used by a #GTlsConnection or
    #GDtlsConnection. The integer values of these versions are sequential
    to ensure newer known protocol versions compare greater than older
    known versions. Any known DTLS protocol version will compare greater
    than any SSL or TLS protocol version. The protocol version may be
    %G_TLS_PROTOCOL_VERSION_UNKNOWN if the TLS backend supports a newer
    protocol version that GLib does not yet know about. This means that
    it's possible for an unknown DTLS protocol version to compare less
    than the TLS protocol versions.
    """
    UNKNOWN = 0
    SSL_3_0 = 1
    TLS_1_0 = 2
    TLS_1_1 = 3
    TLS_1_2 = 4
    TLS_1_3 = 5
    DTLS_1_0 = 201
    DTLS_1_2 = 202

class TlsRehandshakeMode(Enum):
    """
    When to allow rehandshaking. See
    g_tls_connection_set_rehandshake_mode().
    """
    NEVER = 0
    SAFELY = 1
    UNSAFELY = 2

class UnixSocketAddressType(Enum):
    """
    The type of name used by a #GUnixSocketAddress.
    %G_UNIX_SOCKET_ADDRESS_PATH indicates a traditional unix domain
    socket bound to a filesystem path. %G_UNIX_SOCKET_ADDRESS_ANONYMOUS
    indicates a socket not bound to any name (eg, a client-side socket,
    or a socket created with socketpair()).

    For abstract sockets, there are two incompatible ways of naming
    them; the man pages suggest using the entire `struct sockaddr_un`
    as the name, padding the unused parts of the %sun_path field with
    zeroes; this corresponds to %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED.
    However, many programs instead just use a portion of %sun_path, and
    pass an appropriate smaller length to bind() or connect(). This is
    %G_UNIX_SOCKET_ADDRESS_ABSTRACT.
    """
    INVALID = 0
    ANONYMOUS = 1
    PATH = 2
    ABSTRACT = 3
    ABSTRACT_PADDED = 4

class ZlibCompressorFormat(Enum):
    """
    Used to select the type of data format to use for #GZlibDecompressor
    and #GZlibCompressor.
    """
    ZLIB = 0
    GZIP = 1
    RAW = 2

class AppInfoCreateFlags(Enum):
    """
    Flags used when creating a #GAppInfo.
    """
    NONE = 0
    NEEDS_TERMINAL = 1
    SUPPORTS_URIS = 2
    SUPPORTS_STARTUP_NOTIFICATION = 4

class ApplicationFlags(Enum):
    """
    Flags used to define the behaviour of a #GApplication.
    """
    FLAGS_NONE = 0
    IS_SERVICE = 1
    IS_LAUNCHER = 2
    HANDLES_OPEN = 4
    HANDLES_COMMAND_LINE = 8
    SEND_ENVIRONMENT = 16
    NON_UNIQUE = 32
    CAN_OVERRIDE_APP_ID = 64
    ALLOW_REPLACEMENT = 128
    REPLACE = 256

class AskPasswordFlags(Enum):
    """
    #GAskPasswordFlags are used to request specific information from the
    user, or to notify the user of their choices in an authentication
    situation.
    """
    NEED_PASSWORD = 1
    NEED_USERNAME = 2
    NEED_DOMAIN = 4
    SAVING_SUPPORTED = 8
    ANONYMOUS_SUPPORTED = 16
    TCRYPT = 32

class BusNameOwnerFlags(Enum):
    """
    Flags used in g_bus_own_name().
    """
    NONE = 0
    ALLOW_REPLACEMENT = 1
    REPLACE = 2
    DO_NOT_QUEUE = 4

class BusNameWatcherFlags(Enum):
    """
    Flags used in g_bus_watch_name().
    """
    NONE = 0
    AUTO_START = 1

class ConverterFlags(Enum):
    """
    Flags used when calling a g_converter_convert().
    """
    NONE = 0
    INPUT_AT_END = 1
    FLUSH = 2

class DBusCallFlags(Enum):
    """
    Flags used in g_dbus_connection_call() and similar APIs.
    """
    NONE = 0
    NO_AUTO_START = 1
    ALLOW_INTERACTIVE_AUTHORIZATION = 2

class DBusCapabilityFlags(Enum):
    """
    Capabilities negotiated with the remote peer.
    """
    NONE = 0
    UNIX_FD_PASSING = 1

class DBusConnectionFlags(Enum):
    """
    Flags used when creating a new #GDBusConnection.
    """
    NONE = 0
    AUTHENTICATION_CLIENT = 1
    AUTHENTICATION_SERVER = 2
    AUTHENTICATION_ALLOW_ANONYMOUS = 4
    MESSAGE_BUS_CONNECTION = 8
    DELAY_MESSAGE_PROCESSING = 16
    AUTHENTICATION_REQUIRE_SAME_USER = 32

class DBusInterfaceSkeletonFlags(Enum):
    """
    Flags describing the behavior of a #GDBusInterfaceSkeleton instance.
    """
    NONE = 0
    HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1

class DBusMessageFlags(Enum):
    """
    Message flags used in #GDBusMessage.
    """
    NONE = 0
    NO_REPLY_EXPECTED = 1
    NO_AUTO_START = 2
    ALLOW_INTERACTIVE_AUTHORIZATION = 4

class DBusObjectManagerClientFlags(Enum):
    """
    Flags used when constructing a #GDBusObjectManagerClient.
    """
    NONE = 0
    DO_NOT_AUTO_START = 1

class DBusPropertyInfoFlags(Enum):
    """
    Flags describing the access control of a D-Bus property.
    """
    NONE = 0
    READABLE = 1
    WRITABLE = 2

class DBusProxyFlags(Enum):
    """
    Flags used when constructing an instance of a #GDBusProxy derived class.
    """
    NONE = 0
    DO_NOT_LOAD_PROPERTIES = 1
    DO_NOT_CONNECT_SIGNALS = 2
    DO_NOT_AUTO_START = 4
    GET_INVALIDATED_PROPERTIES = 8
    DO_NOT_AUTO_START_AT_CONSTRUCTION = 16
    NO_MATCH_RULE = 32

class DBusSendMessageFlags(Enum):
    """
    Flags used when sending #GDBusMessages on a #GDBusConnection.
    """
    NONE = 0
    PRESERVE_SERIAL = 1

class DBusServerFlags(Enum):
    """
    Flags used when creating a #GDBusServer.
    """
    NONE = 0
    RUN_IN_THREAD = 1
    AUTHENTICATION_ALLOW_ANONYMOUS = 2
    AUTHENTICATION_REQUIRE_SAME_USER = 4

class DBusSignalFlags(Enum):
    """
    Flags used when subscribing to signals via g_dbus_connection_signal_subscribe().
    """
    NONE = 0
    NO_MATCH_RULE = 1
    MATCH_ARG0_NAMESPACE = 2
    MATCH_ARG0_PATH = 4

class DBusSubtreeFlags(Enum):
    """
    Flags passed to g_dbus_connection_register_subtree().
    """
    NONE = 0
    DISPATCH_TO_UNENUMERATED_NODES = 1

class DriveStartFlags(Enum):
    """
    Flags used when starting a drive.
    """
    NONE = 0

class FileAttributeInfoFlags(Enum):
    """
    Flags specifying the behaviour of an attribute.
    """
    NONE = 0
    COPY_WITH_FILE = 1
    COPY_WHEN_MOVED = 2

class FileCopyFlags(Enum):
    """
    Flags used when copying or moving files.
    """
    NONE = 0
    OVERWRITE = 1
    BACKUP = 2
    NOFOLLOW_SYMLINKS = 4
    ALL_METADATA = 8
    NO_FALLBACK_FOR_MOVE = 16
    TARGET_DEFAULT_PERMS = 32

class FileCreateFlags(Enum):
    """
    Flags used when an operation may create a file.
    """
    NONE = 0
    PRIVATE = 1
    REPLACE_DESTINATION = 2

class FileMeasureFlags(Enum):
    """
    Flags that can be used with g_file_measure_disk_usage().
    """
    NONE = 0
    REPORT_ANY_ERROR = 2
    APPARENT_SIZE = 4
    NO_XDEV = 8

class FileMonitorFlags(Enum):
    """
    Flags used to set what a #GFileMonitor will watch for.
    """
    NONE = 0
    WATCH_MOUNTS = 1
    SEND_MOVED = 2
    WATCH_HARD_LINKS = 4
    WATCH_MOVES = 8

class FileQueryInfoFlags(Enum):
    """
    Flags used when querying a #GFileInfo.
    """
    NONE = 0
    NOFOLLOW_SYMLINKS = 1

class IOStreamSpliceFlags(Enum):
    """
    GIOStreamSpliceFlags determine how streams should be spliced.
    """
    NONE = 0
    CLOSE_STREAM1 = 1
    CLOSE_STREAM2 = 2
    WAIT_FOR_BOTH = 4

class MountMountFlags(Enum):
    """
    Flags used when mounting a mount.
    """
    NONE = 0

class MountUnmountFlags(Enum):
    """
    Flags used when an unmounting a mount.
    """
    NONE = 0
    FORCE = 1

class OutputStreamSpliceFlags(Enum):
    """
    GOutputStreamSpliceFlags determine how streams should be spliced.
    """
    NONE = 0
    CLOSE_SOURCE = 1
    CLOSE_TARGET = 2

class ResolverNameLookupFlags(Enum):
    """
    Flags to modify lookup behavior.
    """
    DEFAULT = 0
    IPV4_ONLY = 1
    IPV6_ONLY = 2

class ResourceFlags(Enum):
    """
    GResourceFlags give information about a particular file inside a resource
    bundle.
    """
    NONE = 0
    COMPRESSED = 1

class ResourceLookupFlags(Enum):
    """
    GResourceLookupFlags determine how resource path lookups are handled.
    """
    NONE = 0

class SettingsBindFlags(Enum):
    """
    Flags used when creating a binding. These flags determine in which
    direction the binding works. The default is to synchronize in both
    directions.
    """
    DEFAULT = 0
    GET = 1
    SET = 2
    NO_SENSITIVITY = 4
    GET_NO_CHANGES = 8
    INVERT_BOOLEAN = 16

class SocketMsgFlags(Enum):
    """
    Flags used in g_socket_receive_message() and g_socket_send_message().
    The flags listed in the enum are some commonly available flags, but the
    values used for them are the same as on the platform, and any other flags
    are passed in/out as is. So to use a platform specific flag, just include
    the right system header and pass in the flag.
    """
    NONE = 0
    OOB = 1
    PEEK = 2
    DONTROUTE = 4

class SubprocessFlags(Enum):
    """
    Flags to define the behaviour of a #GSubprocess.

    Note that the default for stdin is to redirect from `/dev/null`.  For
    stdout and stderr the default are for them to inherit the
    corresponding descriptor from the calling process.

    Note that it is a programmer error to mix 'incompatible' flags.  For
    example, you may not request both %G_SUBPROCESS_FLAGS_STDOUT_PIPE and
    %G_SUBPROCESS_FLAGS_STDOUT_SILENCE.
    """
    NONE = 0
    STDIN_PIPE = 1
    STDIN_INHERIT = 2
    STDOUT_PIPE = 4
    STDOUT_SILENCE = 8
    STDERR_PIPE = 16
    STDERR_SILENCE = 32
    STDERR_MERGE = 64
    INHERIT_FDS = 128
    SEARCH_PATH_FROM_ENVP = 256

class TestDBusFlags(Enum):
    """
    Flags to define future #GTestDBus behaviour.
    """
    NONE = 0

class TlsCertificateFlags(Enum):
    """
    A set of flags describing TLS certification validation. This can be
    used to describe why a particular certificate was rejected (for
    example, in #GTlsConnection::accept-certificate).

    GLib guarantees that if certificate verification fails, at least one
    flag will be set, but it does not guarantee that all possible flags
    will be set. Accordingly, you may not safely decide to ignore any
    particular type of error. For example, it would be incorrect to mask
    %G_TLS_CERTIFICATE_EXPIRED if you want to allow expired certificates,
    because this could potentially be the only error flag set even if
    other problems exist with the certificate.
    """
    UNKNOWN_CA = 1
    BAD_IDENTITY = 2
    NOT_ACTIVATED = 4
    EXPIRED = 8
    REVOKED = 16
    INSECURE = 32
    GENERIC_ERROR = 64
    VALIDATE_ALL = 127

class TlsDatabaseVerifyFlags(Enum):
    """
    Flags for g_tls_database_verify_chain().
    """
    NONE = 0

class TlsPasswordFlags(Enum):
    """
    Various flags for the password.
    """
    NONE = 0
    RETRY = 2
    MANY_TRIES = 4
    FINAL_TRY = 8
    PKCS11_USER = 16
    PKCS11_SECURITY_OFFICER = 32
    PKCS11_CONTEXT_SPECIFIC = 64


def bus_get(bus_type: BusType, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
    """
    Asynchronously connects to the message bus specified by @bus_type.

    When the operation is finished, @callback will be invoked. You can
    then call g_bus_get_finish() to get the result of the operation.

    This is an asynchronous failable function. See g_bus_get_sync() for
    the synchronous version.
    """
    ...

def bus_get_finish(res: AsyncResult) -> DBusConnection:
    """
    Finishes an operation started with g_bus_get().

    The returned object is a singleton, that is, shared with other
    callers of g_bus_get() and g_bus_get_sync() for @bus_type. In the
    event that you need a private message bus connection, use
    g_dbus_address_get_for_bus_sync() and
    g_dbus_connection_new_for_address() with
    G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT and
    G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION flags.

    Note that the returned #GDBusConnection object will (usually) have
    the #GDBusConnection:exit-on-close property set to %TRUE.
    """
    ...

def bus_get_sync(bus_type: BusType, cancellable: _T.Optional[Cancellable]) -> DBusConnection:
    """
    Synchronously connects to the message bus specified by @bus_type.
    Note that the returned object may shared with other callers,
    e.g. if two separate parts of a process calls this function with
    the same @bus_type, they will share the same object.

    This is a synchronous failable function. See g_bus_get() and
    g_bus_get_finish() for the asynchronous version.

    The returned object is a singleton, that is, shared with other
    callers of g_bus_get() and g_bus_get_sync() for @bus_type. In the
    event that you need a private message bus connection, use
    g_dbus_address_get_for_bus_sync() and
    g_dbus_connection_new_for_address() with
    G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT and
    G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION flags.

    Note that the returned #GDBusConnection object will (usually) have
    the #GDBusConnection:exit-on-close property set to %TRUE.
    """
    ...

def bus_own_name(bus_type: BusType, name: str, flags: BusNameOwnerFlags, bus_acquired_handler: _T.Optional[BusAcquiredCallback], name_acquired_handler: _T.Optional[BusNameAcquiredCallback], name_lost_handler: _T.Optional[BusNameLostCallback], user_data: _T.Optional[object], user_data_free_func: _T.Optional[GLib.DestroyNotify]) -> int:
    """
    Starts acquiring @name on the bus specified by @bus_type and calls
    @name_acquired_handler and @name_lost_handler when the name is
    acquired respectively lost. Callbacks will be invoked in the
    [thread-default main context][g-main-context-push-thread-default]
    of the thread you are calling this function from.

    You are guaranteed that one of the @name_acquired_handler and @name_lost_handler
    callbacks will be invoked after calling this function - there are three
    possible cases:

    - @name_lost_handler with a %NULL connection (if a connection to the bus
      can't be made).

    - @bus_acquired_handler then @name_lost_handler (if the name can't be
      obtained)

    - @bus_acquired_handler then @name_acquired_handler (if the name was
      obtained).

    When you are done owning the name, just call g_bus_unown_name()
    with the owner id this function returns.

    If the name is acquired or lost (for example another application
    could acquire the name if you allow replacement or the application
    currently owning the name exits), the handlers are also invoked.
    If the #GDBusConnection that is used for attempting to own the name
    closes, then @name_lost_handler is invoked since it is no longer
    possible for other processes to access the process.

    You cannot use g_bus_own_name() several times for the same name (unless
    interleaved with calls to g_bus_unown_name()) - only the first call
    will work.

    Another guarantee is that invocations of @name_acquired_handler
    and @name_lost_handler are guaranteed to alternate; that
    is, if @name_acquired_handler is invoked then you are
    guaranteed that the next time one of the handlers is invoked, it
    will be @name_lost_handler. The reverse is also true.

    If you plan on exporting objects (using e.g.
    g_dbus_connection_register_object()), note that it is generally too late
    to export the objects in @name_acquired_handler. Instead, you can do this
    in @bus_acquired_handler since you are guaranteed that this will run
    before @name is requested from the bus.

    This behavior makes it very simple to write applications that wants
    to [own names][gdbus-owning-names] and export objects.
    Simply register objects to be exported in @bus_acquired_handler and
    unregister the objects (if any) in @name_lost_handler.
    """
    ...

def bus_own_name_on_connection(connection: DBusConnection, name: str, flags: BusNameOwnerFlags, name_acquired_handler: _T.Optional[BusNameAcquiredCallback], name_lost_handler: _T.Optional[BusNameLostCallback], user_data: _T.Optional[object], user_data_free_func: _T.Optional[GLib.DestroyNotify]) -> int:
    """
    Like g_bus_own_name() but takes a #GDBusConnection instead of a
    #GBusType.
    """
    ...

def bus_own_name_on_connection_with_closures(connection: DBusConnection, name: str, flags: BusNameOwnerFlags, name_acquired_closure: _T.Optional[GObject.Closure], name_lost_closure: _T.Optional[GObject.Closure]) -> int:
    """
    Version of g_bus_own_name_on_connection() using closures instead of
    callbacks for easier binding in other languages.
    """
    ...

def bus_own_name_with_closures(bus_type: BusType, name: str, flags: BusNameOwnerFlags, bus_acquired_closure: _T.Optional[GObject.Closure], name_acquired_closure: _T.Optional[GObject.Closure], name_lost_closure: _T.Optional[GObject.Closure]) -> int:
    """
    Version of g_bus_own_name() using closures instead of callbacks for
    easier binding in other languages.
    """
    ...

def bus_unown_name(owner_id: int) -> object:
    """
    Stops owning a name.

    Note that there may still be D-Bus traffic to process (relating to owning
    and unowning the name) in the current thread-default #GMainContext after
    this function has returned. You should continue to iterate the #GMainContext
    until the #GDestroyNotify function passed to g_bus_own_name() is called, in
    order to avoid memory leaks through callbacks queued on the #GMainContext
    after it’s stopped being iterated.
    """
    ...

def bus_unwatch_name(watcher_id: int) -> object:
    """
    Stops watching a name.

    Note that there may still be D-Bus traffic to process (relating to watching
    and unwatching the name) in the current thread-default #GMainContext after
    this function has returned. You should continue to iterate the #GMainContext
    until the #GDestroyNotify function passed to g_bus_watch_name() is called, in
    order to avoid memory leaks through callbacks queued on the #GMainContext
    after it’s stopped being iterated.
    """
    ...

def bus_watch_name(bus_type: BusType, name: str, flags: BusNameWatcherFlags, name_appeared_handler: _T.Optional[BusNameAppearedCallback], name_vanished_handler: _T.Optional[BusNameVanishedCallback], user_data: _T.Optional[object], user_data_free_func: _T.Optional[GLib.DestroyNotify]) -> int:
    """
    Starts watching @name on the bus specified by @bus_type and calls
    @name_appeared_handler and @name_vanished_handler when the name is
    known to have an owner respectively known to lose its
    owner. Callbacks will be invoked in the
    [thread-default main context][g-main-context-push-thread-default]
    of the thread you are calling this function from.

    You are guaranteed that one of the handlers will be invoked after
    calling this function. When you are done watching the name, just
    call g_bus_unwatch_name() with the watcher id this function
    returns.

    If the name vanishes or appears (for example the application owning
    the name could restart), the handlers are also invoked. If the
    #GDBusConnection that is used for watching the name disconnects, then
    @name_vanished_handler is invoked since it is no longer
    possible to access the name.

    Another guarantee is that invocations of @name_appeared_handler
    and @name_vanished_handler are guaranteed to alternate; that
    is, if @name_appeared_handler is invoked then you are
    guaranteed that the next time one of the handlers is invoked, it
    will be @name_vanished_handler. The reverse is also true.

    This behavior makes it very simple to write applications that want
    to take action when a certain [name exists][gdbus-watching-names].
    Basically, the application should create object proxies in
    @name_appeared_handler and destroy them again (if any) in
    @name_vanished_handler.
    """
    ...

def bus_watch_name_on_connection(connection: DBusConnection, name: str, flags: BusNameWatcherFlags, name_appeared_handler: _T.Optional[BusNameAppearedCallback], name_vanished_handler: _T.Optional[BusNameVanishedCallback], user_data: _T.Optional[object], user_data_free_func: _T.Optional[GLib.DestroyNotify]) -> int:
    """
    Like g_bus_watch_name() but takes a #GDBusConnection instead of a
    #GBusType.
    """
    ...

def bus_watch_name_on_connection_with_closures(connection: DBusConnection, name: str, flags: BusNameWatcherFlags, name_appeared_closure: _T.Optional[GObject.Closure], name_vanished_closure: _T.Optional[GObject.Closure]) -> int:
    """
    Version of g_bus_watch_name_on_connection() using closures instead of callbacks for
    easier binding in other languages.
    """
    ...

def bus_watch_name_with_closures(bus_type: BusType, name: str, flags: BusNameWatcherFlags, name_appeared_closure: _T.Optional[GObject.Closure], name_vanished_closure: _T.Optional[GObject.Closure]) -> int:
    """
    Version of g_bus_watch_name() using closures instead of callbacks for
    easier binding in other languages.
    """
    ...

def content_type_can_be_executable(type: str) -> bool:
    """
    Checks if a content type can be executable. Note that for instance
    things like text files can be executables (i.e. scripts and batch files).
    """
    ...

def content_type_equals(type1: str, type2: str) -> bool:
    """
    Compares two content types for equality.
    """
    ...

def content_type_from_mime_type(mime_type: str) -> str:
    """
    Tries to find a content type based on the mime type name.
    """
    ...

def content_type_get_description(type: str) -> str:
    """
    Gets the human readable description of the content type.
    """
    ...

def content_type_get_generic_icon_name(type: str) -> str:
    """
    Gets the generic icon name for a content type.

    See the
    [shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
    specification for more on the generic icon name.
    """
    ...

def content_type_get_icon(type: str) -> Icon:
    """
    Gets the icon for a content type.
    """
    ...

def content_type_get_mime_dirs() -> object:
    """
    Get the list of directories which MIME data is loaded from. See
    g_content_type_set_mime_dirs() for details.
    """
    ...

def content_type_get_mime_type(type: str) -> str:
    """
    Gets the mime type for the content type, if one is registered.
    """
    ...

def content_type_get_symbolic_icon(type: str) -> Icon:
    """
    Gets the symbolic icon for a content type.
    """
    ...

def content_type_guess(filename: _T.Optional[str], data: _T.Optional[object], data_size: int, result_uncertain: bool) -> str:
    """
    Guesses the content type based on example data. If the function is
    uncertain, @result_uncertain will be set to %TRUE. Either @filename
    or @data may be %NULL, in which case the guess will be based solely
    on the other argument.
    """
    ...

def content_type_guess_for_tree(root: File) -> object:
    """
    Tries to guess the type of the tree with root @root, by
    looking at the files it contains. The result is an array
    of content types, with the best guess coming first.

    The types returned all have the form x-content/foo, e.g.
    x-content/audio-cdda (for audio CDs) or x-content/image-dcf
    (for a camera memory card). See the
    [shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
    specification for more on x-content types.

    This function is useful in the implementation of
    g_mount_guess_content_type().
    """
    ...

def content_type_is_a(type: str, supertype: str) -> bool:
    """
    Determines if @type is a subset of @supertype.
    """
    ...

def content_type_is_mime_type(type: str, mime_type: str) -> bool:
    """
    Determines if @type is a subset of @mime_type.
    Convenience wrapper around g_content_type_is_a().
    """
    ...

def content_type_is_unknown(type: str) -> bool:
    """
    Checks if the content type is the generic "unknown" type.
    On UNIX this is the "application/octet-stream" mimetype,
    while on win32 it is "*" and on OSX it is a dynamic type
    or octet-stream.
    """
    ...

def content_type_set_mime_dirs(dirs: _T.Optional[object]) -> object:
    """
    Set the list of directories used by GIO to load the MIME database.
    If @dirs is %NULL, the directories used are the default:

     - the `mime` subdirectory of the directory in `$XDG_DATA_HOME`
     - the `mime` subdirectory of every directory in `$XDG_DATA_DIRS`

    This function is intended to be used when writing tests that depend on
    information stored in the MIME database, in order to control the data.

    Typically, in case your tests use %G_TEST_OPTION_ISOLATE_DIRS, but they
    depend on the system’s MIME database, you should call this function
    with @dirs set to %NULL before calling g_test_init(), for instance:

    |[<!-- language="C" -->
      // Load MIME data from the system
      g_content_type_set_mime_dirs (NULL);
      // Isolate the environment
      g_test_init (&argc, &argv, G_TEST_OPTION_ISOLATE_DIRS, NULL);

      …

      return g_test_run ();
    ]|
    """
    ...

def content_types_get_registered() -> GLib.List:
    """
    Gets a list of strings containing all the registered content types
    known to the system. The list and its data should be freed using
    `g_list_free_full (list, g_free)`.
    """
    ...

def dbus_address_escape_value(string: str) -> str:
    """
    Escape @string so it can appear in a D-Bus address as the value
    part of a key-value pair.

    For instance, if @string is `/run/bus-for-:0`,
    this function would return `/run/bus-for-%3A0`,
    which could be used in a D-Bus address like
    `unix:nonce-tcp:host=127.0.0.1,port=42,noncefile=/run/bus-for-%3A0`.
    """
    ...

def dbus_address_get_for_bus_sync(bus_type: BusType, cancellable: _T.Optional[Cancellable]) -> str:
    """
    Synchronously looks up the D-Bus address for the well-known message
    bus instance specified by @bus_type. This may involve using various
    platform specific mechanisms.

    The returned address will be in the
    [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html#addresses).
    """
    ...

def dbus_address_get_stream(address: str, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
    """
    Asynchronously connects to an endpoint specified by @address and
    sets up the connection so it is in a state to run the client-side
    of the D-Bus authentication conversation. @address must be in the
    [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html#addresses).

    When the operation is finished, @callback will be invoked. You can
    then call g_dbus_address_get_stream_finish() to get the result of
    the operation.

    This is an asynchronous failable function. See
    g_dbus_address_get_stream_sync() for the synchronous version.
    """
    ...

def dbus_address_get_stream_finish(res: AsyncResult, out_guid: _T.Optional[str]) -> IOStream:
    """
    Finishes an operation started with g_dbus_address_get_stream().

    A server is not required to set a GUID, so @out_guid may be set to %NULL
    even on success.
    """
    ...

def dbus_address_get_stream_sync(address: str, out_guid: _T.Optional[str], cancellable: _T.Optional[Cancellable]) -> IOStream:
    """
    Synchronously connects to an endpoint specified by @address and
    sets up the connection so it is in a state to run the client-side
    of the D-Bus authentication conversation. @address must be in the
    [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html#addresses).

    A server is not required to set a GUID, so @out_guid may be set to %NULL
    even on success.

    This is a synchronous failable function. See
    g_dbus_address_get_stream() for the asynchronous version.
    """
    ...

def dbus_escape_object_path(s: str) -> str:
    """
    This is a language binding friendly version of g_dbus_escape_object_path_bytestring().
    """
    ...

def dbus_escape_object_path_bytestring(bytes: object) -> str:
    """
    Escapes @bytes for use in a D-Bus object path component.
    @bytes is an array of zero or more nonzero bytes in an
    unspecified encoding, followed by a single zero byte.

    The escaping method consists of replacing all non-alphanumeric
    characters (see g_ascii_isalnum()) with their hexadecimal value
    preceded by an underscore (`_`). For example:
    `foo.bar.baz` will become `foo_2ebar_2ebaz`.

    This method is appropriate to use when the input is nearly
    a valid object path component but is not when your input
    is far from being a valid object path component.
    Other escaping algorithms are also valid to use with
    D-Bus object paths.

    This can be reversed with g_dbus_unescape_object_path().
    """
    ...

def dbus_generate_guid() -> str:
    """
    Generate a D-Bus GUID that can be used with
    e.g. g_dbus_connection_new().

    See the
    [D-Bus specification](https://dbus.freedesktop.org/doc/dbus-specification.html#uuids)
    regarding what strings are valid D-Bus GUIDs. The specification refers to
    these as ‘UUIDs’ whereas GLib (for historical reasons) refers to them as
    ‘GUIDs’. The terms are interchangeable.

    Note that D-Bus GUIDs do not follow
    [RFC 4122](https://datatracker.ietf.org/doc/html/rfc4122).
    """
    ...

def dbus_gvalue_to_gvariant(gvalue: GObject.Value, type: GLib.VariantType) -> GLib.Variant:
    """
    Converts a #GValue to a #GVariant of the type indicated by the @type
    parameter.

    The conversion is using the following rules:

    - `G_TYPE_STRING`: 's', 'o', 'g' or 'ay'
    - `G_TYPE_STRV`: 'as', 'ao' or 'aay'
    - `G_TYPE_BOOLEAN`: 'b'
    - `G_TYPE_UCHAR`: 'y'
    - `G_TYPE_INT`: 'i', 'n'
    - `G_TYPE_UINT`: 'u', 'q'
    - `G_TYPE_INT64`: 'x'
    - `G_TYPE_UINT64`: 't'
    - `G_TYPE_DOUBLE`: 'd'
    - `G_TYPE_VARIANT`: Any #GVariantType

    This can fail if e.g. @gvalue is of type %G_TYPE_STRING and @type
    is 'i', i.e. %G_VARIANT_TYPE_INT32. It will also fail for any #GType
    (including e.g. %G_TYPE_OBJECT and %G_TYPE_BOXED derived-types) not
    in the table above.

    Note that if @gvalue is of type %G_TYPE_VARIANT and its value is
    %NULL, the empty #GVariant instance (never %NULL) for @type is
    returned (e.g. 0 for scalar types, the empty string for string types,
    '/' for object path types, the empty array for any array type and so on).

    See the g_dbus_gvariant_to_gvalue() function for how to convert a
    #GVariant to a #GValue.
    """
    ...

def dbus_gvariant_to_gvalue(value: GLib.Variant, out_gvalue: GObject.Value) -> object:
    """
    Converts a #GVariant to a #GValue. If @value is floating, it is consumed.

    The rules specified in the g_dbus_gvalue_to_gvariant() function are
    used - this function is essentially its reverse form. So, a #GVariant
    containing any basic or string array type will be converted to a #GValue
    containing a basic value or string array. Any other #GVariant (handle,
    variant, tuple, dict entry) will be converted to a #GValue containing that
    #GVariant.

    The conversion never fails - a valid #GValue is always returned in
    @out_gvalue.
    """
    ...

def dbus_is_address(string: str) -> bool:
    """
    Checks if @string is a
    [D-Bus address](https://dbus.freedesktop.org/doc/dbus-specification.html#addresses).

    This doesn't check if @string is actually supported by #GDBusServer
    or #GDBusConnection - use g_dbus_is_supported_address() to do more
    checks.
    """
    ...

def dbus_is_error_name(string: str) -> bool:
    """
    Check whether @string is a valid D-Bus error name.

    This function returns the same result as g_dbus_is_interface_name(),
    because D-Bus error names are defined to have exactly the
    same syntax as interface names.
    """
    ...

def dbus_is_guid(string: str) -> bool:
    """
    Checks if @string is a D-Bus GUID.

    See the documentation for g_dbus_generate_guid() for more information about
    the format of a GUID.
    """
    ...

def dbus_is_interface_name(string: str) -> bool:
    """
    Checks if @string is a valid D-Bus interface name.
    """
    ...

def dbus_is_member_name(string: str) -> bool:
    """
    Checks if @string is a valid D-Bus member (e.g. signal or method) name.
    """
    ...

def dbus_is_name(string: str) -> bool:
    """
    Checks if @string is a valid D-Bus bus name (either unique or well-known).
    """
    ...

def dbus_is_supported_address(string: str) -> bool:
    """
    Like g_dbus_is_address() but also checks if the library supports the
    transports in @string and that key/value pairs for each transport
    are valid. See the specification of the
    [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html#addresses).
    """
    ...

def dbus_is_unique_name(string: str) -> bool:
    """
    Checks if @string is a valid D-Bus unique bus name.
    """
    ...

def dbus_unescape_object_path(s: str) -> object:
    """
    Unescapes an string that was previously escaped with
    g_dbus_escape_object_path(). If the string is in a format that could
    not have been returned by g_dbus_escape_object_path(), this function
    returns %NULL.

    Encoding alphanumeric characters which do not need to be
    encoded is not allowed (e.g `_63` is not valid, the string
    should contain `c` instead).
    """
    ...

def io_error_from_errno(err_no: int) -> IOErrorEnum:
    """
    Converts errno.h error codes into GIO error codes. The fallback
    value %G_IO_ERROR_FAILED is returned for error codes not currently
    handled (but note that future GLib releases may return a more
    specific value instead).

    As %errno is global and may be modified by intermediate function
    calls, you should save its value as soon as the call which sets it
    """
    ...

def io_error_quark() -> GLib.Quark:
    """
    Gets the GIO Error Quark.
    """
    ...

def io_modules_load_all_in_directory(dirname: str) -> GLib.List:
    """
    Loads all the modules in the specified directory.

    If don't require all modules to be initialized (and thus registering
    all gtypes) then you can use g_io_modules_scan_all_in_directory()
    which allows delayed/lazy loading of modules.
    """
    ...

def io_modules_load_all_in_directory_with_scope(dirname: str, scope: IOModuleScope) -> GLib.List:
    """
    Loads all the modules in the specified directory.

    If don't require all modules to be initialized (and thus registering
    all gtypes) then you can use g_io_modules_scan_all_in_directory()
    which allows delayed/lazy loading of modules.
    """
    ...

def io_modules_scan_all_in_directory(dirname: str) -> object:
    """
    Scans all the modules in the specified directory, ensuring that
    any extension point implemented by a module is registered.

    This may not actually load and initialize all the types in each
    module, some modules may be lazily loaded and initialized when
    an extension point it implements is used with e.g.
    g_io_extension_point_get_extensions() or
    g_io_extension_point_get_extension_by_name().

    If you need to guarantee that all types are loaded in all the modules,
    use g_io_modules_load_all_in_directory().
    """
    ...

def io_modules_scan_all_in_directory_with_scope(dirname: str, scope: IOModuleScope) -> object:
    """
    Scans all the modules in the specified directory, ensuring that
    any extension point implemented by a module is registered.

    This may not actually load and initialize all the types in each
    module, some modules may be lazily loaded and initialized when
    an extension point it implements is used with e.g.
    g_io_extension_point_get_extensions() or
    g_io_extension_point_get_extension_by_name().

    If you need to guarantee that all types are loaded in all the modules,
    use g_io_modules_load_all_in_directory().
    """
    ...

def io_scheduler_cancel_all_jobs() -> object:
    """
    Cancels all cancellable I/O jobs.

    A job is cancellable if a #GCancellable was passed into
    g_io_scheduler_push_job().
    """
    ...

def io_scheduler_push_job(job_func: IOSchedulerJobFunc, user_data: _T.Optional[object], notify: _T.Optional[GLib.DestroyNotify], io_priority: int, cancellable: _T.Optional[Cancellable]) -> object:
    """
    Schedules the I/O job to run in another thread.

    @notify will be called on @user_data after @job_func has returned,
    regardless whether the job was cancelled or has run to completion.

    If @cancellable is not %NULL, it can be used to cancel the I/O job
    by calling g_cancellable_cancel() or by calling
    g_io_scheduler_cancel_all_jobs().
    """
    ...

def keyfile_settings_backend_new(filename: str, root_path: str, root_group: _T.Optional[str]) -> SettingsBackend:
    """
    Creates a keyfile-backed #GSettingsBackend.

    The filename of the keyfile to use is given by @filename.

    All settings read to or written from the backend must fall under the
    path given in @root_path (which must start and end with a slash and
    not contain two consecutive slashes).  @root_path may be "/".

    If @root_group is non-%NULL then it specifies the name of the keyfile
    group used for keys that are written directly below @root_path.  For
    example, if @root_path is "/apps/example/" and @root_group is
    "toplevel", then settings the key "/apps/example/enabled" to a value
    of %TRUE will cause the following to appear in the keyfile:

    |[
      [toplevel]
      enabled=true
    ]|

    If @root_group is %NULL then it is not permitted to store keys
    directly below the @root_path.

    For keys not stored directly below @root_path (ie: in a sub-path),
    the name of the subpath (with the final slash stripped) is used as
    the name of the keyfile group.  To continue the example, if
    "/apps/example/profiles/default/font-size" were set to
    12 then the following would appear in the keyfile:

    |[
      [profiles/default]
      font-size=12
    ]|

    The backend will refuse writes (and return writability as being
    %FALSE) for keys outside of @root_path and, in the event that
    @root_group is %NULL, also for keys directly under @root_path.
    Writes will also be refused if the backend detects that it has the
    inability to rewrite the keyfile (ie: the containing directory is not
    writable).

    There is no checking done for your key namespace clashing with the
    syntax of the key file format.  For example, if you have '[' or ']'
    characters in your path names or '=' in your key names you may be in
    trouble.

    The backend reads default values from a keyfile called `defaults` in
    the directory specified by the #GKeyfileSettingsBackend:defaults-dir property,
    and a list of locked keys from a text file with the name `locks` in
    the same location.
    """
    ...

def memory_settings_backend_new() -> SettingsBackend:
    """
    Creates a memory-backed #GSettingsBackend.

    This backend allows changes to settings, but does not write them
    to any backing storage, so the next time you run your application,
    the memory backend will start out with the default values again.
    """
    ...

def networking_init() -> object:
    """
    Initializes the platform networking libraries (eg, on Windows, this
    calls WSAStartup()). GLib will call this itself if it is needed, so
    you only need to call it if you directly call system networking
    functions (without calling any GLib networking functions first).
    """
    ...

def null_settings_backend_new() -> SettingsBackend:
    """
    Creates a readonly #GSettingsBackend.

    This backend does not allow changes to settings, so all settings
    will always have their default values.
    """
    ...

def pollable_source_new(pollable_stream: GObject.Object) -> GLib.Source:
    """
    Utility method for #GPollableInputStream and #GPollableOutputStream
    implementations. Creates a new #GSource that expects a callback of
    type #GPollableSourceFunc. The new source does not actually do
    anything on its own; use g_source_add_child_source() to add other
    sources to it to cause it to trigger.
    """
    ...

def pollable_source_new_full(pollable_stream: GObject.Object, child_source: _T.Optional[GLib.Source], cancellable: _T.Optional[Cancellable]) -> GLib.Source:
    """
    Utility method for #GPollableInputStream and #GPollableOutputStream
    implementations. Creates a new #GSource, as with
    g_pollable_source_new(), but also attaching @child_source (with a
    dummy callback), and @cancellable, if they are non-%NULL.
    """
    ...

def pollable_stream_read(stream: InputStream, buffer: object, count: int, blocking: bool, cancellable: _T.Optional[Cancellable]) -> int:
    """
    Tries to read from @stream, as with g_input_stream_read() (if
    @blocking is %TRUE) or g_pollable_input_stream_read_nonblocking()
    (if @blocking is %FALSE). This can be used to more easily share
    code between blocking and non-blocking implementations of a method.

    If @blocking is %FALSE, then @stream must be a
    #GPollableInputStream for which g_pollable_input_stream_can_poll()
    returns %TRUE, or else the behavior is undefined. If @blocking is
    %TRUE, then @stream does not need to be a #GPollableInputStream.
    """
    ...

def pollable_stream_write(stream: OutputStream, buffer: object, count: int, blocking: bool, cancellable: _T.Optional[Cancellable]) -> int:
    """
    Tries to write to @stream, as with g_output_stream_write() (if
    @blocking is %TRUE) or g_pollable_output_stream_write_nonblocking()
    (if @blocking is %FALSE). This can be used to more easily share
    code between blocking and non-blocking implementations of a method.

    If @blocking is %FALSE, then @stream must be a
    #GPollableOutputStream for which
    g_pollable_output_stream_can_poll() returns %TRUE or else the
    behavior is undefined. If @blocking is %TRUE, then @stream does not
    need to be a #GPollableOutputStream.
    """
    ...

def pollable_stream_write_all(stream: OutputStream, buffer: object, count: int, blocking: bool, bytes_written: int, cancellable: _T.Optional[Cancellable]) -> bool:
    """
    Tries to write @count bytes to @stream, as with
    g_output_stream_write_all(), but using g_pollable_stream_write()
    rather than g_output_stream_write().

    On a successful write of @count bytes, %TRUE is returned, and
    @bytes_written is set to @count.

    If there is an error during the operation (including
    %G_IO_ERROR_WOULD_BLOCK in the non-blocking case), %FALSE is
    returned and @error is set to indicate the error status,
    @bytes_written is updated to contain the number of bytes written
    into the stream before the error occurred.

    As with g_pollable_stream_write(), if @blocking is %FALSE, then
    @stream must be a #GPollableOutputStream for which
    g_pollable_output_stream_can_poll() returns %TRUE or else the
    behavior is undefined. If @blocking is %TRUE, then @stream does not
    need to be a #GPollableOutputStream.
    """
    ...

def resources_enumerate_children(path: str, lookup_flags: ResourceLookupFlags) -> object:
    """
    Returns all the names of children at the specified @path in the set of
    globally registered resources.
    The return result is a %NULL terminated list of strings which should
    be released with g_strfreev().

    @lookup_flags controls the behaviour of the lookup.
    """
    ...

def resources_get_info(path: str, lookup_flags: ResourceLookupFlags, size: int, flags: int) -> bool:
    """
    Looks for a file at the specified @path in the set of
    globally registered resources and if found returns information about it.

    @lookup_flags controls the behaviour of the lookup.
    """
    ...

def resources_lookup_data(path: str, lookup_flags: ResourceLookupFlags) -> GLib.Bytes:
    """
    Looks for a file at the specified @path in the set of
    globally registered resources and returns a #GBytes that
    lets you directly access the data in memory.

    The data is always followed by a zero byte, so you
    can safely use the data as a C string. However, that byte
    is not included in the size of the GBytes.

    For uncompressed resource files this is a pointer directly into
    the resource bundle, which is typically in some readonly data section
    in the program binary. For compressed files we allocate memory on
    the heap and automatically uncompress the data.

    @lookup_flags controls the behaviour of the lookup.
    """
    ...

def resources_open_stream(path: str, lookup_flags: ResourceLookupFlags) -> InputStream:
    """
    Looks for a file at the specified @path in the set of
    globally registered resources and returns a #GInputStream
    that lets you read the data.

    @lookup_flags controls the behaviour of the lookup.
    """
    ...

def resources_register(resource: Resource) -> object:
    """
    Registers the resource with the process-global set of resources.
    Once a resource is registered the files in it can be accessed
    with the global resource lookup functions like g_resources_lookup_data().
    """
    ...

def resources_unregister(resource: Resource) -> object:
    """
    Unregisters the resource from the process-global set of resources.
    """
    ...

def simple_async_report_error_in_idle(object: _T.Optional[GObject.Object], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object], domain: GLib.Quark, code: int, format: str, *args: object) -> object:
    """
    Reports an error in an asynchronous function in an idle function by
    directly setting the contents of the #GAsyncResult with the given error
    information.
    """
    ...

def simple_async_report_gerror_in_idle(object: _T.Optional[GObject.Object], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object], error: GLib.Error) -> object:
    """
    Reports an error in an idle function. Similar to
    g_simple_async_report_error_in_idle(), but takes a #GError rather
    than building a new one.
    """
    ...

def simple_async_report_take_gerror_in_idle(object: _T.Optional[GObject.Object], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object], error: GLib.Error) -> object:
    """
    Reports an error in an idle function. Similar to
    g_simple_async_report_gerror_in_idle(), but takes over the caller's
    ownership of @error, so the caller does not have to free it any more.
    """
    ...

def unix_is_mount_path_system_internal(mount_path: str) -> bool:
    """
    Determines if @mount_path is considered an implementation of the
    OS. This is primarily used for hiding mountable and mounted volumes
    that only are used in the OS and has little to no relevance to the
    casual user.
    """
    ...

def unix_is_system_device_path(device_path: str) -> bool:
    """
    Determines if @device_path is considered a block device path which is only
    used in implementation of the OS. This is primarily used for hiding
    mounted volumes that are intended as APIs for programs to read, and system
    administrators at a shell; rather than something that should, for example,
    appear in a GUI. For example, the Linux `/proc` filesystem.

    The list of device paths considered ‘system’ ones may change over time.
    """
    ...

def unix_is_system_fs_type(fs_type: str) -> bool:
    """
    Determines if @fs_type is considered a type of file system which is only
    used in implementation of the OS. This is primarily used for hiding
    mounted volumes that are intended as APIs for programs to read, and system
    administrators at a shell; rather than something that should, for example,
    appear in a GUI. For example, the Linux `/proc` filesystem.

    The list of file system types considered ‘system’ ones may change over time.
    """
    ...

def unix_mount_at(mount_path: str, time_read: guint64) -> UnixMountEntry:
    """
    Gets a #GUnixMountEntry for a given mount path. If @time_read
    is set, it will be filled with a unix timestamp for checking
    if the mounts have changed since with g_unix_mounts_changed_since().

    If more mounts have the same mount path, the last matching mount
    is returned.

    This will return %NULL if there is no mount point at @mount_path.
    """
    ...

def unix_mount_compare(mount1: UnixMountEntry, mount2: UnixMountEntry) -> int:
    """
    Compares two unix mounts.
    """
    ...

def unix_mount_copy(mount_entry: UnixMountEntry) -> UnixMountEntry:
    """
    Makes a copy of @mount_entry.
    """
    ...

def unix_mount_for(file_path: str, time_read: guint64) -> UnixMountEntry:
    """
    Gets a #GUnixMountEntry for a given file path. If @time_read
    is set, it will be filled with a unix timestamp for checking
    if the mounts have changed since with g_unix_mounts_changed_since().

    If more mounts have the same mount path, the last matching mount
    is returned.

    This will return %NULL if looking up the mount entry fails, if
    @file_path doesn’t exist or there is an I/O error.
    """
    ...

def unix_mount_free(mount_entry: UnixMountEntry) -> object:
    """
    Frees a unix mount.
    """
    ...

def unix_mount_get_device_path(mount_entry: UnixMountEntry) -> str:
    """
    Gets the device path for a unix mount.
    """
    ...

def unix_mount_get_fs_type(mount_entry: UnixMountEntry) -> str:
    """
    Gets the filesystem type for the unix mount.
    """
    ...

def unix_mount_get_mount_path(mount_entry: UnixMountEntry) -> str:
    """
    Gets the mount path for a unix mount.
    """
    ...

def unix_mount_get_options(mount_entry: UnixMountEntry) -> str:
    """
    Gets a comma-separated list of mount options for the unix mount. For example,
    `rw,relatime,seclabel,data=ordered`.

    This is similar to g_unix_mount_point_get_options(), but it takes
    a #GUnixMountEntry as an argument.
    """
    ...

def unix_mount_get_root_path(mount_entry: UnixMountEntry) -> str:
    """
    Gets the root of the mount within the filesystem. This is useful e.g. for
    mounts created by bind operation, or btrfs subvolumes.

    For example, the root path is equal to "/" for mount created by
    "mount /dev/sda1 /mnt/foo" and "/bar" for
    "mount --bind /mnt/foo/bar /mnt/bar".
    """
    ...

def unix_mount_guess_can_eject(mount_entry: UnixMountEntry) -> bool:
    """
    Guesses whether a Unix mount can be ejected.
    """
    ...

def unix_mount_guess_icon(mount_entry: UnixMountEntry) -> Icon:
    """
    Guesses the icon of a Unix mount.
    """
    ...

def unix_mount_guess_name(mount_entry: UnixMountEntry) -> str:
    """
    Guesses the name of a Unix mount.
    The result is a translated string.
    """
    ...

def unix_mount_guess_should_display(mount_entry: UnixMountEntry) -> bool:
    """
    Guesses whether a Unix mount should be displayed in the UI.
    """
    ...

def unix_mount_guess_symbolic_icon(mount_entry: UnixMountEntry) -> Icon:
    """
    Guesses the symbolic icon of a Unix mount.
    """
    ...

def unix_mount_is_readonly(mount_entry: UnixMountEntry) -> bool:
    """
    Checks if a unix mount is mounted read only.
    """
    ...

def unix_mount_is_system_internal(mount_entry: UnixMountEntry) -> bool:
    """
    Checks if a Unix mount is a system mount. This is the Boolean OR of
    g_unix_is_system_fs_type(), g_unix_is_system_device_path() and
    g_unix_is_mount_path_system_internal() on @mount_entry’s properties.

    The definition of what a ‘system’ mount entry is may change over time as new
    file system types and device paths are ignored.
    """
    ...

def unix_mount_points_changed_since(time: guint64) -> bool:
    """
    Checks if the unix mount points have changed since a given unix time.
    """
    ...

def unix_mount_points_get(time_read: guint64) -> GLib.List:
    """
    Gets a #GList of #GUnixMountPoint containing the unix mount points.
    If @time_read is set, it will be filled with the mount timestamp,
    allowing for checking if the mounts have changed with
    g_unix_mount_points_changed_since().
    """
    ...

def unix_mounts_changed_since(time: guint64) -> bool:
    """
    Checks if the unix mounts have changed since a given unix time.
    """
    ...

def unix_mounts_get(time_read: guint64) -> GLib.List:
    """
    Gets a #GList of #GUnixMountEntry containing the unix mounts.
    If @time_read is set, it will be filled with the mount
    timestamp, allowing for checking if the mounts have changed
    with g_unix_mounts_changed_since().
    """
    ...

class AppInfoMonitor(GObject.Object):
    """
    #GAppInfoMonitor is a very simple object used for monitoring the app
    info database for changes (ie: newly installed or removed
    applications).

    Call g_app_info_monitor_get() to get a #GAppInfoMonitor and connect
    to the "changed" signal.

    In the usual case, applications should try to make note of the change
    (doing things like invalidating caches) but not act on it.  In
    particular, applications should avoid making calls to #GAppInfo APIs
    in response to the change signal, deferring these until the time that
    the data is actually required.  The exception to this case is when
    application information is actually being displayed on the screen
    (eg: during a search or when the list of all applications is shown).
    The reason for this is that changes to the list of installed
    applications often come in groups (like during system updates) and
    rescanning the list on every change is pointless and expensive.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class AppLaunchContext(GObject.Object):
    """
    Integrating the launch with the launching application. This is used to
    handle for instance startup notification and launching the new application
    on the same screen as the launching window.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> AppLaunchContext:
        """
        Creates a new application launch context. This is not normally used,
        instead you instantiate a subclass of this, such as #GdkAppLaunchContext.
        """
        ...

    def get_display(self, info: AppInfo, files: GLib.List) -> str:
        """
        Gets the display string for the @context. This is used to ensure new
        applications are started on the same display as the launching
        application, by setting the `DISPLAY` environment variable.
        """
        ...

    def get_environment(self) -> object:
        """
        Gets the complete environment variable list to be passed to
        the child process when @context is used to launch an application.
        This is a %NULL-terminated array of strings, where each string has
        the form `KEY=VALUE`.
        """
        ...

    def get_startup_notify_id(self, info: AppInfo, files: GLib.List) -> str:
        """
        Initiates startup notification for the application and returns the
        `DESKTOP_STARTUP_ID` for the launched operation, if supported.

        Startup notification IDs are defined in the
        [FreeDesktop.Org Startup Notifications standard](http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt).
        """
        ...

    def launch_failed(self, startup_notify_id: str) -> object:
        """
        Called when an application has failed to launch, so that it can cancel
        the application startup notification started in g_app_launch_context_get_startup_notify_id().
        """
        ...

    def setenv(self, variable: str, value: str) -> object:
        """
        Arranges for @variable to be set to @value in the child's
        environment when @context is used to launch an application.
        """
        ...

    def unsetenv(self, variable: str) -> object:
        """
        Arranges for @variable to be unset in the child's environment
        when @context is used to launch an application.
        """
        ...


    ...

class Application(GObject.Object, ActionGroup, ActionMap):
    """
    A #GApplication is the foundation of an application.  It wraps some
    low-level platform-specific services and is intended to act as the
    foundation for higher-level application classes such as
    #GtkApplication or #MxApplication.  In general, you should not use
    this class outside of a higher level framework.

    GApplication provides convenient life cycle management by maintaining
    a "use count" for the primary application instance. The use count can
    be changed using g_application_hold() and g_application_release(). If
    it drops to zero, the application exits. Higher-level classes such as
    #GtkApplication employ the use count to ensure that the application
    stays alive as long as it has any opened windows.

    Another feature that GApplication (optionally) provides is process
    uniqueness. Applications can make use of this functionality by
    providing a unique application ID. If given, only one application
    with this ID can be running at a time per session. The session
    concept is platform-dependent, but corresponds roughly to a graphical
    desktop login. When your application is launched again, its
    arguments are passed through platform communication to the already
    running program. The already running instance of the program is
    called the "primary instance"; for non-unique applications this is
    always the current instance. On Linux, the D-Bus session bus
    is used for communication.

    The use of #GApplication differs from some other commonly-used
    uniqueness libraries (such as libunique) in important ways. The
    application is not expected to manually register itself and check
    if it is the primary instance. Instead, the main() function of a
    #GApplication should do very little more than instantiating the
    application instance, possibly connecting signal handlers, then
    calling g_application_run(). All checks for uniqueness are done
    internally. If the application is the primary instance then the
    startup signal is emitted and the mainloop runs. If the application
    is not the primary instance then a signal is sent to the primary
    instance and g_application_run() promptly returns. See the code
    examples below.

    If used, the expected form of an application identifier is the same as
    that of of a
    [D-Bus well-known bus name](https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-bus).
    Examples include: `com.example.MyApp`, `org.example.internal_apps.Calculator`,
    `org._7_zip.Archiver`.
    For details on valid application identifiers, see g_application_id_is_valid().

    On Linux, the application identifier is claimed as a well-known bus name
    on the user's session bus.  This means that the uniqueness of your
    application is scoped to the current session.  It also means that your
    application may provide additional services (through registration of other
    object paths) at that bus name.  The registration of these object paths
    should be done with the shared GDBus session bus.  Note that due to the
    internal architecture of GDBus, method calls can be dispatched at any time
    (even if a main loop is not running).  For this reason, you must ensure that
    any object paths that you wish to register are registered before #GApplication
    attempts to acquire the bus name of your application (which happens in
    g_application_register()).  Unfortunately, this means that you cannot use
    g_application_get_is_remote() to decide if you want to register object paths.

    GApplication also implements the #GActionGroup and #GActionMap
    interfaces and lets you easily export actions by adding them with
    g_action_map_add_action(). When invoking an action by calling
    g_action_group_activate_action() on the application, it is always
    invoked in the primary instance. The actions are also exported on
    the session bus, and GIO provides the #GDBusActionGroup wrapper to
    conveniently access them remotely. GIO provides a #GDBusMenuModel wrapper
    for remote access to exported #GMenuModels.

    There is a number of different entry points into a GApplication:

    - via 'Activate' (i.e. just starting the application)

    - via 'Open' (i.e. opening some files)

    - by handling a command-line

    - via activating an action

    The #GApplication::startup signal lets you handle the application
    initialization for all of these in a single place.

    Regardless of which of these entry points is used to start the
    application, GApplication passes some ‘platform data’ from the
    launching instance to the primary instance, in the form of a
    #GVariant dictionary mapping strings to variants. To use platform
    data, override the @before_emit or @after_emit virtual functions
    in your #GApplication subclass. When dealing with
    #GApplicationCommandLine objects, the platform data is
    directly available via g_application_command_line_get_cwd(),
    g_application_command_line_get_environ() and
    g_application_command_line_get_platform_data().

    As the name indicates, the platform data may vary depending on the
    operating system, but it always includes the current directory (key
    "cwd"), and optionally the environment (ie the set of environment
    variables and their values) of the calling process (key "environ").
    The environment is only added to the platform data if the
    %G_APPLICATION_SEND_ENVIRONMENT flag is set. #GApplication subclasses
    can add their own platform data by overriding the @add_platform_data
    virtual function. For instance, #GtkApplication adds startup notification
    data in this way.

    To parse commandline arguments you may handle the
    #GApplication::command-line signal or override the local_command_line()
    vfunc, to parse them in either the primary instance or the local instance,
    respectively.

    For an example of opening files with a GApplication, see
    [gapplication-example-open.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-open.c).

    For an example of using actions with GApplication, see
    [gapplication-example-actions.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-actions.c).

    For an example of using extra D-Bus hooks with GApplication, see
    [gapplication-example-dbushooks.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-dbushooks.c).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, application_id: _T.Optional[str], flags: ApplicationFlags) -> Application:
        """
        Creates a new #GApplication instance.

        If non-%NULL, the application id must be valid.  See
        g_application_id_is_valid().

        If no application ID is given then some features of #GApplication
        (most notably application uniqueness) will be disabled.
        """
        ...

    def activate(self) -> object:
        """
        Activates the application.

        In essence, this results in the #GApplication::activate signal being
        emitted in the primary instance.

        The application must be registered before calling this function.
        """
        ...

    def add_main_option(self, long_name: str, short_name: str, flags: GLib.OptionFlags, arg: GLib.OptionArg, description: str, arg_description: _T.Optional[str]) -> object:
        """
        Add an option to be handled by @application.

        Calling this function is the equivalent of calling
        g_application_add_main_option_entries() with a single #GOptionEntry
        that has its arg_data member set to %NULL.

        The parsed arguments will be packed into a #GVariantDict which
        is passed to #GApplication::handle-local-options. If
        %G_APPLICATION_HANDLES_COMMAND_LINE is set, then it will also
        be sent to the primary instance. See
        g_application_add_main_option_entries() for more details.

        See #GOptionEntry for more documentation of the arguments.
        """
        ...

    def add_main_option_entries(self, entries: object) -> object:
        """
        Adds main option entries to be handled by @application.

        This function is comparable to g_option_context_add_main_entries().

        After the commandline arguments are parsed, the
        #GApplication::handle-local-options signal will be emitted.  At this
        point, the application can inspect the values pointed to by @arg_data
        in the given #GOptionEntrys.

        Unlike #GOptionContext, #GApplication supports giving a %NULL
        @arg_data for a non-callback #GOptionEntry.  This results in the
        argument in question being packed into a #GVariantDict which is also
        passed to #GApplication::handle-local-options, where it can be
        inspected and modified.  If %G_APPLICATION_HANDLES_COMMAND_LINE is
        set, then the resulting dictionary is sent to the primary instance,
        where g_application_command_line_get_options_dict() will return it.
        This "packing" is done according to the type of the argument --
        booleans for normal flags, strings for strings, bytestrings for
        filenames, etc.  The packing only occurs if the flag is given (ie: we
        do not pack a "false" #GVariant in the case that a flag is missing).

        In general, it is recommended that all commandline arguments are
        parsed locally.  The options dictionary should then be used to
        transmit the result of the parsing to the primary instance, where
        g_variant_dict_lookup() can be used.  For local options, it is
        possible to either use @arg_data in the usual way, or to consult (and
        potentially remove) the option from the options dictionary.

        This function is new in GLib 2.40.  Before then, the only real choice
        was to send all of the commandline arguments (options and all) to the
        primary instance for handling.  #GApplication ignored them completely
        on the local side.  Calling this function "opts in" to the new
        behaviour, and in particular, means that unrecognised options will be
        treated as errors.  Unrecognised options have never been ignored when
        %G_APPLICATION_HANDLES_COMMAND_LINE is unset.

        If #GApplication::handle-local-options needs to see the list of
        filenames, then the use of %G_OPTION_REMAINING is recommended.  If
        @arg_data is %NULL then %G_OPTION_REMAINING can be used as a key into
        the options dictionary.  If you do use %G_OPTION_REMAINING then you
        need to handle these arguments for yourself because once they are
        consumed, they will no longer be visible to the default handling
        (which treats them as filenames to be opened).

        It is important to use the proper GVariant format when retrieving
        the options with g_variant_dict_lookup():
        - for %G_OPTION_ARG_NONE, use `b`
        - for %G_OPTION_ARG_STRING, use `&s`
        - for %G_OPTION_ARG_INT, use `i`
        - for %G_OPTION_ARG_INT64, use `x`
        - for %G_OPTION_ARG_DOUBLE, use `d`
        - for %G_OPTION_ARG_FILENAME, use `^&ay`
        - for %G_OPTION_ARG_STRING_ARRAY, use `^a&s`
        - for %G_OPTION_ARG_FILENAME_ARRAY, use `^a&ay`
        """
        ...

    def add_option_group(self, group: GLib.OptionGroup) -> object:
        """
        Adds a #GOptionGroup to the commandline handling of @application.

        This function is comparable to g_option_context_add_group().

        Unlike g_application_add_main_option_entries(), this function does
        not deal with %NULL @arg_data and never transmits options to the
        primary instance.

        The reason for that is because, by the time the options arrive at the
        primary instance, it is typically too late to do anything with them.
        Taking the GTK option group as an example: GTK will already have been
        initialised by the time the #GApplication::command-line handler runs.
        In the case that this is not the first-running instance of the
        application, the existing instance may already have been running for
        a very long time.

        This means that the options from #GOptionGroup are only really usable
        in the case that the instance of the application being run is the
        first instance.  Passing options like `--display=` or `--gdk-debug=`
        on future runs will have no effect on the existing primary instance.

        Calling this function will cause the options in the supplied option
        group to be parsed, but it does not cause you to be "opted in" to the
        new functionality whereby unrecognised options are rejected even if
        %G_APPLICATION_HANDLES_COMMAND_LINE was given.
        """
        ...

    def bind_busy_property(self, object: GObject.Object, property: str) -> object:
        """
        Marks @application as busy (see g_application_mark_busy()) while
        @property on @object is %TRUE.

        The binding holds a reference to @application while it is active, but
        not to @object. Instead, the binding is destroyed when @object is
        finalized.
        """
        ...

    def get_application_id(self) -> str:
        """
        Gets the unique identifier for @application.
        """
        ...

    def get_dbus_connection(self) -> DBusConnection:
        """
        Gets the #GDBusConnection being used by the application, or %NULL.

        If #GApplication is using its D-Bus backend then this function will
        return the #GDBusConnection being used for uniqueness and
        communication with the desktop environment and other instances of the
        application.

        If #GApplication is not using D-Bus then this function will return
        %NULL.  This includes the situation where the D-Bus backend would
        normally be in use but we were unable to connect to the bus.

        This function must not be called before the application has been
        registered.  See g_application_get_is_registered().
        """
        ...

    def get_dbus_object_path(self) -> str:
        """
        Gets the D-Bus object path being used by the application, or %NULL.

        If #GApplication is using its D-Bus backend then this function will
        return the D-Bus object path that #GApplication is using.  If the
        application is the primary instance then there is an object published
        at this path.  If the application is not the primary instance then
        the result of this function is undefined.

        If #GApplication is not using D-Bus then this function will return
        %NULL.  This includes the situation where the D-Bus backend would
        normally be in use but we were unable to connect to the bus.

        This function must not be called before the application has been
        registered.  See g_application_get_is_registered().
        """
        ...

    def get_flags(self) -> ApplicationFlags:
        """
        Gets the flags for @application.

        See #GApplicationFlags.
        """
        ...

    def get_inactivity_timeout(self) -> int:
        """
        Gets the current inactivity timeout for the application.

        This is the amount of time (in milliseconds) after the last call to
        g_application_release() before the application stops running.
        """
        ...

    def get_is_busy(self) -> bool:
        """
        Gets the application's current busy state, as set through
        g_application_mark_busy() or g_application_bind_busy_property().
        """
        ...

    def get_is_registered(self) -> bool:
        """
        Checks if @application is registered.

        An application is registered if g_application_register() has been
        successfully called.
        """
        ...

    def get_is_remote(self) -> bool:
        """
        Checks if @application is remote.

        If @application is remote then it means that another instance of
        application already exists (the 'primary' instance).  Calls to
        perform actions on @application will result in the actions being
        performed by the primary instance.

        The value of this property cannot be accessed before
        g_application_register() has been called.  See
        g_application_get_is_registered().
        """
        ...

    def get_resource_base_path(self) -> str:
        """
        Gets the resource base path of @application.

        See g_application_set_resource_base_path() for more information.
        """
        ...

    def hold(self) -> object:
        """
        Increases the use count of @application.

        Use this function to indicate that the application has a reason to
        continue to run.  For example, g_application_hold() is called by GTK+
        when a toplevel window is on the screen.

        To cancel the hold, call g_application_release().
        """
        ...

    def mark_busy(self) -> object:
        """
        Increases the busy count of @application.

        Use this function to indicate that the application is busy, for instance
        while a long running operation is pending.

        The busy state will be exposed to other processes, so a session shell will
        use that information to indicate the state to the user (e.g. with a
        spinner).

        To cancel the busy indication, use g_application_unmark_busy().

        The application must be registered before calling this function.
        """
        ...

    def open(self, files: object, n_files: int, hint: str) -> object:
        """
        Opens the given files.

        In essence, this results in the #GApplication::open signal being emitted
        in the primary instance.

        @n_files must be greater than zero.

        @hint is simply passed through to the ::open signal.  It is
        intended to be used by applications that have multiple modes for
        opening files (eg: "view" vs "edit", etc).  Unless you have a need
        for this functionality, you should use "".

        The application must be registered before calling this function
        and it must have the %G_APPLICATION_HANDLES_OPEN flag set.
        """
        ...

    def quit(self) -> object:
        """
        Immediately quits the application.

        Upon return to the mainloop, g_application_run() will return,
        calling only the 'shutdown' function before doing so.

        The hold count is ignored.
        Take care if your code has called g_application_hold() on the application and
        is therefore still expecting it to exist.
        (Note that you may have called g_application_hold() indirectly, for example
        through gtk_application_add_window().)

        The result of calling g_application_run() again after it returns is
        unspecified.
        """
        ...

    def register(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Attempts registration of the application.

        This is the point at which the application discovers if it is the
        primary instance or merely acting as a remote for an already-existing
        primary instance.  This is implemented by attempting to acquire the
        application identifier as a unique bus name on the session bus using
        GDBus.

        If there is no application ID or if %G_APPLICATION_NON_UNIQUE was
        given, then this process will always become the primary instance.

        Due to the internal architecture of GDBus, method calls can be
        dispatched at any time (even if a main loop is not running).  For
        this reason, you must ensure that any object paths that you wish to
        register are registered before calling this function.

        If the application has already been registered then %TRUE is
        returned with no work performed.

        The #GApplication::startup signal is emitted if registration succeeds
        and @application is the primary instance (including the non-unique
        case).

        In the event of an error (such as @cancellable being cancelled, or a
        failure to connect to the session bus), %FALSE is returned and @error
        is set appropriately.

        Note: the return value of this function is not an indicator that this
        instance is or is not the primary instance of the application.  See
        g_application_get_is_remote() for that.
        """
        ...

    def release(self) -> object:
        """
        Decrease the use count of @application.

        When the use count reaches zero, the application will stop running.

        Never call this function except to cancel the effect of a previous
        call to g_application_hold().
        """
        ...

    def run(self, argc: _T.Optional[_T.Union[list[str], int]] = ..., argv: _T.Optional[list[str]] = ...) -> int:
        """
        Runs the application.

        This function is intended to be run from main() and its return value
        is intended to be returned by main(). Although you are expected to pass
        the @argc, @argv parameters from main() to this function, it is possible
        to pass %NULL if @argv is not available or commandline handling is not
        required.  Note that on Windows, @argc and @argv are ignored, and
        g_win32_get_command_line() is called internally (for proper support
        of Unicode commandline arguments).

        #GApplication will attempt to parse the commandline arguments.  You
        can add commandline flags to the list of recognised options by way of
        g_application_add_main_option_entries().  After this, the
        #GApplication::handle-local-options signal is emitted, from which the
        application can inspect the values of its #GOptionEntrys.

        #GApplication::handle-local-options is a good place to handle options
        such as `--version`, where an immediate reply from the local process is
        desired (instead of communicating with an already-running instance).
        A #GApplication::handle-local-options handler can stop further processing
        by returning a non-negative value, which then becomes the exit status of
        the process.

        What happens next depends on the flags: if
        %G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining
        commandline arguments are sent to the primary instance, where a
        #GApplication::command-line signal is emitted.  Otherwise, the
        remaining commandline arguments are assumed to be a list of files.
        If there are no files listed, the application is activated via the
        #GApplication::activate signal.  If there are one or more files, and
        %G_APPLICATION_HANDLES_OPEN was specified then the files are opened
        via the #GApplication::open signal.

        If you are interested in doing more complicated local handling of the
        commandline then you should implement your own #GApplication subclass
        and override local_command_line(). In this case, you most likely want
        to return %TRUE from your local_command_line() implementation to
        suppress the default handling. See
        [gapplication-example-cmdline2.c][https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline2.c]
        for an example.

        If, after the above is done, the use count of the application is zero
        then the exit status is returned immediately.  If the use count is
        non-zero then the default main context is iterated until the use count
        falls to zero, at which point 0 is returned.

        If the %G_APPLICATION_IS_SERVICE flag is set, then the service will
        run for as much as 10 seconds with a use count of zero while waiting
        for the message that caused the activation to arrive.  After that,
        if the use count falls to zero the application will exit immediately,
        except in the case that g_application_set_inactivity_timeout() is in
        use.

        This function sets the prgname (g_set_prgname()), if not already set,
        to the basename of argv[0].

        Much like g_main_loop_run(), this function will acquire the main context
        for the duration that the application is running.

        Since 2.40, applications that are not explicitly flagged as services
        or launchers (ie: neither %G_APPLICATION_IS_SERVICE or
        %G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the
        default handler for local_command_line) if "--gapplication-service"
        was given in the command line.  If this flag is present then normal
        commandline processing is interrupted and the
        %G_APPLICATION_IS_SERVICE flag is set.  This provides a "compromise"
        solution whereby running an application directly from the commandline
        will invoke it in the normal way (which can be useful for debugging)
        while still allowing applications to be D-Bus activated in service
        mode.  The D-Bus service file should invoke the executable with
        "--gapplication-service" as the sole commandline argument.  This
        approach is suitable for use by most graphical applications but
        should not be used from applications like editors that need precise
        control over when processes invoked via the commandline will exit and
        what their exit status will be.
        """
        ...

    def send_notification(self, id: _T.Optional[str], notification: Notification) -> object:
        """
        Sends a notification on behalf of @application to the desktop shell.
        There is no guarantee that the notification is displayed immediately,
        or even at all.

        Notifications may persist after the application exits. It will be
        D-Bus-activated when the notification or one of its actions is
        activated.

        Modifying @notification after this call has no effect. However, the
        object can be reused for a later call to this function.

        @id may be any string that uniquely identifies the event for the
        application. It does not need to be in any special format. For
        example, "new-message" might be appropriate for a notification about
        new messages.

        If a previous notification was sent with the same @id, it will be
        replaced with @notification and shown again as if it was a new
        notification. This works even for notifications sent from a previous
        execution of the application, as long as @id is the same string.

        @id may be %NULL, but it is impossible to replace or withdraw
        notifications without an id.

        If @notification is no longer relevant, it can be withdrawn with
        g_application_withdraw_notification().
        """
        ...

    def set_action_group(self, action_group: _T.Optional[ActionGroup]) -> object:
        """
        This used to be how actions were associated with a #GApplication.
        Now there is #GActionMap for that.
        """
        ...

    def set_application_id(self, application_id: _T.Optional[str]) -> object:
        """
        Sets the unique identifier for @application.

        The application id can only be modified if @application has not yet
        been registered.

        If non-%NULL, the application id must be valid.  See
        g_application_id_is_valid().
        """
        ...

    def set_default(self) -> object:
        """
        Sets or unsets the default application for the process, as returned
        by g_application_get_default().

        This function does not take its own reference on @application.  If
        @application is destroyed then the default application will revert
        back to %NULL.
        """
        ...

    def set_flags(self, flags: ApplicationFlags) -> object:
        """
        Sets the flags for @application.

        The flags can only be modified if @application has not yet been
        registered.

        See #GApplicationFlags.
        """
        ...

    def set_inactivity_timeout(self, inactivity_timeout: int) -> object:
        """
        Sets the current inactivity timeout for the application.

        This is the amount of time (in milliseconds) after the last call to
        g_application_release() before the application stops running.

        This call has no side effects of its own.  The value set here is only
        used for next time g_application_release() drops the use count to
        zero.  Any timeouts currently in progress are not impacted.
        """
        ...

    def set_option_context_description(self, description: _T.Optional[str]) -> object:
        """
        Adds a description to the @application option context.

        See g_option_context_set_description() for more information.
        """
        ...

    def set_option_context_parameter_string(self, parameter_string: _T.Optional[str]) -> object:
        """
        Sets the parameter string to be used by the commandline handling of @application.

        This function registers the argument to be passed to g_option_context_new()
        when the internal #GOptionContext of @application is created.

        See g_option_context_new() for more information about @parameter_string.
        """
        ...

    def set_option_context_summary(self, summary: _T.Optional[str]) -> object:
        """
        Adds a summary to the @application option context.

        See g_option_context_set_summary() for more information.
        """
        ...

    def set_resource_base_path(self, resource_path: _T.Optional[str]) -> object:
        """
        Sets (or unsets) the base resource path of @application.

        The path is used to automatically load various [application
        resources][gresource] such as menu layouts and action descriptions.
        The various types of resources will be found at fixed names relative
        to the given base path.

        By default, the resource base path is determined from the application
        ID by prefixing '/' and replacing each '.' with '/'.  This is done at
        the time that the #GApplication object is constructed.  Changes to
        the application ID after that point will not have an impact on the
        resource base path.

        As an example, if the application has an ID of "org.example.app" then
        the default resource base path will be "/org/example/app".  If this
        is a #GtkApplication (and you have not manually changed the path)
        then Gtk will then search for the menus of the application at
        "/org/example/app/gtk/menus.ui".

        See #GResource for more information about adding resources to your
        application.

        You can disable automatic resource loading functionality by setting
        the path to %NULL.

        Changing the resource base path once the application is running is
        not recommended.  The point at which the resource path is consulted
        for forming paths for various purposes is unspecified.  When writing
        a sub-class of #GApplication you should either set the
        #GApplication:resource-base-path property at construction time, or call
        this function during the instance initialization. Alternatively, you
        can call this function in the #GApplicationClass.startup virtual function,
        before chaining up to the parent implementation.
        """
        ...

    def unbind_busy_property(self, object: GObject.Object, property: str) -> object:
        """
        Destroys a binding between @property and the busy state of
        @application that was previously created with
        g_application_bind_busy_property().
        """
        ...

    def unmark_busy(self) -> object:
        """
        Decreases the busy count of @application.

        When the busy count reaches zero, the new state will be propagated
        to other processes.

        This function must only be called to cancel the effect of a previous
        call to g_application_mark_busy().
        """
        ...

    def withdraw_notification(self, id: str) -> object:
        """
        Withdraws a notification that was sent with
        g_application_send_notification().

        This call does nothing if a notification with @id doesn't exist or
        the notification was never sent.

        This function works even for notifications sent in previous
        executions of this application, as long @id is the same as it was for
        the sent notification.

        Note that notifications are dismissed when the user clicks on one
        of the buttons in a notification or triggers its default action, so
        there is no need to explicitly withdraw the notification in that case.
        """
        ...


    ...

class ApplicationCommandLine(GObject.Object):
    """
    #GApplicationCommandLine represents a command-line invocation of
    an application.  It is created by #GApplication and emitted
    in the #GApplication::command-line signal and virtual function.

    The class contains the list of arguments that the program was invoked
    with.  It is also possible to query if the commandline invocation was
    local (ie: the current process is running in direct response to the
    invocation) or remote (ie: some other process forwarded the
    commandline to this process).

    The GApplicationCommandLine object can provide the @argc and @argv
    parameters for use with the #GOptionContext command-line parsing API,
    with the g_application_command_line_get_arguments() function. See
    [gapplication-example-cmdline3.c][gapplication-example-cmdline3]
    for an example.

    The exit status of the originally-invoked process may be set and
    messages can be printed to stdout or stderr of that process.  The
    lifecycle of the originally-invoked process is tied to the lifecycle
    of this object (ie: the process exits when the last reference is
    dropped).

    The main use for #GApplicationCommandLine (and the
    #GApplication::command-line signal) is 'Emacs server' like use cases:
    You can set the `EDITOR` environment variable to have e.g. git use
    your favourite editor to edit commit messages, and if you already
    have an instance of the editor running, the editing will happen
    in the running instance, instead of opening a new one. An important
    aspect of this use case is that the process that gets started by git
    does not return until the editing is done.

    Normally, the commandline is completely handled in the
    #GApplication::command-line handler. The launching instance exits
    once the signal handler in the primary instance has returned, and
    the return value of the signal handler becomes the exit status
    of the launching instance.
    |[<!-- language="C" -->
    static int
    command_line (GApplication            *application,
                  GApplicationCommandLine *cmdline)
    {
      gchar **argv;
      gint argc;
      gint i;

      argv = g_application_command_line_get_arguments (cmdline, &argc);

      g_application_command_line_print (cmdline,
                                        "This text is written back\n"
                                        "to stdout of the caller\n");

      for (i = 0; i < argc; i++)
        g_print ("argument %d: %s\n", i, argv[i]);

      g_strfreev (argv);

      return 0;
    }
    ]|
    The complete example can be found here:
    [gapplication-example-cmdline.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline.c)

    In more complicated cases, the handling of the commandline can be
    split between the launcher and the primary instance.
    |[<!-- language="C" -->
    static gboolean
     test_local_cmdline (GApplication   *application,
                         gchar        ***arguments,
                         gint           *exit_status)
    {
      gint i, j;
      gchar **argv;

      argv = *arguments;

      if (argv[0] == NULL)
        {
          *exit_status = 0;
          return FALSE;
        }

      i = 1;
      while (argv[i])
        {
          if (g_str_has_prefix (argv[i], "--local-"))
            {
              g_print ("handling argument %s locally\n", argv[i]);
              g_free (argv[i]);
              for (j = i; argv[j]; j++)
                argv[j] = argv[j + 1];
            }
          else
            {
              g_print ("not handling argument %s locally\n", argv[i]);
              i++;
            }
        }

      *exit_status = 0;

      return FALSE;
    }

    static void
    test_application_class_init (TestApplicationClass *class)
    {
      G_APPLICATION_CLASS (class)->local_command_line = test_local_cmdline;

      ...
    }
    ]|
    In this example of split commandline handling, options that start
    with `--local-` are handled locally, all other options are passed
    to the #GApplication::command-line handler which runs in the primary
    instance.

    The complete example can be found here:
    [gapplication-example-cmdline2.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline2.c)

    If handling the commandline requires a lot of work, it may
    be better to defer it.
    |[<!-- language="C" -->
    static gboolean
    my_cmdline_handler (gpointer data)
    {
      GApplicationCommandLine *cmdline = data;

      // do the heavy lifting in an idle

      g_application_command_line_set_exit_status (cmdline, 0);
      g_object_unref (cmdline); // this releases the application

      return G_SOURCE_REMOVE;
    }

    static int
    command_line (GApplication            *application,
                  GApplicationCommandLine *cmdline)
    {
      // keep the application running until we are done with this commandline
      g_application_hold (application);

      g_object_set_data_full (G_OBJECT (cmdline),
                              "application", application,
                              (GDestroyNotify)g_application_release);

      g_object_ref (cmdline);
      g_idle_add (my_cmdline_handler, cmdline);

      return 0;
    }
    ]|
    In this example the commandline is not completely handled before
    the #GApplication::command-line handler returns. Instead, we keep
    a reference to the #GApplicationCommandLine object and handle it
    later (in this example, in an idle). Note that it is necessary to
    hold the application until you are done with the commandline.

    The complete example can be found here:
    [gapplication-example-cmdline3.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline3.c)
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def create_file_for_arg(self, arg: str) -> File:
        """
        Creates a #GFile corresponding to a filename that was given as part
        of the invocation of @cmdline.

        This differs from g_file_new_for_commandline_arg() in that it
        resolves relative pathnames using the current working directory of
        the invoking process rather than the local process.
        """
        ...

    def get_arguments(self, argc: int) -> object:
        """
        Gets the list of arguments that was passed on the command line.

        The strings in the array may contain non-UTF-8 data on UNIX (such as
        filenames or arguments given in the system locale) but are always in
        UTF-8 on Windows.

        If you wish to use the return value with #GOptionContext, you must
        use g_option_context_parse_strv().

        The return value is %NULL-terminated and should be freed using
        g_strfreev().
        """
        ...

    def get_cwd(self) -> str:
        """
        Gets the working directory of the command line invocation.
        The string may contain non-utf8 data.

        It is possible that the remote application did not send a working
        directory, so this may be %NULL.

        The return value should not be modified or freed and is valid for as
        long as @cmdline exists.
        """
        ...

    def get_environ(self) -> object:
        """
        Gets the contents of the 'environ' variable of the command line
        invocation, as would be returned by g_get_environ(), ie as a
        %NULL-terminated list of strings in the form 'NAME=VALUE'.
        The strings may contain non-utf8 data.

        The remote application usually does not send an environment.  Use
        %G_APPLICATION_SEND_ENVIRONMENT to affect that.  Even with this flag
        set it is possible that the environment is still not available (due
        to invocation messages from other applications).

        The return value should not be modified or freed and is valid for as
        long as @cmdline exists.

        See g_application_command_line_getenv() if you are only interested
        in the value of a single environment variable.
        """
        ...

    def get_exit_status(self) -> int:
        """
        Gets the exit status of @cmdline.  See
        g_application_command_line_set_exit_status() for more information.
        """
        ...

    def get_is_remote(self) -> bool:
        """
        Determines if @cmdline represents a remote invocation.
        """
        ...

    def get_options_dict(self) -> GLib.VariantDict:
        """
        Gets the options there were passed to g_application_command_line().

        If you did not override local_command_line() then these are the same
        options that were parsed according to the #GOptionEntrys added to the
        application with g_application_add_main_option_entries() and possibly
        modified from your GApplication::handle-local-options handler.

        If no options were sent then an empty dictionary is returned so that
        you don't need to check for %NULL.
        """
        ...

    def get_platform_data(self) -> GLib.Variant:
        """
        Gets the platform data associated with the invocation of @cmdline.

        This is a #GVariant dictionary containing information about the
        context in which the invocation occurred.  It typically contains
        information like the current working directory and the startup
        notification ID.

        For local invocation, it will be %NULL.
        """
        ...

    def get_stdin(self) -> InputStream:
        """
        Gets the stdin of the invoking process.

        The #GInputStream can be used to read data passed to the standard
        input of the invoking process.
        This doesn't work on all platforms.  Presently, it is only available
        on UNIX when using a D-Bus daemon capable of passing file descriptors.
        If stdin is not available then %NULL will be returned.  In the
        future, support may be expanded to other platforms.

        You must only call this function once per commandline invocation.
        """
        ...

    def getenv(self, name: str) -> str:
        """
        Gets the value of a particular environment variable of the command
        line invocation, as would be returned by g_getenv().  The strings may
        contain non-utf8 data.

        The remote application usually does not send an environment.  Use
        %G_APPLICATION_SEND_ENVIRONMENT to affect that.  Even with this flag
        set it is possible that the environment is still not available (due
        to invocation messages from other applications).

        The return value should not be modified or freed and is valid for as
        long as @cmdline exists.
        """
        ...

    def print(self, format: str, *args: object) -> object:
        """
        Formats a message and prints it using the stdout print handler in the
        invoking process.

        If @cmdline is a local invocation then this is exactly equivalent to
        g_print().  If @cmdline is remote then this is equivalent to calling
        g_print() in the invoking process.
        """
        ...

    def printerr(self, format: str, *args: object) -> object:
        """
        Formats a message and prints it using the stderr print handler in the
        invoking process.

        If @cmdline is a local invocation then this is exactly equivalent to
        g_printerr().  If @cmdline is remote then this is equivalent to
        calling g_printerr() in the invoking process.
        """
        ...

    def set_exit_status(self, exit_status: int) -> object:
        """
        Sets the exit status that will be used when the invoking process
        exits.

        The return value of the #GApplication::command-line signal is
        passed to this function when the handler returns.  This is the usual
        way of setting the exit status.

        In the event that you want the remote invocation to continue running
        and want to decide on the exit status in the future, you can use this
        call.  For the case of a remote invocation, the remote process will
        typically exit when the last reference is dropped on @cmdline.  The
        exit status of the remote process will be equal to the last value
        that was set with this function.

        In the case that the commandline invocation is local, the situation
        is slightly more complicated.  If the commandline invocation results
        in the mainloop running (ie: because the use-count of the application
        increased to a non-zero value) then the application is considered to
        have been 'successful' in a certain sense, and the exit status is
        always zero.  If the application use count is zero, though, the exit
        status of the local #GApplicationCommandLine is used.
        """
        ...


    ...

class BufferedInputStream(FilterInputStream, Seekable):
    """
    Buffered input stream implements #GFilterInputStream and provides
    for buffered reads.

    By default, #GBufferedInputStream's buffer size is set at 4 kilobytes.

    To create a buffered input stream, use g_buffered_input_stream_new(),
    or g_buffered_input_stream_new_sized() to specify the buffer's size at
    construction.

    To get the size of a buffer within a buffered input stream, use
    g_buffered_input_stream_get_buffer_size(). To change the size of a
    buffered input stream's buffer, use
    g_buffered_input_stream_set_buffer_size(). Note that the buffer's size
    cannot be reduced below the size of the data within the buffer.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, base_stream: InputStream) -> InputStream:
        """
        Creates a new #GInputStream from the given @base_stream, with
        a buffer set to the default size (4 kilobytes).
        """
        ...


    @classmethod
    def new_sized(cls, base_stream: InputStream, size: int) -> InputStream:
        """
        Creates a new #GBufferedInputStream from the given @base_stream,
        with a buffer set to @size.
        """
        ...

    def fill(self, count: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Tries to read @count bytes from the stream into the buffer.
        Will block during this read.

        If @count is zero, returns zero and does nothing. A value of @count
        larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

        On success, the number of bytes read into the buffer is returned.
        It is not an error if this is not the same as the requested size, as it
        can happen e.g. near the end of a file. Zero is returned on end of file
        (or if @count is zero),  but never otherwise.

        If @count is -1 then the attempted read size is equal to the number of
        bytes that are required to fill the buffer.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
        operation was partially finished when the operation was cancelled the
        partial result will be returned, without an error.

        On error -1 is returned and @error is set accordingly.

        For the asynchronous, non-blocking, version of this function, see
        g_buffered_input_stream_fill_async().
        """
        ...

    def fill_async(self, count: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Reads data into @stream's buffer asynchronously, up to @count size.
        @io_priority can be used to prioritize reads. For the synchronous
        version of this function, see g_buffered_input_stream_fill().

        If @count is -1 then the attempted read size is equal to the number
        of bytes that are required to fill the buffer.
        """
        ...

    def fill_finish(self, result: AsyncResult) -> int:
        """
        Finishes an asynchronous read.
        """
        ...

    def get_available(self) -> int:
        """
        Gets the size of the available data within the stream.
        """
        ...

    def get_buffer_size(self) -> int:
        """
        Gets the size of the input buffer.
        """
        ...

    def peek(self, buffer: object, offset: int, count: int) -> int:
        """
        Peeks in the buffer, copying data of size @count into @buffer,
        offset @offset bytes.
        """
        ...

    def peek_buffer(self, count: int) -> object:
        """
        Returns the buffer with the currently available bytes. The returned
        buffer must not be modified and will become invalid when reading from
        the stream or filling the buffer.
        """
        ...

    def read_byte(self, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Tries to read a single byte from the stream or the buffer. Will block
        during this read.

        On success, the byte read from the stream is returned. On end of stream
        -1 is returned but it's not an exceptional error and @error is not set.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
        operation was partially finished when the operation was cancelled the
        partial result will be returned, without an error.

        On error -1 is returned and @error is set accordingly.
        """
        ...

    def set_buffer_size(self, size: int) -> object:
        """
        Sets the size of the internal buffer of @stream to @size, or to the
        size of the contents of the buffer. The buffer can never be resized
        smaller than its current contents.
        """
        ...


    ...

class BufferedOutputStream(FilterOutputStream, Seekable):
    """
    Buffered output stream implements #GFilterOutputStream and provides
    for buffered writes.

    By default, #GBufferedOutputStream's buffer size is set at 4 kilobytes.

    To create a buffered output stream, use g_buffered_output_stream_new(),
    or g_buffered_output_stream_new_sized() to specify the buffer's size
    at construction.

    To get the size of a buffer within a buffered input stream, use
    g_buffered_output_stream_get_buffer_size(). To change the size of a
    buffered output stream's buffer, use
    g_buffered_output_stream_set_buffer_size(). Note that the buffer's
    size cannot be reduced below the size of the data within the buffer.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, base_stream: OutputStream) -> OutputStream:
        """
        Creates a new buffered output stream for a base stream.
        """
        ...


    @classmethod
    def new_sized(cls, base_stream: OutputStream, size: int) -> OutputStream:
        """
        Creates a new buffered output stream with a given buffer size.
        """
        ...

    def get_auto_grow(self) -> bool:
        """
        Checks if the buffer automatically grows as data is added.
        """
        ...

    def get_buffer_size(self) -> int:
        """
        Gets the size of the buffer in the @stream.
        """
        ...

    def set_auto_grow(self, auto_grow: bool) -> object:
        """
        Sets whether or not the @stream's buffer should automatically grow.
        If @auto_grow is true, then each write will just make the buffer
        larger, and you must manually flush the buffer to actually write out
        the data to the underlying stream.
        """
        ...

    def set_buffer_size(self, size: int) -> object:
        """
        Sets the size of the internal buffer to @size.
        """
        ...


    ...

class BytesIcon(GObject.Object, Icon, LoadableIcon):
    """
    #GBytesIcon specifies an image held in memory in a common format (usually
    png) to be used as icon.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, bytes: GLib.Bytes) -> BytesIcon:
        """
        Creates a new icon for a bytes.

        This cannot fail, but loading and interpreting the bytes may fail later on
        (for example, if g_loadable_icon_load() is called) if the image is invalid.
        """
        ...

    def get_bytes(self) -> GLib.Bytes:
        """
        Gets the #GBytes associated with the given @icon.
        """
        ...


    ...

class Cancellable(GObject.Object):
    """
    GCancellable is a thread-safe operation cancellation stack used
    throughout GIO to allow for cancellation of synchronous and
    asynchronous operations.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Cancellable:
        """
        Creates a new #GCancellable object.

        Applications that want to start one or more operations
        that should be cancellable should create a #GCancellable
        and pass it to the operations.

        One #GCancellable can be used in multiple consecutive
        operations or in multiple concurrent operations.
        """
        ...

    def cancel(self) -> object:
        """
        Will set @cancellable to cancelled, and will emit the
        #GCancellable::cancelled signal. (However, see the warning about
        race conditions in the documentation for that signal if you are
        planning to connect to it.)

        This function is thread-safe. In other words, you can safely call
        it from a thread other than the one running the operation that was
        passed the @cancellable.

        If @cancellable is %NULL, this function returns immediately for convenience.

        The convention within GIO is that cancelling an asynchronous
        operation causes it to complete asynchronously. That is, if you
        cancel the operation from the same thread in which it is running,
        then the operation's #GAsyncReadyCallback will not be invoked until
        the application returns to the main loop.
        """
        ...

    def connect(self, callback: GObject.Callback, data: _T.Optional[object], data_destroy_func: _T.Optional[GLib.DestroyNotify]) -> int:
        """
        Convenience function to connect to the #GCancellable::cancelled
        signal. Also handles the race condition that may happen
        if the cancellable is cancelled right before connecting.

        @callback is called at most once, either directly at the
        time of the connect if @cancellable is already cancelled,
        or when @cancellable is cancelled in some thread.

        @data_destroy_func will be called when the handler is
        disconnected, or immediately if the cancellable is already
        cancelled.

        See #GCancellable::cancelled for details on how to use this.

        Since GLib 2.40, the lock protecting @cancellable is not held when
        @callback is invoked.  This lifts a restriction in place for
        earlier GLib versions which now makes it easier to write cleanup
        code that unconditionally invokes e.g. g_cancellable_cancel().
        """
        ...

    def disconnect(self, handler_id: int) -> object:
        """
        Disconnects a handler from a cancellable instance similar to
        g_signal_handler_disconnect().  Additionally, in the event that a
        signal handler is currently running, this call will block until the
        handler has finished.  Calling this function from a
        #GCancellable::cancelled signal handler will therefore result in a
        deadlock.

        This avoids a race condition where a thread cancels at the
        same time as the cancellable operation is finished and the
        signal handler is removed. See #GCancellable::cancelled for
        details on how to use this.

        If @cancellable is %NULL or @handler_id is `0` this function does
        nothing.
        """
        ...

    def get_fd(self) -> int:
        """
        Gets the file descriptor for a cancellable job. This can be used to
        implement cancellable operations on Unix systems. The returned fd will
        turn readable when @cancellable is cancelled.

        You are not supposed to read from the fd yourself, just check for
        readable status. Reading to unset the readable status is done
        with g_cancellable_reset().

        After a successful return from this function, you should use
        g_cancellable_release_fd() to free up resources allocated for
        the returned file descriptor.

        See also g_cancellable_make_pollfd().
        """
        ...

    def is_cancelled(self) -> bool:
        """
        Checks if a cancellable job has been cancelled.
        """
        ...

    def make_pollfd(self, pollfd: GLib.PollFD) -> bool:
        """
        Creates a #GPollFD corresponding to @cancellable; this can be passed
        to g_poll() and used to poll for cancellation. This is useful both
        for unix systems without a native poll and for portability to
        windows.

        When this function returns %TRUE, you should use
        g_cancellable_release_fd() to free up resources allocated for the
        @pollfd. After a %FALSE return, do not call g_cancellable_release_fd().

        If this function returns %FALSE, either no @cancellable was given or
        resource limits prevent this function from allocating the necessary
        structures for polling. (On Linux, you will likely have reached
        the maximum number of file descriptors.) The suggested way to handle
        these cases is to ignore the @cancellable.

        You are not supposed to read from the fd yourself, just check for
        readable status. Reading to unset the readable status is done
        with g_cancellable_reset().
        """
        ...

    def pop_current(self) -> object:
        """
        Pops @cancellable off the cancellable stack (verifying that @cancellable
        is on the top of the stack).
        """
        ...

    def push_current(self) -> object:
        """
        Pushes @cancellable onto the cancellable stack. The current
        cancellable can then be received using g_cancellable_get_current().

        This is useful when implementing cancellable operations in
        code that does not allow you to pass down the cancellable object.

        This is typically called automatically by e.g. #GFile operations,
        so you rarely have to call this yourself.
        """
        ...

    def release_fd(self) -> object:
        """
        Releases a resources previously allocated by g_cancellable_get_fd()
        or g_cancellable_make_pollfd().

        For compatibility reasons with older releases, calling this function
        is not strictly required, the resources will be automatically freed
        when the @cancellable is finalized. However, the @cancellable will
        block scarce file descriptors until it is finalized if this function
        is not called. This can cause the application to run out of file
        descriptors when many #GCancellables are used at the same time.
        """
        ...

    def reset(self) -> object:
        """
        Resets @cancellable to its uncancelled state.

        If cancellable is currently in use by any cancellable operation
        then the behavior of this function is undefined.

        Note that it is generally not a good idea to reuse an existing
        cancellable for more operations after it has been cancelled once,
        as this function might tempt you to do. The recommended practice
        is to drop the reference to a cancellable after cancelling it,
        and let it die with the outstanding async operations. You should
        create a fresh cancellable for further async operations.
        """
        ...

    def set_error_if_cancelled(self) -> bool:
        """
        If the @cancellable is cancelled, sets the error to notify
        that the operation was cancelled.
        """
        ...

    def source_new(self) -> GLib.Source:
        """
        Creates a source that triggers if @cancellable is cancelled and
        calls its callback of type #GCancellableSourceFunc. This is
        primarily useful for attaching to another (non-cancellable) source
        with g_source_add_child_source() to add cancellability to it.

        For convenience, you can call this with a %NULL #GCancellable,
        in which case the source will never trigger.

        The new #GSource will hold a reference to the #GCancellable.
        """
        ...


    ...

class CharsetConverter(GObject.Object, Converter, Initable):
    """
    #GCharsetConverter is an implementation of #GConverter based on
    GIConv.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, to_charset: str, from_charset: str) -> CharsetConverter:
        """
        Creates a new #GCharsetConverter.
        """
        ...

    def get_num_fallbacks(self) -> int:
        """
        Gets the number of fallbacks that @converter has applied so far.
        """
        ...

    def get_use_fallback(self) -> bool:
        """
        Gets the #GCharsetConverter:use-fallback property.
        """
        ...

    def set_use_fallback(self, use_fallback: bool) -> object:
        """
        Sets the #GCharsetConverter:use-fallback property.
        """
        ...


    ...

class ConverterInputStream(FilterInputStream, PollableInputStream):
    """
    Converter input stream implements #GInputStream and allows
    conversion of data of various types during reading.

    As of GLib 2.34, #GConverterInputStream implements
    #GPollableInputStream.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, base_stream: InputStream, converter: Converter) -> InputStream:
        """
        Creates a new converter input stream for the @base_stream.
        """
        ...

    def get_converter(self) -> Converter:
        """
        Gets the #GConverter that is used by @converter_stream.
        """
        ...


    ...

class ConverterOutputStream(FilterOutputStream, PollableOutputStream):
    """
    Converter output stream implements #GOutputStream and allows
    conversion of data of various types during reading.

    As of GLib 2.34, #GConverterOutputStream implements
    #GPollableOutputStream.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, base_stream: OutputStream, converter: Converter) -> OutputStream:
        """
        Creates a new converter output stream for the @base_stream.
        """
        ...

    def get_converter(self) -> Converter:
        """
        Gets the #GConverter that is used by @converter_stream.
        """
        ...


    ...

class Credentials(GObject.Object):
    """
    The #GCredentials type is a reference-counted wrapper for native
    credentials. This information is typically used for identifying,
    authenticating and authorizing other processes.

    Some operating systems supports looking up the credentials of the
    remote peer of a communication endpoint - see e.g.
    g_socket_get_credentials().

    Some operating systems supports securely sending and receiving
    credentials over a Unix Domain Socket, see
    #GUnixCredentialsMessage, g_unix_connection_send_credentials() and
    g_unix_connection_receive_credentials() for details.

    On Linux, the native credential type is a `struct ucred` - see the
    unix(7) man page for details. This corresponds to
    %G_CREDENTIALS_TYPE_LINUX_UCRED.

    On Apple operating systems (including iOS, tvOS, and macOS),
    the native credential type is a `struct xucred`.
    This corresponds to %G_CREDENTIALS_TYPE_APPLE_XUCRED.

    On FreeBSD, Debian GNU/kFreeBSD, and GNU/Hurd, the native
    credential type is a `struct cmsgcred`. This corresponds
    to %G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED.

    On NetBSD, the native credential type is a `struct unpcbid`.
    This corresponds to %G_CREDENTIALS_TYPE_NETBSD_UNPCBID.

    On OpenBSD, the native credential type is a `struct sockpeercred`.
    This corresponds to %G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED.

    On Solaris (including OpenSolaris and its derivatives), the native
    credential type is a `ucred_t`. This corresponds to
    %G_CREDENTIALS_TYPE_SOLARIS_UCRED.

    Since GLib 2.72, on Windows, the native credentials may contain the PID of a
    process. This corresponds to %G_CREDENTIALS_TYPE_WIN32_PID.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Credentials:
        """
        Creates a new #GCredentials object with credentials matching the
        the current process.
        """
        ...

    def get_native(self, native_type: CredentialsType) -> object:
        """
        Gets a pointer to native credentials of type @native_type from
        @credentials.

        It is a programming error (which will cause a warning to be
        logged) to use this method if there is no #GCredentials support for
        the OS or if @native_type isn't supported by the OS.
        """
        ...

    def get_unix_pid(self) -> int:
        """
        Tries to get the UNIX process identifier from @credentials. This
        method is only available on UNIX platforms.

        This operation can fail if #GCredentials is not supported on the
        OS or if the native credentials type does not contain information
        about the UNIX process ID.
        """
        ...

    def get_unix_user(self) -> int:
        """
        Tries to get the UNIX user identifier from @credentials. This
        method is only available on UNIX platforms.

        This operation can fail if #GCredentials is not supported on the
        OS or if the native credentials type does not contain information
        about the UNIX user.
        """
        ...

    def is_same_user(self, other_credentials: Credentials) -> bool:
        """
        Checks if @credentials and @other_credentials is the same user.

        This operation can fail if #GCredentials is not supported on the
        the OS.
        """
        ...

    def set_native(self, native_type: CredentialsType, native: object) -> object:
        """
        Copies the native credentials of type @native_type from @native
        into @credentials.

        It is a programming error (which will cause a warning to be
        logged) to use this method if there is no #GCredentials support for
        the OS or if @native_type isn't supported by the OS.
        """
        ...

    def set_unix_user(self, uid: int) -> bool:
        """
        Tries to set the UNIX user identifier on @credentials. This method
        is only available on UNIX platforms.

        This operation can fail if #GCredentials is not supported on the
        OS or if the native credentials type does not contain information
        about the UNIX user. It can also fail if the OS does not allow the
        use of "spoofed" credentials.
        """
        ...

    def to_string(self) -> str:
        """
        Creates a human-readable textual representation of @credentials
        that can be used in logging and debug messages. The format of the
        returned string may change in future GLib release.
        """
        ...


    ...

class DBusActionGroup(GObject.Object, ActionGroup, RemoteActionGroup):
    """
    #GDBusActionGroup is an implementation of the #GActionGroup
    interface that can be used as a proxy for an action group
    that is exported over D-Bus with g_dbus_connection_export_action_group().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class DBusAuthObserver(GObject.Object):
    """
    The #GDBusAuthObserver type provides a mechanism for participating
    in how a #GDBusServer (or a #GDBusConnection) authenticates remote
    peers. Simply instantiate a #GDBusAuthObserver and connect to the
    signals you are interested in. Note that new signals may be added
    in the future

    ## Controlling Authentication Mechanisms

    By default, a #GDBusServer or server-side #GDBusConnection will allow
    any authentication mechanism to be used. If you only
    want to allow D-Bus connections with the `EXTERNAL` mechanism,
    which makes use of credentials passing and is the recommended
    mechanism for modern Unix platforms such as Linux and the BSD family,
    you would use a signal handler like this:

    |[<!-- language="C" -->
    static gboolean
    on_allow_mechanism (GDBusAuthObserver *observer,
                        const gchar       *mechanism,
                        gpointer           user_data)
    {
      if (g_strcmp0 (mechanism, "EXTERNAL") == 0)
        {
          return TRUE;
        }

      return FALSE;
    }
    ]|

    ## Controlling Authorization # {#auth-observer}

    By default, a #GDBusServer or server-side #GDBusConnection will accept
    connections from any successfully authenticated user (but not from
    anonymous connections using the `ANONYMOUS` mechanism). If you only
    want to allow D-Bus connections from processes owned by the same uid
    as the server, since GLib 2.68, you should use the
    %G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER flag. It’s equivalent
    to the following signal handler:

    |[<!-- language="C" -->
    static gboolean
    on_authorize_authenticated_peer (GDBusAuthObserver *observer,
                                     GIOStream         *stream,
                                     GCredentials      *credentials,
                                     gpointer           user_data)
    {
      gboolean authorized;

      authorized = FALSE;
      if (credentials != NULL)
        {
          GCredentials *own_credentials;
          own_credentials = g_credentials_new ();
          if (g_credentials_is_same_user (credentials, own_credentials, NULL))
            authorized = TRUE;
          g_object_unref (own_credentials);
        }

      return authorized;
    }
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> DBusAuthObserver:
        """
        Creates a new #GDBusAuthObserver object.
        """
        ...

    def allow_mechanism(self, mechanism: str) -> bool:
        """
        Emits the #GDBusAuthObserver::allow-mechanism signal on @observer.
        """
        ...

    def authorize_authenticated_peer(self, stream: IOStream, credentials: _T.Optional[Credentials]) -> bool:
        """
        Emits the #GDBusAuthObserver::authorize-authenticated-peer signal on @observer.
        """
        ...


    ...

class DBusConnection(GObject.Object, AsyncInitable, Initable):
    """
    The #GDBusConnection type is used for D-Bus connections to remote
    peers such as a message buses. It is a low-level API that offers a
    lot of flexibility. For instance, it lets you establish a connection
    over any transport that can by represented as a #GIOStream.

    This class is rarely used directly in D-Bus clients. If you are writing
    a D-Bus client, it is often easier to use the g_bus_own_name(),
    g_bus_watch_name() or g_dbus_proxy_new_for_bus() APIs.

    As an exception to the usual GLib rule that a particular object must not
    be used by two threads at the same time, #GDBusConnection's methods may be
    called from any thread. This is so that g_bus_get() and g_bus_get_sync()
    can safely return the same #GDBusConnection when called from any thread.

    Most of the ways to obtain a #GDBusConnection automatically initialize it
    (i.e. connect to D-Bus): for instance, g_dbus_connection_new() and
    g_bus_get(), and the synchronous versions of those methods, give you an
    initialized connection. Language bindings for GIO should use
    g_initable_new() or g_async_initable_new_async(), which also initialize the
    connection.

    If you construct an uninitialized #GDBusConnection, such as via
    g_object_new(), you must initialize it via g_initable_init() or
    g_async_initable_init_async() before using its methods or properties.
    Calling methods or accessing properties on a #GDBusConnection that has not
    completed initialization successfully is considered to be invalid, and leads
    to undefined behaviour. In particular, if initialization fails with a
    #GError, the only valid thing you can do with that #GDBusConnection is to
    free it with g_object_unref().

    ## An example D-Bus server # {#gdbus-server}

    Here is an example for a D-Bus server:
    [gdbus-example-server.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-server.c)

    ## An example for exporting a subtree # {#gdbus-subtree-server}

    Here is an example for exporting a subtree:
    [gdbus-example-subtree.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-subtree.c)

    ## An example for file descriptor passing # {#gdbus-unix-fd-client}

    Here is an example for passing UNIX file descriptors:
    [gdbus-unix-fd-client.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-unix-fd-client.c)

    ## An example for exporting a GObject # {#gdbus-export}

    Here is an example for exporting a #GObject:
    [gdbus-example-export.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-export.c)
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_finish(cls, res: AsyncResult) -> DBusConnection:
        """
        Finishes an operation started with g_dbus_connection_new().
        """
        ...


    @classmethod
    def new_for_address_finish(cls, res: AsyncResult) -> DBusConnection:
        """
        Finishes an operation started with g_dbus_connection_new_for_address().
        """
        ...


    @classmethod
    def new_for_address_sync(cls, address: str, flags: DBusConnectionFlags, observer: _T.Optional[DBusAuthObserver], cancellable: _T.Optional[Cancellable]) -> DBusConnection:
        """
        Synchronously connects and sets up a D-Bus client connection for
        exchanging D-Bus messages with an endpoint specified by @address
        which must be in the
        [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html#addresses).

        This constructor can only be used to initiate client-side
        connections - use g_dbus_connection_new_sync() if you need to act
        as the server. In particular, @flags cannot contain the
        %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER,
        %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS or
        %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER flags.

        This is a synchronous failable constructor. See
        g_dbus_connection_new_for_address() for the asynchronous version.

        If @observer is not %NULL it may be used to control the
        authentication process.
        """
        ...


    @classmethod
    def new_sync(cls, stream: IOStream, guid: _T.Optional[str], flags: DBusConnectionFlags, observer: _T.Optional[DBusAuthObserver], cancellable: _T.Optional[Cancellable]) -> DBusConnection:
        """
        Synchronously sets up a D-Bus connection for exchanging D-Bus messages
        with the end represented by @stream.

        If @stream is a #GSocketConnection, then the corresponding #GSocket
        will be put into non-blocking mode.

        The D-Bus connection will interact with @stream from a worker thread.
        As a result, the caller should not interact with @stream after this
        method has been called, except by calling g_object_unref() on it.

        If @observer is not %NULL it may be used to control the
        authentication process.

        This is a synchronous failable constructor. See
        g_dbus_connection_new() for the asynchronous version.
        """
        ...

    def add_filter(self, filter_function: DBusMessageFilterFunction, user_data: _T.Optional[object], user_data_free_func: GLib.DestroyNotify) -> int:
        """
        Adds a message filter. Filters are handlers that are run on all
        incoming and outgoing messages, prior to standard dispatch. Filters
        are run in the order that they were added.  The same handler can be
        added as a filter more than once, in which case it will be run more
        than once.  Filters added during a filter callback won't be run on
        the message being processed. Filter functions are allowed to modify
        and even drop messages.

        Note that filters are run in a dedicated message handling thread so
        they can't block and, generally, can't do anything but signal a
        worker thread. Also note that filters are rarely needed - use API
        such as g_dbus_connection_send_message_with_reply(),
        g_dbus_connection_signal_subscribe() or g_dbus_connection_call() instead.

        If a filter consumes an incoming message the message is not
        dispatched anywhere else - not even the standard dispatch machinery
        (that API such as g_dbus_connection_signal_subscribe() and
        g_dbus_connection_send_message_with_reply() relies on) will see the
        message. Similarly, if a filter consumes an outgoing message, the
        message will not be sent to the other peer.

        If @user_data_free_func is non-%NULL, it will be called (in the
        thread-default main context of the thread you are calling this
        method from) at some point after @user_data is no longer
        needed. (It is not guaranteed to be called synchronously when the
        filter is removed, and may be called after @connection has been
        destroyed.)
        """
        ...

    def call(self, bus_name: _T.Optional[str], object_path: str, interface_name: str, method_name: str, parameters: _T.Optional[GLib.Variant], reply_type: _T.Optional[GLib.VariantType], flags: DBusCallFlags, timeout_msec: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously invokes the @method_name method on the
        @interface_name D-Bus interface on the remote object at
        @object_path owned by @bus_name.

        If @connection is closed then the operation will fail with
        %G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
        fail with %G_IO_ERROR_CANCELLED. If @parameters contains a value
        not compatible with the D-Bus protocol, the operation fails with
        %G_IO_ERROR_INVALID_ARGUMENT.

        If @reply_type is non-%NULL then the reply will be checked for having this type and an
        error will be raised if it does not match.  Said another way, if you give a @reply_type
        then any non-%NULL return value will be of this type. Unless it’s
        %G_VARIANT_TYPE_UNIT, the @reply_type will be a tuple containing one or more
        values.

        If the @parameters #GVariant is floating, it is consumed. This allows
        convenient 'inline' use of g_variant_new(), e.g.:
        |[<!-- language="C" -->
         g_dbus_connection_call (connection,
                                 "org.freedesktop.StringThings",
                                 "/org/freedesktop/StringThings",
                                 "org.freedesktop.StringThings",
                                 "TwoStrings",
                                 g_variant_new ("(ss)",
                                                "Thing One",
                                                "Thing Two"),
                                 NULL,
                                 G_DBUS_CALL_FLAGS_NONE,
                                 -1,
                                 NULL,
                                 (GAsyncReadyCallback) two_strings_done,
                                 NULL);
        ]|

        This is an asynchronous method. When the operation is finished,
        @callback will be invoked in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread you are calling this method from. You can then call
        g_dbus_connection_call_finish() to get the result of the operation.
        See g_dbus_connection_call_sync() for the synchronous version of this
        function.

        If @callback is %NULL then the D-Bus method call message will be sent with
        the %G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED flag set.
        """
        ...

    def call_finish(self, res: AsyncResult) -> GLib.Variant:
        """
        Finishes an operation started with g_dbus_connection_call().
        """
        ...

    def call_sync(self, bus_name: _T.Optional[str], object_path: str, interface_name: str, method_name: str, parameters: _T.Optional[GLib.Variant], reply_type: _T.Optional[GLib.VariantType], flags: DBusCallFlags, timeout_msec: int, cancellable: _T.Optional[Cancellable]) -> GLib.Variant:
        """
        Synchronously invokes the @method_name method on the
        @interface_name D-Bus interface on the remote object at
        @object_path owned by @bus_name.

        If @connection is closed then the operation will fail with
        %G_IO_ERROR_CLOSED. If @cancellable is canceled, the
        operation will fail with %G_IO_ERROR_CANCELLED. If @parameters
        contains a value not compatible with the D-Bus protocol, the operation
        fails with %G_IO_ERROR_INVALID_ARGUMENT.

        If @reply_type is non-%NULL then the reply will be checked for having
        this type and an error will be raised if it does not match.  Said
        another way, if you give a @reply_type then any non-%NULL return
        value will be of this type.

        If the @parameters #GVariant is floating, it is consumed.
        This allows convenient 'inline' use of g_variant_new(), e.g.:
        |[<!-- language="C" -->
         g_dbus_connection_call_sync (connection,
                                      "org.freedesktop.StringThings",
                                      "/org/freedesktop/StringThings",
                                      "org.freedesktop.StringThings",
                                      "TwoStrings",
                                      g_variant_new ("(ss)",
                                                     "Thing One",
                                                     "Thing Two"),
                                      NULL,
                                      G_DBUS_CALL_FLAGS_NONE,
                                      -1,
                                      NULL,
                                      &error);
        ]|

        The calling thread is blocked until a reply is received. See
        g_dbus_connection_call() for the asynchronous version of
        this method.
        """
        ...

    def call_with_unix_fd_list(self, bus_name: _T.Optional[str], object_path: str, interface_name: str, method_name: str, parameters: _T.Optional[GLib.Variant], reply_type: _T.Optional[GLib.VariantType], flags: DBusCallFlags, timeout_msec: int, fd_list: _T.Optional[UnixFDList], cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Like g_dbus_connection_call() but also takes a #GUnixFDList object.

        The file descriptors normally correspond to %G_VARIANT_TYPE_HANDLE
        values in the body of the message. For example, if a message contains
        two file descriptors, @fd_list would have length 2, and
        `g_variant_new_handle (0)` and `g_variant_new_handle (1)` would appear
        somewhere in the body of the message (not necessarily in that order!)
        to represent the file descriptors at indexes 0 and 1 respectively.

        When designing D-Bus APIs that are intended to be interoperable,
        please note that non-GDBus implementations of D-Bus can usually only
        access file descriptors if they are referenced in this way by a
        value of type %G_VARIANT_TYPE_HANDLE in the body of the message.

        This method is only available on UNIX.
        """
        ...

    def call_with_unix_fd_list_finish(self, out_fd_list: UnixFDList, res: AsyncResult) -> GLib.Variant:
        """
        Finishes an operation started with g_dbus_connection_call_with_unix_fd_list().

        The file descriptors normally correspond to %G_VARIANT_TYPE_HANDLE
        values in the body of the message. For example,
        if g_variant_get_handle() returns 5, that is intended to be a reference
        to the file descriptor that can be accessed by
        `g_unix_fd_list_get (*out_fd_list, 5, ...)`.

        When designing D-Bus APIs that are intended to be interoperable,
        please note that non-GDBus implementations of D-Bus can usually only
        access file descriptors if they are referenced in this way by a
        value of type %G_VARIANT_TYPE_HANDLE in the body of the message.
        """
        ...

    def call_with_unix_fd_list_sync(self, bus_name: _T.Optional[str], object_path: str, interface_name: str, method_name: str, parameters: _T.Optional[GLib.Variant], reply_type: _T.Optional[GLib.VariantType], flags: DBusCallFlags, timeout_msec: int, fd_list: _T.Optional[UnixFDList], out_fd_list: UnixFDList, cancellable: _T.Optional[Cancellable]) -> GLib.Variant:
        """
        Like g_dbus_connection_call_sync() but also takes and returns #GUnixFDList objects.
        See g_dbus_connection_call_with_unix_fd_list() and
        g_dbus_connection_call_with_unix_fd_list_finish() for more details.

        This method is only available on UNIX.
        """
        ...

    def close(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Closes @connection. Note that this never causes the process to
        exit (this might only happen if the other end of a shared message
        bus connection disconnects, see #GDBusConnection:exit-on-close).

        Once the connection is closed, operations such as sending a message
        will return with the error %G_IO_ERROR_CLOSED. Closing a connection
        will not automatically flush the connection so queued messages may
        be lost. Use g_dbus_connection_flush() if you need such guarantees.

        If @connection is already closed, this method fails with
        %G_IO_ERROR_CLOSED.

        When @connection has been closed, the #GDBusConnection::closed
        signal is emitted in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread that @connection was constructed in.

        This is an asynchronous method. When the operation is finished,
        @callback will be invoked in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread you are calling this method from. You can
        then call g_dbus_connection_close_finish() to get the result of the
        operation. See g_dbus_connection_close_sync() for the synchronous
        version.
        """
        ...

    def close_finish(self, res: AsyncResult) -> bool:
        """
        Finishes an operation started with g_dbus_connection_close().
        """
        ...

    def close_sync(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Synchronously closes @connection. The calling thread is blocked
        until this is done. See g_dbus_connection_close() for the
        asynchronous version of this method and more details about what it
        does.
        """
        ...

    def emit_signal(self, destination_bus_name: _T.Optional[str], object_path: str, interface_name: str, signal_name: str, parameters: _T.Optional[GLib.Variant]) -> bool:
        """
        Emits a signal.

        If the parameters GVariant is floating, it is consumed.

        This can only fail if @parameters is not compatible with the D-Bus protocol
        (%G_IO_ERROR_INVALID_ARGUMENT), or if @connection has been closed
        (%G_IO_ERROR_CLOSED).
        """
        ...

    def export_action_group(self, object_path: str, action_group: ActionGroup) -> int:
        """
        Exports @action_group on @connection at @object_path.

        The implemented D-Bus API should be considered private.  It is
        subject to change in the future.

        A given object path can only have one action group exported on it.
        If this constraint is violated, the export will fail and 0 will be
        returned (with @error set accordingly).

        You can unexport the action group using
        g_dbus_connection_unexport_action_group() with the return value of
        this function.

        The thread default main context is taken at the time of this call.
        All incoming action activations and state change requests are
        reported from this context.  Any changes on the action group that
        cause it to emit signals must also come from this same context.
        Since incoming action activations and state change requests are
        rather likely to cause changes on the action group, this effectively
        limits a given action group to being exported from only one main
        context.
        """
        ...

    def export_menu_model(self, object_path: str, menu: MenuModel) -> int:
        """
        Exports @menu on @connection at @object_path.

        The implemented D-Bus API should be considered private.
        It is subject to change in the future.

        An object path can only have one menu model exported on it. If this
        constraint is violated, the export will fail and 0 will be
        returned (with @error set accordingly).

        You can unexport the menu model using
        g_dbus_connection_unexport_menu_model() with the return value of
        this function.
        """
        ...

    def flush(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously flushes @connection, that is, writes all queued
        outgoing message to the transport and then flushes the transport
        (using g_output_stream_flush_async()). This is useful in programs
        that wants to emit a D-Bus signal and then exit immediately. Without
        flushing the connection, there is no guaranteed that the message has
        been sent to the networking buffers in the OS kernel.

        This is an asynchronous method. When the operation is finished,
        @callback will be invoked in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread you are calling this method from. You can
        then call g_dbus_connection_flush_finish() to get the result of the
        operation. See g_dbus_connection_flush_sync() for the synchronous
        version.
        """
        ...

    def flush_finish(self, res: AsyncResult) -> bool:
        """
        Finishes an operation started with g_dbus_connection_flush().
        """
        ...

    def flush_sync(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Synchronously flushes @connection. The calling thread is blocked
        until this is done. See g_dbus_connection_flush() for the
        asynchronous version of this method and more details about what it
        does.
        """
        ...

    def get_capabilities(self) -> DBusCapabilityFlags:
        """
        Gets the capabilities negotiated with the remote peer
        """
        ...

    def get_exit_on_close(self) -> bool:
        """
        Gets whether the process is terminated when @connection is
        closed by the remote peer. See
        #GDBusConnection:exit-on-close for more details.
        """
        ...

    def get_flags(self) -> DBusConnectionFlags:
        """
        Gets the flags used to construct this connection
        """
        ...

    def get_guid(self) -> str:
        """
        The GUID of the peer performing the role of server when
        authenticating. See #GDBusConnection:guid for more details.
        """
        ...

    def get_last_serial(self) -> int:
        """
        Retrieves the last serial number assigned to a #GDBusMessage on
        the current thread. This includes messages sent via both low-level
        API such as g_dbus_connection_send_message() as well as
        high-level API such as g_dbus_connection_emit_signal(),
        g_dbus_connection_call() or g_dbus_proxy_call().
        """
        ...

    def get_peer_credentials(self) -> Credentials:
        """
        Gets the credentials of the authenticated peer. This will always
        return %NULL unless @connection acted as a server
        (e.g. %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER was passed)
        when set up and the client passed credentials as part of the
        authentication process.

        In a message bus setup, the message bus is always the server and
        each application is a client. So this method will always return
        %NULL for message bus clients.
        """
        ...

    def get_stream(self) -> IOStream:
        """
        Gets the underlying stream used for IO.

        While the #GDBusConnection is active, it will interact with this
        stream from a worker thread, so it is not safe to interact with
        the stream directly.
        """
        ...

    def get_unique_name(self) -> str:
        """
        Gets the unique name of @connection as assigned by the message
        bus. This can also be used to figure out if @connection is a
        message bus connection.
        """
        ...

    def is_closed(self) -> bool:
        """
        Gets whether @connection is closed.
        """
        ...

    def register_object(self, object_path: str, interface_info: DBusInterfaceInfo, vtable: _T.Optional[DBusInterfaceVTable], user_data: _T.Optional[object], user_data_free_func: GLib.DestroyNotify) -> int:
        """
        Registers callbacks for exported objects at @object_path with the
        D-Bus interface that is described in @interface_info.

        Calls to functions in @vtable (and @user_data_free_func) will happen
        in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread you are calling this method from.

        Note that all #GVariant values passed to functions in @vtable will match
        the signature given in @interface_info - if a remote caller passes
        incorrect values, the `org.freedesktop.DBus.Error.InvalidArgs`
        is returned to the remote caller.

        Additionally, if the remote caller attempts to invoke methods or
        access properties not mentioned in @interface_info the
        `org.freedesktop.DBus.Error.UnknownMethod` resp.
        `org.freedesktop.DBus.Error.InvalidArgs` errors
        are returned to the caller.

        It is considered a programming error if the
        #GDBusInterfaceGetPropertyFunc function in @vtable returns a
        #GVariant of incorrect type.

        If an existing callback is already registered at @object_path and
        @interface_name, then @error is set to %G_IO_ERROR_EXISTS.

        GDBus automatically implements the standard D-Bus interfaces
        org.freedesktop.DBus.Properties, org.freedesktop.DBus.Introspectable
        and org.freedesktop.Peer, so you don't have to implement those for the
        objects you export. You can implement org.freedesktop.DBus.Properties
        yourself, e.g. to handle getting and setting of properties asynchronously.

        Note that the reference count on @interface_info will be
        incremented by 1 (unless allocated statically, e.g. if the
        reference count is -1, see g_dbus_interface_info_ref()) for as long
        as the object is exported. Also note that @vtable will be copied.

        See this [server][gdbus-server] for an example of how to use this method.
        """
        ...

    def register_object_with_closures(self, object_path: str, interface_info: DBusInterfaceInfo, method_call_closure: _T.Optional[GObject.Closure], get_property_closure: _T.Optional[GObject.Closure], set_property_closure: _T.Optional[GObject.Closure]) -> int:
        """
        Version of g_dbus_connection_register_object() using closures instead of a
        #GDBusInterfaceVTable for easier binding in other languages.
        """
        ...

    def register_subtree(self, object_path: str, vtable: DBusSubtreeVTable, flags: DBusSubtreeFlags, user_data: _T.Optional[object], user_data_free_func: GLib.DestroyNotify) -> int:
        """
        Registers a whole subtree of dynamic objects.

        The @enumerate and @introspection functions in @vtable are used to
        convey, to remote callers, what nodes exist in the subtree rooted
        by @object_path.

        When handling remote calls into any node in the subtree, first the
        @enumerate function is used to check if the node exists. If the node exists
        or the %G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES flag is set
        the @introspection function is used to check if the node supports the
        requested method. If so, the @dispatch function is used to determine
        where to dispatch the call. The collected #GDBusInterfaceVTable and
        #gpointer will be used to call into the interface vtable for processing
        the request.

        All calls into user-provided code will be invoked in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread you are calling this method from.

        If an existing subtree is already registered at @object_path or
        then @error is set to %G_IO_ERROR_EXISTS.

        Note that it is valid to register regular objects (using
        g_dbus_connection_register_object()) in a subtree registered with
        g_dbus_connection_register_subtree() - if so, the subtree handler
        is tried as the last resort. One way to think about a subtree
        handler is to consider it a fallback handler for object paths not
        registered via g_dbus_connection_register_object() or other bindings.

        Note that @vtable will be copied so you cannot change it after
        registration.

        See this [server][gdbus-subtree-server] for an example of how to use
        this method.
        """
        ...

    def remove_filter(self, filter_id: int) -> object:
        """
        Removes a filter.

        Note that since filters run in a different thread, there is a race
        condition where it is possible that the filter will be running even
        after calling g_dbus_connection_remove_filter(), so you cannot just
        free data that the filter might be using. Instead, you should pass
        a #GDestroyNotify to g_dbus_connection_add_filter(), which will be
        called when it is guaranteed that the data is no longer needed.
        """
        ...

    def send_message(self, message: DBusMessage, flags: DBusSendMessageFlags, out_serial: int) -> bool:
        """
        Asynchronously sends @message to the peer represented by @connection.

        Unless @flags contain the
        %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
        will be assigned by @connection and set on @message via
        g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
        serial number used will be written to this location prior to
        submitting the message to the underlying transport. While it has a `volatile`
        qualifier, this is a historical artifact and the argument passed to it should
        not be `volatile`.

        If @connection is closed then the operation will fail with
        %G_IO_ERROR_CLOSED. If @message is not well-formed,
        the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

        See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
        for an example of how to use this low-level API to send and receive
        UNIX file descriptors.

        Note that @message must be unlocked, unless @flags contain the
        %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.
        """
        ...

    def send_message_with_reply(self, message: DBusMessage, flags: DBusSendMessageFlags, timeout_msec: int, out_serial: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously sends @message to the peer represented by @connection.

        Unless @flags contain the
        %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
        will be assigned by @connection and set on @message via
        g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
        serial number used will be written to this location prior to
        submitting the message to the underlying transport. While it has a `volatile`
        qualifier, this is a historical artifact and the argument passed to it should
        not be `volatile`.

        If @connection is closed then the operation will fail with
        %G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
        fail with %G_IO_ERROR_CANCELLED. If @message is not well-formed,
        the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

        This is an asynchronous method. When the operation is finished, @callback
        will be invoked in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread you are calling this method from. You can then call
        g_dbus_connection_send_message_with_reply_finish() to get the result of the operation.
        See g_dbus_connection_send_message_with_reply_sync() for the synchronous version.

        Note that @message must be unlocked, unless @flags contain the
        %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.

        See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
        for an example of how to use this low-level API to send and receive
        UNIX file descriptors.
        """
        ...

    def send_message_with_reply_finish(self, res: AsyncResult) -> DBusMessage:
        """
        Finishes an operation started with g_dbus_connection_send_message_with_reply().

        Note that @error is only set if a local in-process error
        occurred. That is to say that the returned #GDBusMessage object may
        be of type %G_DBUS_MESSAGE_TYPE_ERROR. Use
        g_dbus_message_to_gerror() to transcode this to a #GError.

        See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
        for an example of how to use this low-level API to send and receive
        UNIX file descriptors.
        """
        ...

    def send_message_with_reply_sync(self, message: DBusMessage, flags: DBusSendMessageFlags, timeout_msec: int, out_serial: int, cancellable: _T.Optional[Cancellable]) -> DBusMessage:
        """
        Synchronously sends @message to the peer represented by @connection
        and blocks the calling thread until a reply is received or the
        timeout is reached. See g_dbus_connection_send_message_with_reply()
        for the asynchronous version of this method.

        Unless @flags contain the
        %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
        will be assigned by @connection and set on @message via
        g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
        serial number used will be written to this location prior to
        submitting the message to the underlying transport. While it has a `volatile`
        qualifier, this is a historical artifact and the argument passed to it should
        not be `volatile`.

        If @connection is closed then the operation will fail with
        %G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
        fail with %G_IO_ERROR_CANCELLED. If @message is not well-formed,
        the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

        Note that @error is only set if a local in-process error
        occurred. That is to say that the returned #GDBusMessage object may
        be of type %G_DBUS_MESSAGE_TYPE_ERROR. Use
        g_dbus_message_to_gerror() to transcode this to a #GError.

        See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
        for an example of how to use this low-level API to send and receive
        UNIX file descriptors.

        Note that @message must be unlocked, unless @flags contain the
        %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.
        """
        ...

    def set_exit_on_close(self, exit_on_close: bool) -> object:
        """
        Sets whether the process should be terminated when @connection is
        closed by the remote peer. See #GDBusConnection:exit-on-close for
        more details.

        Note that this function should be used with care. Most modern UNIX
        desktops tie the notion of a user session with the session bus, and expect
        all of a user's applications to quit when their bus connection goes away.
        If you are setting @exit_on_close to %FALSE for the shared session
        bus connection, you should make sure that your application exits
        when the user session ends.
        """
        ...

    def signal_subscribe(self, sender: _T.Optional[str], interface_name: _T.Optional[str], member: _T.Optional[str], object_path: _T.Optional[str], arg0: _T.Optional[str], flags: DBusSignalFlags, callback: DBusSignalCallback, user_data: _T.Optional[object], user_data_free_func: _T.Optional[GLib.DestroyNotify]) -> int:
        """
        Subscribes to signals on @connection and invokes @callback with a whenever
        the signal is received. Note that @callback will be invoked in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread you are calling this method from.

        If @connection is not a message bus connection, @sender must be
        %NULL.

        If @sender is a well-known name note that @callback is invoked with
        the unique name for the owner of @sender, not the well-known name
        as one would expect. This is because the message bus rewrites the
        name. As such, to avoid certain race conditions, users should be
        tracking the name owner of the well-known name and use that when
        processing the received signal.

        If one of %G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE or
        %G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH are given, @arg0 is
        interpreted as part of a namespace or path.  The first argument
        of a signal is matched against that part as specified by D-Bus.

        If @user_data_free_func is non-%NULL, it will be called (in the
        thread-default main context of the thread you are calling this
        method from) at some point after @user_data is no longer
        needed. (It is not guaranteed to be called synchronously when the
        signal is unsubscribed from, and may be called after @connection
        has been destroyed.)

        As @callback is potentially invoked in a different thread from where it’s
        emitted, it’s possible for this to happen after
        g_dbus_connection_signal_unsubscribe() has been called in another thread.
        Due to this, @user_data should have a strong reference which is freed with
        @user_data_free_func, rather than pointing to data whose lifecycle is tied
        to the signal subscription. For example, if a #GObject is used to store the
        subscription ID from g_dbus_connection_signal_subscribe(), a strong reference
        to that #GObject must be passed to @user_data, and g_object_unref() passed to
        @user_data_free_func. You are responsible for breaking the resulting
        reference count cycle by explicitly unsubscribing from the signal when
        dropping the last external reference to the #GObject. Alternatively, a weak
        reference may be used.

        It is guaranteed that if you unsubscribe from a signal using
        g_dbus_connection_signal_unsubscribe() from the same thread which made the
        corresponding g_dbus_connection_signal_subscribe() call, @callback will not
        be invoked after g_dbus_connection_signal_unsubscribe() returns.

        The returned subscription identifier is an opaque value which is guaranteed
        to never be zero.

        This function can never fail.
        """
        ...

    def signal_unsubscribe(self, subscription_id: int) -> object:
        """
        Unsubscribes from signals.

        Note that there may still be D-Bus traffic to process (relating to this
        signal subscription) in the current thread-default #GMainContext after this
        function has returned. You should continue to iterate the #GMainContext
        until the #GDestroyNotify function passed to
        g_dbus_connection_signal_subscribe() is called, in order to avoid memory
        leaks through callbacks queued on the #GMainContext after it’s stopped being
        iterated.
        Alternatively, any idle source with a priority lower than %G_PRIORITY_DEFAULT
        that was scheduled after unsubscription, also indicates that all resources
        of this subscription are released.
        """
        ...

    def start_message_processing(self) -> object:
        """
        If @connection was created with
        %G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING, this method
        starts processing messages. Does nothing on if @connection wasn't
        created with this flag or if the method has already been called.
        """
        ...

    def unexport_action_group(self, export_id: int) -> object:
        """
        Reverses the effect of a previous call to
        g_dbus_connection_export_action_group().

        It is an error to call this function with an ID that wasn't returned
        from g_dbus_connection_export_action_group() or to call it with the
        same ID more than once.
        """
        ...

    def unexport_menu_model(self, export_id: int) -> object:
        """
        Reverses the effect of a previous call to
        g_dbus_connection_export_menu_model().

        It is an error to call this function with an ID that wasn't returned
        from g_dbus_connection_export_menu_model() or to call it with the
        same ID more than once.
        """
        ...

    def unregister_object(self, registration_id: int) -> bool:
        """
        Unregisters an object.
        """
        ...

    def unregister_subtree(self, registration_id: int) -> bool:
        """
        Unregisters a subtree.
        """
        ...


    ...

class DBusInterfaceSkeleton(GObject.Object, DBusInterface):
    """
    Abstract base class for D-Bus interfaces on the service side.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def export(self, connection: DBusConnection, object_path: str) -> bool:
        """
        Exports @interface_ at @object_path on @connection.

        This can be called multiple times to export the same @interface_
        onto multiple connections however the @object_path provided must be
        the same for all connections.

        Use g_dbus_interface_skeleton_unexport() to unexport the object.
        """
        ...

    def flush(self) -> object:
        """
        If @interface_ has outstanding changes, request for these changes to be
        emitted immediately.

        For example, an exported D-Bus interface may queue up property
        changes and emit the
        `org.freedesktop.DBus.Properties.PropertiesChanged`
        signal later (e.g. in an idle handler). This technique is useful
        for collapsing multiple property changes into one.
        """
        ...

    def get_connection(self) -> DBusConnection:
        """
        Gets the first connection that @interface_ is exported on, if any.
        """
        ...

    def get_connections(self) -> GLib.List:
        """
        Gets a list of the connections that @interface_ is exported on.
        """
        ...

    def get_flags(self) -> DBusInterfaceSkeletonFlags:
        """
        Gets the #GDBusInterfaceSkeletonFlags that describes what the behavior
        of @interface_
        """
        ...

    def get_info(self) -> DBusInterfaceInfo:
        """
        Gets D-Bus introspection information for the D-Bus interface
        implemented by @interface_.
        """
        ...

    def get_object_path(self) -> str:
        """
        Gets the object path that @interface_ is exported on, if any.
        """
        ...

    def get_properties(self) -> GLib.Variant:
        """
        Gets all D-Bus properties for @interface_.
        """
        ...

    def get_vtable(self) -> DBusInterfaceVTable:
        """
        Gets the interface vtable for the D-Bus interface implemented by
        @interface_. The returned function pointers should expect @interface_
        itself to be passed as @user_data.
        """
        ...

    def has_connection(self, connection: DBusConnection) -> bool:
        """
        Checks if @interface_ is exported on @connection.
        """
        ...

    def set_flags(self, flags: DBusInterfaceSkeletonFlags) -> object:
        """
        Sets flags describing what the behavior of @skeleton should be.
        """
        ...

    def unexport(self) -> object:
        """
        Stops exporting @interface_ on all connections it is exported on.

        To unexport @interface_ from only a single connection, use
        g_dbus_interface_skeleton_unexport_from_connection()
        """
        ...

    def unexport_from_connection(self, connection: DBusConnection) -> object:
        """
        Stops exporting @interface_ on @connection.

        To stop exporting on all connections the interface is exported on,
        use g_dbus_interface_skeleton_unexport().
        """
        ...


    ...

class DBusMenuModel(MenuModel):
    """
    #GDBusMenuModel is an implementation of #GMenuModel that can be used
    as a proxy for a menu model that is exported over D-Bus with
    g_dbus_connection_export_menu_model().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class DBusMessage(GObject.Object):
    """
    A type for representing D-Bus messages that can be sent or received
    on a #GDBusConnection.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> DBusMessage:
        """
        Creates a new empty #GDBusMessage.
        """
        ...


    @classmethod
    def new_from_blob(cls, blob: object, blob_len: int, capabilities: DBusCapabilityFlags) -> DBusMessage:
        """
        Creates a new #GDBusMessage from the data stored at @blob. The byte
        order that the message was in can be retrieved using
        g_dbus_message_get_byte_order().

        If the @blob cannot be parsed, contains invalid fields, or contains invalid
        headers, %G_IO_ERROR_INVALID_ARGUMENT will be returned.
        """
        ...


    @classmethod
    def new_method_call(cls, name: _T.Optional[str], path: str, interface_: _T.Optional[str], method: str) -> DBusMessage:
        """
        Creates a new #GDBusMessage for a method call.
        """
        ...


    @classmethod
    def new_signal(cls, path: str, interface_: str, signal: str) -> DBusMessage:
        """
        Creates a new #GDBusMessage for a signal emission.
        """
        ...

    def copy(self) -> DBusMessage:
        """
        Copies @message. The copy is a deep copy and the returned
        #GDBusMessage is completely identical except that it is guaranteed
        to not be locked.

        This operation can fail if e.g. @message contains file descriptors
        and the per-process or system-wide open files limit is reached.
        """
        ...

    def get_arg0(self) -> str:
        """
        Convenience to get the first item in the body of @message.
        """
        ...

    def get_body(self) -> GLib.Variant:
        """
        Gets the body of a message.
        """
        ...

    def get_byte_order(self) -> DBusMessageByteOrder:
        """
        Gets the byte order of @message.
        """
        ...

    def get_destination(self) -> str:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.
        """
        ...

    def get_error_name(self) -> str:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.
        """
        ...

    def get_flags(self) -> DBusMessageFlags:
        """
        Gets the flags for @message.
        """
        ...

    def get_header(self, header_field: DBusMessageHeaderField) -> GLib.Variant:
        """
        Gets a header field on @message.

        The caller is responsible for checking the type of the returned #GVariant
        matches what is expected.
        """
        ...

    def get_header_fields(self) -> object:
        """
        Gets an array of all header fields on @message that are set.
        """
        ...

    def get_interface(self) -> str:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.
        """
        ...

    def get_locked(self) -> bool:
        """
        Checks whether @message is locked. To monitor changes to this
        value, conncet to the #GObject::notify signal to listen for changes
        on the #GDBusMessage:locked property.
        """
        ...

    def get_member(self) -> str:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.
        """
        ...

    def get_message_type(self) -> DBusMessageType:
        """
        Gets the type of @message.
        """
        ...

    def get_num_unix_fds(self) -> int:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.
        """
        ...

    def get_path(self) -> str:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.
        """
        ...

    def get_reply_serial(self) -> int:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.
        """
        ...

    def get_sender(self) -> str:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.
        """
        ...

    def get_serial(self) -> int:
        """
        Gets the serial for @message.
        """
        ...

    def get_signature(self) -> str:
        """
        Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.

        This will always be non-%NULL, but may be an empty string.
        """
        ...

    def get_unix_fd_list(self) -> UnixFDList:
        """
        Gets the UNIX file descriptors associated with @message, if any.

        This method is only available on UNIX.

        The file descriptors normally correspond to %G_VARIANT_TYPE_HANDLE
        values in the body of the message. For example,
        if g_variant_get_handle() returns 5, that is intended to be a reference
        to the file descriptor that can be accessed by
        `g_unix_fd_list_get (list, 5, ...)`.
        """
        ...

    def lock(self) -> object:
        """
        If @message is locked, does nothing. Otherwise locks the message.
        """
        ...

    def new_method_error(self, error_name: str, error_message_format: str, *args: object) -> DBusMessage:
        """
        Creates a new #GDBusMessage that is an error reply to @method_call_message.
        """
        ...

    def new_method_error_literal(self, error_name: str, error_message: str) -> DBusMessage:
        """
        Creates a new #GDBusMessage that is an error reply to @method_call_message.
        """
        ...

    def new_method_error_valist(self, error_name: str, error_message_format: str, var_args: list) -> DBusMessage:
        """
        Like g_dbus_message_new_method_error() but intended for language bindings.
        """
        ...

    def new_method_reply(self) -> DBusMessage:
        """
        Creates a new #GDBusMessage that is a reply to @method_call_message.
        """
        ...

    def print(self, indent: int) -> str:
        """
        Produces a human-readable multi-line description of @message.

        The contents of the description has no ABI guarantees, the contents
        and formatting is subject to change at any time. Typical output
        looks something like this:
        |[
        Flags:   none
        Version: 0
        Serial:  4
        Headers:
          path -> objectpath '/org/gtk/GDBus/TestObject'
          interface -> 'org.gtk.GDBus.TestInterface'
          member -> 'GimmeStdout'
          destination -> ':1.146'
        Body: ()
        UNIX File Descriptors:
          (none)
        ]|
        or
        |[
        Flags:   no-reply-expected
        Version: 0
        Serial:  477
        Headers:
          reply-serial -> uint32 4
          destination -> ':1.159'
          sender -> ':1.146'
          num-unix-fds -> uint32 1
        Body: ()
        UNIX File Descriptors:
          fd 12: dev=0:10,mode=020620,ino=5,uid=500,gid=5,rdev=136:2,size=0,atime=1273085037,mtime=1273085851,ctime=1272982635
        ]|
        """
        ...

    def set_body(self, body: GLib.Variant) -> object:
        """
        Sets the body @message. As a side-effect the
        %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field is set to the
        type string of @body (or cleared if @body is %NULL).

        If @body is floating, @message assumes ownership of @body.
        """
        ...

    def set_byte_order(self, byte_order: DBusMessageByteOrder) -> object:
        """
        Sets the byte order of @message.
        """
        ...

    def set_destination(self, value: _T.Optional[str]) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.
        """
        ...

    def set_error_name(self, value: str) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.
        """
        ...

    def set_flags(self, flags: DBusMessageFlags) -> object:
        """
        Sets the flags to set on @message.
        """
        ...

    def set_header(self, header_field: DBusMessageHeaderField, value: _T.Optional[GLib.Variant]) -> object:
        """
        Sets a header field on @message.

        If @value is floating, @message assumes ownership of @value.
        """
        ...

    def set_interface(self, value: _T.Optional[str]) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.
        """
        ...

    def set_member(self, value: _T.Optional[str]) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.
        """
        ...

    def set_message_type(self, type: DBusMessageType) -> object:
        """
        Sets @message to be of @type.
        """
        ...

    def set_num_unix_fds(self, value: int) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.
        """
        ...

    def set_path(self, value: _T.Optional[str]) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.
        """
        ...

    def set_reply_serial(self, value: int) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.
        """
        ...

    def set_sender(self, value: _T.Optional[str]) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.
        """
        ...

    def set_serial(self, serial: int) -> object:
        """
        Sets the serial for @message.
        """
        ...

    def set_signature(self, value: _T.Optional[str]) -> object:
        """
        Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.
        """
        ...

    def set_unix_fd_list(self, fd_list: _T.Optional[UnixFDList]) -> object:
        """
        Sets the UNIX file descriptors associated with @message. As a
        side-effect the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header
        field is set to the number of fds in @fd_list (or cleared if
        @fd_list is %NULL).

        This method is only available on UNIX.

        When designing D-Bus APIs that are intended to be interoperable,
        please note that non-GDBus implementations of D-Bus can usually only
        access file descriptors if they are referenced by a value of type
        %G_VARIANT_TYPE_HANDLE in the body of the message.
        """
        ...

    def to_blob(self, out_size: int, capabilities: DBusCapabilityFlags) -> object:
        """
        Serializes @message to a blob. The byte order returned by
        g_dbus_message_get_byte_order() will be used.
        """
        ...

    def to_gerror(self) -> bool:
        """
        If @message is not of type %G_DBUS_MESSAGE_TYPE_ERROR does
        nothing and returns %FALSE.

        Otherwise this method encodes the error in @message as a #GError
        using g_dbus_error_set_dbus_error() using the information in the
        %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field of @message as
        well as the first string item in @message's body.
        """
        ...


    ...

class DBusMethodInvocation(GObject.Object):
    """
    Instances of the #GDBusMethodInvocation class are used when
    handling D-Bus method calls. It provides a way to asynchronously
    return results and errors.

    The normal way to obtain a #GDBusMethodInvocation object is to receive
    it as an argument to the handle_method_call() function in a
    #GDBusInterfaceVTable that was passed to g_dbus_connection_register_object().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_connection(self) -> DBusConnection:
        """
        Gets the #GDBusConnection the method was invoked on.
        """
        ...

    def get_interface_name(self) -> str:
        """
        Gets the name of the D-Bus interface the method was invoked on.

        If this method call is a property Get, Set or GetAll call that has
        been redirected to the method call handler then
        "org.freedesktop.DBus.Properties" will be returned.  See
        #GDBusInterfaceVTable for more information.
        """
        ...

    def get_message(self) -> DBusMessage:
        """
        Gets the #GDBusMessage for the method invocation. This is useful if
        you need to use low-level protocol features, such as UNIX file
        descriptor passing, that cannot be properly expressed in the
        #GVariant API.

        See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
        for an example of how to use this low-level API to send and receive
        UNIX file descriptors.
        """
        ...

    def get_method_info(self) -> DBusMethodInfo:
        """
        Gets information about the method call, if any.

        If this method invocation is a property Get, Set or GetAll call that
        has been redirected to the method call handler then %NULL will be
        returned.  See g_dbus_method_invocation_get_property_info() and
        #GDBusInterfaceVTable for more information.
        """
        ...

    def get_method_name(self) -> str:
        """
        Gets the name of the method that was invoked.
        """
        ...

    def get_object_path(self) -> str:
        """
        Gets the object path the method was invoked on.
        """
        ...

    def get_parameters(self) -> GLib.Variant:
        """
        Gets the parameters of the method invocation. If there are no input
        parameters then this will return a GVariant with 0 children rather than NULL.
        """
        ...

    def get_property_info(self) -> DBusPropertyInfo:
        """
        Gets information about the property that this method call is for, if
        any.

        This will only be set in the case of an invocation in response to a
        property Get or Set call that has been directed to the method call
        handler for an object on account of its property_get() or
        property_set() vtable pointers being unset.

        See #GDBusInterfaceVTable for more information.

        If the call was GetAll, %NULL will be returned.
        """
        ...

    def get_sender(self) -> str:
        """
        Gets the bus name that invoked the method.
        """
        ...

    def get_user_data(self) -> object:
        """
        Gets the @user_data #gpointer passed to g_dbus_connection_register_object().
        """
        ...

    def return_dbus_error(self, error_name: str, error_message: str) -> object:
        """
        Finishes handling a D-Bus method call by returning an error.

        This method will take ownership of @invocation. See
        #GDBusInterfaceVTable for more information about the ownership of
        @invocation.
        """
        ...

    def return_error(self, domain: GLib.Quark, code: int, format: str, *args: object) -> object:
        """
        Finishes handling a D-Bus method call by returning an error.

        See g_dbus_error_encode_gerror() for details about what error name
        will be returned on the wire. In a nutshell, if the given error is
        registered using g_dbus_error_register_error() the name given
        during registration is used. Otherwise, a name of the form
        `org.gtk.GDBus.UnmappedGError.Quark...` is used. This provides
        transparent mapping of #GError between applications using GDBus.

        If you are writing an application intended to be portable,
        always register errors with g_dbus_error_register_error()
        or use g_dbus_method_invocation_return_dbus_error().

        This method will take ownership of @invocation. See
        #GDBusInterfaceVTable for more information about the ownership of
        @invocation.

        Since 2.48, if the method call requested for a reply not to be sent
        then this call will free @invocation but otherwise do nothing (as per
        the recommendations of the D-Bus specification).
        """
        ...

    def return_error_literal(self, domain: GLib.Quark, code: int, message: str) -> object:
        """
        Like g_dbus_method_invocation_return_error() but without printf()-style formatting.

        This method will take ownership of @invocation. See
        #GDBusInterfaceVTable for more information about the ownership of
        @invocation.
        """
        ...

    def return_error_valist(self, domain: GLib.Quark, code: int, format: str, var_args: list) -> object:
        """
        Like g_dbus_method_invocation_return_error() but intended for
        language bindings.

        This method will take ownership of @invocation. See
        #GDBusInterfaceVTable for more information about the ownership of
        @invocation.
        """
        ...

    def return_gerror(self, error: GLib.Error) -> object:
        """
        Like g_dbus_method_invocation_return_error() but takes a #GError
        instead of the error domain, error code and message.

        This method will take ownership of @invocation. See
        #GDBusInterfaceVTable for more information about the ownership of
        @invocation.
        """
        ...

    def return_value(self, parameters: _T.Optional[GLib.Variant]) -> object:
        """
        Finishes handling a D-Bus method call by returning @parameters.
        If the @parameters GVariant is floating, it is consumed.

        It is an error if @parameters is not of the right format: it must be a tuple
        containing the out-parameters of the D-Bus method. Even if the method has a
        single out-parameter, it must be contained in a tuple. If the method has no
        out-parameters, @parameters may be %NULL or an empty tuple.

        |[<!-- language="C" -->
        GDBusMethodInvocation *invocation = some_invocation;
        g_autofree gchar *result_string = NULL;
        g_autoptr (GError) error = NULL;

        result_string = calculate_result (&error);

        if (error != NULL)
          g_dbus_method_invocation_return_gerror (invocation, error);
        else
          g_dbus_method_invocation_return_value (invocation,
                                                 g_variant_new ("(s)", result_string));

        // Do not free @invocation here; returning a value does that
        ]|

        This method will take ownership of @invocation. See
        #GDBusInterfaceVTable for more information about the ownership of
        @invocation.

        Since 2.48, if the method call requested for a reply not to be sent
        then this call will sink @parameters and free @invocation, but
        otherwise do nothing (as per the recommendations of the D-Bus
        specification).
        """
        ...

    def return_value_with_unix_fd_list(self, parameters: _T.Optional[GLib.Variant], fd_list: _T.Optional[UnixFDList]) -> object:
        """
        Like g_dbus_method_invocation_return_value() but also takes a #GUnixFDList.

        This method is only available on UNIX.

        This method will take ownership of @invocation. See
        #GDBusInterfaceVTable for more information about the ownership of
        @invocation.
        """
        ...

    def take_error(self, error: GLib.Error) -> object:
        """
        Like g_dbus_method_invocation_return_gerror() but takes ownership
        of @error so the caller does not need to free it.

        This method will take ownership of @invocation. See
        #GDBusInterfaceVTable for more information about the ownership of
        @invocation.
        """
        ...


    ...

class DBusObjectManagerClient(GObject.Object, AsyncInitable, DBusObjectManager, Initable):
    """
    #GDBusObjectManagerClient is used to create, monitor and delete object
    proxies for remote objects exported by a #GDBusObjectManagerServer (or any
    code implementing the
    [org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
    interface).

    Once an instance of this type has been created, you can connect to
    the #GDBusObjectManager::object-added and
    #GDBusObjectManager::object-removed signals and inspect the
    #GDBusObjectProxy objects returned by
    g_dbus_object_manager_get_objects().

    If the name for a #GDBusObjectManagerClient is not owned by anyone at
    object construction time, the default behavior is to request the
    message bus to launch an owner for the name. This behavior can be
    disabled using the %G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START
    flag. It's also worth noting that this only works if the name of
    interest is activatable in the first place. E.g. in some cases it
    is not possible to launch an owner for the requested name. In this
    case, #GDBusObjectManagerClient object construction still succeeds but
    there will be no object proxies
    (e.g. g_dbus_object_manager_get_objects() returns the empty list) and
    the #GDBusObjectManagerClient:name-owner property is %NULL.

    The owner of the requested name can come and go (for example
    consider a system service being restarted) – #GDBusObjectManagerClient
    handles this case too; simply connect to the #GObject::notify
    signal to watch for changes on the #GDBusObjectManagerClient:name-owner
    property. When the name owner vanishes, the behavior is that
    #GDBusObjectManagerClient:name-owner is set to %NULL (this includes
    emission of the #GObject::notify signal) and then
    #GDBusObjectManager::object-removed signals are synthesized
    for all currently existing object proxies. Since
    #GDBusObjectManagerClient:name-owner is %NULL when this happens, you can
    use this information to disambiguate a synthesized signal from a
    genuine signal caused by object removal on the remote
    #GDBusObjectManager. Similarly, when a new name owner appears,
    #GDBusObjectManager::object-added signals are synthesized
    while #GDBusObjectManagerClient:name-owner is still %NULL. Only when all
    object proxies have been added, the #GDBusObjectManagerClient:name-owner
    is set to the new name owner (this includes emission of the
    #GObject::notify signal).  Furthermore, you are guaranteed that
    #GDBusObjectManagerClient:name-owner will alternate between a name owner
    (e.g. `:1.42`) and %NULL even in the case where
    the name of interest is atomically replaced

    Ultimately, #GDBusObjectManagerClient is used to obtain #GDBusProxy
    instances. All signals (including the
    org.freedesktop.DBus.Properties::PropertiesChanged signal)
    delivered to #GDBusProxy instances are guaranteed to originate
    from the name owner. This guarantee along with the behavior
    described above, means that certain race conditions including the
    "half the proxy is from the old owner and the other half is from
    the new owner" problem cannot happen.

    To avoid having the application connect to signals on the returned
    #GDBusObjectProxy and #GDBusProxy objects, the
    #GDBusObject::interface-added,
    #GDBusObject::interface-removed,
    #GDBusProxy::g-properties-changed and
    #GDBusProxy::g-signal signals
    are also emitted on the #GDBusObjectManagerClient instance managing these
    objects. The signals emitted are
    #GDBusObjectManager::interface-added,
    #GDBusObjectManager::interface-removed,
    #GDBusObjectManagerClient::interface-proxy-properties-changed and
    #GDBusObjectManagerClient::interface-proxy-signal.

    Note that all callbacks and signals are emitted in the
    [thread-default main context][g-main-context-push-thread-default]
    that the #GDBusObjectManagerClient object was constructed
    in. Additionally, the #GDBusObjectProxy and #GDBusProxy objects
    originating from the #GDBusObjectManagerClient object will be created in
    the same context and, consequently, will deliver signals in the
    same main loop.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_finish(cls, res: AsyncResult) -> DBusObjectManagerClient:
        """
        Finishes an operation started with g_dbus_object_manager_client_new().
        """
        ...


    @classmethod
    def new_for_bus_finish(cls, res: AsyncResult) -> DBusObjectManagerClient:
        """
        Finishes an operation started with g_dbus_object_manager_client_new_for_bus().
        """
        ...


    @classmethod
    def new_for_bus_sync(cls, bus_type: BusType, flags: DBusObjectManagerClientFlags, name: str, object_path: str, get_proxy_type_func: _T.Optional[DBusProxyTypeFunc], get_proxy_type_user_data: _T.Optional[object], get_proxy_type_destroy_notify: _T.Optional[GLib.DestroyNotify], cancellable: _T.Optional[Cancellable]) -> DBusObjectManagerClient:
        """
        Like g_dbus_object_manager_client_new_sync() but takes a #GBusType instead
        of a #GDBusConnection.

        This is a synchronous failable constructor - the calling thread is
        blocked until a reply is received. See g_dbus_object_manager_client_new_for_bus()
        for the asynchronous version.
        """
        ...


    @classmethod
    def new_sync(cls, connection: DBusConnection, flags: DBusObjectManagerClientFlags, name: _T.Optional[str], object_path: str, get_proxy_type_func: _T.Optional[DBusProxyTypeFunc], get_proxy_type_user_data: _T.Optional[object], get_proxy_type_destroy_notify: _T.Optional[GLib.DestroyNotify], cancellable: _T.Optional[Cancellable]) -> DBusObjectManagerClient:
        """
        Creates a new #GDBusObjectManagerClient object.

        This is a synchronous failable constructor - the calling thread is
        blocked until a reply is received. See g_dbus_object_manager_client_new()
        for the asynchronous version.
        """
        ...

    def get_connection(self) -> DBusConnection:
        """
        Gets the #GDBusConnection used by @manager.
        """
        ...

    def get_flags(self) -> DBusObjectManagerClientFlags:
        """
        Gets the flags that @manager was constructed with.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the name that @manager is for, or %NULL if not a message bus
        connection.
        """
        ...

    def get_name_owner(self) -> str:
        """
        The unique name that owns the name that @manager is for or %NULL if
        no-one currently owns that name. You can connect to the
        #GObject::notify signal to track changes to the
        #GDBusObjectManagerClient:name-owner property.
        """
        ...


    ...

class DBusObjectManagerServer(GObject.Object, DBusObjectManager):
    """
    #GDBusObjectManagerServer is used to export #GDBusObject instances using
    the standardized
    [org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
    interface. For example, remote D-Bus clients can get all objects
    and properties in a single call. Additionally, any change in the
    object hierarchy is broadcast using signals. This means that D-Bus
    clients can keep caches up to date by only listening to D-Bus
    signals.

    The recommended path to export an object manager at is the path form of the
    well-known name of a D-Bus service, or below. For example, if a D-Bus service
    is available at the well-known name `net.example.ExampleService1`, the object
    manager should typically be exported at `/net/example/ExampleService1`, or
    below (to allow for multiple object managers in a service).

    It is supported, but not recommended, to export an object manager at the root
    path, `/`.

    See #GDBusObjectManagerClient for the client-side code that is
    intended to be used with #GDBusObjectManagerServer or any D-Bus
    object implementing the org.freedesktop.DBus.ObjectManager
    interface.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, object_path: str) -> DBusObjectManagerServer:
        """
        Creates a new #GDBusObjectManagerServer object.

        The returned server isn't yet exported on any connection. To do so,
        use g_dbus_object_manager_server_set_connection(). Normally you
        want to export all of your objects before doing so to avoid
        [InterfacesAdded](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
        signals being emitted.
        """
        ...

    def export(self, object: DBusObjectSkeleton) -> object:
        """
        Exports @object on @manager.

        If there is already a #GDBusObject exported at the object path,
        then the old object is removed.

        The object path for @object must be in the hierarchy rooted by the
        object path for @manager.

        Note that @manager will take a reference on @object for as long as
        it is exported.
        """
        ...

    def export_uniquely(self, object: DBusObjectSkeleton) -> object:
        """
        Like g_dbus_object_manager_server_export() but appends a string of
        the form _N (with N being a natural number) to @object's object path
        if an object with the given path already exists. As such, the
        #GDBusObjectProxy:g-object-path property of @object may be modified.
        """
        ...

    def get_connection(self) -> DBusConnection:
        """
        Gets the #GDBusConnection used by @manager.
        """
        ...

    def is_exported(self, object: DBusObjectSkeleton) -> bool:
        """
        Returns whether @object is currently exported on @manager.
        """
        ...

    def set_connection(self, connection: _T.Optional[DBusConnection]) -> object:
        """
        Exports all objects managed by @manager on @connection. If
        @connection is %NULL, stops exporting objects.
        """
        ...

    def unexport(self, object_path: str) -> bool:
        """
        If @manager has an object at @path, removes the object. Otherwise
        does nothing.

        Note that @object_path must be in the hierarchy rooted by the
        object path for @manager.
        """
        ...


    ...

class DBusObjectProxy(GObject.Object, DBusObject):
    """
    A #GDBusObjectProxy is an object used to represent a remote object
    with one or more D-Bus interfaces. Normally, you don't instantiate
    a #GDBusObjectProxy yourself - typically #GDBusObjectManagerClient
    is used to obtain it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, connection: DBusConnection, object_path: str) -> DBusObjectProxy:
        """
        Creates a new #GDBusObjectProxy for the given connection and
        object path.
        """
        ...

    def get_connection(self) -> DBusConnection:
        """
        Gets the connection that @proxy is for.
        """
        ...


    ...

class DBusObjectSkeleton(GObject.Object, DBusObject):
    """
    A #GDBusObjectSkeleton instance is essentially a group of D-Bus
    interfaces. The set of exported interfaces on the object may be
    dynamic and change at runtime.

    This type is intended to be used with #GDBusObjectManager.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, object_path: str) -> DBusObjectSkeleton:
        """
        Creates a new #GDBusObjectSkeleton.
        """
        ...

    def add_interface(self, interface_: DBusInterfaceSkeleton) -> object:
        """
        Adds @interface_ to @object.

        If @object already contains a #GDBusInterfaceSkeleton with the same
        interface name, it is removed before @interface_ is added.

        Note that @object takes its own reference on @interface_ and holds
        it until removed.
        """
        ...

    def flush(self) -> object:
        """
        This method simply calls g_dbus_interface_skeleton_flush() on all
        interfaces belonging to @object. See that method for when flushing
        is useful.
        """
        ...

    def remove_interface(self, interface_: DBusInterfaceSkeleton) -> object:
        """
        Removes @interface_ from @object.
        """
        ...

    def remove_interface_by_name(self, interface_name: str) -> object:
        """
        Removes the #GDBusInterface with @interface_name from @object.

        If no D-Bus interface of the given interface exists, this function
        does nothing.
        """
        ...

    def set_object_path(self, object_path: str) -> object:
        """
        Sets the object path for @object.
        """
        ...


    ...

class DBusProxy(GObject.Object, AsyncInitable, DBusInterface, Initable):
    """
    #GDBusProxy is a base class used for proxies to access a D-Bus
    interface on a remote object. A #GDBusProxy can be constructed for
    both well-known and unique names.

    By default, #GDBusProxy will cache all properties (and listen to
    changes) of the remote object, and proxy all signals that get
    emitted. This behaviour can be changed by passing suitable
    #GDBusProxyFlags when the proxy is created. If the proxy is for a
    well-known name, the property cache is flushed when the name owner
    vanishes and reloaded when a name owner appears.

    The unique name owner of the proxy's name is tracked and can be read from
    #GDBusProxy:g-name-owner. Connect to the #GObject::notify signal to
    get notified of changes. Additionally, only signals and property
    changes emitted from the current name owner are considered and
    calls are always sent to the current name owner. This avoids a
    number of race conditions when the name is lost by one owner and
    claimed by another. However, if no name owner currently exists,
    then calls will be sent to the well-known name which may result in
    the message bus launching an owner (unless
    %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START is set).

    If the proxy is for a stateless D-Bus service, where the name owner may
    be started and stopped between calls, the #GDBusProxy:g-name-owner tracking
    of #GDBusProxy will cause the proxy to drop signal and property changes from
    the service after it has restarted for the first time. When interacting
    with a stateless D-Bus service, do not use #GDBusProxy — use direct D-Bus
    method calls and signal connections.

    The generic #GDBusProxy::g-properties-changed and
    #GDBusProxy::g-signal signals are not very convenient to work with.
    Therefore, the recommended way of working with proxies is to subclass
    #GDBusProxy, and have more natural properties and signals in your derived
    class. This [example][gdbus-example-gdbus-codegen] shows how this can
    easily be done using the [gdbus-codegen][gdbus-codegen] tool.

    A #GDBusProxy instance can be used from multiple threads but note
    that all signals (e.g. #GDBusProxy::g-signal, #GDBusProxy::g-properties-changed
    and #GObject::notify) are emitted in the
    [thread-default main context][g-main-context-push-thread-default]
    of the thread where the instance was constructed.

    An example using a proxy for a well-known name can be found in
    [gdbus-example-watch-proxy.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-watch-proxy.c)
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_finish(cls, res: AsyncResult) -> DBusProxy:
        """
        Finishes creating a #GDBusProxy.
        """
        ...


    @classmethod
    def new_for_bus_finish(cls, res: AsyncResult) -> DBusProxy:
        """
        Finishes creating a #GDBusProxy.
        """
        ...


    @classmethod
    def new_for_bus_sync(cls, bus_type: BusType, flags: DBusProxyFlags, info: _T.Optional[DBusInterfaceInfo], name: str, object_path: str, interface_name: str, cancellable: _T.Optional[Cancellable]) -> DBusProxy:
        """
        Like g_dbus_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

        #GDBusProxy is used in this [example][gdbus-wellknown-proxy].
        """
        ...


    @classmethod
    def new_sync(cls, connection: DBusConnection, flags: DBusProxyFlags, info: _T.Optional[DBusInterfaceInfo], name: _T.Optional[str], object_path: str, interface_name: str, cancellable: _T.Optional[Cancellable]) -> DBusProxy:
        """
        Creates a proxy for accessing @interface_name on the remote object
        at @object_path owned by @name at @connection and synchronously
        loads D-Bus properties unless the
        %G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used.

        If the %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS flag is not set, also sets up
        match rules for signals. Connect to the #GDBusProxy::g-signal signal
        to handle signals from the remote object.

        If both %G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES and
        %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS are set, this constructor is
        guaranteed to return immediately without blocking.

        If @name is a well-known name and the
        %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START and %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION
        flags aren't set and no name owner currently exists, the message bus
        will be requested to launch a name owner for the name.

        This is a synchronous failable constructor. See g_dbus_proxy_new()
        and g_dbus_proxy_new_finish() for the asynchronous version.

        #GDBusProxy is used in this [example][gdbus-wellknown-proxy].
        """
        ...

    def call(self, method_name: str, parameters: _T.Optional[GLib.Variant], flags: DBusCallFlags, timeout_msec: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously invokes the @method_name method on @proxy.

        If @method_name contains any dots, then @name is split into interface and
        method name parts. This allows using @proxy for invoking methods on
        other interfaces.

        If the #GDBusConnection associated with @proxy is closed then
        the operation will fail with %G_IO_ERROR_CLOSED. If
        @cancellable is canceled, the operation will fail with
        %G_IO_ERROR_CANCELLED. If @parameters contains a value not
        compatible with the D-Bus protocol, the operation fails with
        %G_IO_ERROR_INVALID_ARGUMENT.

        If the @parameters #GVariant is floating, it is consumed. This allows
        convenient 'inline' use of g_variant_new(), e.g.:
        |[<!-- language="C" -->
         g_dbus_proxy_call (proxy,
                            "TwoStrings",
                            g_variant_new ("(ss)",
                                           "Thing One",
                                           "Thing Two"),
                            G_DBUS_CALL_FLAGS_NONE,
                            -1,
                            NULL,
                            (GAsyncReadyCallback) two_strings_done,
                            &data);
        ]|

        If @proxy has an expected interface (see
        #GDBusProxy:g-interface-info) and @method_name is referenced by it,
        then the return value is checked against the return type.

        This is an asynchronous method. When the operation is finished,
        @callback will be invoked in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread you are calling this method from.
        You can then call g_dbus_proxy_call_finish() to get the result of
        the operation. See g_dbus_proxy_call_sync() for the synchronous
        version of this method.

        If @callback is %NULL then the D-Bus method call message will be sent with
        the %G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED flag set.
        """
        ...

    def call_finish(self, res: AsyncResult) -> GLib.Variant:
        """
        Finishes an operation started with g_dbus_proxy_call().
        """
        ...

    def call_sync(self, method_name: str, parameters: _T.Optional[GLib.Variant], flags: DBusCallFlags, timeout_msec: int, cancellable: _T.Optional[Cancellable]) -> GLib.Variant:
        """
        Synchronously invokes the @method_name method on @proxy.

        If @method_name contains any dots, then @name is split into interface and
        method name parts. This allows using @proxy for invoking methods on
        other interfaces.

        If the #GDBusConnection associated with @proxy is disconnected then
        the operation will fail with %G_IO_ERROR_CLOSED. If
        @cancellable is canceled, the operation will fail with
        %G_IO_ERROR_CANCELLED. If @parameters contains a value not
        compatible with the D-Bus protocol, the operation fails with
        %G_IO_ERROR_INVALID_ARGUMENT.

        If the @parameters #GVariant is floating, it is consumed. This allows
        convenient 'inline' use of g_variant_new(), e.g.:
        |[<!-- language="C" -->
         g_dbus_proxy_call_sync (proxy,
                                 "TwoStrings",
                                 g_variant_new ("(ss)",
                                                "Thing One",
                                                "Thing Two"),
                                 G_DBUS_CALL_FLAGS_NONE,
                                 -1,
                                 NULL,
                                 &error);
        ]|

        The calling thread is blocked until a reply is received. See
        g_dbus_proxy_call() for the asynchronous version of this
        method.

        If @proxy has an expected interface (see
        #GDBusProxy:g-interface-info) and @method_name is referenced by it,
        then the return value is checked against the return type.
        """
        ...

    def call_with_unix_fd_list(self, method_name: str, parameters: _T.Optional[GLib.Variant], flags: DBusCallFlags, timeout_msec: int, fd_list: _T.Optional[UnixFDList], cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Like g_dbus_proxy_call() but also takes a #GUnixFDList object.

        This method is only available on UNIX.
        """
        ...

    def call_with_unix_fd_list_finish(self, out_fd_list: UnixFDList, res: AsyncResult) -> GLib.Variant:
        """
        Finishes an operation started with g_dbus_proxy_call_with_unix_fd_list().
        """
        ...

    def call_with_unix_fd_list_sync(self, method_name: str, parameters: _T.Optional[GLib.Variant], flags: DBusCallFlags, timeout_msec: int, fd_list: _T.Optional[UnixFDList], out_fd_list: UnixFDList, cancellable: _T.Optional[Cancellable]) -> GLib.Variant:
        """
        Like g_dbus_proxy_call_sync() but also takes and returns #GUnixFDList objects.

        This method is only available on UNIX.
        """
        ...

    def get_cached_property(self, property_name: str) -> GLib.Variant:
        """
        Looks up the value for a property from the cache. This call does no
        blocking IO.

        If @proxy has an expected interface (see
        #GDBusProxy:g-interface-info) and @property_name is referenced by
        it, then @value is checked against the type of the property.
        """
        ...

    def get_cached_property_names(self) -> object:
        """
        Gets the names of all cached properties on @proxy.
        """
        ...

    def get_connection(self) -> DBusConnection:
        """
        Gets the connection @proxy is for.
        """
        ...

    def get_default_timeout(self) -> int:
        """
        Gets the timeout to use if -1 (specifying default timeout) is
        passed as @timeout_msec in the g_dbus_proxy_call() and
        g_dbus_proxy_call_sync() functions.

        See the #GDBusProxy:g-default-timeout property for more details.
        """
        ...

    def get_flags(self) -> DBusProxyFlags:
        """
        Gets the flags that @proxy was constructed with.
        """
        ...

    def get_interface_info(self) -> DBusInterfaceInfo:
        """
        Returns the #GDBusInterfaceInfo, if any, specifying the interface
        that @proxy conforms to. See the #GDBusProxy:g-interface-info
        property for more details.
        """
        ...

    def get_interface_name(self) -> str:
        """
        Gets the D-Bus interface name @proxy is for.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the name that @proxy was constructed for.

        When connected to a message bus, this will usually be non-%NULL.
        However, it may be %NULL for a proxy that communicates using a peer-to-peer
        pattern.
        """
        ...

    def get_name_owner(self) -> str:
        """
        The unique name that owns the name that @proxy is for or %NULL if
        no-one currently owns that name. You may connect to the
        #GObject::notify signal to track changes to the
        #GDBusProxy:g-name-owner property.
        """
        ...

    def get_object_path(self) -> str:
        """
        Gets the object path @proxy is for.
        """
        ...

    def set_cached_property(self, property_name: str, value: _T.Optional[GLib.Variant]) -> object:
        """
        If @value is not %NULL, sets the cached value for the property with
        name @property_name to the value in @value.

        If @value is %NULL, then the cached value is removed from the
        property cache.

        If @proxy has an expected interface (see
        #GDBusProxy:g-interface-info) and @property_name is referenced by
        it, then @value is checked against the type of the property.

        If the @value #GVariant is floating, it is consumed. This allows
        convenient 'inline' use of g_variant_new(), e.g.
        |[<!-- language="C" -->
         g_dbus_proxy_set_cached_property (proxy,
                                           "SomeProperty",
                                           g_variant_new ("(si)",
                                                         "A String",
                                                         42));
        ]|

        Normally you will not need to use this method since @proxy
        is tracking changes using the
        `org.freedesktop.DBus.Properties.PropertiesChanged`
        D-Bus signal. However, for performance reasons an object may
        decide to not use this signal for some properties and instead
        use a proprietary out-of-band mechanism to transmit changes.

        As a concrete example, consider an object with a property
        `ChatroomParticipants` which is an array of strings. Instead of
        transmitting the same (long) array every time the property changes,
        it is more efficient to only transmit the delta using e.g. signals
        `ChatroomParticipantJoined(String name)` and
        `ChatroomParticipantParted(String name)`.
        """
        ...

    def set_default_timeout(self, timeout_msec: int) -> object:
        """
        Sets the timeout to use if -1 (specifying default timeout) is
        passed as @timeout_msec in the g_dbus_proxy_call() and
        g_dbus_proxy_call_sync() functions.

        See the #GDBusProxy:g-default-timeout property for more details.
        """
        ...

    def set_interface_info(self, info: _T.Optional[DBusInterfaceInfo]) -> object:
        """
        Ensure that interactions with @proxy conform to the given
        interface. See the #GDBusProxy:g-interface-info property for more
        details.
        """
        ...


    ...

class DBusServer(GObject.Object, Initable):
    """
    #GDBusServer is a helper for listening to and accepting D-Bus
    connections. This can be used to create a new D-Bus server, allowing two
    peers to use the D-Bus protocol for their own specialized communication.
    A server instance provided in this way will not perform message routing or
    implement the org.freedesktop.DBus interface.

    To just export an object on a well-known name on a message bus, such as the
    session or system bus, you should instead use g_bus_own_name().

    An example of peer-to-peer communication with GDBus can be found
    in [gdbus-example-peer.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-peer.c).

    Note that a minimal #GDBusServer will accept connections from any
    peer. In many use-cases it will be necessary to add a #GDBusAuthObserver
    that only accepts connections that have successfully authenticated
    as the same user that is running the #GDBusServer. Since GLib 2.68 this can
    be achieved more simply by passing the
    %G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER flag to the server.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_sync(cls, address: str, flags: DBusServerFlags, guid: str, observer: _T.Optional[DBusAuthObserver], cancellable: _T.Optional[Cancellable]) -> DBusServer:
        """
        Creates a new D-Bus server that listens on the first address in
        @address that works.

        Once constructed, you can use g_dbus_server_get_client_address() to
        get a D-Bus address string that clients can use to connect.

        To have control over the available authentication mechanisms and
        the users that are authorized to connect, it is strongly recommended
        to provide a non-%NULL #GDBusAuthObserver.

        Connect to the #GDBusServer::new-connection signal to handle
        incoming connections.

        The returned #GDBusServer isn't active - you have to start it with
        g_dbus_server_start().

        #GDBusServer is used in this [example][gdbus-peer-to-peer].

        This is a synchronous failable constructor. There is currently no
        asynchronous version.
        """
        ...

    def get_client_address(self) -> str:
        """
        Gets a
        [D-Bus address](https://dbus.freedesktop.org/doc/dbus-specification.html#addresses)
        string that can be used by clients to connect to @server.

        This is valid and non-empty if initializing the #GDBusServer succeeded.
        """
        ...

    def get_flags(self) -> DBusServerFlags:
        """
        Gets the flags for @server.
        """
        ...

    def get_guid(self) -> str:
        """
        Gets the GUID for @server, as provided to g_dbus_server_new_sync().
        """
        ...

    def is_active(self) -> bool:
        """
        Gets whether @server is active.
        """
        ...

    def start(self) -> object:
        """
        Starts @server.
        """
        ...

    def stop(self) -> object:
        """
        Stops @server.
        """
        ...


    ...

class DataInputStream(BufferedInputStream, Seekable):
    """
    Data input stream implements #GInputStream and includes functions for
    reading structured data directly from a binary input stream.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, base_stream: InputStream) -> DataInputStream:
        """
        Creates a new data input stream for the @base_stream.
        """
        ...

    def get_byte_order(self) -> DataStreamByteOrder:
        """
        Gets the byte order for the data input stream.
        """
        ...

    def get_newline_type(self) -> DataStreamNewlineType:
        """
        Gets the current newline type for the @stream.
        """
        ...

    def read_byte(self, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Reads an unsigned 8-bit/1-byte value from @stream.
        """
        ...

    def read_int16(self, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Reads a 16-bit/2-byte value from @stream.

        In order to get the correct byte order for this read operation,
        see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().
        """
        ...

    def read_int32(self, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Reads a signed 32-bit/4-byte value from @stream.

        In order to get the correct byte order for this read operation,
        see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def read_int64(self, cancellable: _T.Optional[Cancellable]) -> gint64:
        """
        Reads a 64-bit/8-byte value from @stream.

        In order to get the correct byte order for this read operation,
        see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def read_line(self, length: int, cancellable: _T.Optional[Cancellable]) -> object:
        """
        Reads a line from the data input stream.  Note that no encoding
        checks or conversion is performed; the input is not guaranteed to
        be UTF-8, and may in fact have embedded NUL characters.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def read_line_async(self, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        The asynchronous version of g_data_input_stream_read_line().  It is
        an error to have two outstanding calls to this function.

        When the operation is finished, @callback will be called. You
        can then call g_data_input_stream_read_line_finish() to get
        the result of the operation.
        """
        ...

    def read_line_finish(self, result: AsyncResult, length: int) -> object:
        """
        Finish an asynchronous call started by
        g_data_input_stream_read_line_async().  Note the warning about
        string encoding in g_data_input_stream_read_line() applies here as
        well.
        """
        ...

    def read_line_finish_utf8(self, result: AsyncResult, length: int) -> str:
        """
        Finish an asynchronous call started by
        g_data_input_stream_read_line_async().
        """
        ...

    def read_line_utf8(self, length: int, cancellable: _T.Optional[Cancellable]) -> str:
        """
        Reads a UTF-8 encoded line from the data input stream.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def read_uint16(self, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Reads an unsigned 16-bit/2-byte value from @stream.

        In order to get the correct byte order for this read operation,
        see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().
        """
        ...

    def read_uint32(self, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Reads an unsigned 32-bit/4-byte value from @stream.

        In order to get the correct byte order for this read operation,
        see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def read_uint64(self, cancellable: _T.Optional[Cancellable]) -> guint64:
        """
        Reads an unsigned 64-bit/8-byte value from @stream.

        In order to get the correct byte order for this read operation,
        see g_data_input_stream_get_byte_order().

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def read_until(self, stop_chars: str, length: int, cancellable: _T.Optional[Cancellable]) -> str:
        """
        Reads a string from the data input stream, up to the first
        occurrence of any of the stop characters.

        Note that, in contrast to g_data_input_stream_read_until_async(),
        this function consumes the stop character that it finds.

        Don't use this function in new code.  Its functionality is
        inconsistent with g_data_input_stream_read_until_async().  Both
        functions will be marked as deprecated in a future release.  Use
        g_data_input_stream_read_upto() instead, but note that that function
        does not consume the stop character.
        """
        ...

    def read_until_async(self, stop_chars: str, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        The asynchronous version of g_data_input_stream_read_until().
        It is an error to have two outstanding calls to this function.

        Note that, in contrast to g_data_input_stream_read_until(),
        this function does not consume the stop character that it finds.  You
        must read it for yourself.

        When the operation is finished, @callback will be called. You
        can then call g_data_input_stream_read_until_finish() to get
        the result of the operation.

        Don't use this function in new code.  Its functionality is
        inconsistent with g_data_input_stream_read_until().  Both functions
        will be marked as deprecated in a future release.  Use
        g_data_input_stream_read_upto_async() instead.
        """
        ...

    def read_until_finish(self, result: AsyncResult, length: int) -> str:
        """
        Finish an asynchronous call started by
        g_data_input_stream_read_until_async().
        """
        ...

    def read_upto(self, stop_chars: str, stop_chars_len: int, length: int, cancellable: _T.Optional[Cancellable]) -> str:
        """
        Reads a string from the data input stream, up to the first
        occurrence of any of the stop characters.

        In contrast to g_data_input_stream_read_until(), this function
        does not consume the stop character. You have to use
        g_data_input_stream_read_byte() to get it before calling
        g_data_input_stream_read_upto() again.

        Note that @stop_chars may contain '\0' if @stop_chars_len is
        specified.

        The returned string will always be nul-terminated on success.
        """
        ...

    def read_upto_async(self, stop_chars: str, stop_chars_len: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        The asynchronous version of g_data_input_stream_read_upto().
        It is an error to have two outstanding calls to this function.

        In contrast to g_data_input_stream_read_until(), this function
        does not consume the stop character. You have to use
        g_data_input_stream_read_byte() to get it before calling
        g_data_input_stream_read_upto() again.

        Note that @stop_chars may contain '\0' if @stop_chars_len is
        specified.

        When the operation is finished, @callback will be called. You
        can then call g_data_input_stream_read_upto_finish() to get
        the result of the operation.
        """
        ...

    def read_upto_finish(self, result: AsyncResult, length: int) -> str:
        """
        Finish an asynchronous call started by
        g_data_input_stream_read_upto_async().

        Note that this function does not consume the stop character. You
        have to use g_data_input_stream_read_byte() to get it before calling
        g_data_input_stream_read_upto_async() again.

        The returned string will always be nul-terminated on success.
        """
        ...

    def set_byte_order(self, order: DataStreamByteOrder) -> object:
        """
        This function sets the byte order for the given @stream. All subsequent
        reads from the @stream will be read in the given @order.
        """
        ...

    def set_newline_type(self, type: DataStreamNewlineType) -> object:
        """
        Sets the newline type for the @stream.

        Note that using G_DATA_STREAM_NEWLINE_TYPE_ANY is slightly unsafe. If a read
        chunk ends in "CR" we must read an additional byte to know if this is "CR" or
        "CR LF", and this might block if there is no more data available.
        """
        ...


    ...

class DataOutputStream(FilterOutputStream, Seekable):
    """
    Data output stream implements #GOutputStream and includes functions for
    writing data directly to an output stream.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, base_stream: OutputStream) -> DataOutputStream:
        """
        Creates a new data output stream for @base_stream.
        """
        ...

    def get_byte_order(self) -> DataStreamByteOrder:
        """
        Gets the byte order for the stream.
        """
        ...

    def put_byte(self, data: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Puts a byte into the output stream.
        """
        ...

    def put_int16(self, data: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Puts a signed 16-bit integer into the output stream.
        """
        ...

    def put_int32(self, data: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Puts a signed 32-bit integer into the output stream.
        """
        ...

    def put_int64(self, data: gint64, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Puts a signed 64-bit integer into the stream.
        """
        ...

    def put_string(self, str: str, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Puts a string into the output stream.
        """
        ...

    def put_uint16(self, data: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Puts an unsigned 16-bit integer into the output stream.
        """
        ...

    def put_uint32(self, data: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Puts an unsigned 32-bit integer into the stream.
        """
        ...

    def put_uint64(self, data: guint64, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Puts an unsigned 64-bit integer into the stream.
        """
        ...

    def set_byte_order(self, order: DataStreamByteOrder) -> object:
        """
        Sets the byte order of the data output stream to @order.
        """
        ...


    ...

class DebugControllerDBus(GObject.Object, DebugController, Initable):
    """
    #GDebugControllerDBus is an implementation of #GDebugController which exposes
    debug settings as a D-Bus object.

    It is a #GInitable object, and will register an object at
    `/org/gtk/Debugging` on the bus given as
    #GDebugControllerDBus:connection once it’s initialized. The object will be
    unregistered when the last reference to the #GDebugControllerDBus is dropped.

    This D-Bus object can be used by remote processes to enable or disable debug
    output in this process. Remote processes calling
    `org.gtk.Debugging.SetDebugEnabled()` will affect the value of
    #GDebugController:debug-enabled and, by default, g_log_get_debug_enabled().
    default.

    By default, all processes will be able to call `SetDebugEnabled()`. If this
    process is privileged, or might expose sensitive information in its debug
    output, you may want to restrict the ability to enable debug output to
    privileged users or processes.

    One option is to install a D-Bus security policy which restricts access to
    `SetDebugEnabled()`, installing something like the following in
    `$datadir/dbus-1/system.d/`:
    |[<!-- language="XML" -->
    <?xml version="1.0"?> <!--*-nxml-*-->
    <!DOCTYPE busconfig PUBLIC "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
         "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
    <busconfig>
      <policy user="root">
        <allow send_destination="com.example.MyService" send_interface="org.gtk.Debugging"/>
      </policy>
      <policy context="default">
        <deny send_destination="com.example.MyService" send_interface="org.gtk.Debugging"/>
      </policy>
    </busconfig>
    ]|

    This will prevent the `SetDebugEnabled()` method from being called by all
    except root. It will not prevent the `DebugEnabled` property from being read,
    as it’s accessed through the `org.freedesktop.DBus.Properties` interface.

    Another option is to use polkit to allow or deny requests on a case-by-case
    basis, allowing for the possibility of dynamic authorisation. To do this,
    connect to the #GDebugControllerDBus::authorize signal and query polkit in
    it:
    |[<!-- language="C" -->
      g_autoptr(GError) child_error = NULL;
      g_autoptr(GDBusConnection) connection = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, NULL);
      gulong debug_controller_authorize_id = 0;

      // Set up the debug controller.
      debug_controller = G_DEBUG_CONTROLLER (g_debug_controller_dbus_new (priv->connection, NULL, &child_error));
      if (debug_controller == NULL)
        {
          g_error ("Could not register debug controller on bus: %s"),
                   child_error->message);
        }

      debug_controller_authorize_id = g_signal_connect (debug_controller,
                                                        "authorize",
                                                        G_CALLBACK (debug_controller_authorize_cb),
                                                        self);

      static gboolean
      debug_controller_authorize_cb (GDebugControllerDBus  *debug_controller,
                                     GDBusMethodInvocation *invocation,
                                     gpointer               user_data)
      {
        g_autoptr(PolkitAuthority) authority = NULL;
        g_autoptr(PolkitSubject) subject = NULL;
        g_autoptr(PolkitAuthorizationResult) auth_result = NULL;
        g_autoptr(GError) local_error = NULL;
        GDBusMessage *message;
        GDBusMessageFlags message_flags;
        PolkitCheckAuthorizationFlags flags = POLKIT_CHECK_AUTHORIZATION_FLAGS_NONE;

        message = g_dbus_method_invocation_get_message (invocation);
        message_flags = g_dbus_message_get_flags (message);

        authority = polkit_authority_get_sync (NULL, &local_error);
        if (authority == NULL)
          {
            g_warning ("Failed to get polkit authority: %s", local_error->message);
            return FALSE;
          }

        if (message_flags & G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION)
          flags |= POLKIT_CHECK_AUTHORIZATION_FLAGS_ALLOW_USER_INTERACTION;

        subject = polkit_system_bus_name_new (g_dbus_method_invocation_get_sender (invocation));

        auth_result = polkit_authority_check_authorization_sync (authority,
                                                                 subject,
                                                                 "com.example.MyService.set-debug-enabled",
                                                                 NULL,
                                                                 flags,
                                                                 NULL,
                                                                 &local_error);
        if (auth_result == NULL)
          {
            g_warning ("Failed to get check polkit authorization: %s", local_error->message);
            return FALSE;
          }

        return polkit_authorization_result_get_is_authorized (auth_result);
      }
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, connection: DBusConnection, cancellable: _T.Optional[Cancellable]) -> DebugControllerDBus:
        """
        Create a new #GDebugControllerDBus and synchronously initialize it.

        Initializing the object will export the debug object on @connection. The
        object will remain registered until the last reference to the
        #GDebugControllerDBus is dropped.

        Initialization may fail if registering the object on @connection fails.
        """
        ...

    def stop(self) -> object:
        """
        Stop the debug controller, unregistering its object from the bus.

        Any pending method calls to the object will complete successfully, but new
        ones will return an error. This method will block until all pending
        #GDebugControllerDBus::authorize signals have been handled. This is expected
        to not take long, as it will just be waiting for threads to join. If any
        #GDebugControllerDBus::authorize signal handlers are still executing in other
        threads, this will block until after they have returned.

        This method will be called automatically when the final reference to the
        #GDebugControllerDBus is dropped. You may want to call it explicitly to know
        when the controller has been fully removed from the bus, or to break
        reference count cycles.

        Calling this method from within a #GDebugControllerDBus::authorize signal
        handler will cause a deadlock and must not be done.
        """
        ...


    ...

class DesktopAppInfo(GObject.Object, AppInfo):
    """
    #GDesktopAppInfo is an implementation of #GAppInfo based on
    desktop files.

    Note that `<gio/gdesktopappinfo.h>` belongs to the UNIX-specific
    GIO interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
    file when using it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, desktop_id: str) -> DesktopAppInfo:
        """
        Creates a new #GDesktopAppInfo based on a desktop file id.

        A desktop file id is the basename of the desktop file, including the
        .desktop extension. GIO is looking for a desktop file with this name
        in the `applications` subdirectories of the XDG
        data directories (i.e. the directories specified in the `XDG_DATA_HOME`
        and `XDG_DATA_DIRS` environment variables). GIO also supports the
        prefix-to-subdirectory mapping that is described in the
        [Menu Spec](http://standards.freedesktop.org/menu-spec/latest/)
        (i.e. a desktop id of kde-foo.desktop will match
        `/usr/share/applications/kde/foo.desktop`).
        """
        ...


    @classmethod
    def new_from_filename(cls, filename: str) -> DesktopAppInfo:
        """
        Creates a new #GDesktopAppInfo.
        """
        ...


    @classmethod
    def new_from_keyfile(cls, key_file: GLib.KeyFile) -> DesktopAppInfo:
        """
        Creates a new #GDesktopAppInfo.
        """
        ...

    def get_action_name(self, action_name: str) -> str:
        """
        Gets the user-visible display name of the "additional application
        action" specified by @action_name.

        This corresponds to the "Name" key within the keyfile group for the
        action.
        """
        ...

    def get_boolean(self, key: str) -> bool:
        """
        Looks up a boolean value in the keyfile backing @info.

        The @key is looked up in the "Desktop Entry" group.
        """
        ...

    def get_categories(self) -> str:
        """
        Gets the categories from the desktop file.
        """
        ...

    def get_filename(self) -> str:
        """
        When @info was created from a known filename, return it.  In some
        situations such as the #GDesktopAppInfo returned from
        g_desktop_app_info_new_from_keyfile(), this function will return %NULL.
        """
        ...

    def get_generic_name(self) -> str:
        """
        Gets the generic name from the desktop file.
        """
        ...

    def get_is_hidden(self) -> bool:
        """
        A desktop file is hidden if the Hidden key in it is
        set to True.
        """
        ...

    def get_keywords(self) -> object:
        """
        Gets the keywords from the desktop file.
        """
        ...

    def get_locale_string(self, key: str) -> str:
        """
        Looks up a localized string value in the keyfile backing @info
        translated to the current locale.

        The @key is looked up in the "Desktop Entry" group.
        """
        ...

    def get_nodisplay(self) -> bool:
        """
        Gets the value of the NoDisplay key, which helps determine if the
        application info should be shown in menus. See
        %G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY and g_app_info_should_show().
        """
        ...

    def get_show_in(self, desktop_env: _T.Optional[str]) -> bool:
        """
        Checks if the application info should be shown in menus that list available
        applications for a specific name of the desktop, based on the
        `OnlyShowIn` and `NotShowIn` keys.

        @desktop_env should typically be given as %NULL, in which case the
        `XDG_CURRENT_DESKTOP` environment variable is consulted.  If you want
        to override the default mechanism then you may specify @desktop_env,
        but this is not recommended.

        Note that g_app_info_should_show() for @info will include this check (with
        %NULL for @desktop_env) as well as additional checks.
        """
        ...

    def get_startup_wm_class(self) -> str:
        """
        Retrieves the StartupWMClass field from @info. This represents the
        WM_CLASS property of the main window of the application, if launched
        through @info.
        """
        ...

    def get_string(self, key: str) -> str:
        """
        Looks up a string value in the keyfile backing @info.

        The @key is looked up in the "Desktop Entry" group.
        """
        ...

    def get_string_list(self, key: str, length: int) -> object:
        """
        Looks up a string list value in the keyfile backing @info.

        The @key is looked up in the "Desktop Entry" group.
        """
        ...

    def has_key(self, key: str) -> bool:
        """
        Returns whether @key exists in the "Desktop Entry" group
        of the keyfile backing @info.
        """
        ...

    def launch_action(self, action_name: str, launch_context: _T.Optional[AppLaunchContext]) -> object:
        """
        Activates the named application action.

        You may only call this function on action names that were
        returned from g_desktop_app_info_list_actions().

        Note that if the main entry of the desktop file indicates that the
        application supports startup notification, and @launch_context is
        non-%NULL, then startup notification will be used when activating the
        action (and as such, invocation of the action on the receiving side
        must signal the end of startup notification when it is completed).
        This is the expected behaviour of applications declaring additional
        actions, as per the desktop file specification.

        As with g_app_info_launch() there is no way to detect failures that
        occur while using this function.
        """
        ...

    def launch_uris_as_manager(self, uris: GLib.List, launch_context: _T.Optional[AppLaunchContext], spawn_flags: GLib.SpawnFlags, user_setup: _T.Optional[GLib.SpawnChildSetupFunc], user_setup_data: _T.Optional[object], pid_callback: _T.Optional[DesktopAppLaunchCallback], pid_callback_data: _T.Optional[object]) -> bool:
        """
        This function performs the equivalent of g_app_info_launch_uris(),
        but is intended primarily for operating system components that
        launch applications.  Ordinary applications should use
        g_app_info_launch_uris().

        If the application is launched via GSpawn, then @spawn_flags, @user_setup
        and @user_setup_data are used for the call to g_spawn_async().
        Additionally, @pid_callback (with @pid_callback_data) will be called to
        inform about the PID of the created process. See g_spawn_async_with_pipes()
        for information on certain parameter conditions that can enable an
        optimized posix_spawn() codepath to be used.

        If application launching occurs via some other mechanism (eg: D-Bus
        activation) then @spawn_flags, @user_setup, @user_setup_data,
        @pid_callback and @pid_callback_data are ignored.
        """
        ...

    def launch_uris_as_manager_with_fds(self, uris: GLib.List, launch_context: _T.Optional[AppLaunchContext], spawn_flags: GLib.SpawnFlags, user_setup: _T.Optional[GLib.SpawnChildSetupFunc], user_setup_data: _T.Optional[object], pid_callback: _T.Optional[DesktopAppLaunchCallback], pid_callback_data: _T.Optional[object], stdin_fd: int, stdout_fd: int, stderr_fd: int) -> bool:
        """
        Equivalent to g_desktop_app_info_launch_uris_as_manager() but allows
        you to pass in file descriptors for the stdin, stdout and stderr streams
        of the launched process.

        If application launching occurs via some non-spawn mechanism (e.g. D-Bus
        activation) then @stdin_fd, @stdout_fd and @stderr_fd are ignored.
        """
        ...

    def list_actions(self) -> object:
        """
        Returns the list of "additional application actions" supported on the
        desktop file, as per the desktop file specification.

        As per the specification, this is the list of actions that are
        explicitly listed in the "Actions" key of the [Desktop Entry] group.
        """
        ...


    ...

class Emblem(GObject.Object, Icon):
    """
    #GEmblem is an implementation of #GIcon that supports
    having an emblem, which is an icon with additional properties.
    It can than be added to a #GEmblemedIcon.

    Currently, only metainformation about the emblem's origin is
    supported. More may be added in the future.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, icon: Icon) -> Emblem:
        """
        Creates a new emblem for @icon.
        """
        ...


    @classmethod
    def new_with_origin(cls, icon: Icon, origin: EmblemOrigin) -> Emblem:
        """
        Creates a new emblem for @icon.
        """
        ...

    def get_icon(self) -> Icon:
        """
        Gives back the icon from @emblem.
        """
        ...

    def get_origin(self) -> EmblemOrigin:
        """
        Gets the origin of the emblem.
        """
        ...


    ...

class EmblemedIcon(GObject.Object, Icon):
    """
    #GEmblemedIcon is an implementation of #GIcon that supports
    adding an emblem to an icon. Adding multiple emblems to an
    icon is ensured via g_emblemed_icon_add_emblem().

    Note that #GEmblemedIcon allows no control over the position
    of the emblems. See also #GEmblem for more information.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, icon: Icon, emblem: _T.Optional[Emblem]) -> EmblemedIcon:
        """
        Creates a new emblemed icon for @icon with the emblem @emblem.
        """
        ...

    def add_emblem(self, emblem: Emblem) -> object:
        """
        Adds @emblem to the #GList of #GEmblems.
        """
        ...

    def clear_emblems(self) -> object:
        """
        Removes all the emblems from @icon.
        """
        ...

    def get_emblems(self) -> GLib.List:
        """
        Gets the list of emblems for the @icon.
        """
        ...

    def get_icon(self) -> Icon:
        """
        Gets the main icon for @emblemed.
        """
        ...


    ...

class FileEnumerator(GObject.Object):
    """
    #GFileEnumerator allows you to operate on a set of #GFiles,
    returning a #GFileInfo structure for each file enumerated (e.g.
    g_file_enumerate_children() will return a #GFileEnumerator for each
    of the children within a directory).

    To get the next file's information from a #GFileEnumerator, use
    g_file_enumerator_next_file() or its asynchronous version,
    g_file_enumerator_next_files_async(). Note that the asynchronous
    version will return a list of #GFileInfos, whereas the
    synchronous will only return the next file in the enumerator.

    The ordering of returned files is unspecified for non-Unix
    platforms; for more information, see g_dir_read_name().  On Unix,
    when operating on local files, returned files will be sorted by
    inode number.  Effectively you can assume that the ordering of
    returned files will be stable between successive calls (and
    applications) assuming the directory is unchanged.

    If your application needs a specific ordering, such as by name or
    modification time, you will have to implement that in your
    application code.

    To close a #GFileEnumerator, use g_file_enumerator_close(), or
    its asynchronous version, g_file_enumerator_close_async(). Once
    a #GFileEnumerator is closed, no further actions may be performed
    on it, and it should be freed with g_object_unref().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def close(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Releases all resources used by this enumerator, making the
        enumerator return %G_IO_ERROR_CLOSED on all calls.

        This will be automatically called when the last reference
        is dropped, but you might want to call this function to make
        sure resources are released as early as possible.
        """
        ...

    def close_async(self, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously closes the file enumerator.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned in
        g_file_enumerator_close_finish().
        """
        ...

    def close_finish(self, result: AsyncResult) -> bool:
        """
        Finishes closing a file enumerator, started from g_file_enumerator_close_async().

        If the file enumerator was already closed when g_file_enumerator_close_async()
        was called, then this function will report %G_IO_ERROR_CLOSED in @error, and
        return %FALSE. If the file enumerator had pending operation when the close
        operation was started, then this function will report %G_IO_ERROR_PENDING, and
        return %FALSE.  If @cancellable was not %NULL, then the operation may have been
        cancelled by triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %FALSE will be
        returned.
        """
        ...

    def get_child(self, info: FileInfo) -> File:
        """
        Return a new #GFile which refers to the file named by @info in the source
        directory of @enumerator.  This function is primarily intended to be used
        inside loops with g_file_enumerator_next_file().

        To use this, %G_FILE_ATTRIBUTE_STANDARD_NAME must have been listed in the
        attributes list used when creating the #GFileEnumerator.

        This is a convenience method that's equivalent to:
        |[<!-- language="C" -->
          gchar *name = g_file_info_get_name (info);
          GFile *child = g_file_get_child (g_file_enumerator_get_container (enumr),
                                           name);
        ]|
        """
        ...

    def get_container(self) -> File:
        """
        Get the #GFile container which is being enumerated.
        """
        ...

    def has_pending(self) -> bool:
        """
        Checks if the file enumerator has pending operations.
        """
        ...

    def is_closed(self) -> bool:
        """
        Checks if the file enumerator has been closed.
        """
        ...

    def iterate(self, out_info: FileInfo, out_child: File, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        This is a version of g_file_enumerator_next_file() that's easier to
        use correctly from C programs.  With g_file_enumerator_next_file(),
        the gboolean return value signifies "end of iteration or error", which
        requires allocation of a temporary #GError.

        In contrast, with this function, a %FALSE return from
        g_file_enumerator_iterate() *always* means
        "error".  End of iteration is signaled by @out_info or @out_child being %NULL.

        Another crucial difference is that the references for @out_info and
        @out_child are owned by @direnum (they are cached as hidden
        properties).  You must not unref them in your own code.  This makes
        memory management significantly easier for C code in combination
        with loops.

        Finally, this function optionally allows retrieving a #GFile as
        well.

        You must specify at least one of @out_info or @out_child.

        The code pattern for correctly using g_file_enumerator_iterate() from C
        is:

        |[
        direnum = g_file_enumerate_children (file, ...);
        while (TRUE)
          {
            GFileInfo *info;
            if (!g_file_enumerator_iterate (direnum, &info, NULL, cancellable, error))
              goto out;
            if (!info)
              break;
            ... do stuff with "info"; do not unref it! ...
          }

        out:
          g_object_unref (direnum); // Note: frees the last @info
        ]|
        """
        ...

    def next_file(self, cancellable: _T.Optional[Cancellable]) -> FileInfo:
        """
        Returns information for the next file in the enumerated object.
        Will block until the information is available. The #GFileInfo
        returned from this function will contain attributes that match the
        attribute string that was passed when the #GFileEnumerator was created.

        See the documentation of #GFileEnumerator for information about the
        order of returned files.

        On error, returns %NULL and sets @error to the error. If the
        enumerator is at the end, %NULL will be returned and @error will
        be unset.
        """
        ...

    def next_files_async(self, num_files: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request information for a number of files from the enumerator asynchronously.
        When all i/o for the operation is finished the @callback will be called with
        the requested information.

        See the documentation of #GFileEnumerator for information about the
        order of returned files.

        The callback can be called with less than @num_files files in case of error
        or at the end of the enumerator. In case of a partial error the callback will
        be called with any succeeding items and no error, and on the next request the
        error will be reported. If a request is cancelled the callback will be called
        with %G_IO_ERROR_CANCELLED.

        During an async request no other sync and async calls are allowed, and will
        result in %G_IO_ERROR_PENDING errors.

        Any outstanding i/o request with higher priority (lower numerical value) will
        be executed before an outstanding request with lower priority. Default
        priority is %G_PRIORITY_DEFAULT.
        """
        ...

    def next_files_finish(self, result: AsyncResult) -> GLib.List:
        """
        Finishes the asynchronous operation started with g_file_enumerator_next_files_async().
        """
        ...

    def set_pending(self, pending: bool) -> object:
        """
        Sets the file enumerator as having pending operations.
        """
        ...


    ...

class FileIOStream(IOStream, Seekable):
    """
    GFileIOStream provides io streams that both read and write to the same
    file handle.

    GFileIOStream implements #GSeekable, which allows the io
    stream to jump to arbitrary positions in the file and to truncate
    the file, provided the filesystem of the file supports these
    operations.

    To find the position of a file io stream, use
    g_seekable_tell().

    To find out if a file io stream supports seeking, use g_seekable_can_seek().
    To position a file io stream, use g_seekable_seek().
    To find out if a file io stream supports truncating, use
    g_seekable_can_truncate(). To truncate a file io
    stream, use g_seekable_truncate().

    The default implementation of all the #GFileIOStream operations
    and the implementation of #GSeekable just call into the same operations
    on the output stream.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_etag(self) -> str:
        """
        Gets the entity tag for the file when it has been written.
        This must be called after the stream has been written
        and closed, as the etag can change while writing.
        """
        ...

    def query_info(self, attributes: str, cancellable: _T.Optional[Cancellable]) -> FileInfo:
        """
        Queries a file io stream for the given @attributes.
        This function blocks while querying the stream. For the asynchronous
        version of this function, see g_file_io_stream_query_info_async().
        While the stream is blocked, the stream will set the pending flag
        internally, and any other operations on the stream will fail with
        %G_IO_ERROR_PENDING.

        Can fail if the stream was already closed (with @error being set to
        %G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
        set to %G_IO_ERROR_PENDING), or if querying info is not supported for
        the stream's interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). I
        all cases of failure, %NULL will be returned.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will
        be returned.
        """
        ...

    def query_info_async(self, attributes: str, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously queries the @stream for a #GFileInfo. When completed,
        @callback will be called with a #GAsyncResult which can be used to
        finish the operation with g_file_io_stream_query_info_finish().

        For the synchronous version of this function, see
        g_file_io_stream_query_info().
        """
        ...

    def query_info_finish(self, result: AsyncResult) -> FileInfo:
        """
        Finalizes the asynchronous query started
        by g_file_io_stream_query_info_async().
        """
        ...


    ...

class FileIcon(GObject.Object, Icon, LoadableIcon):
    """
    #GFileIcon specifies an icon by pointing to an image file
    to be used as icon.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, file: File) -> FileIcon:
        """
        Creates a new icon for a file.
        """
        ...

    def get_file(self) -> File:
        """
        Gets the #GFile associated with the given @icon.
        """
        ...


    ...

class FileInfo(GObject.Object):
    """
    Functionality for manipulating basic metadata for files. #GFileInfo
    implements methods for getting information that all files should
    contain, and allows for manipulation of extended attributes.

    See [GFileAttribute][gio-GFileAttribute] for more information on how
    GIO handles file attributes.

    To obtain a #GFileInfo for a #GFile, use g_file_query_info() (or its
    async variant). To obtain a #GFileInfo for a file input or output
    stream, use g_file_input_stream_query_info() or
    g_file_output_stream_query_info() (or their async variants).

    To change the actual attributes of a file, you should then set the
    attribute in the #GFileInfo and call g_file_set_attributes_from_info()
    or g_file_set_attributes_async() on a GFile.

    However, not all attributes can be changed in the file. For instance,
    the actual size of a file cannot be changed via g_file_info_set_size().
    You may call g_file_query_settable_attributes() and
    g_file_query_writable_namespaces() to discover the settable attributes
    of a particular file at runtime.

    The direct accessors, such as g_file_info_get_name(), are slightly more
    optimized than the generic attribute accessors, such as
    g_file_info_get_attribute_byte_string().This optimization will matter
    only if calling the API in a tight loop.

    #GFileAttributeMatcher allows for searching through a #GFileInfo for
    attributes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> FileInfo:
        """
        Creates a new file info structure.
        """
        ...

    def clear_status(self) -> object:
        """
        Clears the status information from @info.
        """
        ...

    def copy_into(self, dest_info: FileInfo) -> object:
        """
        First clears all of the [GFileAttribute][gio-GFileAttribute] of @dest_info,
        and then copies all of the file attributes from @src_info to @dest_info.
        """
        ...

    def dup(self) -> FileInfo:
        """
        Duplicates a file info structure.
        """
        ...

    def get_access_date_time(self) -> GLib.DateTime:
        """
        Gets the access time of the current @info and returns it as a
        #GDateTime.

        This requires the %G_FILE_ATTRIBUTE_TIME_ACCESS attribute. If
        %G_FILE_ATTRIBUTE_TIME_ACCESS_USEC is provided, the resulting #GDateTime
        will have microsecond precision.
        """
        ...

    def get_attribute_as_string(self, attribute: str) -> str:
        """
        Gets the value of a attribute, formatted as a string.
        This escapes things as needed to make the string valid
        UTF-8.
        """
        ...

    def get_attribute_boolean(self, attribute: str) -> bool:
        """
        Gets the value of a boolean attribute. If the attribute does not
        contain a boolean value, %FALSE will be returned.
        """
        ...

    def get_attribute_byte_string(self, attribute: str) -> str:
        """
        Gets the value of a byte string attribute. If the attribute does
        not contain a byte string, %NULL will be returned.
        """
        ...

    def get_attribute_data(self, attribute: str, type: FileAttributeType, value_pp: object, status: FileAttributeStatus) -> bool:
        """
        Gets the attribute type, value and status for an attribute key.
        """
        ...

    def get_attribute_int32(self, attribute: str) -> int:
        """
        Gets a signed 32-bit integer contained within the attribute. If the
        attribute does not contain a signed 32-bit integer, or is invalid,
        0 will be returned.
        """
        ...

    def get_attribute_int64(self, attribute: str) -> gint64:
        """
        Gets a signed 64-bit integer contained within the attribute. If the
        attribute does not contain a signed 64-bit integer, or is invalid,
        0 will be returned.
        """
        ...

    def get_attribute_object(self, attribute: str) -> GObject.Object:
        """
        Gets the value of a #GObject attribute. If the attribute does
        not contain a #GObject, %NULL will be returned.
        """
        ...

    def get_attribute_status(self, attribute: str) -> FileAttributeStatus:
        """
        Gets the attribute status for an attribute key.
        """
        ...

    def get_attribute_string(self, attribute: str) -> str:
        """
        Gets the value of a string attribute. If the attribute does
        not contain a string, %NULL will be returned.
        """
        ...

    def get_attribute_stringv(self, attribute: str) -> object:
        """
        Gets the value of a stringv attribute. If the attribute does
        not contain a stringv, %NULL will be returned.
        """
        ...

    def get_attribute_type(self, attribute: str) -> FileAttributeType:
        """
        Gets the attribute type for an attribute key.
        """
        ...

    def get_attribute_uint32(self, attribute: str) -> int:
        """
        Gets an unsigned 32-bit integer contained within the attribute. If the
        attribute does not contain an unsigned 32-bit integer, or is invalid,
        0 will be returned.
        """
        ...

    def get_attribute_uint64(self, attribute: str) -> guint64:
        """
        Gets a unsigned 64-bit integer contained within the attribute. If the
        attribute does not contain an unsigned 64-bit integer, or is invalid,
        0 will be returned.
        """
        ...

    def get_content_type(self) -> str:
        """
        Gets the file's content type.
        """
        ...

    def get_creation_date_time(self) -> GLib.DateTime:
        """
        Gets the creation time of the current @info and returns it as a
        #GDateTime.

        This requires the %G_FILE_ATTRIBUTE_TIME_CREATED attribute. If
        %G_FILE_ATTRIBUTE_TIME_CREATED_USEC is provided, the resulting #GDateTime
        will have microsecond precision.
        """
        ...

    def get_deletion_date(self) -> GLib.DateTime:
        """
        Returns the #GDateTime representing the deletion date of the file, as
        available in G_FILE_ATTRIBUTE_TRASH_DELETION_DATE. If the
        G_FILE_ATTRIBUTE_TRASH_DELETION_DATE attribute is unset, %NULL is returned.
        """
        ...

    def get_display_name(self) -> str:
        """
        Gets a display name for a file. This is guaranteed to always be set.
        """
        ...

    def get_edit_name(self) -> str:
        """
        Gets the edit name for a file.
        """
        ...

    def get_etag(self) -> str:
        """
        Gets the [entity tag][gfile-etag] for a given
        #GFileInfo. See %G_FILE_ATTRIBUTE_ETAG_VALUE.
        """
        ...

    def get_file_type(self) -> FileType:
        """
        Gets a file's type (whether it is a regular file, symlink, etc).
        This is different from the file's content type, see g_file_info_get_content_type().
        """
        ...

    def get_icon(self) -> Icon:
        """
        Gets the icon for a file.
        """
        ...

    def get_is_backup(self) -> bool:
        """
        Checks if a file is a backup file.
        """
        ...

    def get_is_hidden(self) -> bool:
        """
        Checks if a file is hidden.
        """
        ...

    def get_is_symlink(self) -> bool:
        """
        Checks if a file is a symlink.
        """
        ...

    def get_modification_date_time(self) -> GLib.DateTime:
        """
        Gets the modification time of the current @info and returns it as a
        #GDateTime.

        This requires the %G_FILE_ATTRIBUTE_TIME_MODIFIED attribute. If
        %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC is provided, the resulting #GDateTime
        will have microsecond precision.
        """
        ...

    def get_modification_time(self, result: GLib.TimeVal) -> object:
        """
        Gets the modification time of the current @info and sets it
        in @result.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the name for a file. This is guaranteed to always be set.
        """
        ...

    def get_size(self) -> gint64:
        """
        Gets the file's size (in bytes). The size is retrieved through the value of
        the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute and is converted
        from #guint64 to #goffset before returning the result.
        """
        ...

    def get_sort_order(self) -> int:
        """
        Gets the value of the sort_order attribute from the #GFileInfo.
        See %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
        """
        ...

    def get_symbolic_icon(self) -> Icon:
        """
        Gets the symbolic icon for a file.
        """
        ...

    def get_symlink_target(self) -> str:
        """
        Gets the symlink target for a given #GFileInfo.
        """
        ...

    def has_attribute(self, attribute: str) -> bool:
        """
        Checks if a file info structure has an attribute named @attribute.
        """
        ...

    def has_namespace(self, name_space: str) -> bool:
        """
        Checks if a file info structure has an attribute in the
        specified @name_space.
        """
        ...

    def list_attributes(self, name_space: _T.Optional[str]) -> object:
        """
        Lists the file info structure's attributes.
        """
        ...

    def remove_attribute(self, attribute: str) -> object:
        """
        Removes all cases of @attribute from @info if it exists.
        """
        ...

    def set_access_date_time(self, atime: GLib.DateTime) -> object:
        """
        Sets the %G_FILE_ATTRIBUTE_TIME_ACCESS and
        %G_FILE_ATTRIBUTE_TIME_ACCESS_USEC attributes in the file info to the
        given date/time value.
        """
        ...

    def set_attribute(self, attribute: str, type: FileAttributeType, value_p: object) -> object:
        """
        Sets the @attribute to contain the given value, if possible. To unset the
        attribute, use %G_FILE_ATTRIBUTE_TYPE_INVALID for @type.
        """
        ...

    def set_attribute_boolean(self, attribute: str, attr_value: bool) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.
        """
        ...

    def set_attribute_byte_string(self, attribute: str, attr_value: str) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.
        """
        ...

    def set_attribute_int32(self, attribute: str, attr_value: int) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.
        """
        ...

    def set_attribute_int64(self, attribute: str, attr_value: gint64) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.
        """
        ...

    def set_attribute_mask(self, mask: FileAttributeMatcher) -> object:
        """
        Sets @mask on @info to match specific attribute types.
        """
        ...

    def set_attribute_object(self, attribute: str, attr_value: GObject.Object) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.
        """
        ...

    def set_attribute_status(self, attribute: str, status: FileAttributeStatus) -> bool:
        """
        Sets the attribute status for an attribute key. This is only
        needed by external code that implement g_file_set_attributes_from_info()
        or similar functions.

        The attribute must exist in @info for this to work. Otherwise %FALSE
        is returned and @info is unchanged.
        """
        ...

    def set_attribute_string(self, attribute: str, attr_value: str) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.
        """
        ...

    def set_attribute_stringv(self, attribute: str, attr_value: object) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.

        Sinze: 2.22
        """
        ...

    def set_attribute_uint32(self, attribute: str, attr_value: int) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.
        """
        ...

    def set_attribute_uint64(self, attribute: str, attr_value: guint64) -> object:
        """
        Sets the @attribute to contain the given @attr_value,
        if possible.
        """
        ...

    def set_content_type(self, content_type: str) -> object:
        """
        Sets the content type attribute for a given #GFileInfo.
        See %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.
        """
        ...

    def set_creation_date_time(self, creation_time: GLib.DateTime) -> object:
        """
        Sets the %G_FILE_ATTRIBUTE_TIME_CREATED and
        %G_FILE_ATTRIBUTE_TIME_CREATED_USEC attributes in the file info to the
        given date/time value.
        """
        ...

    def set_display_name(self, display_name: str) -> object:
        """
        Sets the display name for the current #GFileInfo.
        See %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.
        """
        ...

    def set_edit_name(self, edit_name: str) -> object:
        """
        Sets the edit name for the current file.
        See %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.
        """
        ...

    def set_file_type(self, type: FileType) -> object:
        """
        Sets the file type in a #GFileInfo to @type.
        See %G_FILE_ATTRIBUTE_STANDARD_TYPE.
        """
        ...

    def set_icon(self, icon: Icon) -> object:
        """
        Sets the icon for a given #GFileInfo.
        See %G_FILE_ATTRIBUTE_STANDARD_ICON.
        """
        ...

    def set_is_hidden(self, is_hidden: bool) -> object:
        """
        Sets the "is_hidden" attribute in a #GFileInfo according to @is_hidden.
        See %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.
        """
        ...

    def set_is_symlink(self, is_symlink: bool) -> object:
        """
        Sets the "is_symlink" attribute in a #GFileInfo according to @is_symlink.
        See %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.
        """
        ...

    def set_modification_date_time(self, mtime: GLib.DateTime) -> object:
        """
        Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED and
        %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the
        given date/time value.
        """
        ...

    def set_modification_time(self, mtime: GLib.TimeVal) -> object:
        """
        Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED and
        %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the
        given time value.
        """
        ...

    def set_name(self, name: str) -> object:
        """
        Sets the name attribute for the current #GFileInfo.
        See %G_FILE_ATTRIBUTE_STANDARD_NAME.
        """
        ...

    def set_size(self, size: gint64) -> object:
        """
        Sets the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file info
        to the given size.
        """
        ...

    def set_sort_order(self, sort_order: int) -> object:
        """
        Sets the sort order attribute in the file info structure. See
        %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
        """
        ...

    def set_symbolic_icon(self, icon: Icon) -> object:
        """
        Sets the symbolic icon for a given #GFileInfo.
        See %G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON.
        """
        ...

    def set_symlink_target(self, symlink_target: str) -> object:
        """
        Sets the %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file info
        to the given symlink target.
        """
        ...

    def unset_attribute_mask(self) -> object:
        """
        Unsets a mask set by g_file_info_set_attribute_mask(), if one
        is set.
        """
        ...


    ...

class FileInputStream(InputStream, Seekable):
    """
    GFileInputStream provides input streams that take their
    content from a file.

    GFileInputStream implements #GSeekable, which allows the input
    stream to jump to arbitrary positions in the file, provided the
    filesystem of the file allows it. To find the position of a file
    input stream, use g_seekable_tell(). To find out if a file input
    stream supports seeking, use g_seekable_can_seek().
    To position a file input stream, use g_seekable_seek().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def query_info(self, attributes: str, cancellable: _T.Optional[Cancellable]) -> FileInfo:
        """
        Queries a file input stream the given @attributes. This function blocks
        while querying the stream. For the asynchronous (non-blocking) version
        of this function, see g_file_input_stream_query_info_async(). While the
        stream is blocked, the stream will set the pending flag internally, and
        any other operations on the stream will fail with %G_IO_ERROR_PENDING.
        """
        ...

    def query_info_async(self, attributes: str, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Queries the stream information asynchronously.
        When the operation is finished @callback will be called.
        You can then call g_file_input_stream_query_info_finish()
        to get the result of the operation.

        For the synchronous version of this function,
        see g_file_input_stream_query_info().

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be set
        """
        ...

    def query_info_finish(self, result: AsyncResult) -> FileInfo:
        """
        Finishes an asynchronous info query operation.
        """
        ...


    ...

class FileMonitor(GObject.Object):
    """
    Monitors a file or directory for changes.

    To obtain a #GFileMonitor for a file or directory, use
    g_file_monitor(), g_file_monitor_file(), or
    g_file_monitor_directory().

    To get informed about changes to the file or directory you are
    monitoring, connect to the #GFileMonitor::changed signal. The
    signal will be emitted in the
    [thread-default main context][g-main-context-push-thread-default]
    of the thread that the monitor was created in
    (though if the global default main context is blocked, this may
    cause notifications to be blocked even if the thread-default
    context is still running).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def cancel(self) -> bool:
        """
        Cancels a file monitor.
        """
        ...

    def emit_event(self, child: File, other_file: File, event_type: FileMonitorEvent) -> object:
        """
        Emits the #GFileMonitor::changed signal if a change
        has taken place. Should be called from file monitor
        implementations only.

        Implementations are responsible to call this method from the
        [thread-default main context][g-main-context-push-thread-default] of the
        thread that the monitor was created in.
        """
        ...

    def is_cancelled(self) -> bool:
        """
        Returns whether the monitor is canceled.
        """
        ...

    def set_rate_limit(self, limit_msecs: int) -> object:
        """
        Sets the rate limit to which the @monitor will report
        consecutive change events to the same file.
        """
        ...


    ...

class FileOutputStream(OutputStream, Seekable):
    """
    GFileOutputStream provides output streams that write their
    content to a file.

    GFileOutputStream implements #GSeekable, which allows the output
    stream to jump to arbitrary positions in the file and to truncate
    the file, provided the filesystem of the file supports these
    operations.

    To find the position of a file output stream, use g_seekable_tell().
    To find out if a file output stream supports seeking, use
    g_seekable_can_seek().To position a file output stream, use
    g_seekable_seek(). To find out if a file output stream supports
    truncating, use g_seekable_can_truncate(). To truncate a file output
    stream, use g_seekable_truncate().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_etag(self) -> str:
        """
        Gets the entity tag for the file when it has been written.
        This must be called after the stream has been written
        and closed, as the etag can change while writing.
        """
        ...

    def query_info(self, attributes: str, cancellable: _T.Optional[Cancellable]) -> FileInfo:
        """
        Queries a file output stream for the given @attributes.
        This function blocks while querying the stream. For the asynchronous
        version of this function, see g_file_output_stream_query_info_async().
        While the stream is blocked, the stream will set the pending flag
        internally, and any other operations on the stream will fail with
        %G_IO_ERROR_PENDING.

        Can fail if the stream was already closed (with @error being set to
        %G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
        set to %G_IO_ERROR_PENDING), or if querying info is not supported for
        the stream's interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). In
        all cases of failure, %NULL will be returned.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will
        be returned.
        """
        ...

    def query_info_async(self, attributes: str, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously queries the @stream for a #GFileInfo. When completed,
        @callback will be called with a #GAsyncResult which can be used to
        finish the operation with g_file_output_stream_query_info_finish().

        For the synchronous version of this function, see
        g_file_output_stream_query_info().
        """
        ...

    def query_info_finish(self, result: AsyncResult) -> FileInfo:
        """
        Finalizes the asynchronous query started
        by g_file_output_stream_query_info_async().
        """
        ...


    ...

class FilenameCompleter(GObject.Object):
    """
    Completes partial file and directory names given a partial string by
    looking in the file system for clues. Can return a list of possible
    completion strings for widget implementations.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> FilenameCompleter:
        """
        Creates a new filename completer.
        """
        ...

    def get_completion_suffix(self, initial_text: str) -> str:
        """
        Obtains a completion for @initial_text from @completer.
        """
        ...

    def get_completions(self, initial_text: str) -> object:
        """
        Gets an array of completion strings for a given initial text.
        """
        ...

    def set_dirs_only(self, dirs_only: bool) -> object:
        """
        If @dirs_only is %TRUE, @completer will only
        complete directory names, and not file names.
        """
        ...


    ...

class FilterInputStream(InputStream):
    """
    Base class for input stream implementations that perform some
    kind of filtering operation on a base stream. Typical examples
    of filtering operations are character set conversion, compression
    and byte order flipping.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_base_stream(self) -> InputStream:
        """
        Gets the base stream for the filter stream.
        """
        ...

    def get_close_base_stream(self) -> bool:
        """
        Returns whether the base stream will be closed when @stream is
        closed.
        """
        ...

    def set_close_base_stream(self, close_base: bool) -> object:
        """
        Sets whether the base stream will be closed when @stream is closed.
        """
        ...


    ...

class FilterOutputStream(OutputStream):
    """
    Base class for output stream implementations that perform some
    kind of filtering operation on a base stream. Typical examples
    of filtering operations are character set conversion, compression
    and byte order flipping.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_base_stream(self) -> OutputStream:
        """
        Gets the base stream for the filter stream.
        """
        ...

    def get_close_base_stream(self) -> bool:
        """
        Returns whether the base stream will be closed when @stream is
        closed.
        """
        ...

    def set_close_base_stream(self, close_base: bool) -> object:
        """
        Sets whether the base stream will be closed when @stream is closed.
        """
        ...


    ...

class IOModule(GObject.TypeModule, GObject.TypePlugin):
    """
    Provides an interface and default functions for loading and unloading
    modules. This is used internally to make GIO extensible, but can also
    be used by others to implement module loading.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, filename: str) -> IOModule:
        """
        Creates a new GIOModule that will load the specific
        shared library when in use.
        """
        ...

    def load(self) -> object:
        """
        Required API for GIO modules to implement.

        This function is run after the module has been loaded into GIO,
        to initialize the module. Typically, this function will call
        g_io_extension_point_implement().

        Since 2.56, this function should be named `g_io_<modulename>_load`, where
        `modulename` is the plugin’s filename with the `lib` or `libgio` prefix and
        everything after the first dot removed, and with `-` replaced with `_`
        throughout. For example, `libgiognutls-helper.so` becomes `gnutls_helper`.
        Using the new symbol names avoids name clashes when building modules
        statically. The old symbol names continue to be supported, but cannot be used
        for static builds.
        """
        ...

    def unload(self) -> object:
        """
        Required API for GIO modules to implement.

        This function is run when the module is being unloaded from GIO,
        to finalize the module.

        Since 2.56, this function should be named `g_io_<modulename>_unload`, where
        `modulename` is the plugin’s filename with the `lib` or `libgio` prefix and
        everything after the first dot removed, and with `-` replaced with `_`
        throughout. For example, `libgiognutls-helper.so` becomes `gnutls_helper`.
        Using the new symbol names avoids name clashes when building modules
        statically. The old symbol names continue to be supported, but cannot be used
        for static builds.
        """
        ...


    ...

class IOStream(GObject.Object):
    """
    GIOStream represents an object that has both read and write streams.
    Generally the two streams act as separate input and output streams,
    but they share some common resources and state. For instance, for
    seekable streams, both streams may use the same position.

    Examples of #GIOStream objects are #GSocketConnection, which represents
    a two-way network connection; and #GFileIOStream, which represents a
    file handle opened in read-write mode.

    To do the actual reading and writing you need to get the substreams
    with g_io_stream_get_input_stream() and g_io_stream_get_output_stream().

    The #GIOStream object owns the input and the output streams, not the other
    way around, so keeping the substreams alive will not keep the #GIOStream
    object alive. If the #GIOStream object is freed it will be closed, thus
    closing the substreams, so even if the substreams stay alive they will
    always return %G_IO_ERROR_CLOSED for all operations.

    To close a stream use g_io_stream_close() which will close the common
    stream object and also the individual substreams. You can also close
    the substreams themselves. In most cases this only marks the
    substream as closed, so further I/O on it fails but common state in the
    #GIOStream may still be open. However, some streams may support
    "half-closed" states where one direction of the stream is actually shut down.

    Operations on #GIOStreams cannot be started while another operation on the
    #GIOStream or its substreams is in progress. Specifically, an application can
    read from the #GInputStream and write to the #GOutputStream simultaneously
    (either in separate threads, or as asynchronous operations in the same
    thread), but an application cannot start any #GIOStream operation while there
    is a #GIOStream, #GInputStream or #GOutputStream operation in progress, and
    an application can’t start any #GInputStream or #GOutputStream operation
    while there is a #GIOStream operation in progress.

    This is a product of individual stream operations being associated with a
    given #GMainContext (the thread-default context at the time the operation was
    started), rather than entire streams being associated with a single
    #GMainContext.

    GIO may run operations on #GIOStreams from other (worker) threads, and this
    may be exposed to application code in the behaviour of wrapper streams, such
    as #GBufferedInputStream or #GTlsConnection. With such wrapper APIs,
    application code may only run operations on the base (wrapped) stream when
    the wrapper stream is idle. Note that the semantics of such operations may
    not be well-defined due to the state the wrapper stream leaves the base
    stream in (though they are guaranteed not to crash).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def clear_pending(self) -> object:
        """
        Clears the pending flag on @stream.
        """
        ...

    def close(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Closes the stream, releasing resources related to it. This will also
        close the individual input and output streams, if they are not already
        closed.

        Once the stream is closed, all other operations will return
        %G_IO_ERROR_CLOSED. Closing a stream multiple times will not
        return an error.

        Closing a stream will automatically flush any outstanding buffers
        in the stream.

        Streams will be automatically closed when the last reference
        is dropped, but you might want to call this function to make sure
        resources are released as early as possible.

        Some streams might keep the backing store of the stream (e.g. a file
        descriptor) open after the stream is closed. See the documentation for
        the individual stream for details.

        On failure the first error that happened will be reported, but the
        close operation will finish as much as possible. A stream that failed
        to close will still return %G_IO_ERROR_CLOSED for all operations.
        Still, it is important to check and report the error to the user,
        otherwise there might be a loss of data as all data might not be written.

        If @cancellable is not NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        Cancelling a close will still leave the stream closed, but some streams
        can use a faster close that doesn't block to e.g. check errors.

        The default implementation of this method just calls close on the
        individual input/output streams.
        """
        ...

    def close_async(self, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Requests an asynchronous close of the stream, releasing resources
        related to it. When the operation is finished @callback will be
        called. You can then call g_io_stream_close_finish() to get
        the result of the operation.

        For behaviour details see g_io_stream_close().

        The asynchronous methods have a default fallback that uses threads
        to implement asynchronicity, so they are optional for inheriting
        classes. However, if you override one you must override all.
        """
        ...

    def close_finish(self, result: AsyncResult) -> bool:
        """
        Closes a stream.
        """
        ...

    def get_input_stream(self) -> InputStream:
        """
        Gets the input stream for this object. This is used
        for reading.
        """
        ...

    def get_output_stream(self) -> OutputStream:
        """
        Gets the output stream for this object. This is used for
        writing.
        """
        ...

    def has_pending(self) -> bool:
        """
        Checks if a stream has pending actions.
        """
        ...

    def is_closed(self) -> bool:
        """
        Checks if a stream is closed.
        """
        ...

    def set_pending(self) -> bool:
        """
        Sets @stream to have actions pending. If the pending flag is
        already set or @stream is closed, it will return %FALSE and set
        @error.
        """
        ...

    def splice_async(self, stream2: IOStream, flags: IOStreamSpliceFlags, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously splice the output stream of @stream1 to the input stream of
        @stream2, and splice the output stream of @stream2 to the input stream of
        @stream1.

        When the operation is finished @callback will be called.
        You can then call g_io_stream_splice_finish() to get the
        result of the operation.
        """
        ...


    ...

class InetAddress(GObject.Object):
    """
    #GInetAddress represents an IPv4 or IPv6 internet address. Use
    g_resolver_lookup_by_name() or g_resolver_lookup_by_name_async() to
    look up the #GInetAddress for a hostname. Use
    g_resolver_lookup_by_address() or
    g_resolver_lookup_by_address_async() to look up the hostname for a
    #GInetAddress.

    To actually connect to a remote host, you will need a
    #GInetSocketAddress (which includes a #GInetAddress as well as a
    port number).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_any(cls, family: SocketFamily) -> InetAddress:
        """
        Creates a #GInetAddress for the "any" address (unassigned/"don't
        care") for @family.
        """
        ...


    @classmethod
    def new_from_bytes(cls, bytes: object, family: SocketFamily) -> InetAddress:
        """
        Creates a new #GInetAddress from the given @family and @bytes.
        @bytes should be 4 bytes for %G_SOCKET_FAMILY_IPV4 and 16 bytes for
        %G_SOCKET_FAMILY_IPV6.
        """
        ...


    @classmethod
    def new_from_string(cls, string: str) -> InetAddress:
        """
        Parses @string as an IP address and creates a new #GInetAddress.
        """
        ...


    @classmethod
    def new_loopback(cls, family: SocketFamily) -> InetAddress:
        """
        Creates a #GInetAddress for the loopback address for @family.
        """
        ...

    def equal(self, other_address: InetAddress) -> bool:
        """
        Checks if two #GInetAddress instances are equal, e.g. the same address.
        """
        ...

    def get_family(self) -> SocketFamily:
        """
        Gets @address's family
        """
        ...

    def get_is_any(self) -> bool:
        """
        Tests whether @address is the "any" address for its family.
        """
        ...

    def get_is_link_local(self) -> bool:
        """
        Tests whether @address is a link-local address (that is, if it
        identifies a host on a local network that is not connected to the
        Internet).
        """
        ...

    def get_is_loopback(self) -> bool:
        """
        Tests whether @address is the loopback address for its family.
        """
        ...

    def get_is_mc_global(self) -> bool:
        """
        Tests whether @address is a global multicast address.
        """
        ...

    def get_is_mc_link_local(self) -> bool:
        """
        Tests whether @address is a link-local multicast address.
        """
        ...

    def get_is_mc_node_local(self) -> bool:
        """
        Tests whether @address is a node-local multicast address.
        """
        ...

    def get_is_mc_org_local(self) -> bool:
        """
        Tests whether @address is an organization-local multicast address.
        """
        ...

    def get_is_mc_site_local(self) -> bool:
        """
        Tests whether @address is a site-local multicast address.
        """
        ...

    def get_is_multicast(self) -> bool:
        """
        Tests whether @address is a multicast address.
        """
        ...

    def get_is_site_local(self) -> bool:
        """
        Tests whether @address is a site-local address such as 10.0.0.1
        (that is, the address identifies a host on a local network that can
        not be reached directly from the Internet, but which may have
        outgoing Internet connectivity via a NAT or firewall).
        """
        ...

    def get_native_size(self) -> int:
        """
        Gets the size of the native raw binary address for @address. This
        is the size of the data that you get from g_inet_address_to_bytes().
        """
        ...

    def to_bytes(self) -> int:
        """
        Gets the raw binary address data from @address.
        """
        ...

    def to_string(self) -> str:
        """
        Converts @address to string form.
        """
        ...


    ...

class InetAddressMask(GObject.Object, Initable):
    """
    #GInetAddressMask represents a range of IPv4 or IPv6 addresses
    described by a base address and a length indicating how many bits
    of the base address are relevant for matching purposes. These are
    often given in string form. Eg, "10.0.0.0/8", or "fe80::/10".
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, addr: InetAddress, length: int) -> InetAddressMask:
        """
        Creates a new #GInetAddressMask representing all addresses whose
        first @length bits match @addr.
        """
        ...


    @classmethod
    def new_from_string(cls, mask_string: str) -> InetAddressMask:
        """
        Parses @mask_string as an IP address and (optional) length, and
        creates a new #GInetAddressMask. The length, if present, is
        delimited by a "/". If it is not present, then the length is
        assumed to be the full length of the address.
        """
        ...

    def equal(self, mask2: InetAddressMask) -> bool:
        """
        Tests if @mask and @mask2 are the same mask.
        """
        ...

    def get_address(self) -> InetAddress:
        """
        Gets @mask's base address
        """
        ...

    def get_family(self) -> SocketFamily:
        """
        Gets the #GSocketFamily of @mask's address
        """
        ...

    def get_length(self) -> int:
        """
        Gets @mask's length
        """
        ...

    def matches(self, address: InetAddress) -> bool:
        """
        Tests if @address falls within the range described by @mask.
        """
        ...

    def to_string(self) -> str:
        """
        Converts @mask back to its corresponding string form.
        """
        ...


    ...

class InetSocketAddress(SocketAddress, SocketConnectable):
    """
    An IPv4 or IPv6 socket address; that is, the combination of a
    #GInetAddress and a port number.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, address: InetAddress, port: int) -> SocketAddress:
        """
        Creates a new #GInetSocketAddress for @address and @port.
        """
        ...


    @classmethod
    def new_from_string(cls, address: str, port: int) -> SocketAddress:
        """
        Creates a new #GInetSocketAddress for @address and @port.

        If @address is an IPv6 address, it can also contain a scope ID
        (separated from the address by a `%`).
        """
        ...

    def get_address(self) -> InetAddress:
        """
        Gets @address's #GInetAddress.
        """
        ...

    def get_flowinfo(self) -> int:
        """
        Gets the `sin6_flowinfo` field from @address,
        which must be an IPv6 address.
        """
        ...

    def get_port(self) -> int:
        """
        Gets @address's port.
        """
        ...

    def get_scope_id(self) -> int:
        """
        Gets the `sin6_scope_id` field from @address,
        which must be an IPv6 address.
        """
        ...


    ...

class InputStream(GObject.Object):
    """
    #GInputStream has functions to read from a stream (g_input_stream_read()),
    to close a stream (g_input_stream_close()) and to skip some content
    (g_input_stream_skip()).

    To copy the content of an input stream to an output stream without
    manually handling the reads and writes, use g_output_stream_splice().

    See the documentation for #GIOStream for details of thread safety of
    streaming APIs.

    All of these functions have async variants too.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def clear_pending(self) -> object:
        """
        Clears the pending flag on @stream.
        """
        ...

    def close(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Closes the stream, releasing resources related to it.

        Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
        Closing a stream multiple times will not return an error.

        Streams will be automatically closed when the last reference
        is dropped, but you might want to call this function to make sure
        resources are released as early as possible.

        Some streams might keep the backing store of the stream (e.g. a file descriptor)
        open after the stream is closed. See the documentation for the individual
        stream for details.

        On failure the first error that happened will be reported, but the close
        operation will finish as much as possible. A stream that failed to
        close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
        is important to check and report the error to the user.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        Cancelling a close will still leave the stream closed, but some streams
        can use a faster close that doesn't block to e.g. check errors.
        """
        ...

    def close_async(self, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Requests an asynchronous closes of the stream, releasing resources related to it.
        When the operation is finished @callback will be called.
        You can then call g_input_stream_close_finish() to get the result of the
        operation.

        For behaviour details see g_input_stream_close().

        The asynchronous methods have a default fallback that uses threads to implement
        asynchronicity, so they are optional for inheriting classes. However, if you
        override one you must override all.
        """
        ...

    def close_finish(self, result: AsyncResult) -> bool:
        """
        Finishes closing a stream asynchronously, started from g_input_stream_close_async().
        """
        ...

    def has_pending(self) -> bool:
        """
        Checks if an input stream has pending actions.
        """
        ...

    def is_closed(self) -> bool:
        """
        Checks if an input stream is closed.
        """
        ...

    def read(self, buffer: object, count: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Tries to read @count bytes from the stream into the buffer starting at
        @buffer. Will block during this read.

        If count is zero returns zero and does nothing. A value of @count
        larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

        On success, the number of bytes read into the buffer is returned.
        It is not an error if this is not the same as the requested size, as it
        can happen e.g. near the end of a file. Zero is returned on end of file
        (or if @count is zero),  but never otherwise.

        The returned @buffer is not a nul-terminated string, it can contain nul bytes
        at any position, and this function doesn't nul-terminate the @buffer.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
        operation was partially finished when the operation was cancelled the
        partial result will be returned, without an error.

        On error -1 is returned and @error is set accordingly.
        """
        ...

    def read_all(self, buffer: object, count: int, bytes_read: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Tries to read @count bytes from the stream into the buffer starting at
        @buffer. Will block during this read.

        This function is similar to g_input_stream_read(), except it tries to
        read as many bytes as requested, only stopping on an error or end of stream.

        On a successful read of @count bytes, or if we reached the end of the
        stream,  %TRUE is returned, and @bytes_read is set to the number of bytes
        read into @buffer.

        If there is an error during the operation %FALSE is returned and @error
        is set to indicate the error status.

        As a special exception to the normal conventions for functions that
        use #GError, if this function returns %FALSE (and sets @error) then
        @bytes_read will be set to the number of bytes that were successfully
        read before the error was encountered.  This functionality is only
        available from C.  If you need it from another language then you must
        write your own loop around g_input_stream_read().
        """
        ...

    def read_all_async(self, buffer: object, count: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request an asynchronous read of @count bytes from the stream into the
        buffer starting at @buffer.

        This is the asynchronous equivalent of g_input_stream_read_all().

        Call g_input_stream_read_all_finish() to collect the result.

        Any outstanding I/O request with higher priority (lower numerical
        value) will be executed before an outstanding request with lower
        priority. Default priority is %G_PRIORITY_DEFAULT.
        """
        ...

    def read_all_finish(self, result: AsyncResult, bytes_read: int) -> bool:
        """
        Finishes an asynchronous stream read operation started with
        g_input_stream_read_all_async().

        As a special exception to the normal conventions for functions that
        use #GError, if this function returns %FALSE (and sets @error) then
        @bytes_read will be set to the number of bytes that were successfully
        read before the error was encountered.  This functionality is only
        available from C.  If you need it from another language then you must
        write your own loop around g_input_stream_read_async().
        """
        ...

    def read_async(self, buffer: object, count: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request an asynchronous read of @count bytes from the stream into the buffer
        starting at @buffer. When the operation is finished @callback will be called.
        You can then call g_input_stream_read_finish() to get the result of the
        operation.

        During an async request no other sync and async calls are allowed on @stream, and will
        result in %G_IO_ERROR_PENDING errors.

        A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

        On success, the number of bytes read into the buffer will be passed to the
        callback. It is not an error if this is not the same as the requested size, as it
        can happen e.g. near the end of a file, but generally we try to read
        as many bytes as requested. Zero is returned on end of file
        (or if @count is zero),  but never otherwise.

        Any outstanding i/o request with higher priority (lower numerical value) will
        be executed before an outstanding request with lower priority. Default
        priority is %G_PRIORITY_DEFAULT.

        The asynchronous methods have a default fallback that uses threads to implement
        asynchronicity, so they are optional for inheriting classes. However, if you
        override one you must override all.
        """
        ...

    def read_bytes(self, count: int, cancellable: _T.Optional[Cancellable]) -> GLib.Bytes:
        """
        Like g_input_stream_read(), this tries to read @count bytes from
        the stream in a blocking fashion. However, rather than reading into
        a user-supplied buffer, this will create a new #GBytes containing
        the data that was read. This may be easier to use from language
        bindings.

        If count is zero, returns a zero-length #GBytes and does nothing. A
        value of @count larger than %G_MAXSSIZE will cause a
        %G_IO_ERROR_INVALID_ARGUMENT error.

        On success, a new #GBytes is returned. It is not an error if the
        size of this object is not the same as the requested size, as it
        can happen e.g. near the end of a file. A zero-length #GBytes is
        returned on end of file (or if @count is zero), but never
        otherwise.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
        operation was partially finished when the operation was cancelled the
        partial result will be returned, without an error.

        On error %NULL is returned and @error is set accordingly.
        """
        ...

    def read_bytes_async(self, count: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request an asynchronous read of @count bytes from the stream into a
        new #GBytes. When the operation is finished @callback will be
        called. You can then call g_input_stream_read_bytes_finish() to get the
        result of the operation.

        During an async request no other sync and async calls are allowed
        on @stream, and will result in %G_IO_ERROR_PENDING errors.

        A value of @count larger than %G_MAXSSIZE will cause a
        %G_IO_ERROR_INVALID_ARGUMENT error.

        On success, the new #GBytes will be passed to the callback. It is
        not an error if this is smaller than the requested size, as it can
        happen e.g. near the end of a file, but generally we try to read as
        many bytes as requested. Zero is returned on end of file (or if
        @count is zero), but never otherwise.

        Any outstanding I/O request with higher priority (lower numerical
        value) will be executed before an outstanding request with lower
        priority. Default priority is %G_PRIORITY_DEFAULT.
        """
        ...

    def read_bytes_finish(self, result: AsyncResult) -> GLib.Bytes:
        """
        Finishes an asynchronous stream read-into-#GBytes operation.
        """
        ...

    def read_finish(self, result: AsyncResult) -> int:
        """
        Finishes an asynchronous stream read operation.
        """
        ...

    def set_pending(self) -> bool:
        """
        Sets @stream to have actions pending. If the pending flag is
        already set or @stream is closed, it will return %FALSE and set
        @error.
        """
        ...

    def skip(self, count: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Tries to skip @count bytes from the stream. Will block during the operation.

        This is identical to g_input_stream_read(), from a behaviour standpoint,
        but the bytes that are skipped are not returned to the user. Some
        streams have an implementation that is more efficient than reading the data.

        This function is optional for inherited classes, as the default implementation
        emulates it using read.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
        operation was partially finished when the operation was cancelled the
        partial result will be returned, without an error.
        """
        ...

    def skip_async(self, count: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request an asynchronous skip of @count bytes from the stream.
        When the operation is finished @callback will be called.
        You can then call g_input_stream_skip_finish() to get the result
        of the operation.

        During an async request no other sync and async calls are allowed,
        and will result in %G_IO_ERROR_PENDING errors.

        A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

        On success, the number of bytes skipped will be passed to the callback.
        It is not an error if this is not the same as the requested size, as it
        can happen e.g. near the end of a file, but generally we try to skip
        as many bytes as requested. Zero is returned on end of file
        (or if @count is zero), but never otherwise.

        Any outstanding i/o request with higher priority (lower numerical value)
        will be executed before an outstanding request with lower priority.
        Default priority is %G_PRIORITY_DEFAULT.

        The asynchronous methods have a default fallback that uses threads to
        implement asynchronicity, so they are optional for inheriting classes.
        However, if you override one, you must override all.
        """
        ...

    def skip_finish(self, result: AsyncResult) -> int:
        """
        Finishes a stream skip operation.
        """
        ...


    ...

class ListStore(GObject.Object, ListModel):
    """
    #GListStore is a simple implementation of #GListModel that stores all
    items in memory.

    It provides insertions, deletions, and lookups in logarithmic time
    with a fast path for the common case of iterating the list linearly.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, item_type: GObject.Type) -> ListStore:
        """
        Creates a new #GListStore with items of type @item_type. @item_type
        must be a subclass of #GObject.
        """
        ...

    def append(self, item: GObject.Object) -> object:
        """
        Appends @item to @store. @item must be of type #GListStore:item-type.

        This function takes a ref on @item.

        Use g_list_store_splice() to append multiple items at the same time
        efficiently.
        """
        ...

    def find(self, item: GObject.Object, position: int) -> bool:
        """
        Looks up the given @item in the list store by looping over the items until
        the first occurrence of @item. If @item was not found, then @position will
        not be set, and this method will return %FALSE.

        If you need to compare the two items with a custom comparison function, use
        g_list_store_find_with_equal_func() with a custom #GEqualFunc instead.
        """
        ...

    def find_with_equal_func(self, item: GObject.Object, equal_func: GLib.EqualFunc, position: int) -> bool:
        """
        Looks up the given @item in the list store by looping over the items and
        comparing them with @compare_func until the first occurrence of @item which
        matches. If @item was not found, then @position will not be set, and this
        method will return %FALSE.
        """
        ...

    def insert(self, position: int, item: GObject.Object) -> object:
        """
        Inserts @item into @store at @position. @item must be of type
        #GListStore:item-type or derived from it. @position must be smaller
        than the length of the list, or equal to it to append.

        This function takes a ref on @item.

        Use g_list_store_splice() to insert multiple items at the same time
        efficiently.
        """
        ...

    def insert_sorted(self, item: GObject.Object, compare_func: GLib.CompareDataFunc, user_data: _T.Optional[object]) -> int:
        """
        Inserts @item into @store at a position to be determined by the
        @compare_func.

        The list must already be sorted before calling this function or the
        result is undefined.  Usually you would approach this by only ever
        inserting items by way of this function.

        This function takes a ref on @item.
        """
        ...

    def remove(self, position: int) -> object:
        """
        Removes the item from @store that is at @position. @position must be
        smaller than the current length of the list.

        Use g_list_store_splice() to remove multiple items at the same time
        efficiently.
        """
        ...

    def remove_all(self) -> object:
        """
        Removes all items from @store.
        """
        ...

    def sort(self, compare_func: GLib.CompareDataFunc, user_data: _T.Optional[object]) -> object:
        """
        Sort the items in @store according to @compare_func.
        """
        ...

    def splice(self, position: int, n_removals: int, additions: object, n_additions: int) -> object:
        """
        Changes @store by removing @n_removals items and adding @n_additions
        items to it. @additions must contain @n_additions items of type
        #GListStore:item-type.  %NULL is not permitted.

        This function is more efficient than g_list_store_insert() and
        g_list_store_remove(), because it only emits
        #GListModel::items-changed once for the change.

        This function takes a ref on each item in @additions.

        The parameters @position and @n_removals must be correct (ie:
        @position + @n_removals must be less than or equal to the length of
        the list at the time this function is called).
        """
        ...


    ...

class MemoryInputStream(InputStream, PollableInputStream, Seekable):
    """
    #GMemoryInputStream is a class for using arbitrary
    memory chunks as input for GIO streaming input operations.

    As of GLib 2.34, #GMemoryInputStream implements
    #GPollableInputStream.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> InputStream:
        """
        Creates a new empty #GMemoryInputStream.
        """
        ...


    @classmethod
    def new_from_bytes(cls, bytes: GLib.Bytes) -> InputStream:
        """
        Creates a new #GMemoryInputStream with data from the given @bytes.
        """
        ...


    @classmethod
    def new_from_data(cls, data: object, len: int, destroy: _T.Optional[GLib.DestroyNotify]) -> InputStream:
        """
        Creates a new #GMemoryInputStream with data in memory of a given size.
        """
        ...

    def add_bytes(self, bytes: GLib.Bytes) -> object:
        """
        Appends @bytes to data that can be read from the input stream.
        """
        ...

    def add_data(self, data: object, len: int, destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Appends @data to data that can be read from the input stream
        """
        ...


    ...

class MemoryOutputStream(OutputStream, PollableOutputStream, Seekable):
    """
    #GMemoryOutputStream is a class for using arbitrary
    memory chunks as output for GIO streaming output operations.

    As of GLib 2.34, #GMemoryOutputStream trivially implements
    #GPollableOutputStream: it always polls as ready.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, data: _T.Optional[object], size: int, realloc_function: _T.Optional[ReallocFunc], destroy_function: _T.Optional[GLib.DestroyNotify]) -> OutputStream:
        """
        Creates a new #GMemoryOutputStream.

        In most cases this is not the function you want.  See
        g_memory_output_stream_new_resizable() instead.

        If @data is non-%NULL, the stream will use that for its internal storage.

        If @realloc_fn is non-%NULL, it will be used for resizing the internal
        storage when necessary and the stream will be considered resizable.
        In that case, the stream will start out being (conceptually) empty.
        @size is used only as a hint for how big @data is.  Specifically,
        seeking to the end of a newly-created stream will seek to zero, not
        @size.  Seeking past the end of the stream and then writing will
        introduce a zero-filled gap.

        If @realloc_fn is %NULL then the stream is fixed-sized.  Seeking to
        the end will seek to @size exactly.  Writing past the end will give
        an 'out of space' error.  Attempting to seek past the end will fail.
        Unlike the resizable case, seeking to an offset within the stream and
        writing will preserve the bytes passed in as @data before that point
        and will return them as part of g_memory_output_stream_steal_data().
        If you intend to seek you should probably therefore ensure that @data
        is properly initialised.

        It is probably only meaningful to provide @data and @size in the case
        that you want a fixed-sized stream.  Put another way: if @realloc_fn
        is non-%NULL then it makes most sense to give @data as %NULL and
        @size as 0 (allowing #GMemoryOutputStream to do the initial
        allocation for itself).

        |[<!-- language="C" -->
        // a stream that can grow
        stream = g_memory_output_stream_new (NULL, 0, realloc, free);

        // another stream that can grow
        stream2 = g_memory_output_stream_new (NULL, 0, g_realloc, g_free);

        // a fixed-size stream
        data = malloc (200);
        stream3 = g_memory_output_stream_new (data, 200, NULL, free);
        ]|
        """
        ...


    @classmethod
    def new_resizable(cls) -> OutputStream:
        """
        Creates a new #GMemoryOutputStream, using g_realloc() and g_free()
        for memory allocation.
        """
        ...

    def get_data(self) -> object:
        """
        Gets any loaded data from the @ostream.

        Note that the returned pointer may become invalid on the next
        write or truncate operation on the stream.
        """
        ...

    def get_data_size(self) -> int:
        """
        Returns the number of bytes from the start up to including the last
        byte written in the stream that has not been truncated away.
        """
        ...

    def get_size(self) -> int:
        """
        Gets the size of the currently allocated data area (available from
        g_memory_output_stream_get_data()).

        You probably don't want to use this function on resizable streams.
        See g_memory_output_stream_get_data_size() instead.  For resizable
        streams the size returned by this function is an implementation
        detail and may be change at any time in response to operations on the
        stream.

        If the stream is fixed-sized (ie: no realloc was passed to
        g_memory_output_stream_new()) then this is the maximum size of the
        stream and further writes will return %G_IO_ERROR_NO_SPACE.

        In any case, if you want the number of bytes currently written to the
        stream, use g_memory_output_stream_get_data_size().
        """
        ...

    def steal_as_bytes(self) -> GLib.Bytes:
        """
        Returns data from the @ostream as a #GBytes. @ostream must be
        closed before calling this function.
        """
        ...

    def steal_data(self) -> object:
        """
        Gets any loaded data from the @ostream. Ownership of the data
        is transferred to the caller; when no longer needed it must be
        freed using the free function set in @ostream's
        #GMemoryOutputStream:destroy-function property.

        @ostream must be closed before calling this function.
        """
        ...


    ...

class Menu(MenuModel):
    """
    #GMenu is a simple implementation of #GMenuModel.
    You populate a #GMenu by adding #GMenuItem instances to it.

    There are some convenience functions to allow you to directly
    add items (avoiding #GMenuItem) for the common cases. To add
    a regular item, use g_menu_insert(). To add a section, use
    g_menu_insert_section(). To add a submenu, use
    g_menu_insert_submenu().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Menu:
        """
        Creates a new #GMenu.

        The new menu has no items.
        """
        ...

    def append(self, label: _T.Optional[str], detailed_action: _T.Optional[str]) -> object:
        """
        Convenience function for appending a normal menu item to the end of
        @menu.  Combine g_menu_item_new() and g_menu_insert_item() for a more
        flexible alternative.
        """
        ...

    def append_item(self, item: MenuItem) -> object:
        """
        Appends @item to the end of @menu.

        See g_menu_insert_item() for more information.
        """
        ...

    def append_section(self, label: _T.Optional[str], section: MenuModel) -> object:
        """
        Convenience function for appending a section menu item to the end of
        @menu.  Combine g_menu_item_new_section() and g_menu_insert_item() for a
        more flexible alternative.
        """
        ...

    def append_submenu(self, label: _T.Optional[str], submenu: MenuModel) -> object:
        """
        Convenience function for appending a submenu menu item to the end of
        @menu.  Combine g_menu_item_new_submenu() and g_menu_insert_item() for a
        more flexible alternative.
        """
        ...

    def freeze(self) -> object:
        """
        Marks @menu as frozen.

        After the menu is frozen, it is an error to attempt to make any
        changes to it.  In effect this means that the #GMenu API must no
        longer be used.

        This function causes g_menu_model_is_mutable() to begin returning
        %FALSE, which has some positive performance implications.
        """
        ...

    def insert(self, position: int, label: _T.Optional[str], detailed_action: _T.Optional[str]) -> object:
        """
        Convenience function for inserting a normal menu item into @menu.
        Combine g_menu_item_new() and g_menu_insert_item() for a more flexible
        alternative.
        """
        ...

    def insert_item(self, position: int, item: MenuItem) -> object:
        """
        Inserts @item into @menu.

        The "insertion" is actually done by copying all of the attribute and
        link values of @item and using them to form a new item within @menu.
        As such, @item itself is not really inserted, but rather, a menu item
        that is exactly the same as the one presently described by @item.

        This means that @item is essentially useless after the insertion
        occurs.  Any changes you make to it are ignored unless it is inserted
        again (at which point its updated values will be copied).

        You should probably just free @item once you're done.

        There are many convenience functions to take care of common cases.
        See g_menu_insert(), g_menu_insert_section() and
        g_menu_insert_submenu() as well as "prepend" and "append" variants of
        each of these functions.
        """
        ...

    def insert_section(self, position: int, label: _T.Optional[str], section: MenuModel) -> object:
        """
        Convenience function for inserting a section menu item into @menu.
        Combine g_menu_item_new_section() and g_menu_insert_item() for a more
        flexible alternative.
        """
        ...

    def insert_submenu(self, position: int, label: _T.Optional[str], submenu: MenuModel) -> object:
        """
        Convenience function for inserting a submenu menu item into @menu.
        Combine g_menu_item_new_submenu() and g_menu_insert_item() for a more
        flexible alternative.
        """
        ...

    def prepend(self, label: _T.Optional[str], detailed_action: _T.Optional[str]) -> object:
        """
        Convenience function for prepending a normal menu item to the start
        of @menu.  Combine g_menu_item_new() and g_menu_insert_item() for a more
        flexible alternative.
        """
        ...

    def prepend_item(self, item: MenuItem) -> object:
        """
        Prepends @item to the start of @menu.

        See g_menu_insert_item() for more information.
        """
        ...

    def prepend_section(self, label: _T.Optional[str], section: MenuModel) -> object:
        """
        Convenience function for prepending a section menu item to the start
        of @menu.  Combine g_menu_item_new_section() and g_menu_insert_item() for
        a more flexible alternative.
        """
        ...

    def prepend_submenu(self, label: _T.Optional[str], submenu: MenuModel) -> object:
        """
        Convenience function for prepending a submenu menu item to the start
        of @menu.  Combine g_menu_item_new_submenu() and g_menu_insert_item() for
        a more flexible alternative.
        """
        ...

    def remove(self, position: int) -> object:
        """
        Removes an item from the menu.

        @position gives the index of the item to remove.

        It is an error if position is not in range the range from 0 to one
        less than the number of items in the menu.

        It is not possible to remove items by identity since items are added
        to the menu simply by copying their links and attributes (ie:
        identity of the item itself is not preserved).
        """
        ...

    def remove_all(self) -> object:
        """
        Removes all items in the menu.
        """
        ...


    ...

class MenuAttributeIter(GObject.Object):
    """
    #GMenuAttributeIter is an opaque structure type.  You must access it
    using the functions below.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_name(self) -> str:
        """
        Gets the name of the attribute at the current iterator position, as
        a string.

        The iterator is not advanced.
        """
        ...

    def get_next(self, out_name: str, value: GLib.Variant) -> bool:
        """
        This function combines g_menu_attribute_iter_next() with
        g_menu_attribute_iter_get_name() and g_menu_attribute_iter_get_value().

        First the iterator is advanced to the next (possibly first) attribute.
        If that fails, then %FALSE is returned and there are no other
        effects.

        If successful, @name and @value are set to the name and value of the
        attribute that has just been advanced to.  At this point,
        g_menu_attribute_iter_get_name() and g_menu_attribute_iter_get_value() will
        return the same values again.

        The value returned in @name remains valid for as long as the iterator
        remains at the current position.  The value returned in @value must
        be unreffed using g_variant_unref() when it is no longer in use.
        """
        ...

    def get_value(self) -> GLib.Variant:
        """
        Gets the value of the attribute at the current iterator position.

        The iterator is not advanced.
        """
        ...

    def next(self) -> bool:
        """
        Attempts to advance the iterator to the next (possibly first)
        attribute.

        %TRUE is returned on success, or %FALSE if there are no more
        attributes.

        You must call this function when you first acquire the iterator
        to advance it to the first attribute (and determine if the first
        attribute exists at all).
        """
        ...


    ...

class MenuItem(GObject.Object):
    """
    #GMenuItem is an opaque structure type.  You must access it using the
    functions below.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, label: _T.Optional[str], detailed_action: _T.Optional[str]) -> MenuItem:
        """
        Creates a new #GMenuItem.

        If @label is non-%NULL it is used to set the "label" attribute of the
        new item.

        If @detailed_action is non-%NULL it is used to set the "action" and
        possibly the "target" attribute of the new item.  See
        g_menu_item_set_detailed_action() for more information.
        """
        ...


    @classmethod
    def new_from_model(cls, model: MenuModel, item_index: int) -> MenuItem:
        """
        Creates a #GMenuItem as an exact copy of an existing menu item in a
        #GMenuModel.

        @item_index must be valid (ie: be sure to call
        g_menu_model_get_n_items() first).
        """
        ...


    @classmethod
    def new_section(cls, label: _T.Optional[str], section: MenuModel) -> MenuItem:
        """
        Creates a new #GMenuItem representing a section.

        This is a convenience API around g_menu_item_new() and
        g_menu_item_set_section().

        The effect of having one menu appear as a section of another is
        exactly as it sounds: the items from @section become a direct part of
        the menu that @menu_item is added to.

        Visual separation is typically displayed between two non-empty
        sections.  If @label is non-%NULL then it will be encorporated into
        this visual indication.  This allows for labeled subsections of a
        menu.

        As a simple example, consider a typical "Edit" menu from a simple
        program.  It probably contains an "Undo" and "Redo" item, followed by
        a separator, followed by "Cut", "Copy" and "Paste".

        This would be accomplished by creating three #GMenu instances.  The
        first would be populated with the "Undo" and "Redo" items, and the
        second with the "Cut", "Copy" and "Paste" items.  The first and
        second menus would then be added as submenus of the third.  In XML
        format, this would look something like the following:
        |[
        <menu id='edit-menu'>
          <section>
            <item label='Undo'/>
            <item label='Redo'/>
          </section>
          <section>
            <item label='Cut'/>
            <item label='Copy'/>
            <item label='Paste'/>
          </section>
        </menu>
        ]|

        The following example is exactly equivalent.  It is more illustrative
        of the exact relationship between the menus and items (keeping in
        mind that the 'link' element defines a new menu that is linked to the
        containing one).  The style of the second example is more verbose and
        difficult to read (and therefore not recommended except for the
        purpose of understanding what is really going on).
        |[
        <menu id='edit-menu'>
          <item>
            <link name='section'>
              <item label='Undo'/>
              <item label='Redo'/>
            </link>
          </item>
          <item>
            <link name='section'>
              <item label='Cut'/>
              <item label='Copy'/>
              <item label='Paste'/>
            </link>
          </item>
        </menu>
        ]|
        """
        ...


    @classmethod
    def new_submenu(cls, label: _T.Optional[str], submenu: MenuModel) -> MenuItem:
        """
        Creates a new #GMenuItem representing a submenu.

        This is a convenience API around g_menu_item_new() and
        g_menu_item_set_submenu().
        """
        ...

    def get_attribute(self, attribute: str, format_string: str, *args: object) -> bool:
        """
        Queries the named @attribute on @menu_item.

        If the attribute exists and matches the #GVariantType corresponding
        to @format_string then @format_string is used to deconstruct the
        value into the positional parameters and %TRUE is returned.

        If the attribute does not exist, or it does exist but has the wrong
        type, then the positional parameters are ignored and %FALSE is
        returned.
        """
        ...

    def get_attribute_value(self, attribute: str, expected_type: _T.Optional[GLib.VariantType]) -> GLib.Variant:
        """
        Queries the named @attribute on @menu_item.

        If @expected_type is specified and the attribute does not have this
        type, %NULL is returned.  %NULL is also returned if the attribute
        simply does not exist.
        """
        ...

    def get_link(self, link: str) -> MenuModel:
        """
        Queries the named @link on @menu_item.
        """
        ...

    def set_action_and_target(self, action: _T.Optional[str], format_string: _T.Optional[str], *args: object) -> object:
        """
        Sets or unsets the "action" and "target" attributes of @menu_item.

        If @action is %NULL then both the "action" and "target" attributes
        are unset (and @format_string is ignored along with the positional
        parameters).

        If @action is non-%NULL then the "action" attribute is set.
        @format_string is then inspected.  If it is non-%NULL then the proper
        position parameters are collected to create a #GVariant instance to
        use as the target value.  If it is %NULL then the positional
        parameters are ignored and the "target" attribute is unset.

        See also g_menu_item_set_action_and_target_value() for an equivalent
        call that directly accepts a #GVariant.  See
        g_menu_item_set_detailed_action() for a more convenient version that
        works with string-typed targets.

        See also g_menu_item_set_action_and_target_value() for a
        description of the semantics of the action and target attributes.
        """
        ...

    def set_action_and_target_value(self, action: _T.Optional[str], target_value: _T.Optional[GLib.Variant]) -> object:
        """
        Sets or unsets the "action" and "target" attributes of @menu_item.

        If @action is %NULL then both the "action" and "target" attributes
        are unset (and @target_value is ignored).

        If @action is non-%NULL then the "action" attribute is set.  The
        "target" attribute is then set to the value of @target_value if it is
        non-%NULL or unset otherwise.

        Normal menu items (ie: not submenu, section or other custom item
        types) are expected to have the "action" attribute set to identify
        the action that they are associated with.  The state type of the
        action help to determine the disposition of the menu item.  See
        #GAction and #GActionGroup for an overview of actions.

        In general, clicking on the menu item will result in activation of
        the named action with the "target" attribute given as the parameter
        to the action invocation.  If the "target" attribute is not set then
        the action is invoked with no parameter.

        If the action has no state then the menu item is usually drawn as a
        plain menu item (ie: with no additional decoration).

        If the action has a boolean state then the menu item is usually drawn
        as a toggle menu item (ie: with a checkmark or equivalent
        indication).  The item should be marked as 'toggled' or 'checked'
        when the boolean state is %TRUE.

        If the action has a string state then the menu item is usually drawn
        as a radio menu item (ie: with a radio bullet or equivalent
        indication).  The item should be marked as 'selected' when the string
        state is equal to the value of the @target property.

        See g_menu_item_set_action_and_target() or
        g_menu_item_set_detailed_action() for two equivalent calls that are
        probably more convenient for most uses.
        """
        ...

    def set_attribute(self, attribute: str, format_string: _T.Optional[str], *args: object) -> object:
        """
        Sets or unsets an attribute on @menu_item.

        The attribute to set or unset is specified by @attribute. This
        can be one of the standard attribute names %G_MENU_ATTRIBUTE_LABEL,
        %G_MENU_ATTRIBUTE_ACTION, %G_MENU_ATTRIBUTE_TARGET, or a custom
        attribute name.
        Attribute names are restricted to lowercase characters, numbers
        and '-'. Furthermore, the names must begin with a lowercase character,
        must not end with a '-', and must not contain consecutive dashes.

        If @format_string is non-%NULL then the proper position parameters
        are collected to create a #GVariant instance to use as the attribute
        value.  If it is %NULL then the positional parameterrs are ignored
        and the named attribute is unset.

        See also g_menu_item_set_attribute_value() for an equivalent call
        that directly accepts a #GVariant.
        """
        ...

    def set_attribute_value(self, attribute: str, value: _T.Optional[GLib.Variant]) -> object:
        """
        Sets or unsets an attribute on @menu_item.

        The attribute to set or unset is specified by @attribute. This
        can be one of the standard attribute names %G_MENU_ATTRIBUTE_LABEL,
        %G_MENU_ATTRIBUTE_ACTION, %G_MENU_ATTRIBUTE_TARGET, or a custom
        attribute name.
        Attribute names are restricted to lowercase characters, numbers
        and '-'. Furthermore, the names must begin with a lowercase character,
        must not end with a '-', and must not contain consecutive dashes.

        must consist only of lowercase
        ASCII characters, digits and '-'.

        If @value is non-%NULL then it is used as the new value for the
        attribute.  If @value is %NULL then the attribute is unset. If
        the @value #GVariant is floating, it is consumed.

        See also g_menu_item_set_attribute() for a more convenient way to do
        the same.
        """
        ...

    def set_detailed_action(self, detailed_action: str) -> object:
        """
        Sets the "action" and possibly the "target" attribute of @menu_item.

        The format of @detailed_action is the same format parsed by
        g_action_parse_detailed_name().

        See g_menu_item_set_action_and_target() or
        g_menu_item_set_action_and_target_value() for more flexible (but
        slightly less convenient) alternatives.

        See also g_menu_item_set_action_and_target_value() for a description of
        the semantics of the action and target attributes.
        """
        ...

    def set_icon(self, icon: Icon) -> object:
        """
        Sets (or unsets) the icon on @menu_item.

        This call is the same as calling g_icon_serialize() and using the
        result as the value to g_menu_item_set_attribute_value() for
        %G_MENU_ATTRIBUTE_ICON.

        This API is only intended for use with "noun" menu items; things like
        bookmarks or applications in an "Open With" menu.  Don't use it on
        menu items corresponding to verbs (eg: stock icons for 'Save' or
        'Quit').

        If @icon is %NULL then the icon is unset.
        """
        ...

    def set_label(self, label: _T.Optional[str]) -> object:
        """
        Sets or unsets the "label" attribute of @menu_item.

        If @label is non-%NULL it is used as the label for the menu item.  If
        it is %NULL then the label attribute is unset.
        """
        ...

    def set_link(self, link: str, model: _T.Optional[MenuModel]) -> object:
        """
        Creates a link from @menu_item to @model if non-%NULL, or unsets it.

        Links are used to establish a relationship between a particular menu
        item and another menu.  For example, %G_MENU_LINK_SUBMENU is used to
        associate a submenu with a particular menu item, and %G_MENU_LINK_SECTION
        is used to create a section. Other types of link can be used, but there
        is no guarantee that clients will be able to make sense of them.
        Link types are restricted to lowercase characters, numbers
        and '-'. Furthermore, the names must begin with a lowercase character,
        must not end with a '-', and must not contain consecutive dashes.
        """
        ...

    def set_section(self, section: _T.Optional[MenuModel]) -> object:
        """
        Sets or unsets the "section" link of @menu_item to @section.

        The effect of having one menu appear as a section of another is
        exactly as it sounds: the items from @section become a direct part of
        the menu that @menu_item is added to.  See g_menu_item_new_section()
        for more information about what it means for a menu item to be a
        section.
        """
        ...

    def set_submenu(self, submenu: _T.Optional[MenuModel]) -> object:
        """
        Sets or unsets the "submenu" link of @menu_item to @submenu.

        If @submenu is non-%NULL, it is linked to.  If it is %NULL then the
        link is unset.

        The effect of having one menu appear as a submenu of another is
        exactly as it sounds.
        """
        ...


    ...

class MenuLinkIter(GObject.Object):
    """
    #GMenuLinkIter is an opaque structure type.  You must access it using
    the functions below.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_name(self) -> str:
        """
        Gets the name of the link at the current iterator position.

        The iterator is not advanced.
        """
        ...

    def get_next(self, out_link: str, value: MenuModel) -> bool:
        """
        This function combines g_menu_link_iter_next() with
        g_menu_link_iter_get_name() and g_menu_link_iter_get_value().

        First the iterator is advanced to the next (possibly first) link.
        If that fails, then %FALSE is returned and there are no other effects.

        If successful, @out_link and @value are set to the name and #GMenuModel
        of the link that has just been advanced to.  At this point,
        g_menu_link_iter_get_name() and g_menu_link_iter_get_value() will return the
        same values again.

        The value returned in @out_link remains valid for as long as the iterator
        remains at the current position.  The value returned in @value must
        be unreffed using g_object_unref() when it is no longer in use.
        """
        ...

    def get_value(self) -> MenuModel:
        """
        Gets the linked #GMenuModel at the current iterator position.

        The iterator is not advanced.
        """
        ...

    def next(self) -> bool:
        """
        Attempts to advance the iterator to the next (possibly first)
        link.

        %TRUE is returned on success, or %FALSE if there are no more links.

        You must call this function when you first acquire the iterator to
        advance it to the first link (and determine if the first link exists
        at all).
        """
        ...


    ...

class MenuModel(GObject.Object):
    """
    #GMenuModel represents the contents of a menu -- an ordered list of
    menu items. The items are associated with actions, which can be
    activated through them. Items can be grouped in sections, and may
    have submenus associated with them. Both items and sections usually
    have some representation data, such as labels or icons. The type of
    the associated action (ie whether it is stateful, and what kind of
    state it has) can influence the representation of the item.

    The conceptual model of menus in #GMenuModel is hierarchical:
    sections and submenus are again represented by #GMenuModels.
    Menus themselves do not define their own roles. Rather, the role
    of a particular #GMenuModel is defined by the item that references
    it (or, in the case of the 'root' menu, is defined by the context
    in which it is used).

    As an example, consider the visible portions of this menu:

    ## An example menu # {#menu-example}

    ![](menu-example.png)

    There are 8 "menus" visible in the screenshot: one menubar, two
    submenus and 5 sections:

    - the toplevel menubar (containing 4 items)
    - the View submenu (containing 3 sections)
    - the first section of the View submenu (containing 2 items)
    - the second section of the View submenu (containing 1 item)
    - the final section of the View submenu (containing 1 item)
    - the Highlight Mode submenu (containing 2 sections)
    - the Sources section (containing 2 items)
    - the Markup section (containing 2 items)

    The [example][menu-model] illustrates the conceptual connection between
    these 8 menus. Each large block in the figure represents a menu and the
    smaller blocks within the large block represent items in that menu. Some
    items contain references to other menus.

    ## A menu example # {#menu-model}

    ![](menu-model.png)

    Notice that the separators visible in the [example][menu-example]
    appear nowhere in the [menu model][menu-model]. This is because
    separators are not explicitly represented in the menu model. Instead,
    a separator is inserted between any two non-empty sections of a menu.
    Section items can have labels just like any other item. In that case,
    a display system may show a section header instead of a separator.

    The motivation for this abstract model of application controls is
    that modern user interfaces tend to make these controls available
    outside the application. Examples include global menus, jumplists,
    dash boards, etc. To support such uses, it is necessary to 'export'
    information about actions and their representation in menus, which
    is exactly what the [GActionGroup exporter][gio-GActionGroup-exporter]
    and the [GMenuModel exporter][gio-GMenuModel-exporter] do for
    #GActionGroup and #GMenuModel. The client-side counterparts to
    make use of the exported information are #GDBusActionGroup and
    #GDBusMenuModel.

    The API of #GMenuModel is very generic, with iterators for the
    attributes and links of an item, see g_menu_model_iterate_item_attributes()
    and g_menu_model_iterate_item_links(). The 'standard' attributes and
    link types have predefined names: %G_MENU_ATTRIBUTE_LABEL,
    %G_MENU_ATTRIBUTE_ACTION, %G_MENU_ATTRIBUTE_TARGET, %G_MENU_LINK_SECTION
    and %G_MENU_LINK_SUBMENU.

    Items in a #GMenuModel represent active controls if they refer to
    an action that can get activated when the user interacts with the
    menu item. The reference to the action is encoded by the string id
    in the %G_MENU_ATTRIBUTE_ACTION attribute. An action id uniquely
    identifies an action in an action group. Which action group(s) provide
    actions depends on the context in which the menu model is used.
    E.g. when the model is exported as the application menu of a
    #GtkApplication, actions can be application-wide or window-specific
    (and thus come from two different action groups). By convention, the
    application-wide actions have names that start with "app.", while the
    names of window-specific actions start with "win.".

    While a wide variety of stateful actions is possible, the following
    is the minimum that is expected to be supported by all users of exported
    menu information:
    - an action with no parameter type and no state
    - an action with no parameter type and boolean state
    - an action with string parameter type and string state

    ## Stateless

    A stateless action typically corresponds to an ordinary menu item.

    Selecting such a menu item will activate the action (with no parameter).

    ## Boolean State

    An action with a boolean state will most typically be used with a "toggle"
    or "switch" menu item. The state can be set directly, but activating the
    action (with no parameter) results in the state being toggled.

    Selecting a toggle menu item will activate the action. The menu item should
    be rendered as "checked" when the state is true.

    ## String Parameter and State

    Actions with string parameters and state will most typically be used to
    represent an enumerated choice over the items available for a group of
    radio menu items. Activating the action with a string parameter is
    equivalent to setting that parameter as the state.

    Radio menu items, in addition to being associated with the action, will
    have a target value. Selecting that menu item will result in activation
    of the action with the target value as the parameter. The menu item should
    be rendered as "selected" when the state of the action is equal to the
    target value of the menu item.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_item_attribute(self, item_index: int, attribute: str, format_string: str, *args: object) -> bool:
        """
        Queries item at position @item_index in @model for the attribute
        specified by @attribute.

        If the attribute exists and matches the #GVariantType corresponding
        to @format_string then @format_string is used to deconstruct the
        value into the positional parameters and %TRUE is returned.

        If the attribute does not exist, or it does exist but has the wrong
        type, then the positional parameters are ignored and %FALSE is
        returned.

        This function is a mix of g_menu_model_get_item_attribute_value() and
        g_variant_get(), followed by a g_variant_unref().  As such,
        @format_string must make a complete copy of the data (since the
        #GVariant may go away after the call to g_variant_unref()).  In
        particular, no '&' characters are allowed in @format_string.
        """
        ...

    def get_item_attribute_value(self, item_index: int, attribute: str, expected_type: _T.Optional[GLib.VariantType]) -> GLib.Variant:
        """
        Queries the item at position @item_index in @model for the attribute
        specified by @attribute.

        If @expected_type is non-%NULL then it specifies the expected type of
        the attribute.  If it is %NULL then any type will be accepted.

        If the attribute exists and matches @expected_type (or if the
        expected type is unspecified) then the value is returned.

        If the attribute does not exist, or does not match the expected type
        then %NULL is returned.
        """
        ...

    def get_item_link(self, item_index: int, link: str) -> MenuModel:
        """
        Queries the item at position @item_index in @model for the link
        specified by @link.

        If the link exists, the linked #GMenuModel is returned.  If the link
        does not exist, %NULL is returned.
        """
        ...

    def get_n_items(self) -> int:
        """
        Query the number of items in @model.
        """
        ...

    def is_mutable(self) -> bool:
        """
        Queries if @model is mutable.

        An immutable #GMenuModel will never emit the #GMenuModel::items-changed
        signal. Consumers of the model may make optimisations accordingly.
        """
        ...

    def items_changed(self, position: int, removed: int, added: int) -> object:
        """
        Requests emission of the #GMenuModel::items-changed signal on @model.

        This function should never be called except by #GMenuModel
        subclasses.  Any other calls to this function will very likely lead
        to a violation of the interface of the model.

        The implementation should update its internal representation of the
        menu before emitting the signal.  The implementation should further
        expect to receive queries about the new state of the menu (and
        particularly added menu items) while signal handlers are running.

        The implementation must dispatch this call directly from a mainloop
        entry and not in response to calls -- particularly those from the
        #GMenuModel API.  Said another way: the menu must not change while
        user code is running without returning to the mainloop.
        """
        ...

    def iterate_item_attributes(self, item_index: int) -> MenuAttributeIter:
        """
        Creates a #GMenuAttributeIter to iterate over the attributes of
        the item at position @item_index in @model.

        You must free the iterator with g_object_unref() when you are done.
        """
        ...

    def iterate_item_links(self, item_index: int) -> MenuLinkIter:
        """
        Creates a #GMenuLinkIter to iterate over the links of the item at
        position @item_index in @model.

        You must free the iterator with g_object_unref() when you are done.
        """
        ...


    ...

class MountOperation(GObject.Object):
    """
    #GMountOperation provides a mechanism for interacting with the user.
    It can be used for authenticating mountable operations, such as loop
    mounting files, hard drive partitions or server locations. It can
    also be used to ask the user questions or show a list of applications
    preventing unmount or eject operations from completing.

    Note that #GMountOperation is used for more than just #GMount
    objects – for example it is also used in g_drive_start() and
    g_drive_stop().

    Users should instantiate a subclass of this that implements all the
    various callbacks to show the required dialogs, such as
    #GtkMountOperation. If no user interaction is desired (for example
    when automounting filesystems at login time), usually %NULL can be
    passed, see each method taking a #GMountOperation for details.

    The term ‘TCRYPT’ is used to mean ‘compatible with TrueCrypt and VeraCrypt’.
    [TrueCrypt](https://en.wikipedia.org/wiki/TrueCrypt) is a discontinued system for
    encrypting file containers, partitions or whole disks, typically used with Windows.
    [VeraCrypt](https://www.veracrypt.fr/) is a maintained fork of TrueCrypt with various
    improvements and auditing fixes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> MountOperation:
        """
        Creates a new mount operation.
        """
        ...

    def get_anonymous(self) -> bool:
        """
        Check to see whether the mount operation is being used
        for an anonymous user.
        """
        ...

    def get_choice(self) -> int:
        """
        Gets a choice from the mount operation.
        """
        ...

    def get_domain(self) -> str:
        """
        Gets the domain of the mount operation.
        """
        ...

    def get_is_tcrypt_hidden_volume(self) -> bool:
        """
        Check to see whether the mount operation is being used
        for a TCRYPT hidden volume.
        """
        ...

    def get_is_tcrypt_system_volume(self) -> bool:
        """
        Check to see whether the mount operation is being used
        for a TCRYPT system volume.
        """
        ...

    def get_password(self) -> str:
        """
        Gets a password from the mount operation.
        """
        ...

    def get_password_save(self) -> PasswordSave:
        """
        Gets the state of saving passwords for the mount operation.
        """
        ...

    def get_pim(self) -> int:
        """
        Gets a PIM from the mount operation.
        """
        ...

    def get_username(self) -> str:
        """
        Get the user name from the mount operation.
        """
        ...

    def reply(self, result: MountOperationResult) -> object:
        """
        Emits the #GMountOperation::reply signal.
        """
        ...

    def set_anonymous(self, anonymous: bool) -> object:
        """
        Sets the mount operation to use an anonymous user if @anonymous is %TRUE.
        """
        ...

    def set_choice(self, choice: int) -> object:
        """
        Sets a default choice for the mount operation.
        """
        ...

    def set_domain(self, domain: _T.Optional[str]) -> object:
        """
        Sets the mount operation's domain.
        """
        ...

    def set_is_tcrypt_hidden_volume(self, hidden_volume: bool) -> object:
        """
        Sets the mount operation to use a hidden volume if @hidden_volume is %TRUE.
        """
        ...

    def set_is_tcrypt_system_volume(self, system_volume: bool) -> object:
        """
        Sets the mount operation to use a system volume if @system_volume is %TRUE.
        """
        ...

    def set_password(self, password: _T.Optional[str]) -> object:
        """
        Sets the mount operation's password to @password.
        """
        ...

    def set_password_save(self, save: PasswordSave) -> object:
        """
        Sets the state of saving passwords for the mount operation.
        """
        ...

    def set_pim(self, pim: int) -> object:
        """
        Sets the mount operation's PIM to @pim.
        """
        ...

    def set_username(self, username: _T.Optional[str]) -> object:
        """
        Sets the user name within @op to @username.
        """
        ...


    ...

class NativeSocketAddress(SocketAddress, SocketConnectable):
    """
    A socket address of some unknown native type.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, native: _T.Optional[object], len: int) -> SocketAddress:
        """
        Creates a new #GNativeSocketAddress for @native and @len.
        """
        ...


    ...

class NativeVolumeMonitor(VolumeMonitor):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class NetworkAddress(GObject.Object, SocketConnectable):
    """
    #GNetworkAddress provides an easy way to resolve a hostname and
    then attempt to connect to that host, handling the possibility of
    multiple IP addresses and multiple address families.

    The enumeration results of resolved addresses *may* be cached as long
    as this object is kept alive which may have unexpected results if
    alive for too long.

    See #GSocketConnectable for an example of using the connectable
    interface.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, hostname: str, port: int) -> NetworkAddress:
        """
        Creates a new #GSocketConnectable for connecting to the given
        @hostname and @port.

        Note that depending on the configuration of the machine, a
        @hostname of `localhost` may refer to the IPv4 loopback address
        only, or to both IPv4 and IPv6; use
        g_network_address_new_loopback() to create a #GNetworkAddress that
        is guaranteed to resolve to both addresses.
        """
        ...


    @classmethod
    def new_loopback(cls, port: int) -> NetworkAddress:
        """
        Creates a new #GSocketConnectable for connecting to the local host
        over a loopback connection to the given @port. This is intended for
        use in connecting to local services which may be running on IPv4 or
        IPv6.

        The connectable will return IPv4 and IPv6 loopback addresses,
        regardless of how the host resolves `localhost`. By contrast,
        g_network_address_new() will often only return an IPv4 address when
        resolving `localhost`, and an IPv6 address for `localhost6`.

        g_network_address_get_hostname() will always return `localhost` for
        a #GNetworkAddress created with this constructor.
        """
        ...

    def get_hostname(self) -> str:
        """
        Gets @addr's hostname. This might be either UTF-8 or ASCII-encoded,
        depending on what @addr was created with.
        """
        ...

    def get_port(self) -> int:
        """
        Gets @addr's port number
        """
        ...

    def get_scheme(self) -> str:
        """
        Gets @addr's scheme
        """
        ...


    ...

class NetworkService(GObject.Object, SocketConnectable):
    """
    Like #GNetworkAddress does with hostnames, #GNetworkService
    provides an easy way to resolve a SRV record, and then attempt to
    connect to one of the hosts that implements that service, handling
    service priority/weighting, multiple IP addresses, and multiple
    address families.

    See #GSrvTarget for more information about SRV records, and see
    #GSocketConnectable for an example of using the connectable
    interface.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, service: str, protocol: str, domain: str) -> NetworkService:
        """
        Creates a new #GNetworkService representing the given @service,
        @protocol, and @domain. This will initially be unresolved; use the
        #GSocketConnectable interface to resolve it.
        """
        ...

    def get_domain(self) -> str:
        """
        Gets the domain that @srv serves. This might be either UTF-8 or
        ASCII-encoded, depending on what @srv was created with.
        """
        ...

    def get_protocol(self) -> str:
        """
        Gets @srv's protocol name (eg, "tcp").
        """
        ...

    def get_scheme(self) -> str:
        """
        Gets the URI scheme used to resolve proxies. By default, the service name
        is used as scheme.
        """
        ...

    def get_service(self) -> str:
        """
        Gets @srv's service name (eg, "ldap").
        """
        ...

    def set_scheme(self, scheme: str) -> object:
        """
        Set's the URI scheme used to resolve proxies. By default, the service name
        is used as scheme.
        """
        ...


    ...

class Notification(GObject.Object):
    """
    #GNotification is a mechanism for creating a notification to be shown
    to the user -- typically as a pop-up notification presented by the
    desktop environment shell.

    The key difference between #GNotification and other similar APIs is
    that, if supported by the desktop environment, notifications sent
    with #GNotification will persist after the application has exited,
    and even across system reboots.

    Since the user may click on a notification while the application is
    not running, applications using #GNotification should be able to be
    started as a D-Bus service, using #GApplication.

    In order for #GNotification to work, the application must have installed
    a `.desktop` file. For example:
    |[
     [Desktop Entry]
      Name=Test Application
      Comment=Description of what Test Application does
      Exec=gnome-test-application
      Icon=org.gnome.TestApplication
      Terminal=false
      Type=Application
      Categories=GNOME;GTK;TestApplication Category;
      StartupNotify=true
      DBusActivatable=true
      X-GNOME-UsesNotifications=true
    ]|

    The `X-GNOME-UsesNotifications` key indicates to GNOME Control Center
    that this application uses notifications, so it can be listed in the
    Control Center’s ‘Notifications’ panel.

    The `.desktop` file must be named as `org.gnome.TestApplication.desktop`,
    where `org.gnome.TestApplication` is the ID passed to g_application_new().

    User interaction with a notification (either the default action, or
    buttons) must be associated with actions on the application (ie:
    "app." actions).  It is not possible to route user interaction
    through the notification itself, because the object will not exist if
    the application is autostarted as a result of a notification being
    clicked.

    A notification can be sent with g_application_send_notification().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, title: str) -> Notification:
        """
        Creates a new #GNotification with @title as its title.

        After populating @notification with more details, it can be sent to
        the desktop shell with g_application_send_notification(). Changing
        any properties after this call will not have any effect until
        resending @notification.
        """
        ...

    def add_button(self, label: str, detailed_action: str) -> object:
        """
        Adds a button to @notification that activates the action in
        @detailed_action when clicked. That action must be an
        application-wide action (starting with "app."). If @detailed_action
        contains a target, the action will be activated with that target as
        its parameter.

        See g_action_parse_detailed_name() for a description of the format
        for @detailed_action.
        """
        ...

    def add_button_with_target(self, label: str, action: str, target_format: _T.Optional[str], *args: object) -> object:
        """
        Adds a button to @notification that activates @action when clicked.
        @action must be an application-wide action (it must start with "app.").

        If @target_format is given, it is used to collect remaining
        positional parameters into a #GVariant instance, similar to
        g_variant_new(). @action will be activated with that #GVariant as its
        parameter.
        """
        ...

    def add_button_with_target_value(self, label: str, action: str, target: _T.Optional[GLib.Variant]) -> object:
        """
        Adds a button to @notification that activates @action when clicked.
        @action must be an application-wide action (it must start with "app.").

        If @target is non-%NULL, @action will be activated with @target as
        its parameter.
        """
        ...

    def set_body(self, body: _T.Optional[str]) -> object:
        """
        Sets the body of @notification to @body.
        """
        ...

    def set_category(self, category: _T.Optional[str]) -> object:
        """
        Sets the type of @notification to @category. Categories have a main
        type like `email`, `im` or `device` and can have a detail separated
        by a `.`, e.g. `im.received` or `email.arrived`. Setting the category
        helps the notification server to select proper feedback to the user.

        Standard categories are [listed in the specification](https://specifications.freedesktop.org/notification-spec/latest/ar01s06.html).
        """
        ...

    def set_default_action(self, detailed_action: str) -> object:
        """
        Sets the default action of @notification to @detailed_action. This
        action is activated when the notification is clicked on.

        The action in @detailed_action must be an application-wide action (it
        must start with "app."). If @detailed_action contains a target, the
        given action will be activated with that target as its parameter.
        See g_action_parse_detailed_name() for a description of the format
        for @detailed_action.

        When no default action is set, the application that the notification
        was sent on is activated.
        """
        ...

    def set_default_action_and_target(self, action: str, target_format: _T.Optional[str], *args: object) -> object:
        """
        Sets the default action of @notification to @action. This action is
        activated when the notification is clicked on. It must be an
        application-wide action (it must start with "app.").

        If @target_format is given, it is used to collect remaining
        positional parameters into a #GVariant instance, similar to
        g_variant_new(). @action will be activated with that #GVariant as its
        parameter.

        When no default action is set, the application that the notification
        was sent on is activated.
        """
        ...

    def set_default_action_and_target_value(self, action: str, target: _T.Optional[GLib.Variant]) -> object:
        """
        Sets the default action of @notification to @action. This action is
        activated when the notification is clicked on. It must be an
        application-wide action (start with "app.").

        If @target is non-%NULL, @action will be activated with @target as
        its parameter.

        When no default action is set, the application that the notification
        was sent on is activated.
        """
        ...

    def set_icon(self, icon: Icon) -> object:
        """
        Sets the icon of @notification to @icon.
        """
        ...

    def set_priority(self, priority: NotificationPriority) -> object:
        """
        Sets the priority of @notification to @priority. See
        #GNotificationPriority for possible values.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the title of @notification to @title.
        """
        ...

    def set_urgent(self, urgent: bool) -> object:
        """
        Deprecated in favor of g_notification_set_priority().
        """
        ...


    ...

class OutputStream(GObject.Object):
    """
    #GOutputStream has functions to write to a stream (g_output_stream_write()),
    to close a stream (g_output_stream_close()) and to flush pending writes
    (g_output_stream_flush()).

    To copy the content of an input stream to an output stream without
    manually handling the reads and writes, use g_output_stream_splice().

    See the documentation for #GIOStream for details of thread safety of
    streaming APIs.

    All of these functions have async variants too.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def clear_pending(self) -> object:
        """
        Clears the pending flag on @stream.
        """
        ...

    def close(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Closes the stream, releasing resources related to it.

        Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
        Closing a stream multiple times will not return an error.

        Closing a stream will automatically flush any outstanding buffers in the
        stream.

        Streams will be automatically closed when the last reference
        is dropped, but you might want to call this function to make sure
        resources are released as early as possible.

        Some streams might keep the backing store of the stream (e.g. a file descriptor)
        open after the stream is closed. See the documentation for the individual
        stream for details.

        On failure the first error that happened will be reported, but the close
        operation will finish as much as possible. A stream that failed to
        close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
        is important to check and report the error to the user, otherwise
        there might be a loss of data as all data might not be written.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        Cancelling a close will still leave the stream closed, but there some streams
        can use a faster close that doesn't block to e.g. check errors. On
        cancellation (as with any error) there is no guarantee that all written
        data will reach the target.
        """
        ...

    def close_async(self, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Requests an asynchronous close of the stream, releasing resources
        related to it. When the operation is finished @callback will be
        called. You can then call g_output_stream_close_finish() to get
        the result of the operation.

        For behaviour details see g_output_stream_close().

        The asynchronous methods have a default fallback that uses threads
        to implement asynchronicity, so they are optional for inheriting
        classes. However, if you override one you must override all.
        """
        ...

    def close_finish(self, result: AsyncResult) -> bool:
        """
        Closes an output stream.
        """
        ...

    def flush(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Forces a write of all user-space buffered data for the given
        @stream. Will block during the operation. Closing the stream will
        implicitly cause a flush.

        This function is optional for inherited classes.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def flush_async(self, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Forces an asynchronous write of all user-space buffered data for
        the given @stream.
        For behaviour details see g_output_stream_flush().

        When the operation is finished @callback will be
        called. You can then call g_output_stream_flush_finish() to get the
        result of the operation.
        """
        ...

    def flush_finish(self, result: AsyncResult) -> bool:
        """
        Finishes flushing an output stream.
        """
        ...

    def has_pending(self) -> bool:
        """
        Checks if an output stream has pending actions.
        """
        ...

    def is_closed(self) -> bool:
        """
        Checks if an output stream has already been closed.
        """
        ...

    def is_closing(self) -> bool:
        """
        Checks if an output stream is being closed. This can be
        used inside e.g. a flush implementation to see if the
        flush (or other i/o operation) is called from within
        the closing operation.
        """
        ...

    def printf(self, bytes_written: int, cancellable: _T.Optional[Cancellable], error: GLib.Error, format: str, *args: object) -> bool:
        """
        This is a utility function around g_output_stream_write_all(). It
        uses g_strdup_vprintf() to turn @format and @... into a string that
        is then written to @stream.

        See the documentation of g_output_stream_write_all() about the
        behavior of the actual write operation.

        Note that partial writes cannot be properly checked with this
        function due to the variable length of the written string, if you
        need precise control over partial write failures, you need to
        create you own printf()-like wrapper around g_output_stream_write()
        or g_output_stream_write_all().
        """
        ...

    def set_pending(self) -> bool:
        """
        Sets @stream to have actions pending. If the pending flag is
        already set or @stream is closed, it will return %FALSE and set
        @error.
        """
        ...

    def splice(self, source: InputStream, flags: OutputStreamSpliceFlags, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Splices an input stream into an output stream.
        """
        ...

    def splice_async(self, source: InputStream, flags: OutputStreamSpliceFlags, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Splices a stream asynchronously.
        When the operation is finished @callback will be called.
        You can then call g_output_stream_splice_finish() to get the
        result of the operation.

        For the synchronous, blocking version of this function, see
        g_output_stream_splice().
        """
        ...

    def splice_finish(self, result: AsyncResult) -> int:
        """
        Finishes an asynchronous stream splice operation.
        """
        ...

    def vprintf(self, bytes_written: int, cancellable: _T.Optional[Cancellable], error: GLib.Error, format: str, args: list) -> bool:
        """
        This is a utility function around g_output_stream_write_all(). It
        uses g_strdup_vprintf() to turn @format and @args into a string that
        is then written to @stream.

        See the documentation of g_output_stream_write_all() about the
        behavior of the actual write operation.

        Note that partial writes cannot be properly checked with this
        function due to the variable length of the written string, if you
        need precise control over partial write failures, you need to
        create you own printf()-like wrapper around g_output_stream_write()
        or g_output_stream_write_all().
        """
        ...

    def write(self, buffer: object, count: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Tries to write @count bytes from @buffer into the stream. Will block
        during the operation.

        If count is 0, returns 0 and does nothing. A value of @count
        larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

        On success, the number of bytes written to the stream is returned.
        It is not an error if this is not the same as the requested size, as it
        can happen e.g. on a partial I/O error, or if there is not enough
        storage in the stream. All writes block until at least one byte
        is written or an error occurs; 0 is never returned (unless
        @count is 0).

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
        operation was partially finished when the operation was cancelled the
        partial result will be returned, without an error.

        On error -1 is returned and @error is set accordingly.
        """
        ...

    def write_all(self, buffer: object, count: int, bytes_written: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Tries to write @count bytes from @buffer into the stream. Will block
        during the operation.

        This function is similar to g_output_stream_write(), except it tries to
        write as many bytes as requested, only stopping on an error.

        On a successful write of @count bytes, %TRUE is returned, and @bytes_written
        is set to @count.

        If there is an error during the operation %FALSE is returned and @error
        is set to indicate the error status.

        As a special exception to the normal conventions for functions that
        use #GError, if this function returns %FALSE (and sets @error) then
        @bytes_written will be set to the number of bytes that were
        successfully written before the error was encountered.  This
        functionality is only available from C.  If you need it from another
        language then you must write your own loop around
        g_output_stream_write().
        """
        ...

    def write_all_async(self, buffer: object, count: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request an asynchronous write of @count bytes from @buffer into
        the stream. When the operation is finished @callback will be called.
        You can then call g_output_stream_write_all_finish() to get the result of the
        operation.

        This is the asynchronous version of g_output_stream_write_all().

        Call g_output_stream_write_all_finish() to collect the result.

        Any outstanding I/O request with higher priority (lower numerical
        value) will be executed before an outstanding request with lower
        priority. Default priority is %G_PRIORITY_DEFAULT.

        Note that no copy of @buffer will be made, so it must stay valid
        until @callback is called.
        """
        ...

    def write_all_finish(self, result: AsyncResult, bytes_written: int) -> bool:
        """
        Finishes an asynchronous stream write operation started with
        g_output_stream_write_all_async().

        As a special exception to the normal conventions for functions that
        use #GError, if this function returns %FALSE (and sets @error) then
        @bytes_written will be set to the number of bytes that were
        successfully written before the error was encountered.  This
        functionality is only available from C.  If you need it from another
        language then you must write your own loop around
        g_output_stream_write_async().
        """
        ...

    def write_async(self, buffer: object, count: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request an asynchronous write of @count bytes from @buffer into
        the stream. When the operation is finished @callback will be called.
        You can then call g_output_stream_write_finish() to get the result of the
        operation.

        During an async request no other sync and async calls are allowed,
        and will result in %G_IO_ERROR_PENDING errors.

        A value of @count larger than %G_MAXSSIZE will cause a
        %G_IO_ERROR_INVALID_ARGUMENT error.

        On success, the number of bytes written will be passed to the
        @callback. It is not an error if this is not the same as the
        requested size, as it can happen e.g. on a partial I/O error,
        but generally we try to write as many bytes as requested.

        You are guaranteed that this method will never fail with
        %G_IO_ERROR_WOULD_BLOCK - if @stream can't accept more data, the
        method will just wait until this changes.

        Any outstanding I/O request with higher priority (lower numerical
        value) will be executed before an outstanding request with lower
        priority. Default priority is %G_PRIORITY_DEFAULT.

        The asynchronous methods have a default fallback that uses threads
        to implement asynchronicity, so they are optional for inheriting
        classes. However, if you override one you must override all.

        For the synchronous, blocking version of this function, see
        g_output_stream_write().

        Note that no copy of @buffer will be made, so it must stay valid
        until @callback is called. See g_output_stream_write_bytes_async()
        for a #GBytes version that will automatically hold a reference to
        the contents (without copying) for the duration of the call.
        """
        ...

    def write_bytes(self, bytes: GLib.Bytes, cancellable: _T.Optional[Cancellable]) -> int:
        """
        A wrapper function for g_output_stream_write() which takes a
        #GBytes as input.  This can be more convenient for use by language
        bindings or in other cases where the refcounted nature of #GBytes
        is helpful over a bare pointer interface.

        However, note that this function may still perform partial writes,
        just like g_output_stream_write().  If that occurs, to continue
        writing, you will need to create a new #GBytes containing just the
        remaining bytes, using g_bytes_new_from_bytes(). Passing the same
        #GBytes instance multiple times potentially can result in duplicated
        data in the output stream.
        """
        ...

    def write_bytes_async(self, bytes: GLib.Bytes, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        This function is similar to g_output_stream_write_async(), but
        takes a #GBytes as input.  Due to the refcounted nature of #GBytes,
        this allows the stream to avoid taking a copy of the data.

        However, note that this function may still perform partial writes,
        just like g_output_stream_write_async(). If that occurs, to continue
        writing, you will need to create a new #GBytes containing just the
        remaining bytes, using g_bytes_new_from_bytes(). Passing the same
        #GBytes instance multiple times potentially can result in duplicated
        data in the output stream.

        For the synchronous, blocking version of this function, see
        g_output_stream_write_bytes().
        """
        ...

    def write_bytes_finish(self, result: AsyncResult) -> int:
        """
        Finishes a stream write-from-#GBytes operation.
        """
        ...

    def write_finish(self, result: AsyncResult) -> int:
        """
        Finishes a stream write operation.
        """
        ...

    def writev(self, vectors: object, n_vectors: int, bytes_written: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Tries to write the bytes contained in the @n_vectors @vectors into the
        stream. Will block during the operation.

        If @n_vectors is 0 or the sum of all bytes in @vectors is 0, returns 0 and
        does nothing.

        On success, the number of bytes written to the stream is returned.
        It is not an error if this is not the same as the requested size, as it
        can happen e.g. on a partial I/O error, or if there is not enough
        storage in the stream. All writes block until at least one byte
        is written or an error occurs; 0 is never returned (unless
        @n_vectors is 0 or the sum of all bytes in @vectors is 0).

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
        operation was partially finished when the operation was cancelled the
        partial result will be returned, without an error.

        Some implementations of g_output_stream_writev() may have limitations on the
        aggregate buffer size, and will return %G_IO_ERROR_INVALID_ARGUMENT if these
        are exceeded. For example, when writing to a local file on UNIX platforms,
        the aggregate buffer size must not exceed %G_MAXSSIZE bytes.
        """
        ...

    def writev_all(self, vectors: object, n_vectors: int, bytes_written: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Tries to write the bytes contained in the @n_vectors @vectors into the
        stream. Will block during the operation.

        This function is similar to g_output_stream_writev(), except it tries to
        write as many bytes as requested, only stopping on an error.

        On a successful write of all @n_vectors vectors, %TRUE is returned, and
        @bytes_written is set to the sum of all the sizes of @vectors.

        If there is an error during the operation %FALSE is returned and @error
        is set to indicate the error status.

        As a special exception to the normal conventions for functions that
        use #GError, if this function returns %FALSE (and sets @error) then
        @bytes_written will be set to the number of bytes that were
        successfully written before the error was encountered.  This
        functionality is only available from C. If you need it from another
        language then you must write your own loop around
        g_output_stream_write().

        The content of the individual elements of @vectors might be changed by this
        function.
        """
        ...

    def writev_all_async(self, vectors: object, n_vectors: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request an asynchronous write of the bytes contained in the @n_vectors @vectors into
        the stream. When the operation is finished @callback will be called.
        You can then call g_output_stream_writev_all_finish() to get the result of the
        operation.

        This is the asynchronous version of g_output_stream_writev_all().

        Call g_output_stream_writev_all_finish() to collect the result.

        Any outstanding I/O request with higher priority (lower numerical
        value) will be executed before an outstanding request with lower
        priority. Default priority is %G_PRIORITY_DEFAULT.

        Note that no copy of @vectors will be made, so it must stay valid
        until @callback is called. The content of the individual elements
        of @vectors might be changed by this function.
        """
        ...

    def writev_all_finish(self, result: AsyncResult, bytes_written: int) -> bool:
        """
        Finishes an asynchronous stream write operation started with
        g_output_stream_writev_all_async().

        As a special exception to the normal conventions for functions that
        use #GError, if this function returns %FALSE (and sets @error) then
        @bytes_written will be set to the number of bytes that were
        successfully written before the error was encountered.  This
        functionality is only available from C.  If you need it from another
        language then you must write your own loop around
        g_output_stream_writev_async().
        """
        ...

    def writev_async(self, vectors: object, n_vectors: int, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Request an asynchronous write of the bytes contained in @n_vectors @vectors into
        the stream. When the operation is finished @callback will be called.
        You can then call g_output_stream_writev_finish() to get the result of the
        operation.

        During an async request no other sync and async calls are allowed,
        and will result in %G_IO_ERROR_PENDING errors.

        On success, the number of bytes written will be passed to the
        @callback. It is not an error if this is not the same as the
        requested size, as it can happen e.g. on a partial I/O error,
        but generally we try to write as many bytes as requested.

        You are guaranteed that this method will never fail with
        %G_IO_ERROR_WOULD_BLOCK — if @stream can't accept more data, the
        method will just wait until this changes.

        Any outstanding I/O request with higher priority (lower numerical
        value) will be executed before an outstanding request with lower
        priority. Default priority is %G_PRIORITY_DEFAULT.

        The asynchronous methods have a default fallback that uses threads
        to implement asynchronicity, so they are optional for inheriting
        classes. However, if you override one you must override all.

        For the synchronous, blocking version of this function, see
        g_output_stream_writev().

        Note that no copy of @vectors will be made, so it must stay valid
        until @callback is called.
        """
        ...

    def writev_finish(self, result: AsyncResult, bytes_written: int) -> bool:
        """
        Finishes a stream writev operation.
        """
        ...


    ...

class Permission(GObject.Object):
    """
    A #GPermission represents the status of the caller's permission to
    perform a certain action.

    You can query if the action is currently allowed and if it is
    possible to acquire the permission so that the action will be allowed
    in the future.

    There is also an API to actually acquire the permission and one to
    release it.

    As an example, a #GPermission might represent the ability for the
    user to write to a #GSettings object.  This #GPermission object could
    then be used to decide if it is appropriate to show a "Click here to
    unlock" button in a dialog and to provide the mechanism to invoke
    when that button is clicked.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def acquire(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Attempts to acquire the permission represented by @permission.

        The precise method by which this happens depends on the permission
        and the underlying authentication mechanism.  A simple example is
        that a dialog may appear asking the user to enter their password.

        You should check with g_permission_get_can_acquire() before calling
        this function.

        If the permission is acquired then %TRUE is returned.  Otherwise,
        %FALSE is returned and @error is set appropriately.

        This call is blocking, likely for a very long time (in the case that
        user interaction is required).  See g_permission_acquire_async() for
        the non-blocking version.
        """
        ...

    def acquire_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Attempts to acquire the permission represented by @permission.

        This is the first half of the asynchronous version of
        g_permission_acquire().
        """
        ...

    def acquire_finish(self, result: AsyncResult) -> bool:
        """
        Collects the result of attempting to acquire the permission
        represented by @permission.

        This is the second half of the asynchronous version of
        g_permission_acquire().
        """
        ...

    def get_allowed(self) -> bool:
        """
        Gets the value of the 'allowed' property.  This property is %TRUE if
        the caller currently has permission to perform the action that
        @permission represents the permission to perform.
        """
        ...

    def get_can_acquire(self) -> bool:
        """
        Gets the value of the 'can-acquire' property.  This property is %TRUE
        if it is generally possible to acquire the permission by calling
        g_permission_acquire().
        """
        ...

    def get_can_release(self) -> bool:
        """
        Gets the value of the 'can-release' property.  This property is %TRUE
        if it is generally possible to release the permission by calling
        g_permission_release().
        """
        ...

    def impl_update(self, allowed: bool, can_acquire: bool, can_release: bool) -> object:
        """
        This function is called by the #GPermission implementation to update
        the properties of the permission.  You should never call this
        function except from a #GPermission implementation.

        GObject notify signals are generated, as appropriate.
        """
        ...

    def release(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Attempts to release the permission represented by @permission.

        The precise method by which this happens depends on the permission
        and the underlying authentication mechanism.  In most cases the
        permission will be dropped immediately without further action.

        You should check with g_permission_get_can_release() before calling
        this function.

        If the permission is released then %TRUE is returned.  Otherwise,
        %FALSE is returned and @error is set appropriately.

        This call is blocking, likely for a very long time (in the case that
        user interaction is required).  See g_permission_release_async() for
        the non-blocking version.
        """
        ...

    def release_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Attempts to release the permission represented by @permission.

        This is the first half of the asynchronous version of
        g_permission_release().
        """
        ...

    def release_finish(self, result: AsyncResult) -> bool:
        """
        Collects the result of attempting to release the permission
        represented by @permission.

        This is the second half of the asynchronous version of
        g_permission_release().
        """
        ...


    ...

class PropertyAction(GObject.Object, Action):
    """
    A #GPropertyAction is a way to get a #GAction with a state value
    reflecting and controlling the value of a #GObject property.

    The state of the action will correspond to the value of the property.
    Changing it will change the property (assuming the requested value
    matches the requirements as specified in the #GParamSpec).

    Only the most common types are presently supported.  Booleans are
    mapped to booleans, strings to strings, signed/unsigned integers to
    int32/uint32 and floats and doubles to doubles.

    If the property is an enum then the state will be string-typed and
    conversion will automatically be performed between the enum value and
    "nick" string as per the #GEnumValue table.

    Flags types are not currently supported.

    Properties of object types, boxed types and pointer types are not
    supported and probably never will be.

    Properties of #GVariant types are not currently supported.

    If the property is boolean-valued then the action will have a NULL
    parameter type, and activating the action (with no parameter) will
    toggle the value of the property.

    In all other cases, the parameter type will correspond to the type of
    the property.

    The general idea here is to reduce the number of locations where a
    particular piece of state is kept (and therefore has to be synchronised
    between). #GPropertyAction does not have a separate state that is kept
    in sync with the property value -- its state is the property value.

    For example, it might be useful to create a #GAction corresponding to
    the "visible-child-name" property of a #GtkStack so that the current
    page can be switched from a menu.  The active radio indication in the
    menu is then directly determined from the active page of the
    #GtkStack.

    An anti-example would be binding the "active-id" property on a
    #GtkComboBox.  This is because the state of the combobox itself is
    probably uninteresting and is actually being used to control
    something else.

    Another anti-example would be to bind to the "visible-child-name"
    property of a #GtkStack if this value is actually stored in
    #GSettings.  In that case, the real source of the value is
    #GSettings.  If you want a #GAction to control a setting stored in
    #GSettings, see g_settings_create_action() instead, and possibly
    combine its use with g_settings_bind().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: str, object: GObject.Object, property_name: str) -> PropertyAction:
        """
        Creates a #GAction corresponding to the value of property
        @property_name on @object.

        The property must be existent and readable and writable (and not
        construct-only).

        This function takes a reference on @object and doesn't release it
        until the action is destroyed.
        """
        ...


    ...

class ProxyAddress(InetSocketAddress, SocketConnectable):
    """
    Support for proxied #GInetSocketAddress.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, inetaddr: InetAddress, port: int, protocol: str, dest_hostname: str, dest_port: int, username: _T.Optional[str], password: _T.Optional[str]) -> SocketAddress:
        """
        Creates a new #GProxyAddress for @inetaddr with @protocol that should
        tunnel through @dest_hostname and @dest_port.

        (Note that this method doesn't set the #GProxyAddress:uri or
        #GProxyAddress:destination-protocol fields; use g_object_new()
        directly if you want to set those.)
        """
        ...

    def get_destination_hostname(self) -> str:
        """
        Gets @proxy's destination hostname; that is, the name of the host
        that will be connected to via the proxy, not the name of the proxy
        itself.
        """
        ...

    def get_destination_port(self) -> int:
        """
        Gets @proxy's destination port; that is, the port on the
        destination host that will be connected to via the proxy, not the
        port number of the proxy itself.
        """
        ...

    def get_destination_protocol(self) -> str:
        """
        Gets the protocol that is being spoken to the destination
        server; eg, "http" or "ftp".
        """
        ...

    def get_password(self) -> str:
        """
        Gets @proxy's password.
        """
        ...

    def get_protocol(self) -> str:
        """
        Gets @proxy's protocol. eg, "socks" or "http"
        """
        ...

    def get_uri(self) -> str:
        """
        Gets the proxy URI that @proxy was constructed from.
        """
        ...

    def get_username(self) -> str:
        """
        Gets @proxy's username.
        """
        ...


    ...

class ProxyAddressEnumerator(SocketAddressEnumerator):
    """
    #GProxyAddressEnumerator is a wrapper around #GSocketAddressEnumerator which
    takes the #GSocketAddress instances returned by the #GSocketAddressEnumerator
    and wraps them in #GProxyAddress instances, using the given
    #GProxyAddressEnumerator:proxy-resolver.

    This enumerator will be returned (for example, by
    g_socket_connectable_enumerate()) as appropriate when a proxy is configured;
    there should be no need to manually wrap a #GSocketAddressEnumerator instance
    with one.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...

class Resolver(GObject.Object):
    """
    #GResolver provides cancellable synchronous and asynchronous DNS
    resolution, for hostnames (g_resolver_lookup_by_address(),
    g_resolver_lookup_by_name() and their async variants) and SRV
    (service) records (g_resolver_lookup_service()).

    #GNetworkAddress and #GNetworkService provide wrappers around
    #GResolver functionality that also implement #GSocketConnectable,
    making it easy to connect to a remote host/service.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def lookup_by_address(self, address: InetAddress, cancellable: _T.Optional[Cancellable]) -> str:
        """
        Synchronously reverse-resolves @address to determine its
        associated hostname.

        If the DNS resolution fails, @error (if non-%NULL) will be set to
        a value from #GResolverError.

        If @cancellable is non-%NULL, it can be used to cancel the
        operation, in which case @error (if non-%NULL) will be set to
        %G_IO_ERROR_CANCELLED.
        """
        ...

    def lookup_by_address_async(self, address: InetAddress, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Begins asynchronously reverse-resolving @address to determine its
        associated hostname, and eventually calls @callback, which must
        call g_resolver_lookup_by_address_finish() to get the final result.
        """
        ...

    def lookup_by_address_finish(self, result: AsyncResult) -> str:
        """
        Retrieves the result of a previous call to
        g_resolver_lookup_by_address_async().

        If the DNS resolution failed, @error (if non-%NULL) will be set to
        a value from #GResolverError. If the operation was cancelled,
        @error will be set to %G_IO_ERROR_CANCELLED.
        """
        ...

    def lookup_by_name(self, hostname: str, cancellable: _T.Optional[Cancellable]) -> GLib.List:
        """
        Synchronously resolves @hostname to determine its associated IP
        address(es). @hostname may be an ASCII-only or UTF-8 hostname, or
        the textual form of an IP address (in which case this just becomes
        a wrapper around g_inet_address_new_from_string()).

        On success, g_resolver_lookup_by_name() will return a non-empty #GList of
        #GInetAddress, sorted in order of preference and guaranteed to not
        contain duplicates. That is, if using the result to connect to
        @hostname, you should attempt to connect to the first address
        first, then the second if the first fails, etc. If you are using
        the result to listen on a socket, it is appropriate to add each
        result using e.g. g_socket_listener_add_address().

        If the DNS resolution fails, @error (if non-%NULL) will be set to a
        value from #GResolverError and %NULL will be returned.

        If @cancellable is non-%NULL, it can be used to cancel the
        operation, in which case @error (if non-%NULL) will be set to
        %G_IO_ERROR_CANCELLED.

        If you are planning to connect to a socket on the resolved IP
        address, it may be easier to create a #GNetworkAddress and use its
        #GSocketConnectable interface.
        """
        ...

    def lookup_by_name_async(self, hostname: str, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Begins asynchronously resolving @hostname to determine its
        associated IP address(es), and eventually calls @callback, which
        must call g_resolver_lookup_by_name_finish() to get the result.
        See g_resolver_lookup_by_name() for more details.
        """
        ...

    def lookup_by_name_finish(self, result: AsyncResult) -> GLib.List:
        """
        Retrieves the result of a call to
        g_resolver_lookup_by_name_async().

        If the DNS resolution failed, @error (if non-%NULL) will be set to
        a value from #GResolverError. If the operation was cancelled,
        @error will be set to %G_IO_ERROR_CANCELLED.
        """
        ...

    def lookup_by_name_with_flags(self, hostname: str, flags: ResolverNameLookupFlags, cancellable: _T.Optional[Cancellable]) -> GLib.List:
        """
        This differs from g_resolver_lookup_by_name() in that you can modify
        the lookup behavior with @flags. For example this can be used to limit
        results with %G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY.
        """
        ...

    def lookup_by_name_with_flags_async(self, hostname: str, flags: ResolverNameLookupFlags, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Begins asynchronously resolving @hostname to determine its
        associated IP address(es), and eventually calls @callback, which
        must call g_resolver_lookup_by_name_with_flags_finish() to get the result.
        See g_resolver_lookup_by_name() for more details.
        """
        ...

    def lookup_by_name_with_flags_finish(self, result: AsyncResult) -> GLib.List:
        """
        Retrieves the result of a call to
        g_resolver_lookup_by_name_with_flags_async().

        If the DNS resolution failed, @error (if non-%NULL) will be set to
        a value from #GResolverError. If the operation was cancelled,
        @error will be set to %G_IO_ERROR_CANCELLED.
        """
        ...

    def lookup_records(self, rrname: str, record_type: ResolverRecordType, cancellable: _T.Optional[Cancellable]) -> GLib.List:
        """
        Synchronously performs a DNS record lookup for the given @rrname and returns
        a list of records as #GVariant tuples. See #GResolverRecordType for
        information on what the records contain for each @record_type.

        If the DNS resolution fails, @error (if non-%NULL) will be set to
        a value from #GResolverError and %NULL will be returned.

        If @cancellable is non-%NULL, it can be used to cancel the
        operation, in which case @error (if non-%NULL) will be set to
        %G_IO_ERROR_CANCELLED.
        """
        ...

    def lookup_records_async(self, rrname: str, record_type: ResolverRecordType, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Begins asynchronously performing a DNS lookup for the given
        @rrname, and eventually calls @callback, which must call
        g_resolver_lookup_records_finish() to get the final result. See
        g_resolver_lookup_records() for more details.
        """
        ...

    def lookup_records_finish(self, result: AsyncResult) -> GLib.List:
        """
        Retrieves the result of a previous call to
        g_resolver_lookup_records_async(). Returns a non-empty list of records as
        #GVariant tuples. See #GResolverRecordType for information on what the
        records contain.

        If the DNS resolution failed, @error (if non-%NULL) will be set to
        a value from #GResolverError. If the operation was cancelled,
        @error will be set to %G_IO_ERROR_CANCELLED.
        """
        ...

    def lookup_service(self, service: str, protocol: str, domain: str, cancellable: _T.Optional[Cancellable]) -> GLib.List:
        """
        Synchronously performs a DNS SRV lookup for the given @service and
        @protocol in the given @domain and returns an array of #GSrvTarget.
        @domain may be an ASCII-only or UTF-8 hostname. Note also that the
        @service and @protocol arguments do not include the leading underscore
        that appears in the actual DNS entry.

        On success, g_resolver_lookup_service() will return a non-empty #GList of
        #GSrvTarget, sorted in order of preference. (That is, you should
        attempt to connect to the first target first, then the second if
        the first fails, etc.)

        If the DNS resolution fails, @error (if non-%NULL) will be set to
        a value from #GResolverError and %NULL will be returned.

        If @cancellable is non-%NULL, it can be used to cancel the
        operation, in which case @error (if non-%NULL) will be set to
        %G_IO_ERROR_CANCELLED.

        If you are planning to connect to the service, it is usually easier
        to create a #GNetworkService and use its #GSocketConnectable
        interface.
        """
        ...

    def lookup_service_async(self, service: str, protocol: str, domain: str, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Begins asynchronously performing a DNS SRV lookup for the given
        @service and @protocol in the given @domain, and eventually calls
        @callback, which must call g_resolver_lookup_service_finish() to
        get the final result. See g_resolver_lookup_service() for more
        details.
        """
        ...

    def lookup_service_finish(self, result: AsyncResult) -> GLib.List:
        """
        Retrieves the result of a previous call to
        g_resolver_lookup_service_async().

        If the DNS resolution failed, @error (if non-%NULL) will be set to
        a value from #GResolverError. If the operation was cancelled,
        @error will be set to %G_IO_ERROR_CANCELLED.
        """
        ...

    def set_default(self) -> object:
        """
        Sets @resolver to be the application's default resolver (reffing
        @resolver, and unreffing the previous default resolver, if any).
        Future calls to g_resolver_get_default() will return this resolver.

        This can be used if an application wants to perform any sort of DNS
        caching or "pinning"; it can implement its own #GResolver that
        calls the original default resolver for DNS operations, and
        implements its own cache policies on top of that, and then set
        itself as the default resolver for all later code to use.
        """
        ...


    ...

class Settings(GObject.Object):
    """
    The #GSettings class provides a convenient API for storing and retrieving
    application settings.

    Reads and writes can be considered to be non-blocking.  Reading
    settings with #GSettings is typically extremely fast: on
    approximately the same order of magnitude (but slower than) a
    #GHashTable lookup.  Writing settings is also extremely fast in terms
    of time to return to your application, but can be extremely expensive
    for other threads and other processes.  Many settings backends
    (including dconf) have lazy initialisation which means in the common
    case of the user using their computer without modifying any settings
    a lot of work can be avoided.  For dconf, the D-Bus service doesn't
    even need to be started in this case.  For this reason, you should
    only ever modify #GSettings keys in response to explicit user action.
    Particular care should be paid to ensure that modifications are not
    made during startup -- for example, when setting the initial value
    of preferences widgets.  The built-in g_settings_bind() functionality
    is careful not to write settings in response to notify signals as a
    result of modifications that it makes to widgets.

    When creating a GSettings instance, you have to specify a schema
    that describes the keys in your settings and their types and default
    values, as well as some other information.

    Normally, a schema has a fixed path that determines where the settings
    are stored in the conceptual global tree of settings. However, schemas
    can also be '[relocatable][gsettings-relocatable]', i.e. not equipped with
    a fixed path. This is
    useful e.g. when the schema describes an 'account', and you want to be
    able to store a arbitrary number of accounts.

    Paths must start with and end with a forward slash character ('/')
    and must not contain two sequential slash characters.  Paths should
    be chosen based on a domain name associated with the program or
    library to which the settings belong.  Examples of paths are
    "/org/gtk/settings/file-chooser/" and "/ca/desrt/dconf-editor/".
    Paths should not start with "/apps/", "/desktop/" or "/system/" as
    they often did in GConf.

    Unlike other configuration systems (like GConf), GSettings does not
    restrict keys to basic types like strings and numbers. GSettings stores
    values as #GVariant, and allows any #GVariantType for keys. Key names
    are restricted to lowercase characters, numbers and '-'. Furthermore,
    the names must begin with a lowercase character, must not end
    with a '-', and must not contain consecutive dashes.

    Similar to GConf, the default values in GSettings schemas can be
    localized, but the localized values are stored in gettext catalogs
    and looked up with the domain that is specified in the
    `gettext-domain` attribute of the <schemalist> or <schema>
    elements and the category that is specified in the `l10n` attribute of
    the <default> element. The string which is translated includes all text in
    the <default> element, including any surrounding quotation marks.

    The `l10n` attribute must be set to `messages` or `time`, and sets the
    [locale category for
    translation](https://www.gnu.org/software/gettext/manual/html_node/Aspects.html#index-locale-categories-1).
    The `messages` category should be used by default; use `time` for
    translatable date or time formats. A translation comment can be added as an
    XML comment immediately above the <default> element — it is recommended to
    add these comments to aid translators understand the meaning and
    implications of the default value. An optional translation `context`
    attribute can be set on the <default> element to disambiguate multiple
    defaults which use the same string.

    For example:
    |[
     <!-- Translators: A list of words which are not allowed to be typed, in
          GVariant serialization syntax.
          See: https://developer.gnome.org/glib/stable/gvariant-text.html -->
     <default l10n='messages' context='Banned words'>['bad', 'words']</default>
    ]|

    Translations of default values must remain syntactically valid serialized
    #GVariants (e.g. retaining any surrounding quotation marks) or runtime
    errors will occur.

    GSettings uses schemas in a compact binary form that is created
    by the [glib-compile-schemas][glib-compile-schemas]
    utility. The input is a schema description in an XML format.

    A DTD for the gschema XML format can be found here:
    [gschema.dtd](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/gschema.dtd)

    The [glib-compile-schemas][glib-compile-schemas] tool expects schema
    files to have the extension `.gschema.xml`.

    At runtime, schemas are identified by their id (as specified in the
    id attribute of the <schema> element). The convention for schema
    ids is to use a dotted name, similar in style to a D-Bus bus name,
    e.g. "org.gnome.SessionManager". In particular, if the settings are
    for a specific service that owns a D-Bus bus name, the D-Bus bus name
    and schema id should match. For schemas which deal with settings not
    associated with one named application, the id should not use
    StudlyCaps, e.g. "org.gnome.font-rendering".

    In addition to #GVariant types, keys can have types that have
    enumerated types. These can be described by a <choice>,
    <enum> or <flags> element, as seen in the
    [example][schema-enumerated]. The underlying type of such a key
    is string, but you can use g_settings_get_enum(), g_settings_set_enum(),
    g_settings_get_flags(), g_settings_set_flags() access the numeric values
    corresponding to the string value of enum and flags keys.

    An example for default value:
    |[
    <schemalist>
      <schema id="org.gtk.Test" path="/org/gtk/Test/" gettext-domain="test">

        <key name="greeting" type="s">
          <default l10n="messages">"Hello, earthlings"</default>
          <summary>A greeting</summary>
          <description>
            Greeting of the invading martians
          </description>
        </key>

        <key name="box" type="(ii)">
          <default>(20,30)</default>
        </key>

        <key name="empty-string" type="s">
          <default>""</default>
          <summary>Empty strings have to be provided in GVariant form</summary>
        </key>

      </schema>
    </schemalist>
    ]|

    An example for ranges, choices and enumerated types:
    |[
    <schemalist>

      <enum id="org.gtk.Test.myenum">
        <value nick="first" value="1"/>
        <value nick="second" value="2"/>
      </enum>

      <flags id="org.gtk.Test.myflags">
        <value nick="flag1" value="1"/>
        <value nick="flag2" value="2"/>
        <value nick="flag3" value="4"/>
      </flags>

      <schema id="org.gtk.Test">

        <key name="key-with-range" type="i">
          <range min="1" max="100"/>
          <default>10</default>
        </key>

        <key name="key-with-choices" type="s">
          <choices>
            <choice value='Elisabeth'/>
            <choice value='Annabeth'/>
            <choice value='Joe'/>
          </choices>
          <aliases>
            <alias value='Anna' target='Annabeth'/>
            <alias value='Beth' target='Elisabeth'/>
          </aliases>
          <default>'Joe'</default>
        </key>

        <key name='enumerated-key' enum='org.gtk.Test.myenum'>
          <default>'first'</default>
        </key>

        <key name='flags-key' flags='org.gtk.Test.myflags'>
          <default>["flag1","flag2"]</default>
        </key>
      </schema>
    </schemalist>
    ]|

    ## Vendor overrides

    Default values are defined in the schemas that get installed by
    an application. Sometimes, it is necessary for a vendor or distributor
    to adjust these defaults. Since patching the XML source for the schema
    is inconvenient and error-prone,
    [glib-compile-schemas][glib-compile-schemas] reads so-called vendor
    override' files. These are keyfiles in the same directory as the XML
    schema sources which can override default values. The schema id serves
    as the group name in the key file, and the values are expected in
    serialized GVariant form, as in the following example:
    |[
        [org.gtk.Example]
        key1='string'
        key2=1.5
    ]|

    glib-compile-schemas expects schema files to have the extension
    `.gschema.override`.

    ## Binding

    A very convenient feature of GSettings lets you bind #GObject properties
    directly to settings, using g_settings_bind(). Once a GObject property
    has been bound to a setting, changes on either side are automatically
    propagated to the other side. GSettings handles details like mapping
    between GObject and GVariant types, and preventing infinite cycles.

    This makes it very easy to hook up a preferences dialog to the
    underlying settings. To make this even more convenient, GSettings
    looks for a boolean property with the name "sensitivity" and
    automatically binds it to the writability of the bound setting.
    If this 'magic' gets in the way, it can be suppressed with the
    %G_SETTINGS_BIND_NO_SENSITIVITY flag.

    ## Relocatable schemas # {#gsettings-relocatable}

    A relocatable schema is one with no `path` attribute specified on its
    <schema> element. By using g_settings_new_with_path(), a #GSettings object
    can be instantiated for a relocatable schema, assigning a path to the
    instance. Paths passed to g_settings_new_with_path() will typically be
    constructed dynamically from a constant prefix plus some form of instance
    identifier; but they must still be valid GSettings paths. Paths could also
    be constant and used with a globally installed schema originating from a
    dependency library.

    For example, a relocatable schema could be used to store geometry information
    for different windows in an application. If the schema ID was
    `org.foo.MyApp.Window`, it could be instantiated for paths
    `/org/foo/MyApp/main/`, `/org/foo/MyApp/document-1/`,
    `/org/foo/MyApp/document-2/`, etc. If any of the paths are well-known
    they can be specified as <child> elements in the parent schema, e.g.:
    |[
    <schema id="org.foo.MyApp" path="/org/foo/MyApp/">
      <child name="main" schema="org.foo.MyApp.Window"/>
    </schema>
    ]|

    ## Build system integration # {#gsettings-build-system}

    GSettings comes with autotools integration to simplify compiling and
    installing schemas. To add GSettings support to an application, add the
    following to your `configure.ac`:
    |[
    GLIB_GSETTINGS
    ]|

    In the appropriate `Makefile.am`, use the following snippet to compile and
    install the named schema:
    |[
    gsettings_SCHEMAS = org.foo.MyApp.gschema.xml
    EXTRA_DIST = $(gsettings_SCHEMAS)

    @GSETTINGS_RULES@
    ]|

    No changes are needed to the build system to mark a schema XML file for
    translation. Assuming it sets the `gettext-domain` attribute, a schema may
    be marked for translation by adding it to `POTFILES.in`, assuming gettext
    0.19 is in use (the preferred method for translation):
    |[
    data/org.foo.MyApp.gschema.xml
    ]|

    Alternatively, if intltool 0.50.1 is in use:
    |[
    [type: gettext/gsettings]data/org.foo.MyApp.gschema.xml
    ]|

    GSettings will use gettext to look up translations for the <summary> and
    <description> elements, and also any <default> elements which have a `l10n`
    attribute set. Translations must not be included in the `.gschema.xml` file
    by the build system, for example by using intltool XML rules with a
    `.gschema.xml.in` template.

    If an enumerated type defined in a C header file is to be used in a GSettings
    schema, it can either be defined manually using an <enum> element in the
    schema XML, or it can be extracted automatically from the C header. This
    approach is preferred, as it ensures the two representations are always
    synchronised. To do so, add the following to the relevant `Makefile.am`:
    |[
    gsettings_ENUM_NAMESPACE = org.foo.MyApp
    gsettings_ENUM_FILES = my-app-enums.h my-app-misc.h
    ]|

    `gsettings_ENUM_NAMESPACE` specifies the schema namespace for the enum files,
    which are specified in `gsettings_ENUM_FILES`. This will generate a
    `org.foo.MyApp.enums.xml` file containing the extracted enums, which will be
    automatically included in the schema compilation, install and uninstall
    rules. It should not be committed to version control or included in
    `EXTRA_DIST`.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, schema_id: str) -> Settings:
        """
        Creates a new #GSettings object with the schema specified by
        @schema_id.

        It is an error for the schema to not exist: schemas are an
        essential part of a program, as they provide type information.
        If schemas need to be dynamically loaded (for example, from an
        optional runtime dependency), g_settings_schema_source_lookup()
        can be used to test for their existence before loading them.

        Signals on the newly created #GSettings object will be dispatched
        via the thread-default #GMainContext in effect at the time of the
        call to g_settings_new().  The new #GSettings will hold a reference
        on the context.  See g_main_context_push_thread_default().
        """
        ...


    @classmethod
    def new_full(cls, schema: SettingsSchema, backend: _T.Optional[SettingsBackend], path: _T.Optional[str]) -> Settings:
        """
        Creates a new #GSettings object with a given schema, backend and
        path.

        It should be extremely rare that you ever want to use this function.
        It is made available for advanced use-cases (such as plugin systems
        that want to provide access to schemas loaded from custom locations,
        etc).

        At the most basic level, a #GSettings object is a pure composition of
        4 things: a #GSettingsSchema, a #GSettingsBackend, a path within that
        backend, and a #GMainContext to which signals are dispatched.

        This constructor therefore gives you full control over constructing
        #GSettings instances.  The first 3 parameters are given directly as
        @schema, @backend and @path, and the main context is taken from the
        thread-default (as per g_settings_new()).

        If @backend is %NULL then the default backend is used.

        If @path is %NULL then the path from the schema is used.  It is an
        error if @path is %NULL and the schema has no path of its own or if
        @path is non-%NULL and not equal to the path that the schema does
        have.
        """
        ...


    @classmethod
    def new_with_backend(cls, schema_id: str, backend: SettingsBackend) -> Settings:
        """
        Creates a new #GSettings object with the schema specified by
        @schema_id and a given #GSettingsBackend.

        Creating a #GSettings object with a different backend allows accessing
        settings from a database other than the usual one. For example, it may make
        sense to pass a backend corresponding to the "defaults" settings database on
        the system to get a settings object that modifies the system default
        settings instead of the settings for this user.
        """
        ...


    @classmethod
    def new_with_backend_and_path(cls, schema_id: str, backend: SettingsBackend, path: str) -> Settings:
        """
        Creates a new #GSettings object with the schema specified by
        @schema_id and a given #GSettingsBackend and path.

        This is a mix of g_settings_new_with_backend() and
        g_settings_new_with_path().
        """
        ...


    @classmethod
    def new_with_path(cls, schema_id: str, path: str) -> Settings:
        """
        Creates a new #GSettings object with the relocatable schema specified
        by @schema_id and a given path.

        You only need to do this if you want to directly create a settings
        object with a schema that doesn't have a specified path of its own.
        That's quite rare.

        It is a programmer error to call this function for a schema that
        has an explicitly specified path.

        It is a programmer error if @path is not a valid path.  A valid path
        begins and ends with '/' and does not contain two consecutive '/'
        characters.
        """
        ...

    def apply(self) -> object:
        """
        Applies any changes that have been made to the settings.  This
        function does nothing unless @settings is in 'delay-apply' mode;
        see g_settings_delay().  In the normal case settings are always
        applied immediately.
        """
        ...

    def bind(self, key: str, object: GObject.Object, property: str, flags: SettingsBindFlags) -> object:
        """
        Create a binding between the @key in the @settings object
        and the property @property of @object.

        The binding uses the default GIO mapping functions to map
        between the settings and property values. These functions
        handle booleans, numeric types and string types in a
        straightforward way. Use g_settings_bind_with_mapping() if
        you need a custom mapping, or map between types that are not
        supported by the default mapping functions.

        Unless the @flags include %G_SETTINGS_BIND_NO_SENSITIVITY, this
        function also establishes a binding between the writability of
        @key and the "sensitive" property of @object (if @object has
        a boolean property by that name). See g_settings_bind_writable()
        for more details about writable bindings.

        Note that the lifecycle of the binding is tied to @object,
        and that you can have only one binding per object property.
        If you bind the same property twice on the same object, the second
        binding overrides the first one.
        """
        ...

    def bind_with_mapping(self, key: str, object: GObject.Object, property: str, flags: SettingsBindFlags, get_mapping: SettingsBindGetMapping, set_mapping: SettingsBindSetMapping, user_data: _T.Optional[object], destroy: GLib.DestroyNotify) -> object:
        """
        Create a binding between the @key in the @settings object
        and the property @property of @object.

        The binding uses the provided mapping functions to map between
        settings and property values.

        Note that the lifecycle of the binding is tied to @object,
        and that you can have only one binding per object property.
        If you bind the same property twice on the same object, the second
        binding overrides the first one.
        """
        ...

    def bind_writable(self, key: str, object: GObject.Object, property: str, inverted: bool) -> object:
        """
        Create a binding between the writability of @key in the
        @settings object and the property @property of @object.
        The property must be boolean; "sensitive" or "visible"
        properties of widgets are the most likely candidates.

        Writable bindings are always uni-directional; changes of the
        writability of the setting will be propagated to the object
        property, not the other way.

        When the @inverted argument is %TRUE, the binding inverts the
        value as it passes from the setting to the object, i.e. @property
        will be set to %TRUE if the key is not writable.

        Note that the lifecycle of the binding is tied to @object,
        and that you can have only one binding per object property.
        If you bind the same property twice on the same object, the second
        binding overrides the first one.
        """
        ...

    def create_action(self, key: str) -> Action:
        """
        Creates a #GAction corresponding to a given #GSettings key.

        The action has the same name as the key.

        The value of the key becomes the state of the action and the action
        is enabled when the key is writable.  Changing the state of the
        action results in the key being written to.  Changes to the value or
        writability of the key cause appropriate change notifications to be
        emitted for the action.

        For boolean-valued keys, action activations take no parameter and
        result in the toggling of the value.  For all other types,
        activations take the new value for the key (which must have the
        correct type).
        """
        ...

    def delay(self) -> object:
        """
        Changes the #GSettings object into 'delay-apply' mode. In this
        mode, changes to @settings are not immediately propagated to the
        backend, but kept locally until g_settings_apply() is called.
        """
        ...

    def get(self, key: str, format: str, *args: object) -> object:
        """
        Gets the value that is stored at @key in @settings.

        A convenience function that combines g_settings_get_value() with
        g_variant_get().

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings or for the #GVariantType of @format to mismatch
        the type given in the schema.
        """
        ...

    def get_boolean(self, key: str) -> bool:
        """
        Gets the value that is stored at @key in @settings.

        A convenience variant of g_settings_get() for booleans.

        It is a programmer error to give a @key that isn't specified as
        having a boolean type in the schema for @settings.
        """
        ...

    def get_child(self, name: str) -> Settings:
        """
        Creates a child settings object which has a base path of
        `base-path/@name`, where `base-path` is the base path of
        @settings.

        The schema for the child settings object must have been declared
        in the schema of @settings using a `<child>` element.

        The created child settings object will inherit the #GSettings:delay-apply
        mode from @settings.
        """
        ...

    def get_default_value(self, key: str) -> GLib.Variant:
        """
        Gets the "default value" of a key.

        This is the value that would be read if g_settings_reset() were to be
        called on the key.

        Note that this may be a different value than returned by
        g_settings_schema_key_get_default_value() if the system administrator
        has provided a default value.

        Comparing the return values of g_settings_get_default_value() and
        g_settings_get_value() is not sufficient for determining if a value
        has been set because the user may have explicitly set the value to
        something that happens to be equal to the default.  The difference
        here is that if the default changes in the future, the user's key
        will still be set.

        This function may be useful for adding an indication to a UI of what
        the default value was before the user set it.

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings.
        """
        ...

    def get_double(self, key: str) -> float:
        """
        Gets the value that is stored at @key in @settings.

        A convenience variant of g_settings_get() for doubles.

        It is a programmer error to give a @key that isn't specified as
        having a 'double' type in the schema for @settings.
        """
        ...

    def get_enum(self, key: str) -> int:
        """
        Gets the value that is stored in @settings for @key and converts it
        to the enum value that it represents.

        In order to use this function the type of the value must be a string
        and it must be marked in the schema file as an enumerated type.

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings or is not marked as an enumerated type.

        If the value stored in the configuration database is not a valid
        value for the enumerated type then this function will return the
        default value.
        """
        ...

    def get_flags(self, key: str) -> int:
        """
        Gets the value that is stored in @settings for @key and converts it
        to the flags value that it represents.

        In order to use this function the type of the value must be an array
        of strings and it must be marked in the schema file as a flags type.

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings or is not marked as a flags type.

        If the value stored in the configuration database is not a valid
        value for the flags type then this function will return the default
        value.
        """
        ...

    def get_has_unapplied(self) -> bool:
        """
        Returns whether the #GSettings object has any unapplied
        changes.  This can only be the case if it is in 'delayed-apply' mode.
        """
        ...

    def get_int(self, key: str) -> int:
        """
        Gets the value that is stored at @key in @settings.

        A convenience variant of g_settings_get() for 32-bit integers.

        It is a programmer error to give a @key that isn't specified as
        having a int32 type in the schema for @settings.
        """
        ...

    def get_int64(self, key: str) -> gint64:
        """
        Gets the value that is stored at @key in @settings.

        A convenience variant of g_settings_get() for 64-bit integers.

        It is a programmer error to give a @key that isn't specified as
        having a int64 type in the schema for @settings.
        """
        ...

    def get_mapped(self, key: str, mapping: SettingsGetMapping, user_data: _T.Optional[object]) -> object:
        """
        Gets the value that is stored at @key in @settings, subject to
        application-level validation/mapping.

        You should use this function when the application needs to perform
        some processing on the value of the key (for example, parsing).  The
        @mapping function performs that processing.  If the function
        indicates that the processing was unsuccessful (due to a parse error,
        for example) then the mapping is tried again with another value.

        This allows a robust 'fall back to defaults' behaviour to be
        implemented somewhat automatically.

        The first value that is tried is the user's setting for the key.  If
        the mapping function fails to map this value, other values may be
        tried in an unspecified order (system or site defaults, translated
        schema default values, untranslated schema default values, etc).

        If the mapping function fails for all possible values, one additional
        attempt is made: the mapping function is called with a %NULL value.
        If the mapping function still indicates failure at this point then
        the application will be aborted.

        The result parameter for the @mapping function is pointed to a
        #gpointer which is initially set to %NULL.  The same pointer is given
        to each invocation of @mapping.  The final value of that #gpointer is
        what is returned by this function.  %NULL is valid; it is returned
        just as any other value would be.
        """
        ...

    def get_range(self, key: str) -> GLib.Variant:
        """
        Queries the range of a key.
        """
        ...

    def get_string(self, key: str) -> str:
        """
        Gets the value that is stored at @key in @settings.

        A convenience variant of g_settings_get() for strings.

        It is a programmer error to give a @key that isn't specified as
        having a string type in the schema for @settings.
        """
        ...

    def get_strv(self, key: str) -> object:
        """
        A convenience variant of g_settings_get() for string arrays.

        It is a programmer error to give a @key that isn't specified as
        having an array of strings type in the schema for @settings.
        """
        ...

    def get_uint(self, key: str) -> int:
        """
        Gets the value that is stored at @key in @settings.

        A convenience variant of g_settings_get() for 32-bit unsigned
        integers.

        It is a programmer error to give a @key that isn't specified as
        having a uint32 type in the schema for @settings.
        """
        ...

    def get_uint64(self, key: str) -> guint64:
        """
        Gets the value that is stored at @key in @settings.

        A convenience variant of g_settings_get() for 64-bit unsigned
        integers.

        It is a programmer error to give a @key that isn't specified as
        having a uint64 type in the schema for @settings.
        """
        ...

    def get_user_value(self, key: str) -> GLib.Variant:
        """
        Checks the "user value" of a key, if there is one.

        The user value of a key is the last value that was set by the user.

        After calling g_settings_reset() this function should always return
        %NULL (assuming something is not wrong with the system
        configuration).

        It is possible that g_settings_get_value() will return a different
        value than this function.  This can happen in the case that the user
        set a value for a key that was subsequently locked down by the system
        administrator -- this function will return the user's old value.

        This function may be useful for adding a "reset" option to a UI or
        for providing indication that a particular value has been changed.

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings.
        """
        ...

    def get_value(self, key: str) -> GLib.Variant:
        """
        Gets the value that is stored in @settings for @key.

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings.
        """
        ...

    def is_writable(self, name: str) -> bool:
        """
        Finds out if a key can be written or not
        """
        ...

    def list_children(self) -> object:
        """
        Gets the list of children on @settings.

        The list is exactly the list of strings for which it is not an error
        to call g_settings_get_child().

        There is little reason to call this function from "normal" code, since
        you should already know what children are in your schema. This function
        may still be useful there for introspection reasons, however.

        You should free the return value with g_strfreev() when you are done
        with it.
        """
        ...

    def list_keys(self) -> object:
        """
        Introspects the list of keys on @settings.

        You should probably not be calling this function from "normal" code
        (since you should already know what keys are in your schema).  This
        function is intended for introspection reasons.

        You should free the return value with g_strfreev() when you are done
        with it.
        """
        ...

    def range_check(self, key: str, value: GLib.Variant) -> bool:
        """
        Checks if the given @value is of the correct type and within the
        permitted range for @key.
        """
        ...

    def reset(self, key: str) -> object:
        """
        Resets @key to its default value.

        This call resets the key, as much as possible, to its default value.
        That might be the value specified in the schema or the one set by the
        administrator.
        """
        ...

    def revert(self) -> object:
        """
        Reverts all non-applied changes to the settings.  This function
        does nothing unless @settings is in 'delay-apply' mode; see
        g_settings_delay().  In the normal case settings are always applied
        immediately.

        Change notifications will be emitted for affected keys.
        """
        ...

    def set(self, key: str, format: str, *args: object) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience function that combines g_settings_set_value() with
        g_variant_new().

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings or for the #GVariantType of @format to mismatch
        the type given in the schema.
        """
        ...

    def set_boolean(self, key: str, value: bool) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience variant of g_settings_set() for booleans.

        It is a programmer error to give a @key that isn't specified as
        having a boolean type in the schema for @settings.
        """
        ...

    def set_double(self, key: str, value: float) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience variant of g_settings_set() for doubles.

        It is a programmer error to give a @key that isn't specified as
        having a 'double' type in the schema for @settings.
        """
        ...

    def set_enum(self, key: str, value: int) -> bool:
        """
        Looks up the enumerated type nick for @value and writes it to @key,
        within @settings.

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings or is not marked as an enumerated type, or for
        @value not to be a valid value for the named type.

        After performing the write, accessing @key directly with
        g_settings_get_string() will return the 'nick' associated with
        @value.
        """
        ...

    def set_flags(self, key: str, value: int) -> bool:
        """
        Looks up the flags type nicks for the bits specified by @value, puts
        them in an array of strings and writes the array to @key, within
        @settings.

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings or is not marked as a flags type, or for @value
        to contain any bits that are not value for the named type.

        After performing the write, accessing @key directly with
        g_settings_get_strv() will return an array of 'nicks'; one for each
        bit in @value.
        """
        ...

    def set_int(self, key: str, value: int) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience variant of g_settings_set() for 32-bit integers.

        It is a programmer error to give a @key that isn't specified as
        having a int32 type in the schema for @settings.
        """
        ...

    def set_int64(self, key: str, value: gint64) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience variant of g_settings_set() for 64-bit integers.

        It is a programmer error to give a @key that isn't specified as
        having a int64 type in the schema for @settings.
        """
        ...

    def set_string(self, key: str, value: str) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience variant of g_settings_set() for strings.

        It is a programmer error to give a @key that isn't specified as
        having a string type in the schema for @settings.
        """
        ...

    def set_strv(self, key: str, value: _T.Optional[object]) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience variant of g_settings_set() for string arrays.  If
        @value is %NULL, then @key is set to be the empty array.

        It is a programmer error to give a @key that isn't specified as
        having an array of strings type in the schema for @settings.
        """
        ...

    def set_uint(self, key: str, value: int) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience variant of g_settings_set() for 32-bit unsigned
        integers.

        It is a programmer error to give a @key that isn't specified as
        having a uint32 type in the schema for @settings.
        """
        ...

    def set_uint64(self, key: str, value: guint64) -> bool:
        """
        Sets @key in @settings to @value.

        A convenience variant of g_settings_set() for 64-bit unsigned
        integers.

        It is a programmer error to give a @key that isn't specified as
        having a uint64 type in the schema for @settings.
        """
        ...

    def set_value(self, key: str, value: GLib.Variant) -> bool:
        """
        Sets @key in @settings to @value.

        It is a programmer error to give a @key that isn't contained in the
        schema for @settings or for @value to have the incorrect type, per
        the schema.

        If @value is floating then this function consumes the reference.
        """
        ...


    ...

class SettingsBackend(GObject.Object):
    """
    The #GSettingsBackend interface defines a generic interface for
    non-strictly-typed data that is stored in a hierarchy. To implement
    an alternative storage backend for #GSettings, you need to implement
    the #GSettingsBackend interface and then make it implement the
    extension point %G_SETTINGS_BACKEND_EXTENSION_POINT_NAME.

    The interface defines methods for reading and writing values, a
    method for determining if writing of certain values will fail
    (lockdown) and a change notification mechanism.

    The semantics of the interface are very precisely defined and
    implementations must carefully adhere to the expectations of
    callers that are documented on each of the interface methods.

    Some of the #GSettingsBackend functions accept or return a #GTree.
    These trees always have strings as keys and #GVariant as values.
    g_settings_backend_create_tree() is a convenience function to create
    suitable trees.

    The #GSettingsBackend API is exported to allow third-party
    implementations, but does not carry the same stability guarantees
    as the public GIO API. For this reason, you have to define the
    C preprocessor symbol %G_SETTINGS_ENABLE_BACKEND before including
    `gio/gsettingsbackend.h`.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def changed(self, key: str, origin_tag: _T.Optional[object]) -> object:
        """
        Signals that a single key has possibly changed.  Backend
        implementations should call this if a key has possibly changed its
        value.

        @key must be a valid key (ie starting with a slash, not containing
        '//', and not ending with a slash).

        The implementation must call this function during any call to
        g_settings_backend_write(), before the call returns (except in the
        case that no keys are actually changed and it cares to detect this
        fact).  It may not rely on the existence of a mainloop for
        dispatching the signal later.

        The implementation may call this function at any other time it likes
        in response to other events (such as changes occurring outside of the
        program).  These calls may originate from a mainloop or may originate
        in response to any other action (including from calls to
        g_settings_backend_write()).

        In the case that this call is in response to a call to
        g_settings_backend_write() then @origin_tag must be set to the same
        value that was passed to that call.
        """
        ...

    def changed_tree(self, tree: GLib.Tree, origin_tag: _T.Optional[object]) -> object:
        """
        This call is a convenience wrapper.  It gets the list of changes from
        @tree, computes the longest common prefix and calls
        g_settings_backend_changed().
        """
        ...

    def keys_changed(self, path: str, items: object, origin_tag: _T.Optional[object]) -> object:
        """
        Signals that a list of keys have possibly changed.  Backend
        implementations should call this if keys have possibly changed their
        values.

        @path must be a valid path (ie starting and ending with a slash and
        not containing '//').  Each string in @items must form a valid key
        name when @path is prefixed to it (ie: each item must not start or
        end with '/' and must not contain '//').

        The meaning of this signal is that any of the key names resulting
        from the contatenation of @path with each item in @items may have
        changed.

        The same rules for when notifications must occur apply as per
        g_settings_backend_changed().  These two calls can be used
        interchangeably if exactly one item has changed (although in that
        case g_settings_backend_changed() is definitely preferred).

        For efficiency reasons, the implementation should strive for @path to
        be as long as possible (ie: the longest common prefix of all of the
        keys that were changed) but this is not strictly required.
        """
        ...

    def path_changed(self, path: str, origin_tag: _T.Optional[object]) -> object:
        """
        Signals that all keys below a given path may have possibly changed.
        Backend implementations should call this if an entire path of keys
        have possibly changed their values.

        @path must be a valid path (ie starting and ending with a slash and
        not containing '//').

        The meaning of this signal is that any of the key which has a name
        starting with @path may have changed.

        The same rules for when notifications must occur apply as per
        g_settings_backend_changed().  This call might be an appropriate
        reasponse to a 'reset' call but implementations are also free to
        explicitly list the keys that were affected by that call if they can
        easily do so.

        For efficiency reasons, the implementation should strive for @path to
        be as long as possible (ie: the longest common prefix of all of the
        keys that were changed) but this is not strictly required.  As an
        example, if this function is called with the path of "/" then every
        single key in the application will be notified of a possible change.
        """
        ...

    def path_writable_changed(self, path: str) -> object:
        """
        Signals that the writability of all keys below a given path may have
        changed.

        Since GSettings performs no locking operations for itself, this call
        will always be made in response to external events.
        """
        ...

    def writable_changed(self, key: str) -> object:
        """
        Signals that the writability of a single key has possibly changed.

        Since GSettings performs no locking operations for itself, this call
        will always be made in response to external events.
        """
        ...


    ...

class SimpleAction(GObject.Object, Action):
    """
    A #GSimpleAction is the obvious simple implementation of the #GAction
    interface. This is the easiest way to create an action for purposes of
    adding it to a #GSimpleActionGroup.

    See also #GtkAction.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, name: str, parameter_type: _T.Optional[GLib.VariantType]) -> SimpleAction:
        """
        Creates a new action.

        The created action is stateless. See g_simple_action_new_stateful() to create
        an action that has state.
        """
        ...


    @classmethod
    def new_stateful(cls, name: str, parameter_type: _T.Optional[GLib.VariantType], state: GLib.Variant) -> SimpleAction:
        """
        Creates a new stateful action.

        All future state values must have the same #GVariantType as the initial
        @state.

        If the @state #GVariant is floating, it is consumed.
        """
        ...

    def set_enabled(self, enabled: bool) -> object:
        """
        Sets the action as enabled or not.

        An action must be enabled in order to be activated or in order to
        have its state changed from outside callers.

        This should only be called by the implementor of the action.  Users
        of the action should not attempt to modify its enabled flag.
        """
        ...

    def set_state(self, value: GLib.Variant) -> object:
        """
        Sets the state of the action.

        This directly updates the 'state' property to the given value.

        This should only be called by the implementor of the action.  Users
        of the action should not attempt to directly modify the 'state'
        property.  Instead, they should call g_action_change_state() to
        request the change.

        If the @value GVariant is floating, it is consumed.
        """
        ...

    def set_state_hint(self, state_hint: _T.Optional[GLib.Variant]) -> object:
        """
        Sets the state hint for the action.

        See g_action_get_state_hint() for more information about
        action state hints.
        """
        ...


    ...

class SimpleActionGroup(GObject.Object, ActionGroup, ActionMap):
    """
    #GSimpleActionGroup is a hash table filled with #GAction objects,
    implementing the #GActionGroup and #GActionMap interfaces.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> SimpleActionGroup:
        """
        Creates a new, empty, #GSimpleActionGroup.
        """
        ...

    def add_entries(self, entries: object, n_entries: int, user_data: _T.Optional[object]) -> object:
        """
        A convenience function for creating multiple #GSimpleAction instances
        and adding them to the action group.
        """
        ...

    def insert(self, action: Action) -> object:
        """
        Adds an action to the action group.

        If the action group already contains an action with the same name as
        @action then the old action is dropped from the group.

        The action group takes its own reference on @action.
        """
        ...

    def lookup(self, action_name: str) -> Action:
        """
        Looks up the action with the name @action_name in the group.

        If no such action exists, returns %NULL.
        """
        ...

    def remove(self, action_name: str) -> object:
        """
        Removes the named action from the action group.

        If no action of this name is in the group then nothing happens.
        """
        ...


    ...

class SimpleAsyncResult(GObject.Object, AsyncResult):
    """
    As of GLib 2.46, #GSimpleAsyncResult is deprecated in favor of
    #GTask, which provides a simpler API.

    #GSimpleAsyncResult implements #GAsyncResult.

    GSimpleAsyncResult handles #GAsyncReadyCallbacks, error
    reporting, operation cancellation and the final state of an operation,
    completely transparent to the application. Results can be returned
    as a pointer e.g. for functions that return data that is collected
    asynchronously, a boolean value for checking the success or failure
    of an operation, or a #gssize for operations which return the number
    of bytes modified by the operation; all of the simple return cases
    are covered.

    Most of the time, an application will not need to know of the details
    of this API; it is handled transparently, and any necessary operations
    are handled by #GAsyncResult's interface. However, if implementing a
    new GIO module, for writing language bindings, or for complex
    applications that need better control of how asynchronous operations
    are completed, it is important to understand this functionality.

    GSimpleAsyncResults are tagged with the calling function to ensure
    that asynchronous functions and their finishing functions are used
    together correctly.

    To create a new #GSimpleAsyncResult, call g_simple_async_result_new().
    If the result needs to be created for a #GError, use
    g_simple_async_result_new_from_error() or
    g_simple_async_result_new_take_error(). If a #GError is not available
    (e.g. the asynchronous operation's doesn't take a #GError argument),
    but the result still needs to be created for an error condition, use
    g_simple_async_result_new_error() (or g_simple_async_result_set_error_va()
    if your application or binding requires passing a variable argument list
    directly), and the error can then be propagated through the use of
    g_simple_async_result_propagate_error().

    An asynchronous operation can be made to ignore a cancellation event by
    calling g_simple_async_result_set_handle_cancellation() with a
    #GSimpleAsyncResult for the operation and %FALSE. This is useful for
    operations that are dangerous to cancel, such as close (which would
    cause a leak if cancelled before being run).

    GSimpleAsyncResult can integrate into GLib's event loop, #GMainLoop,
    or it can use #GThreads.
    g_simple_async_result_complete() will finish an I/O task directly
    from the point where it is called. g_simple_async_result_complete_in_idle()
    will finish it from an idle handler in the
    [thread-default main context][g-main-context-push-thread-default]
    where the #GSimpleAsyncResult was created.
    g_simple_async_result_run_in_thread() will run the job in a
    separate thread and then use
    g_simple_async_result_complete_in_idle() to deliver the result.

    To set the results of an asynchronous function,
    g_simple_async_result_set_op_res_gpointer(),
    g_simple_async_result_set_op_res_gboolean(), and
    g_simple_async_result_set_op_res_gssize()
    are provided, setting the operation's result to a gpointer, gboolean, or
    gssize, respectively.

    Likewise, to get the result of an asynchronous function,
    g_simple_async_result_get_op_res_gpointer(),
    g_simple_async_result_get_op_res_gboolean(), and
    g_simple_async_result_get_op_res_gssize() are
    provided, getting the operation's result as a gpointer, gboolean, and
    gssize, respectively.

    For the details of the requirements implementations must respect, see
    #GAsyncResult.  A typical implementation of an asynchronous operation
    using GSimpleAsyncResult looks something like this:

    |[<!-- language="C" -->
    static void
    baked_cb (Cake    *cake,
              gpointer user_data)
    {
      // In this example, this callback is not given a reference to the cake,
      // so the GSimpleAsyncResult has to take a reference to it.
      GSimpleAsyncResult *result = user_data;

      if (cake == NULL)
        g_simple_async_result_set_error (result,
                                         BAKER_ERRORS,
                                         BAKER_ERROR_NO_FLOUR,
                                         "Go to the supermarket");
      else
        g_simple_async_result_set_op_res_gpointer (result,
                                                   g_object_ref (cake),
                                                   g_object_unref);


      // In this example, we assume that baked_cb is called as a callback from
      // the mainloop, so it's safe to complete the operation synchronously here.
      // If, however, _baker_prepare_cake () might call its callback without
      // first returning to the mainloop — inadvisable, but some APIs do so —
      // we would need to use g_simple_async_result_complete_in_idle().
      g_simple_async_result_complete (result);
      g_object_unref (result);
    }

    void
    baker_bake_cake_async (Baker              *self,
                           guint               radius,
                           GAsyncReadyCallback callback,
                           gpointer            user_data)
    {
      GSimpleAsyncResult *simple;
      Cake               *cake;

      if (radius < 3)
        {
          g_simple_async_report_error_in_idle (G_OBJECT (self),
                                               callback,
                                               user_data,
                                               BAKER_ERRORS,
                                               BAKER_ERROR_TOO_SMALL,
                                               "%ucm radius cakes are silly",
                                               radius);
          return;
        }

      simple = g_simple_async_result_new (G_OBJECT (self),
                                          callback,
                                          user_data,
                                          baker_bake_cake_async);
      cake = _baker_get_cached_cake (self, radius);

      if (cake != NULL)
        {
          g_simple_async_result_set_op_res_gpointer (simple,
                                                     g_object_ref (cake),
                                                     g_object_unref);
          g_simple_async_result_complete_in_idle (simple);
          g_object_unref (simple);
          // Drop the reference returned by _baker_get_cached_cake();
          // the GSimpleAsyncResult has taken its own reference.
          g_object_unref (cake);
          return;
        }

      _baker_prepare_cake (self, radius, baked_cb, simple);
    }

    Cake *
    baker_bake_cake_finish (Baker        *self,
                            GAsyncResult *result,
                            GError      **error)
    {
      GSimpleAsyncResult *simple;
      Cake               *cake;

      g_return_val_if_fail (g_simple_async_result_is_valid (result,
                                                            G_OBJECT (self),
                                                            baker_bake_cake_async),
                            NULL);

      simple = (GSimpleAsyncResult *) result;

      if (g_simple_async_result_propagate_error (simple, error))
        return NULL;

      cake = CAKE (g_simple_async_result_get_op_res_gpointer (simple));
      return g_object_ref (cake);
    }
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, source_object: _T.Optional[GObject.Object], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object], source_tag: _T.Optional[object]) -> SimpleAsyncResult:
        """
        Creates a #GSimpleAsyncResult.

        The common convention is to create the #GSimpleAsyncResult in the
        function that starts the asynchronous operation and use that same
        function as the @source_tag.

        If your operation supports cancellation with #GCancellable (which it
        probably should) then you should provide the user's cancellable to
        g_simple_async_result_set_check_cancellable() immediately after
        this function returns.
        """
        ...


    @classmethod
    def new_error(cls, source_object: _T.Optional[GObject.Object], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object], domain: GLib.Quark, code: int, format: str, *args: object) -> SimpleAsyncResult:
        """
        Creates a new #GSimpleAsyncResult with a set error.
        """
        ...


    @classmethod
    def new_from_error(cls, source_object: _T.Optional[GObject.Object], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object], error: GLib.Error) -> SimpleAsyncResult:
        """
        Creates a #GSimpleAsyncResult from an error condition.
        """
        ...


    @classmethod
    def new_take_error(cls, source_object: _T.Optional[GObject.Object], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object], error: GLib.Error) -> SimpleAsyncResult:
        """
        Creates a #GSimpleAsyncResult from an error condition, and takes over the
        caller's ownership of @error, so the caller does not need to free it anymore.
        """
        ...

    def complete(self) -> object:
        """
        Completes an asynchronous I/O job immediately. Must be called in
        the thread where the asynchronous result was to be delivered, as it
        invokes the callback directly. If you are in a different thread use
        g_simple_async_result_complete_in_idle().

        Calling this function takes a reference to @simple for as long as
        is needed to complete the call.
        """
        ...

    def complete_in_idle(self) -> object:
        """
        Completes an asynchronous function in an idle handler in the
        [thread-default main context][g-main-context-push-thread-default]
        of the thread that @simple was initially created in
        (and re-pushes that context around the invocation of the callback).

        Calling this function takes a reference to @simple for as long as
        is needed to complete the call.
        """
        ...

    def get_op_res_gboolean(self) -> bool:
        """
        Gets the operation result boolean from within the asynchronous result.
        """
        ...

    def get_op_res_gpointer(self) -> object:
        """
        Gets a pointer result as returned by the asynchronous function.
        """
        ...

    def get_op_res_gssize(self) -> int:
        """
        Gets a gssize from the asynchronous result.
        """
        ...

    def get_source_tag(self) -> object:
        """
        Gets the source tag for the #GSimpleAsyncResult.
        """
        ...

    def propagate_error(self) -> bool:
        """
        Propagates an error from within the simple asynchronous result to
        a given destination.

        If the #GCancellable given to a prior call to
        g_simple_async_result_set_check_cancellable() is cancelled then this
        function will return %TRUE with @dest set appropriately.
        """
        ...

    def run_in_thread(self, func: SimpleAsyncThreadFunc, io_priority: int, cancellable: _T.Optional[Cancellable]) -> object:
        """
        Runs the asynchronous job in a separate thread and then calls
        g_simple_async_result_complete_in_idle() on @simple to return
        the result to the appropriate main loop.

        Calling this function takes a reference to @simple for as long as
        is needed to run the job and report its completion.
        """
        ...

    def set_check_cancellable(self, check_cancellable: _T.Optional[Cancellable]) -> object:
        """
        Sets a #GCancellable to check before dispatching results.

        This function has one very specific purpose: the provided cancellable
        is checked at the time of g_simple_async_result_propagate_error() If
        it is cancelled, these functions will return an "Operation was
        cancelled" error (%G_IO_ERROR_CANCELLED).

        Implementors of cancellable asynchronous functions should use this in
        order to provide a guarantee to their callers that cancelling an
        async operation will reliably result in an error being returned for
        that operation (even if a positive result for the operation has
        already been sent as an idle to the main context to be dispatched).

        The checking described above is done regardless of any call to the
        unrelated g_simple_async_result_set_handle_cancellation() function.
        """
        ...

    def set_error(self, domain: GLib.Quark, code: int, format: str, *args: object) -> object:
        """
        Sets an error within the asynchronous result without a #GError.
        """
        ...

    def set_error_va(self, domain: GLib.Quark, code: int, format: str, args: list) -> object:
        """
        Sets an error within the asynchronous result without a #GError.
        Unless writing a binding, see g_simple_async_result_set_error().
        """
        ...

    def set_from_error(self, error: GLib.Error) -> object:
        """
        Sets the result from a #GError.
        """
        ...

    def set_handle_cancellation(self, handle_cancellation: bool) -> object:
        """
        Sets whether to handle cancellation within the asynchronous operation.

        This function has nothing to do with
        g_simple_async_result_set_check_cancellable().  It only refers to the
        #GCancellable passed to g_simple_async_result_run_in_thread().
        """
        ...

    def set_op_res_gboolean(self, op_res: bool) -> object:
        """
        Sets the operation result to a boolean within the asynchronous result.
        """
        ...

    def set_op_res_gpointer(self, op_res: _T.Optional[object], destroy_op_res: GLib.DestroyNotify) -> object:
        """
        Sets the operation result within the asynchronous result to a pointer.
        """
        ...

    def set_op_res_gssize(self, op_res: int) -> object:
        """
        Sets the operation result within the asynchronous result to
        the given @op_res.
        """
        ...

    def take_error(self, error: GLib.Error) -> object:
        """
        Sets the result from @error, and takes over the caller's ownership
        of @error, so the caller does not need to free it any more.
        """
        ...


    ...

class SimpleIOStream(IOStream):
    """
    GSimpleIOStream creates a #GIOStream from an arbitrary #GInputStream and
    #GOutputStream. This allows any pair of input and output streams to be used
    with #GIOStream methods.

    This is useful when you obtained a #GInputStream and a #GOutputStream
    by other means, for instance creating them with platform specific methods as
    g_unix_input_stream_new() or g_win32_input_stream_new(), and you want
    to take advantage of the methods provided by #GIOStream.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, input_stream: InputStream, output_stream: OutputStream) -> IOStream:
        """
        Creates a new #GSimpleIOStream wrapping @input_stream and @output_stream.
        See also #GIOStream.
        """
        ...


    ...

class SimplePermission(Permission):
    """
    #GSimplePermission is a trivial implementation of #GPermission that
    represents a permission that is either always or never allowed.  The
    value is given at construction and doesn't change.

    Calling request or release will result in errors.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, allowed: bool) -> Permission:
        """
        Creates a new #GPermission instance that represents an action that is
        either always or never allowed.
        """
        ...


    ...

class SimpleProxyResolver(GObject.Object, ProxyResolver):
    """
    #GSimpleProxyResolver is a simple #GProxyResolver implementation
    that handles a single default proxy, multiple URI-scheme-specific
    proxies, and a list of hosts that proxies should not be used for.

    #GSimpleProxyResolver is never the default proxy resolver, but it
    can be used as the base class for another proxy resolver
    implementation, or it can be created and used manually, such as
    with g_socket_client_set_proxy_resolver().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def set_default_proxy(self, default_proxy: str) -> object:
        """
        Sets the default proxy on @resolver, to be used for any URIs that
        don't match #GSimpleProxyResolver:ignore-hosts or a proxy set
        via g_simple_proxy_resolver_set_uri_proxy().

        If @default_proxy starts with "socks://",
        #GSimpleProxyResolver will treat it as referring to all three of
        the socks5, socks4a, and socks4 proxy types.
        """
        ...

    def set_ignore_hosts(self, ignore_hosts: object) -> object:
        """
        Sets the list of ignored hosts.

        See #GSimpleProxyResolver:ignore-hosts for more details on how the
        @ignore_hosts argument is interpreted.
        """
        ...

    def set_uri_proxy(self, uri_scheme: str, proxy: str) -> object:
        """
        Adds a URI-scheme-specific proxy to @resolver; URIs whose scheme
        matches @uri_scheme (and which don't match
        #GSimpleProxyResolver:ignore-hosts) will be proxied via @proxy.

        As with #GSimpleProxyResolver:default-proxy, if @proxy starts with
        "socks://", #GSimpleProxyResolver will treat it
        as referring to all three of the socks5, socks4a, and socks4 proxy
        types.
        """
        ...


    ...

class Socket(GObject.Object, DatagramBased, Initable):
    """
    A #GSocket is a low-level networking primitive. It is a more or less
    direct mapping of the BSD socket API in a portable GObject based API.
    It supports both the UNIX socket implementations and winsock2 on Windows.

    #GSocket is the platform independent base upon which the higher level
    network primitives are based. Applications are not typically meant to
    use it directly, but rather through classes like #GSocketClient,
    #GSocketService and #GSocketConnection. However there may be cases where
    direct use of #GSocket is useful.

    #GSocket implements the #GInitable interface, so if it is manually constructed
    by e.g. g_object_new() you must call g_initable_init() and check the
    results before using the object. This is done automatically in
    g_socket_new() and g_socket_new_from_fd(), so these functions can return
    %NULL.

    Sockets operate in two general modes, blocking or non-blocking. When
    in blocking mode all operations (which don’t take an explicit blocking
    parameter) block until the requested operation
    is finished or there is an error. In non-blocking mode all calls that
    would block return immediately with a %G_IO_ERROR_WOULD_BLOCK error.
    To know when a call would successfully run you can call g_socket_condition_check(),
    or g_socket_condition_wait(). You can also use g_socket_create_source() and
    attach it to a #GMainContext to get callbacks when I/O is possible.
    Note that all sockets are always set to non blocking mode in the system, and
    blocking mode is emulated in GSocket.

    When working in non-blocking mode applications should always be able to
    handle getting a %G_IO_ERROR_WOULD_BLOCK error even when some other
    function said that I/O was possible. This can easily happen in case
    of a race condition in the application, but it can also happen for other
    reasons. For instance, on Windows a socket is always seen as writable
    until a write returns %G_IO_ERROR_WOULD_BLOCK.

    #GSockets can be either connection oriented or datagram based.
    For connection oriented types you must first establish a connection by
    either connecting to an address or accepting a connection from another
    address. For connectionless socket types the target/source address is
    specified or received in each I/O operation.

    All socket file descriptors are set to be close-on-exec.

    Note that creating a #GSocket causes the signal %SIGPIPE to be
    ignored for the remainder of the program. If you are writing a
    command-line utility that uses #GSocket, you may need to take into
    account the fact that your program will not automatically be killed
    if it tries to write to %stdout after it has been closed.

    Like most other APIs in GLib, #GSocket is not inherently thread safe. To use
    a #GSocket concurrently from multiple threads, you must implement your own
    locking.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, family: SocketFamily, type: SocketType, protocol: SocketProtocol) -> Socket:
        """
        Creates a new #GSocket with the defined family, type and protocol.
        If @protocol is 0 (%G_SOCKET_PROTOCOL_DEFAULT) the default protocol type
        for the family and type is used.

        The @protocol is a family and type specific int that specifies what
        kind of protocol to use. #GSocketProtocol lists several common ones.
        Many families only support one protocol, and use 0 for this, others
        support several and using 0 means to use the default protocol for
        the family and type.

        The protocol id is passed directly to the operating
        system, so you can use protocols not listed in #GSocketProtocol if you
        know the protocol number used for it.
        """
        ...


    @classmethod
    def new_from_fd(cls, fd: int) -> Socket:
        """
        Creates a new #GSocket from a native file descriptor
        or winsock SOCKET handle.

        This reads all the settings from the file descriptor so that
        all properties should work. Note that the file descriptor
        will be set to non-blocking mode, independent on the blocking
        mode of the #GSocket.

        On success, the returned #GSocket takes ownership of @fd. On failure, the
        caller must close @fd themselves.

        Since GLib 2.46, it is no longer a fatal error to call this on a non-socket
        descriptor.  Instead, a GError will be set with code %G_IO_ERROR_FAILED
        """
        ...

    def accept(self, cancellable: _T.Optional[Cancellable]) -> Socket:
        """
        Accept incoming connections on a connection-based socket. This removes
        the first outstanding connection request from the listening socket and
        creates a #GSocket object for it.

        The @socket must be bound to a local address with g_socket_bind() and
        must be listening for incoming connections (g_socket_listen()).

        If there are no outstanding connections then the operation will block
        or return %G_IO_ERROR_WOULD_BLOCK if non-blocking I/O is enabled.
        To be notified of an incoming connection, wait for the %G_IO_IN condition.
        """
        ...

    def bind(self, address: SocketAddress, allow_reuse: bool) -> bool:
        """
        When a socket is created it is attached to an address family, but it
        doesn't have an address in this family. g_socket_bind() assigns the
        address (sometimes called name) of the socket.

        It is generally required to bind to a local address before you can
        receive connections. (See g_socket_listen() and g_socket_accept() ).
        In certain situations, you may also want to bind a socket that will be
        used to initiate connections, though this is not normally required.

        If @socket is a TCP socket, then @allow_reuse controls the setting
        of the `SO_REUSEADDR` socket option; normally it should be %TRUE for
        server sockets (sockets that you will eventually call
        g_socket_accept() on), and %FALSE for client sockets. (Failing to
        set this flag on a server socket may cause g_socket_bind() to return
        %G_IO_ERROR_ADDRESS_IN_USE if the server program is stopped and then
        immediately restarted.)

        If @socket is a UDP socket, then @allow_reuse determines whether or
        not other UDP sockets can be bound to the same address at the same
        time. In particular, you can have several UDP sockets bound to the
        same address, and they will all receive all of the multicast and
        broadcast packets sent to that address. (The behavior of unicast
        UDP packets to an address with multiple listeners is not defined.)
        """
        ...

    def check_connect_result(self) -> bool:
        """
        Checks and resets the pending connect error for the socket.
        This is used to check for errors when g_socket_connect() is
        used in non-blocking mode.
        """
        ...

    def close(self) -> bool:
        """
        Closes the socket, shutting down any active connection.

        Closing a socket does not wait for all outstanding I/O operations
        to finish, so the caller should not rely on them to be guaranteed
        to complete even if the close returns with no error.

        Once the socket is closed, all other operations will return
        %G_IO_ERROR_CLOSED. Closing a socket multiple times will not
        return an error.

        Sockets will be automatically closed when the last reference
        is dropped, but you might want to call this function to make sure
        resources are released as early as possible.

        Beware that due to the way that TCP works, it is possible for
        recently-sent data to be lost if either you close a socket while the
        %G_IO_IN condition is set, or else if the remote connection tries to
        send something to you after you close the socket but before it has
        finished reading all of the data you sent. There is no easy generic
        way to avoid this problem; the easiest fix is to design the network
        protocol such that the client will never send data "out of turn".
        Another solution is for the server to half-close the connection by
        calling g_socket_shutdown() with only the @shutdown_write flag set,
        and then wait for the client to notice this and close its side of the
        connection, after which the server can safely call g_socket_close().
        (This is what #GTcpConnection does if you call
        g_tcp_connection_set_graceful_disconnect(). But of course, this
        only works if the client will close its connection after the server
        does.)
        """
        ...

    def condition_check(self, condition: GLib.IOCondition) -> GLib.IOCondition:
        """
        Checks on the readiness of @socket to perform operations.
        The operations specified in @condition are checked for and masked
        against the currently-satisfied conditions on @socket. The result
        is returned.

        Note that on Windows, it is possible for an operation to return
        %G_IO_ERROR_WOULD_BLOCK even immediately after
        g_socket_condition_check() has claimed that the socket is ready for
        writing. Rather than calling g_socket_condition_check() and then
        writing to the socket if it succeeds, it is generally better to
        simply try writing to the socket right away, and try again later if
        the initial attempt returns %G_IO_ERROR_WOULD_BLOCK.

        It is meaningless to specify %G_IO_ERR or %G_IO_HUP in condition;
        these conditions will always be set in the output if they are true.

        This call never blocks.
        """
        ...

    def condition_timed_wait(self, condition: GLib.IOCondition, timeout_us: gint64, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Waits for up to @timeout_us microseconds for @condition to become true
        on @socket. If the condition is met, %TRUE is returned.

        If @cancellable is cancelled before the condition is met, or if
        @timeout_us (or the socket's #GSocket:timeout) is reached before the
        condition is met, then %FALSE is returned and @error, if non-%NULL,
        is set to the appropriate value (%G_IO_ERROR_CANCELLED or
        %G_IO_ERROR_TIMED_OUT).

        If you don't want a timeout, use g_socket_condition_wait().
        (Alternatively, you can pass -1 for @timeout_us.)

        Note that although @timeout_us is in microseconds for consistency with
        other GLib APIs, this function actually only has millisecond
        resolution, and the behavior is undefined if @timeout_us is not an
        exact number of milliseconds.
        """
        ...

    def condition_wait(self, condition: GLib.IOCondition, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Waits for @condition to become true on @socket. When the condition
        is met, %TRUE is returned.

        If @cancellable is cancelled before the condition is met, or if the
        socket has a timeout set and it is reached before the condition is
        met, then %FALSE is returned and @error, if non-%NULL, is set to
        the appropriate value (%G_IO_ERROR_CANCELLED or
        %G_IO_ERROR_TIMED_OUT).

        See also g_socket_condition_timed_wait().
        """
        ...

    def connect(self, address: SocketAddress, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Connect the socket to the specified remote address.

        For connection oriented socket this generally means we attempt to make
        a connection to the @address. For a connection-less socket it sets
        the default address for g_socket_send() and discards all incoming datagrams
        from other sources.

        Generally connection oriented sockets can only connect once, but
        connection-less sockets can connect multiple times to change the
        default address.

        If the connect call needs to do network I/O it will block, unless
        non-blocking I/O is enabled. Then %G_IO_ERROR_PENDING is returned
        and the user can be notified of the connection finishing by waiting
        for the G_IO_OUT condition. The result of the connection must then be
        checked with g_socket_check_connect_result().
        """
        ...

    def connection_factory_create_connection(self) -> SocketConnection:
        """
        Creates a #GSocketConnection subclass of the right type for
        @socket.
        """
        ...

    def create_source(self, condition: GLib.IOCondition, cancellable: _T.Optional[Cancellable]) -> GLib.Source:
        """
        Creates a #GSource that can be attached to a %GMainContext to monitor
        for the availability of the specified @condition on the socket. The #GSource
        keeps a reference to the @socket.

        The callback on the source is of the #GSocketSourceFunc type.

        It is meaningless to specify %G_IO_ERR or %G_IO_HUP in @condition;
        these conditions will always be reported output if they are true.

        @cancellable if not %NULL can be used to cancel the source, which will
        cause the source to trigger, reporting the current condition (which
        is likely 0 unless cancellation happened at the same time as a
        condition change). You can check for this in the callback using
        g_cancellable_is_cancelled().

        If @socket has a timeout set, and it is reached before @condition
        occurs, the source will then trigger anyway, reporting %G_IO_IN or
        %G_IO_OUT depending on @condition. However, @socket will have been
        marked as having had a timeout, and so the next #GSocket I/O method
        you call will then fail with a %G_IO_ERROR_TIMED_OUT.
        """
        ...

    def get_available_bytes(self) -> int:
        """
        Get the amount of data pending in the OS input buffer, without blocking.

        If @socket is a UDP or SCTP socket, this will return the size of
        just the next packet, even if additional packets are buffered after
        that one.

        Note that on Windows, this function is rather inefficient in the
        UDP case, and so if you know any plausible upper bound on the size
        of the incoming packet, it is better to just do a
        g_socket_receive() with a buffer of that size, rather than calling
        g_socket_get_available_bytes() first and then doing a receive of
        exactly the right size.
        """
        ...

    def get_blocking(self) -> bool:
        """
        Gets the blocking mode of the socket. For details on blocking I/O,
        see g_socket_set_blocking().
        """
        ...

    def get_broadcast(self) -> bool:
        """
        Gets the broadcast setting on @socket; if %TRUE,
        it is possible to send packets to broadcast
        addresses.
        """
        ...

    def get_credentials(self) -> Credentials:
        """
        Returns the credentials of the foreign process connected to this
        socket, if any (e.g. it is only supported for %G_SOCKET_FAMILY_UNIX
        sockets).

        If this operation isn't supported on the OS, the method fails with
        the %G_IO_ERROR_NOT_SUPPORTED error. On Linux this is implemented
        by reading the %SO_PEERCRED option on the underlying socket.

        This method can be expected to be available on the following platforms:

        - Linux since GLib 2.26
        - OpenBSD since GLib 2.30
        - Solaris, Illumos and OpenSolaris since GLib 2.40
        - NetBSD since GLib 2.42
        - macOS, tvOS, iOS since GLib 2.66

        Other ways to obtain credentials from a foreign peer includes the
        #GUnixCredentialsMessage type and
        g_unix_connection_send_credentials() /
        g_unix_connection_receive_credentials() functions.
        """
        ...

    def get_family(self) -> SocketFamily:
        """
        Gets the socket family of the socket.
        """
        ...

    def get_fd(self) -> int:
        """
        Returns the underlying OS socket object. On unix this
        is a socket file descriptor, and on Windows this is
        a Winsock2 SOCKET handle. This may be useful for
        doing platform specific or otherwise unusual operations
        on the socket.
        """
        ...

    def get_keepalive(self) -> bool:
        """
        Gets the keepalive mode of the socket. For details on this,
        see g_socket_set_keepalive().
        """
        ...

    def get_listen_backlog(self) -> int:
        """
        Gets the listen backlog setting of the socket. For details on this,
        see g_socket_set_listen_backlog().
        """
        ...

    def get_local_address(self) -> SocketAddress:
        """
        Try to get the local address of a bound socket. This is only
        useful if the socket has been bound to a local address,
        either explicitly or implicitly when connecting.
        """
        ...

    def get_multicast_loopback(self) -> bool:
        """
        Gets the multicast loopback setting on @socket; if %TRUE (the
        default), outgoing multicast packets will be looped back to
        multicast listeners on the same host.
        """
        ...

    def get_multicast_ttl(self) -> int:
        """
        Gets the multicast time-to-live setting on @socket; see
        g_socket_set_multicast_ttl() for more details.
        """
        ...

    def get_option(self, level: int, optname: int, value: int) -> bool:
        """
        Gets the value of an integer-valued option on @socket, as with
        getsockopt(). (If you need to fetch a  non-integer-valued option,
        you will need to call getsockopt() directly.)

        The [<gio/gnetworking.h>][gio-gnetworking.h]
        header pulls in system headers that will define most of the
        standard/portable socket options. For unusual socket protocols or
        platform-dependent options, you may need to include additional
        headers.

        Note that even for socket options that are a single byte in size,
        @value is still a pointer to a #gint variable, not a #guchar;
        g_socket_get_option() will handle the conversion internally.
        """
        ...

    def get_protocol(self) -> SocketProtocol:
        """
        Gets the socket protocol id the socket was created with.
        In case the protocol is unknown, -1 is returned.
        """
        ...

    def get_remote_address(self) -> SocketAddress:
        """
        Try to get the remote address of a connected socket. This is only
        useful for connection oriented sockets that have been connected.
        """
        ...

    def get_socket_type(self) -> SocketType:
        """
        Gets the socket type of the socket.
        """
        ...

    def get_timeout(self) -> int:
        """
        Gets the timeout setting of the socket. For details on this, see
        g_socket_set_timeout().
        """
        ...

    def get_ttl(self) -> int:
        """
        Gets the unicast time-to-live setting on @socket; see
        g_socket_set_ttl() for more details.
        """
        ...

    def is_closed(self) -> bool:
        """
        Checks whether a socket is closed.
        """
        ...

    def is_connected(self) -> bool:
        """
        Check whether the socket is connected. This is only useful for
        connection-oriented sockets.

        If using g_socket_shutdown(), this function will return %TRUE until the
        socket has been shut down for reading and writing. If you do a non-blocking
        connect, this function will not return %TRUE until after you call
        g_socket_check_connect_result().
        """
        ...

    def join_multicast_group(self, group: InetAddress, source_specific: bool, iface: _T.Optional[str]) -> bool:
        """
        Registers @socket to receive multicast messages sent to @group.
        @socket must be a %G_SOCKET_TYPE_DATAGRAM socket, and must have
        been bound to an appropriate interface and port with
        g_socket_bind().

        If @iface is %NULL, the system will automatically pick an interface
        to bind to based on @group.

        If @source_specific is %TRUE, source-specific multicast as defined
        in RFC 4604 is used. Note that on older platforms this may fail
        with a %G_IO_ERROR_NOT_SUPPORTED error.

        To bind to a given source-specific multicast address, use
        g_socket_join_multicast_group_ssm() instead.
        """
        ...

    def join_multicast_group_ssm(self, group: InetAddress, source_specific: _T.Optional[InetAddress], iface: _T.Optional[str]) -> bool:
        """
        Registers @socket to receive multicast messages sent to @group.
        @socket must be a %G_SOCKET_TYPE_DATAGRAM socket, and must have
        been bound to an appropriate interface and port with
        g_socket_bind().

        If @iface is %NULL, the system will automatically pick an interface
        to bind to based on @group.

        If @source_specific is not %NULL, use source-specific multicast as
        defined in RFC 4604. Note that on older platforms this may fail
        with a %G_IO_ERROR_NOT_SUPPORTED error.

        Note that this function can be called multiple times for the same
        @group with different @source_specific in order to receive multicast
        packets from more than one source.
        """
        ...

    def leave_multicast_group(self, group: InetAddress, source_specific: bool, iface: _T.Optional[str]) -> bool:
        """
        Removes @socket from the multicast group defined by @group, @iface,
        and @source_specific (which must all have the same values they had
        when you joined the group).

        @socket remains bound to its address and port, and can still receive
        unicast messages after calling this.

        To unbind to a given source-specific multicast address, use
        g_socket_leave_multicast_group_ssm() instead.
        """
        ...

    def leave_multicast_group_ssm(self, group: InetAddress, source_specific: _T.Optional[InetAddress], iface: _T.Optional[str]) -> bool:
        """
        Removes @socket from the multicast group defined by @group, @iface,
        and @source_specific (which must all have the same values they had
        when you joined the group).

        @socket remains bound to its address and port, and can still receive
        unicast messages after calling this.
        """
        ...

    def listen(self) -> bool:
        """
        Marks the socket as a server socket, i.e. a socket that is used
        to accept incoming requests using g_socket_accept().

        Before calling this the socket must be bound to a local address using
        g_socket_bind().

        To set the maximum amount of outstanding clients, use
        g_socket_set_listen_backlog().
        """
        ...

    def receive(self, buffer: object, size: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Receive data (up to @size bytes) from a socket. This is mainly used by
        connection-oriented sockets; it is identical to g_socket_receive_from()
        with @address set to %NULL.

        For %G_SOCKET_TYPE_DATAGRAM and %G_SOCKET_TYPE_SEQPACKET sockets,
        g_socket_receive() will always read either 0 or 1 complete messages from
        the socket. If the received message is too large to fit in @buffer, then
        the data beyond @size bytes will be discarded, without any explicit
        indication that this has occurred.

        For %G_SOCKET_TYPE_STREAM sockets, g_socket_receive() can return any
        number of bytes, up to @size. If more than @size bytes have been
        received, the additional data will be returned in future calls to
        g_socket_receive().

        If the socket is in blocking mode the call will block until there
        is some data to receive, the connection is closed, or there is an
        error. If there is no data available and the socket is in
        non-blocking mode, a %G_IO_ERROR_WOULD_BLOCK error will be
        returned. To be notified when data is available, wait for the
        %G_IO_IN condition.

        On error -1 is returned and @error is set accordingly.
        """
        ...

    def receive_from(self, address: SocketAddress, buffer: object, size: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Receive data (up to @size bytes) from a socket.

        If @address is non-%NULL then @address will be set equal to the
        source address of the received packet.
        @address is owned by the caller.

        See g_socket_receive() for additional information.
        """
        ...

    def receive_message(self, address: SocketAddress, vectors: object, num_vectors: int, messages: _T.Optional[object], num_messages: int, flags: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Receive data from a socket.  For receiving multiple messages, see
        g_socket_receive_messages(); for easier use, see
        g_socket_receive() and g_socket_receive_from().

        If @address is non-%NULL then @address will be set equal to the
        source address of the received packet.
        @address is owned by the caller.

        @vector must point to an array of #GInputVector structs and
        @num_vectors must be the length of this array.  These structs
        describe the buffers that received data will be scattered into.
        If @num_vectors is -1, then @vectors is assumed to be terminated
        by a #GInputVector with a %NULL buffer pointer.

        As a special case, if @num_vectors is 0 (in which case, @vectors
        may of course be %NULL), then a single byte is received and
        discarded. This is to facilitate the common practice of sending a
        single '\0' byte for the purposes of transferring ancillary data.

        @messages, if non-%NULL, will be set to point to a newly-allocated
        array of #GSocketControlMessage instances or %NULL if no such
        messages was received. These correspond to the control messages
        received from the kernel, one #GSocketControlMessage per message
        from the kernel. This array is %NULL-terminated and must be freed
        by the caller using g_free() after calling g_object_unref() on each
        element. If @messages is %NULL, any control messages received will
        be discarded.

        @num_messages, if non-%NULL, will be set to the number of control
        messages received.

        If both @messages and @num_messages are non-%NULL, then
        @num_messages gives the number of #GSocketControlMessage instances
        in @messages (ie: not including the %NULL terminator).

        @flags is an in/out parameter. The commonly available arguments
        for this are available in the #GSocketMsgFlags enum, but the
        values there are the same as the system values, and the flags
        are passed in as-is, so you can pass in system-specific flags too
        (and g_socket_receive_message() may pass system-specific flags out).
        Flags passed in to the parameter affect the receive operation; flags returned
        out of it are relevant to the specific returned message.

        As with g_socket_receive(), data may be discarded if @socket is
        %G_SOCKET_TYPE_DATAGRAM or %G_SOCKET_TYPE_SEQPACKET and you do not
        provide enough buffer space to read a complete message. You can pass
        %G_SOCKET_MSG_PEEK in @flags to peek at the current message without
        removing it from the receive queue, but there is no portable way to find
        out the length of the message other than by reading it into a
        sufficiently-large buffer.

        If the socket is in blocking mode the call will block until there
        is some data to receive, the connection is closed, or there is an
        error. If there is no data available and the socket is in
        non-blocking mode, a %G_IO_ERROR_WOULD_BLOCK error will be
        returned. To be notified when data is available, wait for the
        %G_IO_IN condition.

        On error -1 is returned and @error is set accordingly.
        """
        ...

    def receive_messages(self, messages: object, num_messages: int, flags: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Receive multiple data messages from @socket in one go.  This is the most
        complicated and fully-featured version of this call. For easier use, see
        g_socket_receive(), g_socket_receive_from(), and g_socket_receive_message().

        @messages must point to an array of #GInputMessage structs and
        @num_messages must be the length of this array. Each #GInputMessage
        contains a pointer to an array of #GInputVector structs describing the
        buffers that the data received in each message will be written to. Using
        multiple #GInputVectors is more memory-efficient than manually copying data
        out of a single buffer to multiple sources, and more system-call-efficient
        than making multiple calls to g_socket_receive(), such as in scenarios where
        a lot of data packets need to be received (e.g. high-bandwidth video
        streaming over RTP/UDP).

        @flags modify how all messages are received. The commonly available
        arguments for this are available in the #GSocketMsgFlags enum, but the
        values there are the same as the system values, and the flags
        are passed in as-is, so you can pass in system-specific flags too. These
        flags affect the overall receive operation. Flags affecting individual
        messages are returned in #GInputMessage.flags.

        The other members of #GInputMessage are treated as described in its
        documentation.

        If #GSocket:blocking is %TRUE the call will block until @num_messages have
        been received, or the end of the stream is reached.

        If #GSocket:blocking is %FALSE the call will return up to @num_messages
        without blocking, or %G_IO_ERROR_WOULD_BLOCK if no messages are queued in the
        operating system to be received.

        In blocking mode, if #GSocket:timeout is positive and is reached before any
        messages are received, %G_IO_ERROR_TIMED_OUT is returned, otherwise up to
        @num_messages are returned. (Note: This is effectively the
        behaviour of `MSG_WAITFORONE` with recvmmsg().)

        To be notified when messages are available, wait for the
        %G_IO_IN condition. Note though that you may still receive
        %G_IO_ERROR_WOULD_BLOCK from g_socket_receive_messages() even if you were
        previously notified of a %G_IO_IN condition.

        If the remote peer closes the connection, any messages queued in the
        operating system will be returned, and subsequent calls to
        g_socket_receive_messages() will return 0 (with no error set).

        On error -1 is returned and @error is set accordingly. An error will only
        be returned if zero messages could be received; otherwise the number of
        messages successfully received before the error will be returned.
        """
        ...

    def receive_with_blocking(self, buffer: object, size: int, blocking: bool, cancellable: _T.Optional[Cancellable]) -> int:
        """
        This behaves exactly the same as g_socket_receive(), except that
        the choice of blocking or non-blocking behavior is determined by
        the @blocking argument rather than by @socket's properties.
        """
        ...

    def send(self, buffer: object, size: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Tries to send @size bytes from @buffer on the socket. This is
        mainly used by connection-oriented sockets; it is identical to
        g_socket_send_to() with @address set to %NULL.

        If the socket is in blocking mode the call will block until there is
        space for the data in the socket queue. If there is no space available
        and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
        will be returned. To be notified when space is available, wait for the
        %G_IO_OUT condition. Note though that you may still receive
        %G_IO_ERROR_WOULD_BLOCK from g_socket_send() even if you were previously
        notified of a %G_IO_OUT condition. (On Windows in particular, this is
        very common due to the way the underlying APIs work.)

        On error -1 is returned and @error is set accordingly.
        """
        ...

    def send_message(self, address: _T.Optional[SocketAddress], vectors: object, num_vectors: int, messages: _T.Optional[object], num_messages: int, flags: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Send data to @address on @socket.  For sending multiple messages see
        g_socket_send_messages(); for easier use, see
        g_socket_send() and g_socket_send_to().

        If @address is %NULL then the message is sent to the default receiver
        (set by g_socket_connect()).

        @vectors must point to an array of #GOutputVector structs and
        @num_vectors must be the length of this array. (If @num_vectors is -1,
        then @vectors is assumed to be terminated by a #GOutputVector with a
        %NULL buffer pointer.) The #GOutputVector structs describe the buffers
        that the sent data will be gathered from. Using multiple
        #GOutputVectors is more memory-efficient than manually copying
        data from multiple sources into a single buffer, and more
        network-efficient than making multiple calls to g_socket_send().

        @messages, if non-%NULL, is taken to point to an array of @num_messages
        #GSocketControlMessage instances. These correspond to the control
        messages to be sent on the socket.
        If @num_messages is -1 then @messages is treated as a %NULL-terminated
        array.

        @flags modify how the message is sent. The commonly available arguments
        for this are available in the #GSocketMsgFlags enum, but the
        values there are the same as the system values, and the flags
        are passed in as-is, so you can pass in system-specific flags too.

        If the socket is in blocking mode the call will block until there is
        space for the data in the socket queue. If there is no space available
        and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
        will be returned. To be notified when space is available, wait for the
        %G_IO_OUT condition. Note though that you may still receive
        %G_IO_ERROR_WOULD_BLOCK from g_socket_send() even if you were previously
        notified of a %G_IO_OUT condition. (On Windows in particular, this is
        very common due to the way the underlying APIs work.)

        The sum of the sizes of each #GOutputVector in vectors must not be
        greater than %G_MAXSSIZE. If the message can be larger than this,
        then it is mandatory to use the g_socket_send_message_with_timeout()
        function.

        On error -1 is returned and @error is set accordingly.
        """
        ...

    def send_message_with_timeout(self, address: _T.Optional[SocketAddress], vectors: object, num_vectors: int, messages: _T.Optional[object], num_messages: int, flags: int, timeout_us: gint64, bytes_written: int, cancellable: _T.Optional[Cancellable]) -> PollableReturn:
        """
        This behaves exactly the same as g_socket_send_message(), except that
        the choice of timeout behavior is determined by the @timeout_us argument
        rather than by @socket's properties.

        On error %G_POLLABLE_RETURN_FAILED is returned and @error is set accordingly, or
        if the socket is currently not writable %G_POLLABLE_RETURN_WOULD_BLOCK is
        returned. @bytes_written will contain 0 in both cases.
        """
        ...

    def send_messages(self, messages: object, num_messages: int, flags: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Send multiple data messages from @socket in one go.  This is the most
        complicated and fully-featured version of this call. For easier use, see
        g_socket_send(), g_socket_send_to(), and g_socket_send_message().

        @messages must point to an array of #GOutputMessage structs and
        @num_messages must be the length of this array. Each #GOutputMessage
        contains an address to send the data to, and a pointer to an array of
        #GOutputVector structs to describe the buffers that the data to be sent
        for each message will be gathered from. Using multiple #GOutputVectors is
        more memory-efficient than manually copying data from multiple sources
        into a single buffer, and more network-efficient than making multiple
        calls to g_socket_send(). Sending multiple messages in one go avoids the
        overhead of making a lot of syscalls in scenarios where a lot of data
        packets need to be sent (e.g. high-bandwidth video streaming over RTP/UDP),
        or where the same data needs to be sent to multiple recipients.

        @flags modify how the message is sent. The commonly available arguments
        for this are available in the #GSocketMsgFlags enum, but the
        values there are the same as the system values, and the flags
        are passed in as-is, so you can pass in system-specific flags too.

        If the socket is in blocking mode the call will block until there is
        space for all the data in the socket queue. If there is no space available
        and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
        will be returned if no data was written at all, otherwise the number of
        messages sent will be returned. To be notified when space is available,
        wait for the %G_IO_OUT condition. Note though that you may still receive
        %G_IO_ERROR_WOULD_BLOCK from g_socket_send() even if you were previously
        notified of a %G_IO_OUT condition. (On Windows in particular, this is
        very common due to the way the underlying APIs work.)

        On error -1 is returned and @error is set accordingly. An error will only
        be returned if zero messages could be sent; otherwise the number of messages
        successfully sent before the error will be returned.
        """
        ...

    def send_to(self, address: _T.Optional[SocketAddress], buffer: object, size: int, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Tries to send @size bytes from @buffer to @address. If @address is
        %NULL then the message is sent to the default receiver (set by
        g_socket_connect()).

        See g_socket_send() for additional information.
        """
        ...

    def send_with_blocking(self, buffer: object, size: int, blocking: bool, cancellable: _T.Optional[Cancellable]) -> int:
        """
        This behaves exactly the same as g_socket_send(), except that
        the choice of blocking or non-blocking behavior is determined by
        the @blocking argument rather than by @socket's properties.
        """
        ...

    def set_blocking(self, blocking: bool) -> object:
        """
        Sets the blocking mode of the socket. In blocking mode
        all operations (which don’t take an explicit blocking parameter) block until
        they succeed or there is an error. In
        non-blocking mode all functions return results immediately or
        with a %G_IO_ERROR_WOULD_BLOCK error.

        All sockets are created in blocking mode. However, note that the
        platform level socket is always non-blocking, and blocking mode
        is a GSocket level feature.
        """
        ...

    def set_broadcast(self, broadcast: bool) -> object:
        """
        Sets whether @socket should allow sending to broadcast addresses.
        This is %FALSE by default.
        """
        ...

    def set_keepalive(self, keepalive: bool) -> object:
        """
        Sets or unsets the %SO_KEEPALIVE flag on the underlying socket. When
        this flag is set on a socket, the system will attempt to verify that the
        remote socket endpoint is still present if a sufficiently long period of
        time passes with no data being exchanged. If the system is unable to
        verify the presence of the remote endpoint, it will automatically close
        the connection.

        This option is only functional on certain kinds of sockets. (Notably,
        %G_SOCKET_PROTOCOL_TCP sockets.)

        The exact time between pings is system- and protocol-dependent, but will
        normally be at least two hours. Most commonly, you would set this flag
        on a server socket if you want to allow clients to remain idle for long
        periods of time, but also want to ensure that connections are eventually
        garbage-collected if clients crash or become unreachable.
        """
        ...

    def set_listen_backlog(self, backlog: int) -> object:
        """
        Sets the maximum number of outstanding connections allowed
        when listening on this socket. If more clients than this are
        connecting to the socket and the application is not handling them
        on time then the new connections will be refused.

        Note that this must be called before g_socket_listen() and has no
        effect if called after that.
        """
        ...

    def set_multicast_loopback(self, loopback: bool) -> object:
        """
        Sets whether outgoing multicast packets will be received by sockets
        listening on that multicast address on the same host. This is %TRUE
        by default.
        """
        ...

    def set_multicast_ttl(self, ttl: int) -> object:
        """
        Sets the time-to-live for outgoing multicast datagrams on @socket.
        By default, this is 1, meaning that multicast packets will not leave
        the local network.
        """
        ...

    def set_option(self, level: int, optname: int, value: int) -> bool:
        """
        Sets the value of an integer-valued option on @socket, as with
        setsockopt(). (If you need to set a non-integer-valued option,
        you will need to call setsockopt() directly.)

        The [<gio/gnetworking.h>][gio-gnetworking.h]
        header pulls in system headers that will define most of the
        standard/portable socket options. For unusual socket protocols or
        platform-dependent options, you may need to include additional
        headers.
        """
        ...

    def set_timeout(self, timeout: int) -> object:
        """
        Sets the time in seconds after which I/O operations on @socket will
        time out if they have not yet completed.

        On a blocking socket, this means that any blocking #GSocket
        operation will time out after @timeout seconds of inactivity,
        returning %G_IO_ERROR_TIMED_OUT.

        On a non-blocking socket, calls to g_socket_condition_wait() will
        also fail with %G_IO_ERROR_TIMED_OUT after the given time. Sources
        created with g_socket_create_source() will trigger after
        @timeout seconds of inactivity, with the requested condition
        set, at which point calling g_socket_receive(), g_socket_send(),
        g_socket_check_connect_result(), etc, will fail with
        %G_IO_ERROR_TIMED_OUT.

        If @timeout is 0 (the default), operations will never time out
        on their own.

        Note that if an I/O operation is interrupted by a signal, this may
        cause the timeout to be reset.
        """
        ...

    def set_ttl(self, ttl: int) -> object:
        """
        Sets the time-to-live for outgoing unicast packets on @socket.
        By default the platform-specific default value is used.
        """
        ...

    def shutdown(self, shutdown_read: bool, shutdown_write: bool) -> bool:
        """
        Shut down part or all of a full-duplex connection.

        If @shutdown_read is %TRUE then the receiving side of the connection
        is shut down, and further reading is disallowed.

        If @shutdown_write is %TRUE then the sending side of the connection
        is shut down, and further writing is disallowed.

        It is allowed for both @shutdown_read and @shutdown_write to be %TRUE.

        One example where it is useful to shut down only one side of a connection is
        graceful disconnect for TCP connections where you close the sending side,
        then wait for the other side to close the connection, thus ensuring that the
        other side saw all sent data.
        """
        ...

    def speaks_ipv4(self) -> bool:
        """
        Checks if a socket is capable of speaking IPv4.

        IPv4 sockets are capable of speaking IPv4.  On some operating systems
        and under some combinations of circumstances IPv6 sockets are also
        capable of speaking IPv4.  See RFC 3493 section 3.7 for more
        information.

        No other types of sockets are currently considered as being capable
        of speaking IPv4.
        """
        ...


    ...

class SocketAddress(GObject.Object, SocketConnectable):
    """
    #GSocketAddress is the equivalent of struct sockaddr in the BSD
    sockets API. This is an abstract class; use #GInetSocketAddress
    for internet sockets, or #GUnixSocketAddress for UNIX domain sockets.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_from_native(cls, native: object, len: int) -> SocketAddress:
        """
        Creates a #GSocketAddress subclass corresponding to the native
        struct sockaddr @native.
        """
        ...

    def get_family(self) -> SocketFamily:
        """
        Gets the socket family type of @address.
        """
        ...

    def get_native_size(self) -> int:
        """
        Gets the size of @address's native struct sockaddr.
        You can use this to allocate memory to pass to
        g_socket_address_to_native().
        """
        ...

    def to_native(self, dest: _T.Optional[object], destlen: int) -> bool:
        """
        Converts a #GSocketAddress to a native struct sockaddr, which can
        be passed to low-level functions like connect() or bind().

        If not enough space is available, a %G_IO_ERROR_NO_SPACE error
        is returned. If the address type is not known on the system
        then a %G_IO_ERROR_NOT_SUPPORTED error is returned.
        """
        ...


    ...

class SocketAddressEnumerator(GObject.Object):
    """
    #GSocketAddressEnumerator is an enumerator type for #GSocketAddress
    instances. It is returned by enumeration functions such as
    g_socket_connectable_enumerate(), which returns a #GSocketAddressEnumerator
    to list each #GSocketAddress which could be used to connect to that
    #GSocketConnectable.

    Enumeration is typically a blocking operation, so the asynchronous methods
    g_socket_address_enumerator_next_async() and
    g_socket_address_enumerator_next_finish() should be used where possible.

    Each #GSocketAddressEnumerator can only be enumerated once. Once
    g_socket_address_enumerator_next() has returned %NULL, further
    enumeration with that #GSocketAddressEnumerator is not possible, and it can
    be unreffed.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def next(self, cancellable: _T.Optional[Cancellable]) -> SocketAddress:
        """
        Retrieves the next #GSocketAddress from @enumerator. Note that this
        may block for some amount of time. (Eg, a #GNetworkAddress may need
        to do a DNS lookup before it can return an address.) Use
        g_socket_address_enumerator_next_async() if you need to avoid
        blocking.

        If @enumerator is expected to yield addresses, but for some reason
        is unable to (eg, because of a DNS error), then the first call to
        g_socket_address_enumerator_next() will return an appropriate error
        in *@error. However, if the first call to
        g_socket_address_enumerator_next() succeeds, then any further
        internal errors (other than @cancellable being triggered) will be
        ignored.
        """
        ...

    def next_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously retrieves the next #GSocketAddress from @enumerator
        and then calls @callback, which must call
        g_socket_address_enumerator_next_finish() to get the result.

        It is an error to call this multiple times before the previous callback has finished.
        """
        ...

    def next_finish(self, result: AsyncResult) -> SocketAddress:
        """
        Retrieves the result of a completed call to
        g_socket_address_enumerator_next_async(). See
        g_socket_address_enumerator_next() for more information about
        error handling.
        """
        ...


    ...

class SocketClient(GObject.Object):
    """
    #GSocketClient is a lightweight high-level utility class for connecting to
    a network host using a connection oriented socket type.

    You create a #GSocketClient object, set any options you want, and then
    call a sync or async connect operation, which returns a #GSocketConnection
    subclass on success.

    The type of the #GSocketConnection object returned depends on the type of
    the underlying socket that is in use. For instance, for a TCP/IP connection
    it will be a #GTcpConnection.

    As #GSocketClient is a lightweight object, you don't need to cache it. You
    can just create a new one any time you need one.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> SocketClient:
        """
        Creates a new #GSocketClient with the default options.
        """
        ...

    def add_application_proxy(self, protocol: str) -> object:
        """
        Enable proxy protocols to be handled by the application. When the
        indicated proxy protocol is returned by the #GProxyResolver,
        #GSocketClient will consider this protocol as supported but will
        not try to find a #GProxy instance to handle handshaking. The
        application must check for this case by calling
        g_socket_connection_get_remote_address() on the returned
        #GSocketConnection, and seeing if it's a #GProxyAddress of the
        appropriate type, to determine whether or not it needs to handle
        the proxy handshaking itself.

        This should be used for proxy protocols that are dialects of
        another protocol such as HTTP proxy. It also allows cohabitation of
        proxy protocols that are reused between protocols. A good example
        is HTTP. It can be used to proxy HTTP, FTP and Gopher and can also
        be use as generic socket proxy through the HTTP CONNECT method.

        When the proxy is detected as being an application proxy, TLS handshake
        will be skipped. This is required to let the application do the proxy
        specific handshake.
        """
        ...

    def connect(self, connectable: SocketConnectable, cancellable: _T.Optional[Cancellable]) -> SocketConnection:
        """
        Tries to resolve the @connectable and make a network connection to it.

        Upon a successful connection, a new #GSocketConnection is constructed
        and returned.  The caller owns this new object and must drop their
        reference to it when finished with it.

        The type of the #GSocketConnection object returned depends on the type of
        the underlying socket that is used. For instance, for a TCP/IP connection
        it will be a #GTcpConnection.

        The socket created will be the same family as the address that the
        @connectable resolves to, unless family is set with g_socket_client_set_family()
        or indirectly via g_socket_client_set_local_address(). The socket type
        defaults to %G_SOCKET_TYPE_STREAM but can be set with
        g_socket_client_set_socket_type().

        If a local address is specified with g_socket_client_set_local_address() the
        socket will be bound to this address before connecting.
        """
        ...

    def connect_async(self, connectable: SocketConnectable, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        This is the asynchronous version of g_socket_client_connect().

        You may wish to prefer the asynchronous version even in synchronous
        command line programs because, since 2.60, it implements
        [RFC 8305](https://tools.ietf.org/html/rfc8305) "Happy Eyeballs"
        recommendations to work around long connection timeouts in networks
        where IPv6 is broken by performing an IPv4 connection simultaneously
        without waiting for IPv6 to time out, which is not supported by the
        synchronous call. (This is not an API guarantee, and may change in
        the future.)

        When the operation is finished @callback will be
        called. You can then call g_socket_client_connect_finish() to get
        the result of the operation.
        """
        ...

    def connect_finish(self, result: AsyncResult) -> SocketConnection:
        """
        Finishes an async connect operation. See g_socket_client_connect_async()
        """
        ...

    def connect_to_host(self, host_and_port: str, default_port: int, cancellable: _T.Optional[Cancellable]) -> SocketConnection:
        """
        This is a helper function for g_socket_client_connect().

        Attempts to create a TCP connection to the named host.

        @host_and_port may be in any of a number of recognized formats; an IPv6
        address, an IPv4 address, or a domain name (in which case a DNS
        lookup is performed).  Quoting with [] is supported for all address
        types.  A port override may be specified in the usual way with a
        colon.  Ports may be given as decimal numbers or symbolic names (in
        which case an /etc/services lookup is performed).

        If no port override is given in @host_and_port then @default_port will be
        used as the port number to connect to.

        In general, @host_and_port is expected to be provided by the user (allowing
        them to give the hostname, and a port override if necessary) and
        @default_port is expected to be provided by the application.

        In the case that an IP address is given, a single connection
        attempt is made.  In the case that a name is given, multiple
        connection attempts may be made, in turn and according to the
        number of address records in DNS, until a connection succeeds.

        Upon a successful connection, a new #GSocketConnection is constructed
        and returned.  The caller owns this new object and must drop their
        reference to it when finished with it.

        In the event of any failure (DNS error, service not found, no hosts
        connectable) %NULL is returned and @error (if non-%NULL) is set
        accordingly.
        """
        ...

    def connect_to_host_async(self, host_and_port: str, default_port: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        This is the asynchronous version of g_socket_client_connect_to_host().

        When the operation is finished @callback will be
        called. You can then call g_socket_client_connect_to_host_finish() to get
        the result of the operation.
        """
        ...

    def connect_to_host_finish(self, result: AsyncResult) -> SocketConnection:
        """
        Finishes an async connect operation. See g_socket_client_connect_to_host_async()
        """
        ...

    def connect_to_service(self, domain: str, service: str, cancellable: _T.Optional[Cancellable]) -> SocketConnection:
        """
        Attempts to create a TCP connection to a service.

        This call looks up the SRV record for @service at @domain for the
        "tcp" protocol.  It then attempts to connect, in turn, to each of
        the hosts providing the service until either a connection succeeds
        or there are no hosts remaining.

        Upon a successful connection, a new #GSocketConnection is constructed
        and returned.  The caller owns this new object and must drop their
        reference to it when finished with it.

        In the event of any failure (DNS error, service not found, no hosts
        connectable) %NULL is returned and @error (if non-%NULL) is set
        accordingly.
        """
        ...

    def connect_to_service_async(self, domain: str, service: str, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        This is the asynchronous version of
        g_socket_client_connect_to_service().
        """
        ...

    def connect_to_service_finish(self, result: AsyncResult) -> SocketConnection:
        """
        Finishes an async connect operation. See g_socket_client_connect_to_service_async()
        """
        ...

    def connect_to_uri(self, uri: str, default_port: int, cancellable: _T.Optional[Cancellable]) -> SocketConnection:
        """
        This is a helper function for g_socket_client_connect().

        Attempts to create a TCP connection with a network URI.

        @uri may be any valid URI containing an "authority" (hostname/port)
        component. If a port is not specified in the URI, @default_port
        will be used. TLS will be negotiated if #GSocketClient:tls is %TRUE.
        (#GSocketClient does not know to automatically assume TLS for
        certain URI schemes.)

        Using this rather than g_socket_client_connect() or
        g_socket_client_connect_to_host() allows #GSocketClient to
        determine when to use application-specific proxy protocols.

        Upon a successful connection, a new #GSocketConnection is constructed
        and returned.  The caller owns this new object and must drop their
        reference to it when finished with it.

        In the event of any failure (DNS error, service not found, no hosts
        connectable) %NULL is returned and @error (if non-%NULL) is set
        accordingly.
        """
        ...

    def connect_to_uri_async(self, uri: str, default_port: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        This is the asynchronous version of g_socket_client_connect_to_uri().

        When the operation is finished @callback will be
        called. You can then call g_socket_client_connect_to_uri_finish() to get
        the result of the operation.
        """
        ...

    def connect_to_uri_finish(self, result: AsyncResult) -> SocketConnection:
        """
        Finishes an async connect operation. See g_socket_client_connect_to_uri_async()
        """
        ...

    def get_enable_proxy(self) -> bool:
        """
        Gets the proxy enable state; see g_socket_client_set_enable_proxy()
        """
        ...

    def get_family(self) -> SocketFamily:
        """
        Gets the socket family of the socket client.

        See g_socket_client_set_family() for details.
        """
        ...

    def get_local_address(self) -> SocketAddress:
        """
        Gets the local address of the socket client.

        See g_socket_client_set_local_address() for details.
        """
        ...

    def get_protocol(self) -> SocketProtocol:
        """
        Gets the protocol name type of the socket client.

        See g_socket_client_set_protocol() for details.
        """
        ...

    def get_proxy_resolver(self) -> ProxyResolver:
        """
        Gets the #GProxyResolver being used by @client. Normally, this will
        be the resolver returned by g_proxy_resolver_get_default(), but you
        can override it with g_socket_client_set_proxy_resolver().
        """
        ...

    def get_socket_type(self) -> SocketType:
        """
        Gets the socket type of the socket client.

        See g_socket_client_set_socket_type() for details.
        """
        ...

    def get_timeout(self) -> int:
        """
        Gets the I/O timeout time for sockets created by @client.

        See g_socket_client_set_timeout() for details.
        """
        ...

    def get_tls(self) -> bool:
        """
        Gets whether @client creates TLS connections. See
        g_socket_client_set_tls() for details.
        """
        ...

    def get_tls_validation_flags(self) -> TlsCertificateFlags:
        """
        Gets the TLS validation flags used creating TLS connections via
        @client.

        This function does not work as originally designed and is impossible
        to use correctly. See #GSocketClient:tls-validation-flags for more
        information.
        """
        ...

    def set_enable_proxy(self, enable: bool) -> object:
        """
        Sets whether or not @client attempts to make connections via a
        proxy server. When enabled (the default), #GSocketClient will use a
        #GProxyResolver to determine if a proxy protocol such as SOCKS is
        needed, and automatically do the necessary proxy negotiation.

        See also g_socket_client_set_proxy_resolver().
        """
        ...

    def set_family(self, family: SocketFamily) -> object:
        """
        Sets the socket family of the socket client.
        If this is set to something other than %G_SOCKET_FAMILY_INVALID
        then the sockets created by this object will be of the specified
        family.

        This might be useful for instance if you want to force the local
        connection to be an ipv4 socket, even though the address might
        be an ipv6 mapped to ipv4 address.
        """
        ...

    def set_local_address(self, address: _T.Optional[SocketAddress]) -> object:
        """
        Sets the local address of the socket client.
        The sockets created by this object will bound to the
        specified address (if not %NULL) before connecting.

        This is useful if you want to ensure that the local
        side of the connection is on a specific port, or on
        a specific interface.
        """
        ...

    def set_protocol(self, protocol: SocketProtocol) -> object:
        """
        Sets the protocol of the socket client.
        The sockets created by this object will use of the specified
        protocol.

        If @protocol is %G_SOCKET_PROTOCOL_DEFAULT that means to use the default
        protocol for the socket family and type.
        """
        ...

    def set_proxy_resolver(self, proxy_resolver: _T.Optional[ProxyResolver]) -> object:
        """
        Overrides the #GProxyResolver used by @client. You can call this if
        you want to use specific proxies, rather than using the system
        default proxy settings.

        Note that whether or not the proxy resolver is actually used
        depends on the setting of #GSocketClient:enable-proxy, which is not
        changed by this function (but which is %TRUE by default)
        """
        ...

    def set_socket_type(self, type: SocketType) -> object:
        """
        Sets the socket type of the socket client.
        The sockets created by this object will be of the specified
        type.

        It doesn't make sense to specify a type of %G_SOCKET_TYPE_DATAGRAM,
        as GSocketClient is used for connection oriented services.
        """
        ...

    def set_timeout(self, timeout: int) -> object:
        """
        Sets the I/O timeout for sockets created by @client. @timeout is a
        time in seconds, or 0 for no timeout (the default).

        The timeout value affects the initial connection attempt as well,
        so setting this may cause calls to g_socket_client_connect(), etc,
        to fail with %G_IO_ERROR_TIMED_OUT.
        """
        ...

    def set_tls(self, tls: bool) -> object:
        """
        Sets whether @client creates TLS (aka SSL) connections. If @tls is
        %TRUE, @client will wrap its connections in a #GTlsClientConnection
        and perform a TLS handshake when connecting.

        Note that since #GSocketClient must return a #GSocketConnection,
        but #GTlsClientConnection is not a #GSocketConnection, this
        actually wraps the resulting #GTlsClientConnection in a
        #GTcpWrapperConnection when returning it. You can use
        g_tcp_wrapper_connection_get_base_io_stream() on the return value
        to extract the #GTlsClientConnection.

        If you need to modify the behavior of the TLS handshake (eg, by
        setting a client-side certificate to use, or connecting to the
        #GTlsConnection::accept-certificate signal), you can connect to
        @client's #GSocketClient::event signal and wait for it to be
        emitted with %G_SOCKET_CLIENT_TLS_HANDSHAKING, which will give you
        a chance to see the #GTlsClientConnection before the handshake
        starts.
        """
        ...

    def set_tls_validation_flags(self, flags: TlsCertificateFlags) -> object:
        """
        Sets the TLS validation flags used when creating TLS connections
        via @client. The default value is %G_TLS_CERTIFICATE_VALIDATE_ALL.

        This function does not work as originally designed and is impossible
        to use correctly. See #GSocketClient:tls-validation-flags for more
        information.
        """
        ...


    ...

class SocketConnection(IOStream):
    """
    #GSocketConnection is a #GIOStream for a connected socket. They
    can be created either by #GSocketClient when connecting to a host,
    or by #GSocketListener when accepting a new client.

    The type of the #GSocketConnection object returned from these calls
    depends on the type of the underlying socket that is in use. For
    instance, for a TCP/IP connection it will be a #GTcpConnection.

    Choosing what type of object to construct is done with the socket
    connection factory, and it is possible for 3rd parties to register
    custom socket connection types for specific combination of socket
    family/type/protocol using g_socket_connection_factory_register_type().

    To close a #GSocketConnection, use g_io_stream_close(). Closing both
    substreams of the #GIOStream separately will not close the underlying
    #GSocket.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def connect(self, address: SocketAddress, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Connect @connection to the specified remote address.
        """
        ...

    def connect_async(self, address: SocketAddress, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously connect @connection to the specified remote address.

        This clears the #GSocket:blocking flag on @connection's underlying
        socket if it is currently set.

        Use g_socket_connection_connect_finish() to retrieve the result.
        """
        ...

    def connect_finish(self, result: AsyncResult) -> bool:
        """
        Gets the result of a g_socket_connection_connect_async() call.
        """
        ...

    def get_local_address(self) -> SocketAddress:
        """
        Try to get the local address of a socket connection.
        """
        ...

    def get_remote_address(self) -> SocketAddress:
        """
        Try to get the remote address of a socket connection.

        Since GLib 2.40, when used with g_socket_client_connect() or
        g_socket_client_connect_async(), during emission of
        %G_SOCKET_CLIENT_CONNECTING, this function will return the remote
        address that will be used for the connection.  This allows
        applications to print e.g. "Connecting to example.com
        (10.42.77.3)...".
        """
        ...

    def get_socket(self) -> Socket:
        """
        Gets the underlying #GSocket object of the connection.
        This can be useful if you want to do something unusual on it
        not supported by the #GSocketConnection APIs.
        """
        ...

    def is_connected(self) -> bool:
        """
        Checks if @connection is connected. This is equivalent to calling
        g_socket_is_connected() on @connection's underlying #GSocket.
        """
        ...


    ...

class SocketControlMessage(GObject.Object):
    """
    A #GSocketControlMessage is a special-purpose utility message that
    can be sent to or received from a #GSocket. These types of
    messages are often called "ancillary data".

    The message can represent some sort of special instruction to or
    information from the socket or can represent a special kind of
    transfer to the peer (for example, sending a file descriptor over
    a UNIX socket).

    These messages are sent with g_socket_send_message() and received
    with g_socket_receive_message().

    To extend the set of control message that can be sent, subclass this
    class and override the get_size, get_level, get_type and serialize
    methods.

    To extend the set of control messages that can be received, subclass
    this class and implement the deserialize method. Also, make sure your
    class is registered with the GType typesystem before calling
    g_socket_receive_message() to read such a message.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_level(self) -> int:
        """
        Returns the "level" (i.e. the originating protocol) of the control message.
        This is often SOL_SOCKET.
        """
        ...

    def get_msg_type(self) -> int:
        """
        Returns the protocol specific type of the control message.
        For instance, for UNIX fd passing this would be SCM_RIGHTS.
        """
        ...

    def get_size(self) -> int:
        """
        Returns the space required for the control message, not including
        headers or alignment.
        """
        ...

    def serialize(self, data: object) -> object:
        """
        Converts the data in the message to bytes placed in the
        message.

        @data is guaranteed to have enough space to fit the size
        returned by g_socket_control_message_get_size() on this
        object.
        """
        ...


    ...

class SocketListener(GObject.Object):
    """
    A #GSocketListener is an object that keeps track of a set
    of server sockets and helps you accept sockets from any of the
    socket, either sync or async.

    Add addresses and ports to listen on using g_socket_listener_add_address()
    and g_socket_listener_add_inet_port(). These will be listened on until
    g_socket_listener_close() is called. Dropping your final reference to the
    #GSocketListener will not cause g_socket_listener_close() to be called
    implicitly, as some references to the #GSocketListener may be held
    internally.

    If you want to implement a network server, also look at #GSocketService
    and #GThreadedSocketService which are subclasses of #GSocketListener
    that make this even easier.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> SocketListener:
        """
        Creates a new #GSocketListener with no sockets to listen for.
        New listeners can be added with e.g. g_socket_listener_add_address()
        or g_socket_listener_add_inet_port().
        """
        ...

    def accept(self, source_object: _T.Optional[GObject.Object], cancellable: _T.Optional[Cancellable]) -> SocketConnection:
        """
        Blocks waiting for a client to connect to any of the sockets added
        to the listener. Returns a #GSocketConnection for the socket that was
        accepted.

        If @source_object is not %NULL it will be filled out with the source
        object specified when the corresponding socket or address was added
        to the listener.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def accept_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        This is the asynchronous version of g_socket_listener_accept().

        When the operation is finished @callback will be
        called. You can then call g_socket_listener_accept_finish()
        to get the result of the operation.
        """
        ...

    def accept_finish(self, result: AsyncResult, source_object: _T.Optional[GObject.Object]) -> SocketConnection:
        """
        Finishes an async accept operation. See g_socket_listener_accept_async()
        """
        ...

    def accept_socket(self, source_object: _T.Optional[GObject.Object], cancellable: _T.Optional[Cancellable]) -> Socket:
        """
        Blocks waiting for a client to connect to any of the sockets added
        to the listener. Returns the #GSocket that was accepted.

        If you want to accept the high-level #GSocketConnection, not a #GSocket,
        which is often the case, then you should use g_socket_listener_accept()
        instead.

        If @source_object is not %NULL it will be filled out with the source
        object specified when the corresponding socket or address was added
        to the listener.

        If @cancellable is not %NULL, then the operation can be cancelled by
        triggering the cancellable object from another thread. If the operation
        was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
        """
        ...

    def accept_socket_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        This is the asynchronous version of g_socket_listener_accept_socket().

        When the operation is finished @callback will be
        called. You can then call g_socket_listener_accept_socket_finish()
        to get the result of the operation.
        """
        ...

    def accept_socket_finish(self, result: AsyncResult, source_object: _T.Optional[GObject.Object]) -> Socket:
        """
        Finishes an async accept operation. See g_socket_listener_accept_socket_async()
        """
        ...

    def add_address(self, address: SocketAddress, type: SocketType, protocol: SocketProtocol, source_object: _T.Optional[GObject.Object], effective_address: SocketAddress) -> bool:
        """
        Creates a socket of type @type and protocol @protocol, binds
        it to @address and adds it to the set of sockets we're accepting
        sockets from.

        Note that adding an IPv6 address, depending on the platform,
        may or may not result in a listener that also accepts IPv4
        connections.  For more deterministic behavior, see
        g_socket_listener_add_inet_port().

        @source_object will be passed out in the various calls
        to accept to identify this particular source, which is
        useful if you're listening on multiple addresses and do
        different things depending on what address is connected to.

        If successful and @effective_address is non-%NULL then it will
        be set to the address that the binding actually occurred at.  This
        is helpful for determining the port number that was used for when
        requesting a binding to port 0 (ie: "any port").  This address, if
        requested, belongs to the caller and must be freed.

        Call g_socket_listener_close() to stop listening on @address; this will not
        be done automatically when you drop your final reference to @listener, as
        references may be held internally.
        """
        ...

    def add_any_inet_port(self, source_object: _T.Optional[GObject.Object]) -> int:
        """
        Listens for TCP connections on any available port number for both
        IPv6 and IPv4 (if each is available).

        This is useful if you need to have a socket for incoming connections
        but don't care about the specific port number.

        @source_object will be passed out in the various calls
        to accept to identify this particular source, which is
        useful if you're listening on multiple addresses and do
        different things depending on what address is connected to.
        """
        ...

    def add_inet_port(self, port: int, source_object: _T.Optional[GObject.Object]) -> bool:
        """
        Helper function for g_socket_listener_add_address() that
        creates a TCP/IP socket listening on IPv4 and IPv6 (if
        supported) on the specified port on all interfaces.

        @source_object will be passed out in the various calls
        to accept to identify this particular source, which is
        useful if you're listening on multiple addresses and do
        different things depending on what address is connected to.

        Call g_socket_listener_close() to stop listening on @port; this will not
        be done automatically when you drop your final reference to @listener, as
        references may be held internally.
        """
        ...

    def add_socket(self, socket: Socket, source_object: _T.Optional[GObject.Object]) -> bool:
        """
        Adds @socket to the set of sockets that we try to accept
        new clients from. The socket must be bound to a local
        address and listened to.

        @source_object will be passed out in the various calls
        to accept to identify this particular source, which is
        useful if you're listening on multiple addresses and do
        different things depending on what address is connected to.

        The @socket will not be automatically closed when the @listener is finalized
        unless the listener held the final reference to the socket. Before GLib 2.42,
        the @socket was automatically closed on finalization of the @listener, even
        if references to it were held elsewhere.
        """
        ...

    def close(self) -> object:
        """
        Closes all the sockets in the listener.
        """
        ...

    def set_backlog(self, listen_backlog: int) -> object:
        """
        Sets the listen backlog on the sockets in the listener. This must be called
        before adding any sockets, addresses or ports to the #GSocketListener (for
        example, by calling g_socket_listener_add_inet_port()) to be effective.

        See g_socket_set_listen_backlog() for details
        """
        ...


    ...

class SocketService(SocketListener):
    """
    A #GSocketService is an object that represents a service that
    is provided to the network or over local sockets.  When a new
    connection is made to the service the #GSocketService::incoming
    signal is emitted.

    A #GSocketService is a subclass of #GSocketListener and you need
    to add the addresses you want to accept connections on with the
    #GSocketListener APIs.

    There are two options for implementing a network service based on
    #GSocketService. The first is to create the service using
    g_socket_service_new() and to connect to the #GSocketService::incoming
    signal. The second is to subclass #GSocketService and override the
    default signal handler implementation.

    In either case, the handler must immediately return, or else it
    will block additional incoming connections from being serviced.
    If you are interested in writing connection handlers that contain
    blocking code then see #GThreadedSocketService.

    The socket service runs on the main loop of the
    [thread-default context][g-main-context-push-thread-default-context]
    of the thread it is created in, and is not
    threadsafe in general. However, the calls to start and stop the
    service are thread-safe so these can be used from threads that
    handle incoming clients.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> SocketService:
        """
        Creates a new #GSocketService with no sockets to listen for.
        New listeners can be added with e.g. g_socket_listener_add_address()
        or g_socket_listener_add_inet_port().

        New services are created active, there is no need to call
        g_socket_service_start(), unless g_socket_service_stop() has been
        called before.
        """
        ...

    def is_active(self) -> bool:
        """
        Check whether the service is active or not. An active
        service will accept new clients that connect, while
        a non-active service will let connecting clients queue
        up until the service is started.
        """
        ...

    def start(self) -> object:
        """
        Restarts the service, i.e. start accepting connections
        from the added sockets when the mainloop runs. This only needs
        to be called after the service has been stopped from
        g_socket_service_stop().

        This call is thread-safe, so it may be called from a thread
        handling an incoming client request.
        """
        ...

    def stop(self) -> object:
        """
        Stops the service, i.e. stops accepting connections
        from the added sockets when the mainloop runs.

        This call is thread-safe, so it may be called from a thread
        handling an incoming client request.

        Note that this only stops accepting new connections; it does not
        close the listening sockets, and you can call
        g_socket_service_start() again later to begin listening again. To
        close the listening sockets, call g_socket_listener_close(). (This
        will happen automatically when the #GSocketService is finalized.)

        This must be called before calling g_socket_listener_close() as
        the socket service will start accepting connections immediately
        when a new socket is added.
        """
        ...


    ...

class Subprocess(GObject.Object, Initable):
    """
    #GSubprocess allows the creation of and interaction with child
    processes.

    Processes can be communicated with using standard GIO-style APIs (ie:
    #GInputStream, #GOutputStream).  There are GIO-style APIs to wait for
    process termination (ie: cancellable and with an asynchronous
    variant).

    There is an API to force a process to terminate, as well as a
    race-free API for sending UNIX signals to a subprocess.

    One major advantage that GIO brings over the core GLib library is
    comprehensive API for asynchronous I/O, such
    g_output_stream_splice_async().  This makes GSubprocess
    significantly more powerful and flexible than equivalent APIs in
    some other languages such as the `subprocess.py`
    included with Python.  For example, using #GSubprocess one could
    create two child processes, reading standard output from the first,
    processing it, and writing to the input stream of the second, all
    without blocking the main loop.

    A powerful g_subprocess_communicate() API is provided similar to the
    `communicate()` method of `subprocess.py`. This enables very easy
    interaction with a subprocess that has been opened with pipes.

    #GSubprocess defaults to tight control over the file descriptors open
    in the child process, avoiding dangling-fd issues that are caused by
    a simple fork()/exec().  The only open file descriptors in the
    spawned process are ones that were explicitly specified by the
    #GSubprocess API (unless %G_SUBPROCESS_FLAGS_INHERIT_FDS was
    specified).

    #GSubprocess will quickly reap all child processes as they exit,
    avoiding "zombie processes" remaining around for long periods of
    time.  g_subprocess_wait() can be used to wait for this to happen,
    but it will happen even without the call being explicitly made.

    As a matter of principle, #GSubprocess has no API that accepts
    shell-style space-separated strings.  It will, however, match the
    typical shell behaviour of searching the PATH for executables that do
    not contain a directory separator in their name. By default, the `PATH`
    of the current process is used.  You can specify
    %G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP to use the `PATH` of the
    launcher environment instead.

    #GSubprocess attempts to have a very simple API for most uses (ie:
    spawning a subprocess with arguments and support for most typical
    kinds of input and output redirection).  See g_subprocess_new(). The
    #GSubprocessLauncher API is provided for more complicated cases
    (advanced types of redirection, environment variable manipulation,
    change of working directory, child setup functions, etc).

    A typical use of #GSubprocess will involve calling
    g_subprocess_new(), followed by g_subprocess_wait_async() or
    g_subprocess_wait().  After the process exits, the status can be
    checked using functions such as g_subprocess_get_if_exited() (which
    are similar to the familiar WIFEXITED-style POSIX macros).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, flags: SubprocessFlags, error: _T.Optional[GLib.Error], argv0: str, *args: object) -> Subprocess:
        """
        Create a new process with the given flags and varargs argument
        list.  By default, matching the g_spawn_async() defaults, the
        child's stdin will be set to the system null device, and
        stdout/stderr will be inherited from the parent.  You can use
        @flags to control this behavior.

        The argument list must be terminated with %NULL.
        """
        ...


    @classmethod
    def newv(cls, argv: object, flags: SubprocessFlags) -> Subprocess:
        """
        Create a new process with the given flags and argument list.

        The argument list is expected to be %NULL-terminated.
        """
        ...

    def communicate(self, stdin_buf: _T.Optional[GLib.Bytes], cancellable: _T.Optional[Cancellable], stdout_buf: _T.Optional[GLib.Bytes], stderr_buf: _T.Optional[GLib.Bytes]) -> bool:
        """
        Communicate with the subprocess until it terminates, and all input
        and output has been completed.

        If @stdin_buf is given, the subprocess must have been created with
        %G_SUBPROCESS_FLAGS_STDIN_PIPE.  The given data is fed to the
        stdin of the subprocess and the pipe is closed (ie: EOF).

        At the same time (as not to cause blocking when dealing with large
        amounts of data), if %G_SUBPROCESS_FLAGS_STDOUT_PIPE or
        %G_SUBPROCESS_FLAGS_STDERR_PIPE were used, reads from those
        streams.  The data that was read is returned in @stdout and/or
        the @stderr.

        If the subprocess was created with %G_SUBPROCESS_FLAGS_STDOUT_PIPE,
        @stdout_buf will contain the data read from stdout.  Otherwise, for
        subprocesses not created with %G_SUBPROCESS_FLAGS_STDOUT_PIPE,
        @stdout_buf will be set to %NULL.  Similar provisions apply to
        @stderr_buf and %G_SUBPROCESS_FLAGS_STDERR_PIPE.

        As usual, any output variable may be given as %NULL to ignore it.

        If you desire the stdout and stderr data to be interleaved, create
        the subprocess with %G_SUBPROCESS_FLAGS_STDOUT_PIPE and
        %G_SUBPROCESS_FLAGS_STDERR_MERGE.  The merged result will be returned
        in @stdout_buf and @stderr_buf will be set to %NULL.

        In case of any error (including cancellation), %FALSE will be
        returned with @error set.  Some or all of the stdin data may have
        been written.  Any stdout or stderr data that has been read will be
        discarded. None of the out variables (aside from @error) will have
        been set to anything in particular and should not be inspected.

        In the case that %TRUE is returned, the subprocess has exited and the
        exit status inspection APIs (eg: g_subprocess_get_if_exited(),
        g_subprocess_get_exit_status()) may be used.

        You should not attempt to use any of the subprocess pipes after
        starting this function, since they may be left in strange states,
        even if the operation was cancelled.  You should especially not
        attempt to interact with the pipes while the operation is in progress
        (either from another thread or if using the asynchronous version).
        """
        ...

    def communicate_async(self, stdin_buf: _T.Optional[GLib.Bytes], cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronous version of g_subprocess_communicate().  Complete
        invocation with g_subprocess_communicate_finish().
        """
        ...

    def communicate_finish(self, result: AsyncResult, stdout_buf: _T.Optional[GLib.Bytes], stderr_buf: _T.Optional[GLib.Bytes]) -> bool:
        """
        Complete an invocation of g_subprocess_communicate_async().
        """
        ...

    def communicate_utf8(self, stdin_buf: _T.Optional[str], cancellable: _T.Optional[Cancellable], stdout_buf: _T.Optional[str], stderr_buf: _T.Optional[str]) -> bool:
        """
        Like g_subprocess_communicate(), but validates the output of the
        process as UTF-8, and returns it as a regular NUL terminated string.

        On error, @stdout_buf and @stderr_buf will be set to undefined values and
        should not be used.
        """
        ...

    def communicate_utf8_async(self, stdin_buf: _T.Optional[str], cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronous version of g_subprocess_communicate_utf8().  Complete
        invocation with g_subprocess_communicate_utf8_finish().
        """
        ...

    def communicate_utf8_finish(self, result: AsyncResult, stdout_buf: _T.Optional[str], stderr_buf: _T.Optional[str]) -> bool:
        """
        Complete an invocation of g_subprocess_communicate_utf8_async().
        """
        ...

    def force_exit(self) -> object:
        """
        Use an operating-system specific method to attempt an immediate,
        forceful termination of the process.  There is no mechanism to
        determine whether or not the request itself was successful;
        however, you can use g_subprocess_wait() to monitor the status of
        the process after calling this function.

        On Unix, this function sends %SIGKILL.
        """
        ...

    def get_exit_status(self) -> int:
        """
        Check the exit status of the subprocess, given that it exited
        normally.  This is the value passed to the exit() system call or the
        return value from main.

        This is equivalent to the system WEXITSTATUS macro.

        It is an error to call this function before g_subprocess_wait() and
        unless g_subprocess_get_if_exited() returned %TRUE.
        """
        ...

    def get_identifier(self) -> str:
        """
        On UNIX, returns the process ID as a decimal string.
        On Windows, returns the result of GetProcessId() also as a string.
        If the subprocess has terminated, this will return %NULL.
        """
        ...

    def get_if_exited(self) -> bool:
        """
        Check if the given subprocess exited normally (ie: by way of exit()
        or return from main()).

        This is equivalent to the system WIFEXITED macro.

        It is an error to call this function before g_subprocess_wait() has
        returned.
        """
        ...

    def get_if_signaled(self) -> bool:
        """
        Check if the given subprocess terminated in response to a signal.

        This is equivalent to the system WIFSIGNALED macro.

        It is an error to call this function before g_subprocess_wait() has
        returned.
        """
        ...

    def get_status(self) -> int:
        """
        Gets the raw status code of the process, as from waitpid().

        This value has no particular meaning, but it can be used with the
        macros defined by the system headers such as WIFEXITED.  It can also
        be used with g_spawn_check_wait_status().

        It is more likely that you want to use g_subprocess_get_if_exited()
        followed by g_subprocess_get_exit_status().

        It is an error to call this function before g_subprocess_wait() has
        returned.
        """
        ...

    def get_stderr_pipe(self) -> InputStream:
        """
        Gets the #GInputStream from which to read the stderr output of
        @subprocess.

        The process must have been created with %G_SUBPROCESS_FLAGS_STDERR_PIPE,
        otherwise %NULL will be returned.
        """
        ...

    def get_stdin_pipe(self) -> OutputStream:
        """
        Gets the #GOutputStream that you can write to in order to give data
        to the stdin of @subprocess.

        The process must have been created with %G_SUBPROCESS_FLAGS_STDIN_PIPE and
        not %G_SUBPROCESS_FLAGS_STDIN_INHERIT, otherwise %NULL will be returned.
        """
        ...

    def get_stdout_pipe(self) -> InputStream:
        """
        Gets the #GInputStream from which to read the stdout output of
        @subprocess.

        The process must have been created with %G_SUBPROCESS_FLAGS_STDOUT_PIPE,
        otherwise %NULL will be returned.
        """
        ...

    def get_successful(self) -> bool:
        """
        Checks if the process was "successful".  A process is considered
        successful if it exited cleanly with an exit status of 0, either by
        way of the exit() system call or return from main().

        It is an error to call this function before g_subprocess_wait() has
        returned.
        """
        ...

    def get_term_sig(self) -> int:
        """
        Get the signal number that caused the subprocess to terminate, given
        that it terminated due to a signal.

        This is equivalent to the system WTERMSIG macro.

        It is an error to call this function before g_subprocess_wait() and
        unless g_subprocess_get_if_signaled() returned %TRUE.
        """
        ...

    def send_signal(self, signal_num: int) -> object:
        """
        Sends the UNIX signal @signal_num to the subprocess, if it is still
        running.

        This API is race-free.  If the subprocess has terminated, it will not
        be signalled.

        This API is not available on Windows.
        """
        ...

    def wait(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Synchronously wait for the subprocess to terminate.

        After the process terminates you can query its exit status with
        functions such as g_subprocess_get_if_exited() and
        g_subprocess_get_exit_status().

        This function does not fail in the case of the subprocess having
        abnormal termination.  See g_subprocess_wait_check() for that.

        Cancelling @cancellable doesn't kill the subprocess.  Call
        g_subprocess_force_exit() if it is desirable.
        """
        ...

    def wait_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Wait for the subprocess to terminate.

        This is the asynchronous version of g_subprocess_wait().
        """
        ...

    def wait_check(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Combines g_subprocess_wait() with g_spawn_check_wait_status().
        """
        ...

    def wait_check_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Combines g_subprocess_wait_async() with g_spawn_check_wait_status().

        This is the asynchronous version of g_subprocess_wait_check().
        """
        ...

    def wait_check_finish(self, result: AsyncResult) -> bool:
        """
        Collects the result of a previous call to
        g_subprocess_wait_check_async().
        """
        ...

    def wait_finish(self, result: AsyncResult) -> bool:
        """
        Collects the result of a previous call to
        g_subprocess_wait_async().
        """
        ...


    ...

class SubprocessLauncher(GObject.Object):
    """
    This class contains a set of options for launching child processes,
    such as where its standard input and output will be directed, the
    argument list, the environment, and more.

    While the #GSubprocess class has high level functions covering
    popular cases, use of this class allows access to more advanced
    options.  It can also be used to launch multiple subprocesses with
    a similar configuration.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, flags: SubprocessFlags) -> SubprocessLauncher:
        """
        Creates a new #GSubprocessLauncher.

        The launcher is created with the default options.  A copy of the
        environment of the calling process is made at the time of this call
        and will be used as the environment that the process is launched in.
        """
        ...

    def close(self) -> object:
        """
        Closes all the file descriptors previously passed to the object with
        g_subprocess_launcher_take_fd(), g_subprocess_launcher_take_stderr_fd(), etc.

        After calling this method, any subsequent calls to g_subprocess_launcher_spawn() or g_subprocess_launcher_spawnv() will
        return %G_IO_ERROR_CLOSED. This method is idempotent if
        called more than once.

        This function is called automatically when the #GSubprocessLauncher
        is disposed, but is provided separately so that garbage collected
        language bindings can call it earlier to guarantee when FDs are closed.
        """
        ...

    def getenv(self, variable: str) -> str:
        """
        Returns the value of the environment variable @variable in the
        environment of processes launched from this launcher.

        On UNIX, the returned string can be an arbitrary byte string.
        On Windows, it will be UTF-8.
        """
        ...

    def set_child_setup(self, child_setup: GLib.SpawnChildSetupFunc, user_data: _T.Optional[object], destroy_notify: GLib.DestroyNotify) -> object:
        """
        Sets up a child setup function.

        The child setup function will be called after fork() but before
        exec() on the child's side.

        @destroy_notify will not be automatically called on the child's side
        of the fork().  It will only be called when the last reference on the
        #GSubprocessLauncher is dropped or when a new child setup function is
        given.

        %NULL can be given as @child_setup to disable the functionality.

        Child setup functions are only available on UNIX.
        """
        ...

    def set_cwd(self, cwd: str) -> object:
        """
        Sets the current working directory that processes will be launched
        with.

        By default processes are launched with the current working directory
        of the launching process at the time of launch.
        """
        ...

    def set_environ(self, env: object) -> object:
        """
        Replace the entire environment of processes launched from this
        launcher with the given 'environ' variable.

        Typically you will build this variable by using g_listenv() to copy
        the process 'environ' and using the functions g_environ_setenv(),
        g_environ_unsetenv(), etc.

        As an alternative, you can use g_subprocess_launcher_setenv(),
        g_subprocess_launcher_unsetenv(), etc.

        Pass an empty array to set an empty environment. Pass %NULL to inherit the
        parent process’ environment. As of GLib 2.54, the parent process’ environment
        will be copied when g_subprocess_launcher_set_environ() is called.
        Previously, it was copied when the subprocess was executed. This means the
        copied environment may now be modified (using g_subprocess_launcher_setenv(),
        etc.) before launching the subprocess.

        On UNIX, all strings in this array can be arbitrary byte strings.
        On Windows, they should be in UTF-8.
        """
        ...

    def set_flags(self, flags: SubprocessFlags) -> object:
        """
        Sets the flags on the launcher.

        The default flags are %G_SUBPROCESS_FLAGS_NONE.

        You may not set flags that specify conflicting options for how to
        handle a particular stdio stream (eg: specifying both
        %G_SUBPROCESS_FLAGS_STDIN_PIPE and
        %G_SUBPROCESS_FLAGS_STDIN_INHERIT).

        You may also not set a flag that conflicts with a previous call to a
        function like g_subprocess_launcher_set_stdin_file_path() or
        g_subprocess_launcher_take_stdout_fd().
        """
        ...

    def set_stderr_file_path(self, path: _T.Optional[str]) -> object:
        """
        Sets the file path to use as the stderr for spawned processes.

        If @path is %NULL then any previously given path is unset.

        The file will be created or truncated when the process is spawned, as
        would be the case if using '2>' at the shell.

        If you want to send both stdout and stderr to the same file then use
        %G_SUBPROCESS_FLAGS_STDERR_MERGE.

        You may not set a stderr file path if a stderr fd is already set or
        if the launcher flags contain any flags directing stderr elsewhere.

        This feature is only available on UNIX.
        """
        ...

    def set_stdin_file_path(self, path: str) -> object:
        """
        Sets the file path to use as the stdin for spawned processes.

        If @path is %NULL then any previously given path is unset.

        The file must exist or spawning the process will fail.

        You may not set a stdin file path if a stdin fd is already set or if
        the launcher flags contain any flags directing stdin elsewhere.

        This feature is only available on UNIX.
        """
        ...

    def set_stdout_file_path(self, path: _T.Optional[str]) -> object:
        """
        Sets the file path to use as the stdout for spawned processes.

        If @path is %NULL then any previously given path is unset.

        The file will be created or truncated when the process is spawned, as
        would be the case if using '>' at the shell.

        You may not set a stdout file path if a stdout fd is already set or
        if the launcher flags contain any flags directing stdout elsewhere.

        This feature is only available on UNIX.
        """
        ...

    def setenv(self, variable: str, value: str, overwrite: bool) -> object:
        """
        Sets the environment variable @variable in the environment of
        processes launched from this launcher.

        On UNIX, both the variable's name and value can be arbitrary byte
        strings, except that the variable's name cannot contain '='.
        On Windows, they should be in UTF-8.
        """
        ...

    def spawn(self, error: GLib.Error, argv0: str, *args: object) -> Subprocess:
        """
        Creates a #GSubprocess given a provided varargs list of arguments.
        """
        ...

    def spawnv(self, argv: object) -> Subprocess:
        """
        Creates a #GSubprocess given a provided array of arguments.
        """
        ...

    def take_fd(self, source_fd: int, target_fd: int) -> object:
        """
        Transfer an arbitrary file descriptor from parent process to the
        child.  This function takes ownership of the @source_fd; it will be closed
        in the parent when @self is freed.

        By default, all file descriptors from the parent will be closed.
        This function allows you to create (for example) a custom `pipe()` or
        `socketpair()` before launching the process, and choose the target
        descriptor in the child.

        An example use case is GNUPG, which has a command line argument
        `--passphrase-fd` providing a file descriptor number where it expects
        the passphrase to be written.
        """
        ...

    def take_stderr_fd(self, fd: int) -> object:
        """
        Sets the file descriptor to use as the stderr for spawned processes.

        If @fd is -1 then any previously given fd is unset.

        Note that the default behaviour is to pass stderr through to the
        stderr of the parent process.

        The passed @fd belongs to the #GSubprocessLauncher.  It will be
        automatically closed when the launcher is finalized.  The file
        descriptor will also be closed on the child side when executing the
        spawned process.

        You may not set a stderr fd if a stderr file path is already set or
        if the launcher flags contain any flags directing stderr elsewhere.

        This feature is only available on UNIX.
        """
        ...

    def take_stdin_fd(self, fd: int) -> object:
        """
        Sets the file descriptor to use as the stdin for spawned processes.

        If @fd is -1 then any previously given fd is unset.

        Note that if your intention is to have the stdin of the calling
        process inherited by the child then %G_SUBPROCESS_FLAGS_STDIN_INHERIT
        is a better way to go about doing that.

        The passed @fd is noted but will not be touched in the current
        process.  It is therefore necessary that it be kept open by the
        caller until the subprocess is spawned.  The file descriptor will
        also not be explicitly closed on the child side, so it must be marked
        O_CLOEXEC if that's what you want.

        You may not set a stdin fd if a stdin file path is already set or if
        the launcher flags contain any flags directing stdin elsewhere.

        This feature is only available on UNIX.
        """
        ...

    def take_stdout_fd(self, fd: int) -> object:
        """
        Sets the file descriptor to use as the stdout for spawned processes.

        If @fd is -1 then any previously given fd is unset.

        Note that the default behaviour is to pass stdout through to the
        stdout of the parent process.

        The passed @fd is noted but will not be touched in the current
        process.  It is therefore necessary that it be kept open by the
        caller until the subprocess is spawned.  The file descriptor will
        also not be explicitly closed on the child side, so it must be marked
        O_CLOEXEC if that's what you want.

        You may not set a stdout fd if a stdout file path is already set or
        if the launcher flags contain any flags directing stdout elsewhere.

        This feature is only available on UNIX.
        """
        ...

    def unsetenv(self, variable: str) -> object:
        """
        Removes the environment variable @variable from the environment of
        processes launched from this launcher.

        On UNIX, the variable's name can be an arbitrary byte string not
        containing '='. On Windows, it should be in UTF-8.
        """
        ...


    ...

class Task(GObject.Object, AsyncResult):
    """
    A #GTask represents and manages a cancellable "task".

    ## Asynchronous operations

    The most common usage of #GTask is as a #GAsyncResult, to
    manage data during an asynchronous operation. You call
    g_task_new() in the "start" method, followed by
    g_task_set_task_data() and the like if you need to keep some
    additional data associated with the task, and then pass the
    task object around through your asynchronous operation.
    Eventually, you will call a method such as
    g_task_return_pointer() or g_task_return_error(), which will
    save the value you give it and then invoke the task's callback
    function in the
    [thread-default main context][g-main-context-push-thread-default]
    where it was created (waiting until the next iteration of the main
    loop first, if necessary). The caller will pass the #GTask back to
    the operation's finish function (as a #GAsyncResult), and you can
    use g_task_propagate_pointer() or the like to extract the
    return value.

    Using #GTask requires the thread-default #GMainContext from when the
    #GTask was constructed to be running at least until the task has completed
    and its data has been freed.

    Here is an example for using GTask as a GAsyncResult:
    |[<!-- language="C" -->
        typedef struct {
          CakeFrostingType frosting;
          char *message;
        } DecorationData;

        static void
        decoration_data_free (DecorationData *decoration)
        {
          g_free (decoration->message);
          g_slice_free (DecorationData, decoration);
        }

        static void
        baked_cb (Cake     *cake,
                  gpointer  user_data)
        {
          GTask *task = user_data;
          DecorationData *decoration = g_task_get_task_data (task);
          GError *error = NULL;

          if (cake == NULL)
            {
              g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_NO_FLOUR,
                                       "Go to the supermarket");
              g_object_unref (task);
              return;
            }

          if (!cake_decorate (cake, decoration->frosting, decoration->message, &error))
            {
              g_object_unref (cake);
              // g_task_return_error() takes ownership of error
              g_task_return_error (task, error);
              g_object_unref (task);
              return;
            }

          g_task_return_pointer (task, cake, g_object_unref);
          g_object_unref (task);
        }

        void
        baker_bake_cake_async (Baker               *self,
                               guint                radius,
                               CakeFlavor           flavor,
                               CakeFrostingType     frosting,
                               const char          *message,
                               GCancellable        *cancellable,
                               GAsyncReadyCallback  callback,
                               gpointer             user_data)
        {
          GTask *task;
          DecorationData *decoration;
          Cake  *cake;

          task = g_task_new (self, cancellable, callback, user_data);
          if (radius < 3)
            {
              g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_TOO_SMALL,
                                       "%ucm radius cakes are silly",
                                       radius);
              g_object_unref (task);
              return;
            }

          cake = _baker_get_cached_cake (self, radius, flavor, frosting, message);
          if (cake != NULL)
            {
              // _baker_get_cached_cake() returns a reffed cake
              g_task_return_pointer (task, cake, g_object_unref);
              g_object_unref (task);
              return;
            }

          decoration = g_slice_new (DecorationData);
          decoration->frosting = frosting;
          decoration->message = g_strdup (message);
          g_task_set_task_data (task, decoration, (GDestroyNotify) decoration_data_free);

          _baker_begin_cake (self, radius, flavor, cancellable, baked_cb, task);
        }

        Cake *
        baker_bake_cake_finish (Baker         *self,
                                GAsyncResult  *result,
                                GError       **error)
        {
          g_return_val_if_fail (g_task_is_valid (result, self), NULL);

          return g_task_propagate_pointer (G_TASK (result), error);
        }
    ]|

    ## Chained asynchronous operations

    #GTask also tries to simplify asynchronous operations that
    internally chain together several smaller asynchronous
    operations. g_task_get_cancellable(), g_task_get_context(),
    and g_task_get_priority() allow you to get back the task's
    #GCancellable, #GMainContext, and [I/O priority][io-priority]
    when starting a new subtask, so you don't have to keep track
    of them yourself. g_task_attach_source() simplifies the case
    of waiting for a source to fire (automatically using the correct
    #GMainContext and priority).

    Here is an example for chained asynchronous operations:
      |[<!-- language="C" -->
        typedef struct {
          Cake *cake;
          CakeFrostingType frosting;
          char *message;
        } BakingData;

        static void
        decoration_data_free (BakingData *bd)
        {
          if (bd->cake)
            g_object_unref (bd->cake);
          g_free (bd->message);
          g_slice_free (BakingData, bd);
        }

        static void
        decorated_cb (Cake         *cake,
                      GAsyncResult *result,
                      gpointer      user_data)
        {
          GTask *task = user_data;
          GError *error = NULL;

          if (!cake_decorate_finish (cake, result, &error))
            {
              g_object_unref (cake);
              g_task_return_error (task, error);
              g_object_unref (task);
              return;
            }

          // baking_data_free() will drop its ref on the cake, so we have to
          // take another here to give to the caller.
          g_task_return_pointer (task, g_object_ref (cake), g_object_unref);
          g_object_unref (task);
        }

        static gboolean
        decorator_ready (gpointer user_data)
        {
          GTask *task = user_data;
          BakingData *bd = g_task_get_task_data (task);

          cake_decorate_async (bd->cake, bd->frosting, bd->message,
                               g_task_get_cancellable (task),
                               decorated_cb, task);

          return G_SOURCE_REMOVE;
        }

        static void
        baked_cb (Cake     *cake,
                  gpointer  user_data)
        {
          GTask *task = user_data;
          BakingData *bd = g_task_get_task_data (task);
          GError *error = NULL;

          if (cake == NULL)
            {
              g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_NO_FLOUR,
                                       "Go to the supermarket");
              g_object_unref (task);
              return;
            }

          bd->cake = cake;

          // Bail out now if the user has already cancelled
          if (g_task_return_error_if_cancelled (task))
            {
              g_object_unref (task);
              return;
            }

          if (cake_decorator_available (cake))
            decorator_ready (task);
          else
            {
              GSource *source;

              source = cake_decorator_wait_source_new (cake);
              // Attach @source to @task's GMainContext and have it call
              // decorator_ready() when it is ready.
              g_task_attach_source (task, source, decorator_ready);
              g_source_unref (source);
            }
        }

        void
        baker_bake_cake_async (Baker               *self,
                               guint                radius,
                               CakeFlavor           flavor,
                               CakeFrostingType     frosting,
                               const char          *message,
                               gint                 priority,
                               GCancellable        *cancellable,
                               GAsyncReadyCallback  callback,
                               gpointer             user_data)
        {
          GTask *task;
          BakingData *bd;

          task = g_task_new (self, cancellable, callback, user_data);
          g_task_set_priority (task, priority);

          bd = g_slice_new0 (BakingData);
          bd->frosting = frosting;
          bd->message = g_strdup (message);
          g_task_set_task_data (task, bd, (GDestroyNotify) baking_data_free);

          _baker_begin_cake (self, radius, flavor, cancellable, baked_cb, task);
        }

        Cake *
        baker_bake_cake_finish (Baker         *self,
                                GAsyncResult  *result,
                                GError       **error)
        {
          g_return_val_if_fail (g_task_is_valid (result, self), NULL);

          return g_task_propagate_pointer (G_TASK (result), error);
        }
    ]|

    ## Asynchronous operations from synchronous ones

    You can use g_task_run_in_thread() to turn a synchronous
    operation into an asynchronous one, by running it in a thread.
    When it completes, the result will be dispatched to the
    [thread-default main context][g-main-context-push-thread-default]
    where the #GTask was created.

    Running a task in a thread:
      |[<!-- language="C" -->
        typedef struct {
          guint radius;
          CakeFlavor flavor;
          CakeFrostingType frosting;
          char *message;
        } CakeData;

        static void
        cake_data_free (CakeData *cake_data)
        {
          g_free (cake_data->message);
          g_slice_free (CakeData, cake_data);
        }

        static void
        bake_cake_thread (GTask         *task,
                          gpointer       source_object,
                          gpointer       task_data,
                          GCancellable  *cancellable)
        {
          Baker *self = source_object;
          CakeData *cake_data = task_data;
          Cake *cake;
          GError *error = NULL;

          cake = bake_cake (baker, cake_data->radius, cake_data->flavor,
                            cake_data->frosting, cake_data->message,
                            cancellable, &error);
          if (cake)
            g_task_return_pointer (task, cake, g_object_unref);
          else
            g_task_return_error (task, error);
        }

        void
        baker_bake_cake_async (Baker               *self,
                               guint                radius,
                               CakeFlavor           flavor,
                               CakeFrostingType     frosting,
                               const char          *message,
                               GCancellable        *cancellable,
                               GAsyncReadyCallback  callback,
                               gpointer             user_data)
        {
          CakeData *cake_data;
          GTask *task;

          cake_data = g_slice_new (CakeData);
          cake_data->radius = radius;
          cake_data->flavor = flavor;
          cake_data->frosting = frosting;
          cake_data->message = g_strdup (message);
          task = g_task_new (self, cancellable, callback, user_data);
          g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
          g_task_run_in_thread (task, bake_cake_thread);
          g_object_unref (task);
        }

        Cake *
        baker_bake_cake_finish (Baker         *self,
                                GAsyncResult  *result,
                                GError       **error)
        {
          g_return_val_if_fail (g_task_is_valid (result, self), NULL);

          return g_task_propagate_pointer (G_TASK (result), error);
        }
    ]|

    ## Adding cancellability to uncancellable tasks

    Finally, g_task_run_in_thread() and g_task_run_in_thread_sync()
    can be used to turn an uncancellable operation into a
    cancellable one. If you call g_task_set_return_on_cancel(),
    passing %TRUE, then if the task's #GCancellable is cancelled,
    it will return control back to the caller immediately, while
    allowing the task thread to continue running in the background
    (and simply discarding its result when it finally does finish).
    Provided that the task thread is careful about how it uses
    locks and other externally-visible resources, this allows you
    to make "GLib-friendly" asynchronous and cancellable
    synchronous variants of blocking APIs.

    Cancelling a task:
      |[<!-- language="C" -->
        static void
        bake_cake_thread (GTask         *task,
                          gpointer       source_object,
                          gpointer       task_data,
                          GCancellable  *cancellable)
        {
          Baker *self = source_object;
          CakeData *cake_data = task_data;
          Cake *cake;
          GError *error = NULL;

          cake = bake_cake (baker, cake_data->radius, cake_data->flavor,
                            cake_data->frosting, cake_data->message,
                            &error);
          if (error)
            {
              g_task_return_error (task, error);
              return;
            }

          // If the task has already been cancelled, then we don't want to add
          // the cake to the cake cache. Likewise, we don't  want to have the
          // task get cancelled in the middle of updating the cache.
          // g_task_set_return_on_cancel() will return %TRUE here if it managed
          // to disable return-on-cancel, or %FALSE if the task was cancelled
          // before it could.
          if (g_task_set_return_on_cancel (task, FALSE))
            {
              // If the caller cancels at this point, their
              // GAsyncReadyCallback won't be invoked until we return,
              // so we don't have to worry that this code will run at
              // the same time as that code does. But if there were
              // other functions that might look at the cake cache,
              // then we'd probably need a GMutex here as well.
              baker_add_cake_to_cache (baker, cake);
              g_task_return_pointer (task, cake, g_object_unref);
            }
        }

        void
        baker_bake_cake_async (Baker               *self,
                               guint                radius,
                               CakeFlavor           flavor,
                               CakeFrostingType     frosting,
                               const char          *message,
                               GCancellable        *cancellable,
                               GAsyncReadyCallback  callback,
                               gpointer             user_data)
        {
          CakeData *cake_data;
          GTask *task;

          cake_data = g_slice_new (CakeData);

          ...

          task = g_task_new (self, cancellable, callback, user_data);
          g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
          g_task_set_return_on_cancel (task, TRUE);
          g_task_run_in_thread (task, bake_cake_thread);
        }

        Cake *
        baker_bake_cake_sync (Baker               *self,
                              guint                radius,
                              CakeFlavor           flavor,
                              CakeFrostingType     frosting,
                              const char          *message,
                              GCancellable        *cancellable,
                              GError             **error)
        {
          CakeData *cake_data;
          GTask *task;
          Cake *cake;

          cake_data = g_slice_new (CakeData);

          ...

          task = g_task_new (self, cancellable, NULL, NULL);
          g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
          g_task_set_return_on_cancel (task, TRUE);
          g_task_run_in_thread_sync (task, bake_cake_thread);

          cake = g_task_propagate_pointer (task, error);
          g_object_unref (task);
          return cake;
        }
    ]|

    ## Porting from GSimpleAsyncResult

    #GTask's API attempts to be simpler than #GSimpleAsyncResult's
    in several ways:
    - You can save task-specific data with g_task_set_task_data(), and
      retrieve it later with g_task_get_task_data(). This replaces the
      abuse of g_simple_async_result_set_op_res_gpointer() for the same
      purpose with #GSimpleAsyncResult.
    - In addition to the task data, #GTask also keeps track of the
      [priority][io-priority], #GCancellable, and
      #GMainContext associated with the task, so tasks that consist of
      a chain of simpler asynchronous operations will have easy access
      to those values when starting each sub-task.
    - g_task_return_error_if_cancelled() provides simplified
      handling for cancellation. In addition, cancellation
      overrides any other #GTask return value by default, like
      #GSimpleAsyncResult does when
      g_simple_async_result_set_check_cancellable() is called.
      (You can use g_task_set_check_cancellable() to turn off that
      behavior.) On the other hand, g_task_run_in_thread()
      guarantees that it will always run your
      `task_func`, even if the task's #GCancellable
      is already cancelled before the task gets a chance to run;
      you can start your `task_func` with a
      g_task_return_error_if_cancelled() check if you need the
      old behavior.
    - The "return" methods (eg, g_task_return_pointer())
      automatically cause the task to be "completed" as well, and
      there is no need to worry about the "complete" vs "complete
      in idle" distinction. (#GTask automatically figures out
      whether the task's callback can be invoked directly, or
      if it needs to be sent to another #GMainContext, or delayed
      until the next iteration of the current #GMainContext.)
    - The "finish" functions for #GTask based operations are generally
      much simpler than #GSimpleAsyncResult ones, normally consisting
      of only a single call to g_task_propagate_pointer() or the like.
      Since g_task_propagate_pointer() "steals" the return value from
      the #GTask, it is not necessary to juggle pointers around to
      prevent it from being freed twice.
    - With #GSimpleAsyncResult, it was common to call
      g_simple_async_result_propagate_error() from the
      `_finish()` wrapper function, and have
      virtual method implementations only deal with successful
      returns. This behavior is deprecated, because it makes it
      difficult for a subclass to chain to a parent class's async
      methods. Instead, the wrapper function should just be a
      simple wrapper, and the virtual method should call an
      appropriate `g_task_propagate_` function.
      Note that wrapper methods can now use
      g_async_result_legacy_propagate_error() to do old-style
      #GSimpleAsyncResult error-returning behavior, and
      g_async_result_is_tagged() to check if a result is tagged as
      having come from the `_async()` wrapper
      function (for "short-circuit" results, such as when passing
      0 to g_input_stream_read_async()).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, source_object: _T.Optional[GObject.Object], cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], callback_data: _T.Optional[object]) -> Task:
        """
        Creates a #GTask acting on @source_object, which will eventually be
        used to invoke @callback in the current
        [thread-default main context][g-main-context-push-thread-default].

        Call this in the "start" method of your asynchronous method, and
        pass the #GTask around throughout the asynchronous operation. You
        can use g_task_set_task_data() to attach task-specific data to the
        object, which you can retrieve later via g_task_get_task_data().

        By default, if @cancellable is cancelled, then the return value of
        the task will always be %G_IO_ERROR_CANCELLED, even if the task had
        already completed before the cancellation. This allows for
        simplified handling in cases where cancellation may imply that
        other objects that the task depends on have been destroyed. If you
        do not want this behavior, you can use
        g_task_set_check_cancellable() to change it.
        """
        ...

    def attach_source(self, source: GLib.Source, callback: GLib.SourceFunc) -> object:
        """
        A utility function for dealing with async operations where you need
        to wait for a #GSource to trigger. Attaches @source to @task's
        #GMainContext with @task's [priority][io-priority], and sets @source's
        callback to @callback, with @task as the callback's `user_data`.

        It will set the @source’s name to the task’s name (as set with
        g_task_set_name()), if one has been set.

        This takes a reference on @task until @source is destroyed.
        """
        ...

    def get_cancellable(self) -> Cancellable:
        """
        Gets @task's #GCancellable
        """
        ...

    def get_check_cancellable(self) -> bool:
        """
        Gets @task's check-cancellable flag. See
        g_task_set_check_cancellable() for more details.
        """
        ...

    def get_completed(self) -> bool:
        """
        Gets the value of #GTask:completed. This changes from %FALSE to %TRUE after
        the task’s callback is invoked, and will return %FALSE if called from inside
        the callback.
        """
        ...

    def get_context(self) -> GLib.MainContext:
        """
        Gets the #GMainContext that @task will return its result in (that
        is, the context that was the
        [thread-default main context][g-main-context-push-thread-default]
        at the point when @task was created).

        This will always return a non-%NULL value, even if the task's
        context is the default #GMainContext.
        """
        ...

    def get_name(self) -> str:
        """
        Gets @task’s name. See g_task_set_name().
        """
        ...

    def get_priority(self) -> int:
        """
        Gets @task's priority
        """
        ...

    def get_return_on_cancel(self) -> bool:
        """
        Gets @task's return-on-cancel flag. See
        g_task_set_return_on_cancel() for more details.
        """
        ...

    def get_source_object(self) -> GObject.Object:
        """
        Gets the source object from @task. Like
        g_async_result_get_source_object(), but does not ref the object.
        """
        ...

    def get_source_tag(self) -> object:
        """
        Gets @task's source tag. See g_task_set_source_tag().
        """
        ...

    def get_task_data(self) -> object:
        """
        Gets @task's `task_data`.
        """
        ...

    def had_error(self) -> bool:
        """
        Tests if @task resulted in an error.
        """
        ...

    def propagate_boolean(self) -> bool:
        """
        Gets the result of @task as a #gboolean.

        If the task resulted in an error, or was cancelled, then this will
        instead return %FALSE and set @error.

        Since this method transfers ownership of the return value (or
        error) to the caller, you may only call it once.
        """
        ...

    def propagate_int(self) -> int:
        """
        Gets the result of @task as an integer (#gssize).

        If the task resulted in an error, or was cancelled, then this will
        instead return -1 and set @error.

        Since this method transfers ownership of the return value (or
        error) to the caller, you may only call it once.
        """
        ...

    def propagate_pointer(self) -> object:
        """
        Gets the result of @task as a pointer, and transfers ownership
        of that value to the caller.

        If the task resulted in an error, or was cancelled, then this will
        instead return %NULL and set @error.

        Since this method transfers ownership of the return value (or
        error) to the caller, you may only call it once.
        """
        ...

    def propagate_value(self, value: GObject.Value) -> bool:
        """
        Gets the result of @task as a #GValue, and transfers ownership of
        that value to the caller. As with g_task_return_value(), this is
        a generic low-level method; g_task_propagate_pointer() and the like
        will usually be more useful for C code.

        If the task resulted in an error, or was cancelled, then this will
        instead set @error and return %FALSE.

        Since this method transfers ownership of the return value (or
        error) to the caller, you may only call it once.
        """
        ...

    def return_boolean(self, result: bool) -> object:
        """
        Sets @task's result to @result and completes the task (see
        g_task_return_pointer() for more discussion of exactly what this
        means).
        """
        ...

    def return_error(self, error: GLib.Error) -> object:
        """
        Sets @task's result to @error (which @task assumes ownership of)
        and completes the task (see g_task_return_pointer() for more
        discussion of exactly what this means).

        Note that since the task takes ownership of @error, and since the
        task may be completed before returning from g_task_return_error(),
        you cannot assume that @error is still valid after calling this.
        Call g_error_copy() on the error if you need to keep a local copy
        as well.

        See also g_task_return_new_error().
        """
        ...

    def return_error_if_cancelled(self) -> bool:
        """
        Checks if @task's #GCancellable has been cancelled, and if so, sets
        @task's error accordingly and completes the task (see
        g_task_return_pointer() for more discussion of exactly what this
        means).
        """
        ...

    def return_int(self, result: int) -> object:
        """
        Sets @task's result to @result and completes the task (see
        g_task_return_pointer() for more discussion of exactly what this
        means).
        """
        ...

    def return_new_error(self, domain: GLib.Quark, code: int, format: str, *args: object) -> object:
        """
        Sets @task's result to a new #GError created from @domain, @code,
        @format, and the remaining arguments, and completes the task (see
        g_task_return_pointer() for more discussion of exactly what this
        means).

        See also g_task_return_error().
        """
        ...

    def return_pointer(self, result: _T.Optional[object], result_destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Sets @task's result to @result and completes the task. If @result
        is not %NULL, then @result_destroy will be used to free @result if
        the caller does not take ownership of it with
        g_task_propagate_pointer().

        "Completes the task" means that for an ordinary asynchronous task
        it will either invoke the task's callback, or else queue that
        callback to be invoked in the proper #GMainContext, or in the next
        iteration of the current #GMainContext. For a task run via
        g_task_run_in_thread() or g_task_run_in_thread_sync(), calling this
        method will save @result to be returned to the caller later, but
        the task will not actually be completed until the #GTaskThreadFunc
        exits.

        Note that since the task may be completed before returning from
        g_task_return_pointer(), you cannot assume that @result is still
        valid after calling this, unless you are still holding another
        reference on it.
        """
        ...

    def return_value(self, result: _T.Optional[GObject.Value]) -> object:
        """
        Sets @task's result to @result (by copying it) and completes the task.

        If @result is %NULL then a #GValue of type %G_TYPE_POINTER
        with a value of %NULL will be used for the result.

        This is a very generic low-level method intended primarily for use
        by language bindings; for C code, g_task_return_pointer() and the
        like will normally be much easier to use.
        """
        ...

    def run_in_thread(self, task_func: TaskThreadFunc) -> object:
        """
        Runs @task_func in another thread. When @task_func returns, @task's
        #GAsyncReadyCallback will be invoked in @task's #GMainContext.

        This takes a ref on @task until the task completes.

        See #GTaskThreadFunc for more details about how @task_func is handled.

        Although GLib currently rate-limits the tasks queued via
        g_task_run_in_thread(), you should not assume that it will always
        do this. If you have a very large number of tasks to run (several tens of
        tasks), but don't want them to all run at once, you should only queue a
        limited number of them (around ten) at a time.
        """
        ...

    def run_in_thread_sync(self, task_func: TaskThreadFunc) -> object:
        """
        Runs @task_func in another thread, and waits for it to return or be
        cancelled. You can use g_task_propagate_pointer(), etc, afterward
        to get the result of @task_func.

        See #GTaskThreadFunc for more details about how @task_func is handled.

        Normally this is used with tasks created with a %NULL
        `callback`, but note that even if the task does
        have a callback, it will not be invoked when @task_func returns.
        #GTask:completed will be set to %TRUE just before this function returns.

        Although GLib currently rate-limits the tasks queued via
        g_task_run_in_thread_sync(), you should not assume that it will
        always do this. If you have a very large number of tasks to run,
        but don't want them to all run at once, you should only queue a
        limited number of them at a time.
        """
        ...

    def set_check_cancellable(self, check_cancellable: bool) -> object:
        """
        Sets or clears @task's check-cancellable flag. If this is %TRUE
        (the default), then g_task_propagate_pointer(), etc, and
        g_task_had_error() will check the task's #GCancellable first, and
        if it has been cancelled, then they will consider the task to have
        returned an "Operation was cancelled" error
        (%G_IO_ERROR_CANCELLED), regardless of any other error or return
        value the task may have had.

        If @check_cancellable is %FALSE, then the #GTask will not check the
        cancellable itself, and it is up to @task's owner to do this (eg,
        via g_task_return_error_if_cancelled()).

        If you are using g_task_set_return_on_cancel() as well, then
        you must leave check-cancellable set %TRUE.
        """
        ...

    def set_name(self, name: _T.Optional[str]) -> object:
        """
        Sets @task’s name, used in debugging and profiling. The name defaults to
        %NULL.

        The task name should describe in a human readable way what the task does.
        For example, ‘Open file’ or ‘Connect to network host’. It is used to set the
        name of the #GSource used for idle completion of the task.

        This function may only be called before the @task is first used in a thread
        other than the one it was constructed in. It is called automatically by
        g_task_set_source_tag() if not called already.
        """
        ...

    def set_priority(self, priority: int) -> object:
        """
        Sets @task's priority. If you do not call this, it will default to
        %G_PRIORITY_DEFAULT.

        This will affect the priority of #GSources created with
        g_task_attach_source() and the scheduling of tasks run in threads,
        and can also be explicitly retrieved later via
        g_task_get_priority().
        """
        ...

    def set_return_on_cancel(self, return_on_cancel: bool) -> bool:
        """
        Sets or clears @task's return-on-cancel flag. This is only
        meaningful for tasks run via g_task_run_in_thread() or
        g_task_run_in_thread_sync().

        If @return_on_cancel is %TRUE, then cancelling @task's
        #GCancellable will immediately cause it to return, as though the
        task's #GTaskThreadFunc had called
        g_task_return_error_if_cancelled() and then returned.

        This allows you to create a cancellable wrapper around an
        uninterruptible function. The #GTaskThreadFunc just needs to be
        careful that it does not modify any externally-visible state after
        it has been cancelled. To do that, the thread should call
        g_task_set_return_on_cancel() again to (atomically) set
        return-on-cancel %FALSE before making externally-visible changes;
        if the task gets cancelled before the return-on-cancel flag could
        be changed, g_task_set_return_on_cancel() will indicate this by
        returning %FALSE.

        You can disable and re-enable this flag multiple times if you wish.
        If the task's #GCancellable is cancelled while return-on-cancel is
        %FALSE, then calling g_task_set_return_on_cancel() to set it %TRUE
        again will cause the task to be cancelled at that point.

        If the task's #GCancellable is already cancelled before you call
        g_task_run_in_thread()/g_task_run_in_thread_sync(), then the
        #GTaskThreadFunc will still be run (for consistency), but the task
        will also be completed right away.
        """
        ...

    def set_source_tag(self, source_tag: _T.Optional[object]) -> object:
        """
        Sets @task's source tag.

        You can use this to tag a task return
        value with a particular pointer (usually a pointer to the function
        doing the tagging) and then later check it using
        g_task_get_source_tag() (or g_async_result_is_tagged()) in the
        task's "finish" function, to figure out if the response came from a
        particular place.

        A macro wrapper around this function will automatically set the
        task’s name to the string form of @source_tag if it’s not already
        set, for convenience.
        """
        ...

    def set_task_data(self, task_data: _T.Optional[object], task_data_destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Sets @task's task data (freeing the existing task data, if any).
        """
        ...


    ...

class TcpConnection(SocketConnection):
    """
    This is the subclass of #GSocketConnection that is created
    for TCP/IP sockets.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_graceful_disconnect(self) -> bool:
        """
        Checks if graceful disconnects are used. See
        g_tcp_connection_set_graceful_disconnect().
        """
        ...

    def set_graceful_disconnect(self, graceful_disconnect: bool) -> object:
        """
        This enables graceful disconnects on close. A graceful disconnect
        means that we signal the receiving end that the connection is terminated
        and wait for it to close the connection before closing the connection.

        A graceful disconnect means that we can be sure that we successfully sent
        all the outstanding data to the other end, or get an error reported.
        However, it also means we have to wait for all the data to reach the
        other side and for it to acknowledge this by closing the socket, which may
        take a while. For this reason it is disabled by default.
        """
        ...


    ...

class TcpWrapperConnection(TcpConnection):
    """
    A #GTcpWrapperConnection can be used to wrap a #GIOStream that is
    based on a #GSocket, but which is not actually a
    #GSocketConnection. This is used by #GSocketClient so that it can
    always return a #GSocketConnection, even when the connection it has
    actually created is not directly a #GSocketConnection.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, base_io_stream: IOStream, socket: Socket) -> SocketConnection:
        """
        Wraps @base_io_stream and @socket together as a #GSocketConnection.
        """
        ...

    def get_base_io_stream(self) -> IOStream:
        """
        Gets @conn's base #GIOStream
        """
        ...


    ...

class TestDBus(GObject.Object):
    """
    A helper class for testing code which uses D-Bus without touching the user's
    session bus.

    Note that #GTestDBus modifies the user’s environment, calling setenv().
    This is not thread-safe, so all #GTestDBus calls should be completed before
    threads are spawned, or should have appropriate locking to ensure no access
    conflicts to environment variables shared between #GTestDBus and other
    threads.

    ## Creating unit tests using GTestDBus

    Testing of D-Bus services can be tricky because normally we only ever run
    D-Bus services over an existing instance of the D-Bus daemon thus we
    usually don't activate D-Bus services that are not yet installed into the
    target system. The #GTestDBus object makes this easier for us by taking care
    of the lower level tasks such as running a private D-Bus daemon and looking
    up uninstalled services in customizable locations, typically in your source
    code tree.

    The first thing you will need is a separate service description file for the
    D-Bus daemon. Typically a `services` subdirectory of your `tests` directory
    is a good place to put this file.

    The service file should list your service along with an absolute path to the
    uninstalled service executable in your source tree. Using autotools we would
    achieve this by adding a file such as `my-server.service.in` in the services
    directory and have it processed by configure.
    |[
        [D-BUS Service]
        Name=org.gtk.GDBus.Examples.ObjectManager
        Exec=@abs_top_builddir@/gio/tests/gdbus-example-objectmanager-server
    ]|
    You will also need to indicate this service directory in your test
    fixtures, so you will need to pass the path while compiling your
    test cases. Typically this is done with autotools with an added
    preprocessor flag specified to compile your tests such as:
    |[
        -DTEST_SERVICES=\""$(abs_top_builddir)/tests/services"\"
    ]|
        Once you have a service definition file which is local to your source tree,
    you can proceed to set up a GTest fixture using the #GTestDBus scaffolding.

    An example of a test fixture for D-Bus services can be found
    here:
    [gdbus-test-fixture.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-test-fixture.c)

    Note that these examples only deal with isolating the D-Bus aspect of your
    service. To successfully run isolated unit tests on your service you may need
    some additional modifications to your test case fixture. For example; if your
    service uses GSettings and installs a schema then it is important that your test service
    not load the schema in the ordinary installed location (chances are that your service
    and schema files are not yet installed, or worse; there is an older version of the
    schema file sitting in the install location).

    Most of the time we can work around these obstacles using the
    environment. Since the environment is inherited by the D-Bus daemon
    created by #GTestDBus and then in turn inherited by any services the
    D-Bus daemon activates, using the setup routine for your fixture is
    a practical place to help sandbox your runtime environment. For the
    rather typical GSettings case we can work around this by setting
    `GSETTINGS_SCHEMA_DIR` to the in tree directory holding your schemas
    in the above fixture_setup() routine.

    The GSettings schemas need to be locally pre-compiled for this to work. This can be achieved
    by compiling the schemas locally as a step before running test cases, an autotools setup might
    do the following in the directory holding schemas:
    |[
        all-am:
                $(GLIB_COMPILE_SCHEMAS) .

        CLEANFILES += gschemas.compiled
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, flags: TestDBusFlags) -> TestDBus:
        """
        Create a new #GTestDBus object.
        """
        ...

    def add_service_dir(self, path: str) -> object:
        """
        Add a path where dbus-daemon will look up .service files. This can't be
        called after g_test_dbus_up().
        """
        ...

    def down(self) -> object:
        """
        Stop the session bus started by g_test_dbus_up().

        This will wait for the singleton returned by g_bus_get() or g_bus_get_sync()
        to be destroyed. This is done to ensure that the next unit test won't get a
        leaked singleton from this test.
        """
        ...

    def get_bus_address(self) -> str:
        """
        Get the address on which dbus-daemon is running. If g_test_dbus_up() has not
        been called yet, %NULL is returned. This can be used with
        g_dbus_connection_new_for_address().
        """
        ...

    def get_flags(self) -> TestDBusFlags:
        """
        Get the flags of the #GTestDBus object.
        """
        ...

    def stop(self) -> object:
        """
        Stop the session bus started by g_test_dbus_up().

        Unlike g_test_dbus_down(), this won't verify the #GDBusConnection
        singleton returned by g_bus_get() or g_bus_get_sync() is destroyed. Unit
        tests wanting to verify behaviour after the session bus has been stopped
        can use this function but should still call g_test_dbus_down() when done.
        """
        ...

    def up(self) -> object:
        """
        Start a dbus-daemon instance and set DBUS_SESSION_BUS_ADDRESS. After this
        call, it is safe for unit tests to start sending messages on the session bus.

        If this function is called from setup callback of g_test_add(),
        g_test_dbus_down() must be called in its teardown callback.

        If this function is called from unit test's main(), then g_test_dbus_down()
        must be called after g_test_run().
        """
        ...


    ...

class ThemedIcon(GObject.Object, Icon):
    """
    #GThemedIcon is an implementation of #GIcon that supports icon themes.
    #GThemedIcon contains a list of all of the icons present in an icon
    theme, so that icons can be looked up quickly. #GThemedIcon does
    not provide actual pixmaps for icons, just the icon names.
    Ideally something like gtk_icon_theme_choose_icon() should be used to
    resolve the list of names so that fallback icons work nicely with
    themes that inherit other themes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, iconname: str) -> ThemedIcon:
        """
        Creates a new themed icon for @iconname.
        """
        ...


    @classmethod
    def new_from_names(cls, iconnames: object, len: int) -> ThemedIcon:
        """
        Creates a new themed icon for @iconnames.
        """
        ...


    @classmethod
    def new_with_default_fallbacks(cls, iconname: str) -> ThemedIcon:
        """
        Creates a new themed icon for @iconname, and all the names
        that can be created by shortening @iconname at '-' characters.

        In the following example, @icon1 and @icon2 are equivalent:
        |[<!-- language="C" -->
        const char *names[] = {
          "gnome-dev-cdrom-audio",
          "gnome-dev-cdrom",
          "gnome-dev",
          "gnome"
        };

        icon1 = g_themed_icon_new_from_names (names, 4);
        icon2 = g_themed_icon_new_with_default_fallbacks ("gnome-dev-cdrom-audio");
        ]|
        """
        ...

    def append_name(self, iconname: str) -> object:
        """
        Append a name to the list of icons from within @icon.

        Note that doing so invalidates the hash computed by prior calls
        to g_icon_hash().
        """
        ...

    def get_names(self) -> object:
        """
        Gets the names of icons from within @icon.
        """
        ...

    def prepend_name(self, iconname: str) -> object:
        """
        Prepend a name to the list of icons from within @icon.

        Note that doing so invalidates the hash computed by prior calls
        to g_icon_hash().
        """
        ...


    ...

class ThreadedSocketService(SocketService):
    """
    A #GThreadedSocketService is a simple subclass of #GSocketService
    that handles incoming connections by creating a worker thread and
    dispatching the connection to it by emitting the
    #GThreadedSocketService::run signal in the new thread.

    The signal handler may perform blocking IO and need not return
    until the connection is closed.

    The service is implemented using a thread pool, so there is a
    limited amount of threads available to serve incoming requests.
    The service automatically stops the #GSocketService from accepting
    new connections when all threads are busy.

    As with #GSocketService, you may connect to #GThreadedSocketService::run,
    or subclass and override the default handler.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, max_threads: int) -> SocketService:
        """
        Creates a new #GThreadedSocketService with no listeners. Listeners
        must be added with one of the #GSocketListener "add" methods.
        """
        ...


    ...

class TlsCertificate(GObject.Object):
    """
    A certificate used for TLS authentication and encryption.
    This can represent either a certificate only (eg, the certificate
    received by a client from a server), or the combination of
    a certificate and a private key (which is needed when acting as a
    #GTlsServerConnection).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new_from_file(cls, file: str) -> TlsCertificate:
        """
        Creates a #GTlsCertificate from the data in @file.

        As of 2.72, if the filename ends in `.p12` or `.pfx` the data is loaded by
        g_tls_certificate_new_from_pkcs12() otherwise it is loaded by
        g_tls_certificate_new_from_pem(). See those functions for
        exact details.

        If @file cannot be read or parsed, the function will return %NULL and
        set @error.
        """
        ...


    @classmethod
    def new_from_file_with_password(cls, file: str, password: str) -> TlsCertificate:
        """
        Creates a #GTlsCertificate from the data in @file.

        If @file cannot be read or parsed, the function will return %NULL and
        set @error.

        Any unknown file types will error with %G_IO_ERROR_NOT_SUPPORTED.
        Currently only `.p12` and `.pfx` files are supported.
        See g_tls_certificate_new_from_pkcs12() for more details.
        """
        ...


    @classmethod
    def new_from_files(cls, cert_file: str, key_file: str) -> TlsCertificate:
        """
        Creates a #GTlsCertificate from the PEM-encoded data in @cert_file
        and @key_file. The returned certificate will be the first certificate
        found in @cert_file. As of GLib 2.44, if @cert_file contains more
        certificates it will try to load a certificate chain. All
        certificates will be verified in the order found (top-level
        certificate should be the last one in the file) and the
        #GTlsCertificate:issuer property of each certificate will be set
        accordingly if the verification succeeds. If any certificate in the
        chain cannot be verified, the first certificate in the file will
        still be returned.

        If either file cannot be read or parsed, the function will return
        %NULL and set @error. Otherwise, this behaves like
        g_tls_certificate_new_from_pem().
        """
        ...


    @classmethod
    def new_from_pem(cls, data: str, length: int) -> TlsCertificate:
        """
        Creates a #GTlsCertificate from the PEM-encoded data in @data. If
        @data includes both a certificate and a private key, then the
        returned certificate will include the private key data as well. (See
        the #GTlsCertificate:private-key-pem property for information about
        supported formats.)

        The returned certificate will be the first certificate found in
        @data. As of GLib 2.44, if @data contains more certificates it will
        try to load a certificate chain. All certificates will be verified in
        the order found (top-level certificate should be the last one in the
        file) and the #GTlsCertificate:issuer property of each certificate
        will be set accordingly if the verification succeeds. If any
        certificate in the chain cannot be verified, the first certificate in
        the file will still be returned.
        """
        ...


    @classmethod
    def new_from_pkcs11_uris(cls, pkcs11_uri: str, private_key_pkcs11_uri: _T.Optional[str]) -> TlsCertificate:
        """
        Creates a #GTlsCertificate from a
        [PKCS \#11](https://docs.oasis-open.org/pkcs11/pkcs11-base/v3.0/os/pkcs11-base-v3.0-os.html) URI.

        An example @pkcs11_uri would be `pkcs11:model=Model;manufacturer=Manufacture;serial=1;token=My%20Client%20Certificate;id=%01`

        Where the token’s layout is:

        |[
        Object 0:
          URL: pkcs11:model=Model;manufacturer=Manufacture;serial=1;token=My%20Client%20Certificate;id=%01;object=private%20key;type=private
          Type: Private key (RSA-2048)
          ID: 01

        Object 1:
          URL: pkcs11:model=Model;manufacturer=Manufacture;serial=1;token=My%20Client%20Certificate;id=%01;object=Certificate%20for%20Authentication;type=cert
          Type: X.509 Certificate (RSA-2048)
          ID: 01
        ]|

        In this case the certificate and private key would both be detected and used as expected.
        @pkcs_uri may also just reference an X.509 certificate object and then optionally
        @private_key_pkcs11_uri allows using a private key exposed under a different URI.

        Note that the private key is not accessed until usage and may fail or require a PIN later.
        """
        ...


    @classmethod
    def new_from_pkcs12(cls, data: object, length: int, password: _T.Optional[str]) -> TlsCertificate:
        """
        Creates a #GTlsCertificate from the data in @data. It must contain
        a certificate and matching private key.

        If extra certificates are included they will be verified as a chain
        and the #GTlsCertificate:issuer property will be set.
        All other data will be ignored.

        You can pass as single password for all of the data which will be
        used both for the PKCS #12 container as well as encrypted
        private keys. If decryption fails it will error with
        %G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD.

        This constructor requires support in the current #GTlsBackend.
        If support is missing it will error with
        %G_IO_ERROR_NOT_SUPPORTED.

        Other parsing failures will error with %G_TLS_ERROR_BAD_CERTIFICATE.
        """
        ...

    def get_dns_names(self) -> GLib.PtrArray:
        """
        Gets the value of #GTlsCertificate:dns-names.
        """
        ...

    def get_ip_addresses(self) -> GLib.PtrArray:
        """
        Gets the value of #GTlsCertificate:ip-addresses.
        """
        ...

    def get_issuer(self) -> TlsCertificate:
        """
        Gets the #GTlsCertificate representing @cert's issuer, if known
        """
        ...

    def get_issuer_name(self) -> str:
        """
        Returns the issuer name from the certificate.
        """
        ...

    def get_not_valid_after(self) -> GLib.DateTime:
        """
        Returns the time at which the certificate became or will become invalid.
        """
        ...

    def get_not_valid_before(self) -> GLib.DateTime:
        """
        Returns the time at which the certificate became or will become valid.
        """
        ...

    def get_subject_name(self) -> str:
        """
        Returns the subject name from the certificate.
        """
        ...

    def is_same(self, cert_two: TlsCertificate) -> bool:
        """
        Check if two #GTlsCertificate objects represent the same certificate.
        The raw DER byte data of the two certificates are checked for equality.
        This has the effect that two certificates may compare equal even if
        their #GTlsCertificate:issuer, #GTlsCertificate:private-key, or
        #GTlsCertificate:private-key-pem properties differ.
        """
        ...

    def verify(self, identity: _T.Optional[SocketConnectable], trusted_ca: _T.Optional[TlsCertificate]) -> TlsCertificateFlags:
        """
        This verifies @cert and returns a set of #GTlsCertificateFlags
        indicating any problems found with it. This can be used to verify a
        certificate outside the context of making a connection, or to
        check a certificate against a CA that is not part of the system
        CA database.

        If @identity is not %NULL, @cert's name(s) will be compared against
        it, and %G_TLS_CERTIFICATE_BAD_IDENTITY will be set in the return
        value if it does not match. If @identity is %NULL, that bit will
        never be set in the return value.

        If @trusted_ca is not %NULL, then @cert (or one of the certificates
        in its chain) must be signed by it, or else
        %G_TLS_CERTIFICATE_UNKNOWN_CA will be set in the return value. If
        @trusted_ca is %NULL, that bit will never be set in the return
        value.

        GLib guarantees that if certificate verification fails, at least one
        error will be set in the return value, but it does not guarantee
        that all possible errors will be set. Accordingly, you may not safely
        decide to ignore any particular type of error. For example, it would
        be incorrect to mask %G_TLS_CERTIFICATE_EXPIRED if you want to allow
        expired certificates, because this could potentially be the only
        error flag set even if other problems exist with the certificate.

        Because TLS session context is not used, #GTlsCertificate may not
        perform as many checks on the certificates as #GTlsConnection would.
        For example, certificate constraints may not be honored, and
        revocation checks may not be performed. The best way to verify TLS
        certificates used by a TLS connection is to let #GTlsConnection
        handle the verification.
        """
        ...


    ...

class TlsConnection(IOStream):
    """
    #GTlsConnection is the base TLS connection class type, which wraps
    a #GIOStream and provides TLS encryption on top of it. Its
    subclasses, #GTlsClientConnection and #GTlsServerConnection,
    implement client-side and server-side TLS, respectively.

    For DTLS (Datagram TLS) support, see #GDtlsConnection.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def emit_accept_certificate(self, peer_cert: TlsCertificate, errors: TlsCertificateFlags) -> bool:
        """
        Used by #GTlsConnection implementations to emit the
        #GTlsConnection::accept-certificate signal.
        """
        ...

    def get_certificate(self) -> TlsCertificate:
        """
        Gets @conn's certificate, as set by
        g_tls_connection_set_certificate().
        """
        ...

    def get_channel_binding_data(self, type: TlsChannelBindingType, data: GLib.ByteArray) -> bool:
        """
        Query the TLS backend for TLS channel binding data of @type for @conn.

        This call retrieves TLS channel binding data as specified in RFC
        [5056](https://tools.ietf.org/html/rfc5056), RFC
        [5929](https://tools.ietf.org/html/rfc5929), and related RFCs.  The
        binding data is returned in @data.  The @data is resized by the callee
        using #GByteArray buffer management and will be freed when the @data
        is destroyed by g_byte_array_unref(). If @data is %NULL, it will only
        check whether TLS backend is able to fetch the data (e.g. whether @type
        is supported by the TLS backend). It does not guarantee that the data
        will be available though.  That could happen if TLS connection does not
        support @type or the binding data is not available yet due to additional
        negotiation or input required.
        """
        ...

    def get_ciphersuite_name(self) -> str:
        """
        Returns the name of the current TLS ciphersuite, or %NULL if the
        connection has not handshaked or has been closed. Beware that the TLS
        backend may use any of multiple different naming conventions, because
        OpenSSL and GnuTLS have their own ciphersuite naming conventions that
        are different from each other and different from the standard, IANA-
        registered ciphersuite names. The ciphersuite name is intended to be
        displayed to the user for informative purposes only, and parsing it
        is not recommended.
        """
        ...

    def get_database(self) -> TlsDatabase:
        """
        Gets the certificate database that @conn uses to verify
        peer certificates. See g_tls_connection_set_database().
        """
        ...

    def get_interaction(self) -> TlsInteraction:
        """
        Get the object that will be used to interact with the user. It will be used
        for things like prompting the user for passwords. If %NULL is returned, then
        no user interaction will occur for this connection.
        """
        ...

    def get_negotiated_protocol(self) -> str:
        """
        Gets the name of the application-layer protocol negotiated during
        the handshake.

        If the peer did not use the ALPN extension, or did not advertise a
        protocol that matched one of @conn's protocols, or the TLS backend
        does not support ALPN, then this will be %NULL. See
        g_tls_connection_set_advertised_protocols().
        """
        ...

    def get_peer_certificate(self) -> TlsCertificate:
        """
        Gets @conn's peer's certificate after the handshake has completed
        or failed. (It is not set during the emission of
        #GTlsConnection::accept-certificate.)
        """
        ...

    def get_peer_certificate_errors(self) -> TlsCertificateFlags:
        """
        Gets the errors associated with validating @conn's peer's
        certificate, after the handshake has completed or failed. (It is
        not set during the emission of #GTlsConnection::accept-certificate.)

        See #GTlsConnection:peer-certificate-errors for more information.
        """
        ...

    def get_protocol_version(self) -> TlsProtocolVersion:
        """
        Returns the current TLS protocol version, which may be
        %G_TLS_PROTOCOL_VERSION_UNKNOWN if the connection has not handshaked, or
        has been closed, or if the TLS backend has implemented a protocol version
        that is not a recognized #GTlsProtocolVersion.
        """
        ...

    def get_rehandshake_mode(self) -> TlsRehandshakeMode:
        """
        Gets @conn rehandshaking mode. See
        g_tls_connection_set_rehandshake_mode() for details.
        """
        ...

    def get_require_close_notify(self) -> bool:
        """
        Tests whether or not @conn expects a proper TLS close notification
        when the connection is closed. See
        g_tls_connection_set_require_close_notify() for details.
        """
        ...

    def get_use_system_certdb(self) -> bool:
        """
        Gets whether @conn uses the system certificate database to verify
        peer certificates. See g_tls_connection_set_use_system_certdb().
        """
        ...

    def handshake(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Attempts a TLS handshake on @conn.

        On the client side, it is never necessary to call this method;
        although the connection needs to perform a handshake after
        connecting (or after sending a "STARTTLS"-type command),
        #GTlsConnection will handle this for you automatically when you try
        to send or receive data on the connection. You can call
        g_tls_connection_handshake() manually if you want to know whether
        the initial handshake succeeded or failed (as opposed to just
        immediately trying to use @conn to read or write, in which case,
        if it fails, it may not be possible to tell if it failed before or
        after completing the handshake), but beware that servers may reject
        client authentication after the handshake has completed, so a
        successful handshake does not indicate the connection will be usable.

        Likewise, on the server side, although a handshake is necessary at
        the beginning of the communication, you do not need to call this
        function explicitly unless you want clearer error reporting.

        Previously, calling g_tls_connection_handshake() after the initial
        handshake would trigger a rehandshake; however, this usage was
        deprecated in GLib 2.60 because rehandshaking was removed from the
        TLS protocol in TLS 1.3. Since GLib 2.64, calling this function after
        the initial handshake will no longer do anything.

        When using a #GTlsConnection created by #GSocketClient, the
        #GSocketClient performs the initial handshake, so calling this
        function manually is not recommended.

        #GTlsConnection::accept_certificate may be emitted during the
        handshake.
        """
        ...

    def handshake_async(self, io_priority: int, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously performs a TLS handshake on @conn. See
        g_tls_connection_handshake() for more information.
        """
        ...

    def handshake_finish(self, result: AsyncResult) -> bool:
        """
        Finish an asynchronous TLS handshake operation. See
        g_tls_connection_handshake() for more information.
        """
        ...

    def set_advertised_protocols(self, protocols: _T.Optional[object]) -> object:
        """
        Sets the list of application-layer protocols to advertise that the
        caller is willing to speak on this connection. The
        Application-Layer Protocol Negotiation (ALPN) extension will be
        used to negotiate a compatible protocol with the peer; use
        g_tls_connection_get_negotiated_protocol() to find the negotiated
        protocol after the handshake.  Specifying %NULL for the the value
        of @protocols will disable ALPN negotiation.

        See [IANA TLS ALPN Protocol IDs](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)
        for a list of registered protocol IDs.
        """
        ...

    def set_certificate(self, certificate: TlsCertificate) -> object:
        """
        This sets the certificate that @conn will present to its peer
        during the TLS handshake. For a #GTlsServerConnection, it is
        mandatory to set this, and that will normally be done at construct
        time.

        For a #GTlsClientConnection, this is optional. If a handshake fails
        with %G_TLS_ERROR_CERTIFICATE_REQUIRED, that means that the server
        requires a certificate, and if you try connecting again, you should
        call this method first. You can call
        g_tls_client_connection_get_accepted_cas() on the failed connection
        to get a list of Certificate Authorities that the server will
        accept certificates from.

        (It is also possible that a server will allow the connection with
        or without a certificate; in that case, if you don't provide a
        certificate, you can tell that the server requested one by the fact
        that g_tls_client_connection_get_accepted_cas() will return
        non-%NULL.)
        """
        ...

    def set_database(self, database: _T.Optional[TlsDatabase]) -> object:
        """
        Sets the certificate database that is used to verify peer certificates.
        This is set to the default database by default. See
        g_tls_backend_get_default_database(). If set to %NULL, then
        peer certificate validation will always set the
        %G_TLS_CERTIFICATE_UNKNOWN_CA error (meaning
        #GTlsConnection::accept-certificate will always be emitted on
        client-side connections, unless that bit is not set in
        #GTlsClientConnection:validation-flags).

        There are nonintuitive security implications when using a non-default
        database. See #GDtlsConnection:database for details.
        """
        ...

    def set_interaction(self, interaction: _T.Optional[TlsInteraction]) -> object:
        """
        Set the object that will be used to interact with the user. It will be used
        for things like prompting the user for passwords.

        The @interaction argument will normally be a derived subclass of
        #GTlsInteraction. %NULL can also be provided if no user interaction
        should occur for this connection.
        """
        ...

    def set_rehandshake_mode(self, mode: TlsRehandshakeMode) -> object:
        """
        Since GLib 2.64, changing the rehandshake mode is no longer supported
        and will have no effect. With TLS 1.3, rehandshaking has been removed from
        the TLS protocol, replaced by separate post-handshake authentication and
        rekey operations.
        """
        ...

    def set_require_close_notify(self, require_close_notify: bool) -> object:
        """
        Sets whether or not @conn expects a proper TLS close notification
        before the connection is closed. If this is %TRUE (the default),
        then @conn will expect to receive a TLS close notification from its
        peer before the connection is closed, and will return a
        %G_TLS_ERROR_EOF error if the connection is closed without proper
        notification (since this may indicate a network error, or
        man-in-the-middle attack).

        In some protocols, the application will know whether or not the
        connection was closed cleanly based on application-level data
        (because the application-level data includes a length field, or is
        somehow self-delimiting); in this case, the close notify is
        redundant and sometimes omitted. (TLS 1.1 explicitly allows this;
        in TLS 1.0 it is technically an error, but often done anyway.) You
        can use g_tls_connection_set_require_close_notify() to tell @conn
        to allow an "unannounced" connection close, in which case the close
        will show up as a 0-length read, as in a non-TLS
        #GSocketConnection, and it is up to the application to check that
        the data has been fully received.

        Note that this only affects the behavior when the peer closes the
        connection; when the application calls g_io_stream_close() itself
        on @conn, this will send a close notification regardless of the
        setting of this property. If you explicitly want to do an unclean
        close, you can close @conn's #GTlsConnection:base-io-stream rather
        than closing @conn itself, but note that this may only be done when no other
        operations are pending on @conn or the base I/O stream.
        """
        ...

    def set_use_system_certdb(self, use_system_certdb: bool) -> object:
        """
        Sets whether @conn uses the system certificate database to verify
        peer certificates. This is %TRUE by default. If set to %FALSE, then
        peer certificate validation will always set the
        %G_TLS_CERTIFICATE_UNKNOWN_CA error (meaning
        #GTlsConnection::accept-certificate will always be emitted on
        client-side connections, unless that bit is not set in
        #GTlsClientConnection:validation-flags).
        """
        ...


    ...

class TlsDatabase(GObject.Object):
    """
    #GTlsDatabase is used to look up certificates and other information
    from a certificate or key store. It is an abstract base class which
    TLS library specific subtypes override.

    A #GTlsDatabase may be accessed from multiple threads by the TLS backend.
    All implementations are required to be fully thread-safe.

    Most common client applications will not directly interact with
    #GTlsDatabase. It is used internally by #GTlsConnection.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def create_certificate_handle(self, certificate: TlsCertificate) -> str:
        """
        Create a handle string for the certificate. The database will only be able
        to create a handle for certificates that originate from the database. In
        cases where the database cannot create a handle for a certificate, %NULL
        will be returned.

        This handle should be stable across various instances of the application,
        and between applications. If a certificate is modified in the database,
        then it is not guaranteed that this handle will continue to point to it.
        """
        ...

    def lookup_certificate_for_handle(self, handle: str, interaction: _T.Optional[TlsInteraction], flags: TlsDatabaseLookupFlags, cancellable: _T.Optional[Cancellable]) -> TlsCertificate:
        """
        Look up a certificate by its handle.

        The handle should have been created by calling
        g_tls_database_create_certificate_handle() on a #GTlsDatabase object of
        the same TLS backend. The handle is designed to remain valid across
        instantiations of the database.

        If the handle is no longer valid, or does not point to a certificate in
        this database, then %NULL will be returned.

        This function can block, use g_tls_database_lookup_certificate_for_handle_async() to perform
        the lookup operation asynchronously.
        """
        ...

    def lookup_certificate_for_handle_async(self, handle: str, interaction: _T.Optional[TlsInteraction], flags: TlsDatabaseLookupFlags, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously look up a certificate by its handle in the database. See
        g_tls_database_lookup_certificate_for_handle() for more information.
        """
        ...

    def lookup_certificate_for_handle_finish(self, result: AsyncResult) -> TlsCertificate:
        """
        Finish an asynchronous lookup of a certificate by its handle. See
        g_tls_database_lookup_certificate_for_handle() for more information.

        If the handle is no longer valid, or does not point to a certificate in
        this database, then %NULL will be returned.
        """
        ...

    def lookup_certificate_issuer(self, certificate: TlsCertificate, interaction: _T.Optional[TlsInteraction], flags: TlsDatabaseLookupFlags, cancellable: _T.Optional[Cancellable]) -> TlsCertificate:
        """
        Look up the issuer of @certificate in the database. The
        #GTlsCertificate:issuer property of @certificate is not modified, and
        the two certificates are not hooked into a chain.

        This function can block. Use g_tls_database_lookup_certificate_issuer_async()
        to perform the lookup operation asynchronously.

        Beware this function cannot be used to build certification paths. The
        issuer certificate returned by this function may not be the same as
        the certificate that would actually be used to construct a valid
        certification path during certificate verification.
        [RFC 4158](https://datatracker.ietf.org/doc/html/rfc4158) explains
        why an issuer certificate cannot be naively assumed to be part of the
        the certification path (though GLib's TLS backends may not follow the
        path building strategies outlined in this RFC). Due to the complexity
        of certification path building, GLib does not provide any way to know
        which certification path will actually be used when verifying a TLS
        certificate. Accordingly, this function cannot be used to make
        security-related decisions. Only GLib itself should make security
        decisions about TLS certificates.
        """
        ...

    def lookup_certificate_issuer_async(self, certificate: TlsCertificate, interaction: _T.Optional[TlsInteraction], flags: TlsDatabaseLookupFlags, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously look up the issuer of @certificate in the database. See
        g_tls_database_lookup_certificate_issuer() for more information.
        """
        ...

    def lookup_certificate_issuer_finish(self, result: AsyncResult) -> TlsCertificate:
        """
        Finish an asynchronous lookup issuer operation. See
        g_tls_database_lookup_certificate_issuer() for more information.
        """
        ...

    def lookup_certificates_issued_by(self, issuer_raw_dn: GLib.ByteArray, interaction: _T.Optional[TlsInteraction], flags: TlsDatabaseLookupFlags, cancellable: _T.Optional[Cancellable]) -> GLib.List:
        """
        Look up certificates issued by this issuer in the database.

        This function can block, use g_tls_database_lookup_certificates_issued_by_async() to perform
        the lookup operation asynchronously.
        """
        ...

    def lookup_certificates_issued_by_async(self, issuer_raw_dn: GLib.ByteArray, interaction: _T.Optional[TlsInteraction], flags: TlsDatabaseLookupFlags, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously look up certificates issued by this issuer in the database. See
        g_tls_database_lookup_certificates_issued_by() for more information.

        The database may choose to hold a reference to the issuer byte array for the duration
        of of this asynchronous operation. The byte array should not be modified during
        this time.
        """
        ...

    def lookup_certificates_issued_by_finish(self, result: AsyncResult) -> GLib.List:
        """
        Finish an asynchronous lookup of certificates. See
        g_tls_database_lookup_certificates_issued_by() for more information.
        """
        ...

    def verify_chain(self, chain: TlsCertificate, purpose: str, identity: _T.Optional[SocketConnectable], interaction: _T.Optional[TlsInteraction], flags: TlsDatabaseVerifyFlags, cancellable: _T.Optional[Cancellable]) -> TlsCertificateFlags:
        """
        Determines the validity of a certificate chain, outside the context
        of a TLS session.

        @chain is a chain of #GTlsCertificate objects each pointing to the next
        certificate in the chain by its #GTlsCertificate:issuer property.

        @purpose describes the purpose (or usage) for which the certificate
        is being used. Typically @purpose will be set to %G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER
        which means that the certificate is being used to authenticate a server
        (and we are acting as the client).

        The @identity is used to ensure the server certificate is valid for
        the expected peer identity. If the identity does not match the
        certificate, %G_TLS_CERTIFICATE_BAD_IDENTITY will be set in the
        return value. If @identity is %NULL, that bit will never be set in
        the return value. The peer identity may also be used to check for
        pinned certificates (trust exceptions) in the database. These may
        override the normal verification process on a host-by-host basis.

        Currently there are no @flags, and %G_TLS_DATABASE_VERIFY_NONE should be
        used.

        If @chain is found to be valid, then the return value will be 0. If
        @chain is found to be invalid, then the return value will indicate at
        least one problem found. If the function is unable to determine
        whether @chain is valid (for example, because @cancellable is
        triggered before it completes) then the return value will be
        %G_TLS_CERTIFICATE_GENERIC_ERROR and @error will be set accordingly.
        @error is not set when @chain is successfully analyzed but found to
        be invalid.

        GLib guarantees that if certificate verification fails, at least one
        error will be set in the return value, but it does not guarantee
        that all possible errors will be set. Accordingly, you may not safely
        decide to ignore any particular type of error. For example, it would
        be incorrect to mask %G_TLS_CERTIFICATE_EXPIRED if you want to allow
        expired certificates, because this could potentially be the only
        error flag set even if other problems exist with the certificate.

        Prior to GLib 2.48, GLib's default TLS backend modified @chain to
        represent the certification path built by #GTlsDatabase during
        certificate verification by adjusting the #GTlsCertificate:issuer
        property of each certificate in @chain. Since GLib 2.48, this no
        longer occurs, so you cannot rely on #GTlsCertificate:issuer to
        represent the actual certification path used during certificate
        verification.

        Because TLS session context is not used, #GTlsDatabase may not
        perform as many checks on the certificates as #GTlsConnection would.
        For example, certificate constraints may not be honored, and
        revocation checks may not be performed. The best way to verify TLS
        certificates used by a TLS connection is to let #GTlsConnection
        handle the verification.

        The TLS backend may attempt to look up and add missing certificates
        to the chain. This may involve HTTP requests to download missing
        certificates.

        This function can block. Use g_tls_database_verify_chain_async() to
        perform the verification operation asynchronously.
        """
        ...

    def verify_chain_async(self, chain: TlsCertificate, purpose: str, identity: _T.Optional[SocketConnectable], interaction: _T.Optional[TlsInteraction], flags: TlsDatabaseVerifyFlags, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously determines the validity of a certificate chain after
        looking up and adding any missing certificates to the chain. See
        g_tls_database_verify_chain() for more information.
        """
        ...

    def verify_chain_finish(self, result: AsyncResult) -> TlsCertificateFlags:
        """
        Finish an asynchronous verify chain operation. See
        g_tls_database_verify_chain() for more information.

        If @chain is found to be valid, then the return value will be 0. If
        @chain is found to be invalid, then the return value will indicate
        the problems found. If the function is unable to determine whether
        @chain is valid or not (eg, because @cancellable is triggered
        before it completes) then the return value will be
        %G_TLS_CERTIFICATE_GENERIC_ERROR and @error will be set
        accordingly. @error is not set when @chain is successfully analyzed
        but found to be invalid.
        """
        ...


    ...

class TlsInteraction(GObject.Object):
    """
    #GTlsInteraction provides a mechanism for the TLS connection and database
    code to interact with the user. It can be used to ask the user for passwords.

    To use a #GTlsInteraction with a TLS connection use
    g_tls_connection_set_interaction().

    Callers should instantiate a derived class that implements the various
    interaction methods to show the required dialogs.

    Callers should use the 'invoke' functions like
    g_tls_interaction_invoke_ask_password() to run interaction methods. These
    functions make sure that the interaction is invoked in the main loop
    and not in the current thread, if the current thread is not running the
    main loop.

    Derived classes can choose to implement whichever interactions methods they'd
    like to support by overriding those virtual methods in their class
    initialization function. Any interactions not implemented will return
    %G_TLS_INTERACTION_UNHANDLED. If a derived class implements an async method,
    it must also implement the corresponding finish method.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def ask_password(self, password: TlsPassword, cancellable: _T.Optional[Cancellable]) -> TlsInteractionResult:
        """
        Run synchronous interaction to ask the user for a password. In general,
        g_tls_interaction_invoke_ask_password() should be used instead of this
        function.

        Derived subclasses usually implement a password prompt, although they may
        also choose to provide a password from elsewhere. The @password value will
        be filled in and then @callback will be called. Alternatively the user may
        abort this password request, which will usually abort the TLS connection.

        If the interaction is cancelled by the cancellation object, or by the
        user then %G_TLS_INTERACTION_FAILED will be returned with an error that
        contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
        not support immediate cancellation.
        """
        ...

    def ask_password_async(self, password: TlsPassword, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Run asynchronous interaction to ask the user for a password. In general,
        g_tls_interaction_invoke_ask_password() should be used instead of this
        function.

        Derived subclasses usually implement a password prompt, although they may
        also choose to provide a password from elsewhere. The @password value will
        be filled in and then @callback will be called. Alternatively the user may
        abort this password request, which will usually abort the TLS connection.

        If the interaction is cancelled by the cancellation object, or by the
        user then %G_TLS_INTERACTION_FAILED will be returned with an error that
        contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
        not support immediate cancellation.

        Certain implementations may not support immediate cancellation.
        """
        ...

    def ask_password_finish(self, result: AsyncResult) -> TlsInteractionResult:
        """
        Complete an ask password user interaction request. This should be once
        the g_tls_interaction_ask_password_async() completion callback is called.

        If %G_TLS_INTERACTION_HANDLED is returned, then the #GTlsPassword passed
        to g_tls_interaction_ask_password() will have its password filled in.

        If the interaction is cancelled by the cancellation object, or by the
        user then %G_TLS_INTERACTION_FAILED will be returned with an error that
        contains a %G_IO_ERROR_CANCELLED error code.
        """
        ...

    def invoke_ask_password(self, password: TlsPassword, cancellable: _T.Optional[Cancellable]) -> TlsInteractionResult:
        """
        Invoke the interaction to ask the user for a password. It invokes this
        interaction in the main loop, specifically the #GMainContext returned by
        g_main_context_get_thread_default() when the interaction is created. This
        is called by called by #GTlsConnection or #GTlsDatabase to ask the user
        for a password.

        Derived subclasses usually implement a password prompt, although they may
        also choose to provide a password from elsewhere. The @password value will
        be filled in and then @callback will be called. Alternatively the user may
        abort this password request, which will usually abort the TLS connection.

        The implementation can either be a synchronous (eg: modal dialog) or an
        asynchronous one (eg: modeless dialog). This function will take care of
        calling which ever one correctly.

        If the interaction is cancelled by the cancellation object, or by the
        user then %G_TLS_INTERACTION_FAILED will be returned with an error that
        contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
        not support immediate cancellation.
        """
        ...

    def invoke_request_certificate(self, connection: TlsConnection, flags: TlsCertificateRequestFlags, cancellable: _T.Optional[Cancellable]) -> TlsInteractionResult:
        """
        Invoke the interaction to ask the user to choose a certificate to
        use with the connection. It invokes this interaction in the main
        loop, specifically the #GMainContext returned by
        g_main_context_get_thread_default() when the interaction is
        created. This is called by called by #GTlsConnection when the peer
        requests a certificate during the handshake.

        Derived subclasses usually implement a certificate selector,
        although they may also choose to provide a certificate from
        elsewhere. Alternatively the user may abort this certificate
        request, which may or may not abort the TLS connection.

        The implementation can either be a synchronous (eg: modal dialog) or an
        asynchronous one (eg: modeless dialog). This function will take care of
        calling which ever one correctly.

        If the interaction is cancelled by the cancellation object, or by the
        user then %G_TLS_INTERACTION_FAILED will be returned with an error that
        contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
        not support immediate cancellation.
        """
        ...

    def request_certificate(self, connection: TlsConnection, flags: TlsCertificateRequestFlags, cancellable: _T.Optional[Cancellable]) -> TlsInteractionResult:
        """
        Run synchronous interaction to ask the user to choose a certificate to use
        with the connection. In general, g_tls_interaction_invoke_request_certificate()
        should be used instead of this function.

        Derived subclasses usually implement a certificate selector, although they may
        also choose to provide a certificate from elsewhere. Alternatively the user may
        abort this certificate request, which will usually abort the TLS connection.

        If %G_TLS_INTERACTION_HANDLED is returned, then the #GTlsConnection
        passed to g_tls_interaction_request_certificate() will have had its
        #GTlsConnection:certificate filled in.

        If the interaction is cancelled by the cancellation object, or by the
        user then %G_TLS_INTERACTION_FAILED will be returned with an error that
        contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
        not support immediate cancellation.
        """
        ...

    def request_certificate_async(self, connection: TlsConnection, flags: TlsCertificateRequestFlags, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Run asynchronous interaction to ask the user for a certificate to use with
        the connection. In general, g_tls_interaction_invoke_request_certificate() should
        be used instead of this function.

        Derived subclasses usually implement a certificate selector, although they may
        also choose to provide a certificate from elsewhere. @callback will be called
        when the operation completes. Alternatively the user may abort this certificate
        request, which will usually abort the TLS connection.
        """
        ...

    def request_certificate_finish(self, result: AsyncResult) -> TlsInteractionResult:
        """
        Complete a request certificate user interaction request. This should be once
        the g_tls_interaction_request_certificate_async() completion callback is called.

        If %G_TLS_INTERACTION_HANDLED is returned, then the #GTlsConnection
        passed to g_tls_interaction_request_certificate_async() will have had its
        #GTlsConnection:certificate filled in.

        If the interaction is cancelled by the cancellation object, or by the
        user then %G_TLS_INTERACTION_FAILED will be returned with an error that
        contains a %G_IO_ERROR_CANCELLED error code.
        """
        ...


    ...

class TlsPassword(GObject.Object):
    """
    Holds a password used in TLS.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, flags: TlsPasswordFlags, description: str) -> TlsPassword:
        """
        Create a new #GTlsPassword object.
        """
        ...

    def get_description(self) -> str:
        """
        Get a description string about what the password will be used for.
        """
        ...

    def get_flags(self) -> TlsPasswordFlags:
        """
        Get flags about the password.
        """
        ...

    def get_value(self, length: int) -> object:
        """
        Get the password value. If @length is not %NULL then it will be
        filled in with the length of the password value. (Note that the
        password value is not nul-terminated, so you can only pass %NULL
        for @length in contexts where you know the password will have a
        certain fixed length.)
        """
        ...

    def get_warning(self) -> str:
        """
        Get a user readable translated warning. Usually this warning is a
        representation of the password flags returned from
        g_tls_password_get_flags().
        """
        ...

    def set_description(self, description: str) -> object:
        """
        Set a description string about what the password will be used for.
        """
        ...

    def set_flags(self, flags: TlsPasswordFlags) -> object:
        """
        Set flags about the password.
        """
        ...

    def set_value(self, value: object, length: int) -> object:
        """
        Set the value for this password. The @value will be copied by the password
        object.

        Specify the @length, for a non-nul-terminated password. Pass -1 as
        @length if using a nul-terminated password, and @length will be
        calculated automatically. (Note that the terminating nul is not
        considered part of the password in this case.)
        """
        ...

    def set_value_full(self, value: object, length: int, destroy: _T.Optional[GLib.DestroyNotify]) -> object:
        """
        Provide the value for this password.

        The @value will be owned by the password object, and later freed using
        the @destroy function callback.

        Specify the @length, for a non-nul-terminated password. Pass -1 as
        @length if using a nul-terminated password, and @length will be
        calculated automatically. (Note that the terminating nul is not
        considered part of the password in this case.)
        """
        ...

    def set_warning(self, warning: str) -> object:
        """
        Set a user readable translated warning. Usually this warning is a
        representation of the password flags returned from
        g_tls_password_get_flags().
        """
        ...


    ...

class UnixConnection(SocketConnection):
    """
    This is the subclass of #GSocketConnection that is created
    for UNIX domain sockets.

    It contains functions to do some of the UNIX socket specific
    functionality like passing file descriptors.

    Since GLib 2.72, #GUnixConnection is available on all platforms. It requires
    underlying system support (such as Windows 10 with `AF_UNIX`) at run time.

    Before GLib 2.72, `<gio/gunixconnection.h>` belonged to the UNIX-specific GIO
    interfaces, thus you had to use the `gio-unix-2.0.pc` pkg-config file when
    using it. This is no longer necessary since GLib 2.72.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def receive_credentials(self, cancellable: _T.Optional[Cancellable]) -> Credentials:
        """
        Receives credentials from the sending end of the connection.  The
        sending end has to call g_unix_connection_send_credentials() (or
        similar) for this to work.

        As well as reading the credentials this also reads (and discards) a
        single byte from the stream, as this is required for credentials
        passing to work on some implementations.

        This method can be expected to be available on the following platforms:

        - Linux since GLib 2.26
        - FreeBSD since GLib 2.26
        - GNU/kFreeBSD since GLib 2.36
        - Solaris, Illumos and OpenSolaris since GLib 2.40
        - GNU/Hurd since GLib 2.40

        Other ways to exchange credentials with a foreign peer includes the
        #GUnixCredentialsMessage type and g_socket_get_credentials() function.
        """
        ...

    def receive_credentials_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously receive credentials.

        For more details, see g_unix_connection_receive_credentials() which is
        the synchronous version of this call.

        When the operation is finished, @callback will be called. You can then call
        g_unix_connection_receive_credentials_finish() to get the result of the operation.
        """
        ...

    def receive_credentials_finish(self, result: AsyncResult) -> Credentials:
        """
        Finishes an asynchronous receive credentials operation started with
        g_unix_connection_receive_credentials_async().
        """
        ...

    def receive_fd(self, cancellable: _T.Optional[Cancellable]) -> int:
        """
        Receives a file descriptor from the sending end of the connection.
        The sending end has to call g_unix_connection_send_fd() for this
        to work.

        As well as reading the fd this also reads a single byte from the
        stream, as this is required for fd passing to work on some
        implementations.
        """
        ...

    def send_credentials(self, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Passes the credentials of the current user the receiving side
        of the connection. The receiving end has to call
        g_unix_connection_receive_credentials() (or similar) to accept the
        credentials.

        As well as sending the credentials this also writes a single NUL
        byte to the stream, as this is required for credentials passing to
        work on some implementations.

        This method can be expected to be available on the following platforms:

        - Linux since GLib 2.26
        - FreeBSD since GLib 2.26
        - GNU/kFreeBSD since GLib 2.36
        - Solaris, Illumos and OpenSolaris since GLib 2.40
        - GNU/Hurd since GLib 2.40

        Other ways to exchange credentials with a foreign peer includes the
        #GUnixCredentialsMessage type and g_socket_get_credentials() function.
        """
        ...

    def send_credentials_async(self, cancellable: _T.Optional[Cancellable], callback: _T.Optional[AsyncReadyCallback], user_data: _T.Optional[object]) -> object:
        """
        Asynchronously send credentials.

        For more details, see g_unix_connection_send_credentials() which is
        the synchronous version of this call.

        When the operation is finished, @callback will be called. You can then call
        g_unix_connection_send_credentials_finish() to get the result of the operation.
        """
        ...

    def send_credentials_finish(self, result: AsyncResult) -> bool:
        """
        Finishes an asynchronous send credentials operation started with
        g_unix_connection_send_credentials_async().
        """
        ...

    def send_fd(self, fd: int, cancellable: _T.Optional[Cancellable]) -> bool:
        """
        Passes a file descriptor to the receiving side of the
        connection. The receiving end has to call g_unix_connection_receive_fd()
        to accept the file descriptor.

        As well as sending the fd this also writes a single byte to the
        stream, as this is required for fd passing to work on some
        implementations.
        """
        ...


    ...

class UnixCredentialsMessage(SocketControlMessage):
    """
    This #GSocketControlMessage contains a #GCredentials instance.  It
    may be sent using g_socket_send_message() and received using
    g_socket_receive_message() over UNIX sockets (ie: sockets in the
    %G_SOCKET_FAMILY_UNIX family).

    For an easier way to send and receive credentials over
    stream-oriented UNIX sockets, see
    g_unix_connection_send_credentials() and
    g_unix_connection_receive_credentials(). To receive credentials of
    a foreign process connected to a socket, use
    g_socket_get_credentials().

    Since GLib 2.72, #GUnixCredentialMessage is available on all platforms. It
    requires underlying system support (such as Windows 10 with `AF_UNIX`) at run
    time.

    Before GLib 2.72, `<gio/gunixcredentialsmessage.h>` belonged to the UNIX-specific
    GIO interfaces, thus you had to use the `gio-unix-2.0.pc` pkg-config file
    when using it. This is no longer necessary since GLib 2.72.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> SocketControlMessage:
        """
        Creates a new #GUnixCredentialsMessage with credentials matching the current processes.
        """
        ...


    @classmethod
    def new_with_credentials(cls, credentials: Credentials) -> SocketControlMessage:
        """
        Creates a new #GUnixCredentialsMessage holding @credentials.
        """
        ...

    def get_credentials(self) -> Credentials:
        """
        Gets the credentials stored in @message.
        """
        ...


    ...

class UnixFDList(GObject.Object):
    """
    A #GUnixFDList contains a list of file descriptors.  It owns the file
    descriptors that it contains, closing them when finalized.

    It may be wrapped in a #GUnixFDMessage and sent over a #GSocket in
    the %G_SOCKET_FAMILY_UNIX family by using g_socket_send_message()
    and received using g_socket_receive_message().

    Note that `<gio/gunixfdlist.h>` belongs to the UNIX-specific GIO
    interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
    file when using it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> UnixFDList:
        """
        Creates a new #GUnixFDList containing no file descriptors.
        """
        ...


    @classmethod
    def new_from_array(cls, fds: object, n_fds: int) -> UnixFDList:
        """
        Creates a new #GUnixFDList containing the file descriptors given in
        @fds.  The file descriptors become the property of the new list and
        may no longer be used by the caller.  The array itself is owned by
        the caller.

        Each file descriptor in the array should be set to close-on-exec.

        If @n_fds is -1 then @fds must be terminated with -1.
        """
        ...

    def append(self, fd: int) -> int:
        """
        Adds a file descriptor to @list.

        The file descriptor is duplicated using dup(). You keep your copy
        of the descriptor and the copy contained in @list will be closed
        when @list is finalized.

        A possible cause of failure is exceeding the per-process or
        system-wide file descriptor limit.

        The index of the file descriptor in the list is returned.  If you use
        this index with g_unix_fd_list_get() then you will receive back a
        duplicated copy of the same file descriptor.
        """
        ...

    def get(self, index_: int) -> int:
        """
        Gets a file descriptor out of @list.

        @index_ specifies the index of the file descriptor to get.  It is a
        programmer error for @index_ to be out of range; see
        g_unix_fd_list_get_length().

        The file descriptor is duplicated using dup() and set as
        close-on-exec before being returned.  You must call close() on it
        when you are done.

        A possible cause of failure is exceeding the per-process or
        system-wide file descriptor limit.
        """
        ...

    def get_length(self) -> int:
        """
        Gets the length of @list (ie: the number of file descriptors
        contained within).
        """
        ...

    def peek_fds(self, length: int) -> object:
        """
        Returns the array of file descriptors that is contained in this
        object.

        After this call, the descriptors remain the property of @list.  The
        caller must not close them and must not free the array.  The array is
        valid only until @list is changed in any way.

        If @length is non-%NULL then it is set to the number of file
        descriptors in the returned array. The returned array is also
        terminated with -1.

        This function never returns %NULL. In case there are no file
        descriptors contained in @list, an empty array is returned.
        """
        ...

    def steal_fds(self, length: int) -> object:
        """
        Returns the array of file descriptors that is contained in this
        object.

        After this call, the descriptors are no longer contained in
        @list. Further calls will return an empty list (unless more
        descriptors have been added).

        The return result of this function must be freed with g_free().
        The caller is also responsible for closing all of the file
        descriptors.  The file descriptors in the array are set to
        close-on-exec.

        If @length is non-%NULL then it is set to the number of file
        descriptors in the returned array. The returned array is also
        terminated with -1.

        This function never returns %NULL. In case there are no file
        descriptors contained in @list, an empty array is returned.
        """
        ...


    ...

class UnixFDMessage(SocketControlMessage):
    """
    This #GSocketControlMessage contains a #GUnixFDList.
    It may be sent using g_socket_send_message() and received using
    g_socket_receive_message() over UNIX sockets (ie: sockets in the
    %G_SOCKET_FAMILY_UNIX family). The file descriptors are copied
    between processes by the kernel.

    For an easier way to send and receive file descriptors over
    stream-oriented UNIX sockets, see g_unix_connection_send_fd() and
    g_unix_connection_receive_fd().

    Note that `<gio/gunixfdmessage.h>` belongs to the UNIX-specific GIO
    interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
    file when using it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> SocketControlMessage:
        """
        Creates a new #GUnixFDMessage containing an empty file descriptor
        list.
        """
        ...


    @classmethod
    def new_with_fd_list(cls, fd_list: UnixFDList) -> SocketControlMessage:
        """
        Creates a new #GUnixFDMessage containing @list.
        """
        ...

    def append_fd(self, fd: int) -> bool:
        """
        Adds a file descriptor to @message.

        The file descriptor is duplicated using dup(). You keep your copy
        of the descriptor and the copy contained in @message will be closed
        when @message is finalized.

        A possible cause of failure is exceeding the per-process or
        system-wide file descriptor limit.
        """
        ...

    def get_fd_list(self) -> UnixFDList:
        """
        Gets the #GUnixFDList contained in @message.  This function does not
        return a reference to the caller, but the returned list is valid for
        the lifetime of @message.
        """
        ...

    def steal_fds(self, length: int) -> object:
        """
        Returns the array of file descriptors that is contained in this
        object.

        After this call, the descriptors are no longer contained in
        @message. Further calls will return an empty list (unless more
        descriptors have been added).

        The return result of this function must be freed with g_free().
        The caller is also responsible for closing all of the file
        descriptors.

        If @length is non-%NULL then it is set to the number of file
        descriptors in the returned array. The returned array is also
        terminated with -1.

        This function never returns %NULL. In case there are no file
        descriptors contained in @message, an empty array is returned.
        """
        ...


    ...

class UnixInputStream(InputStream, FileDescriptorBased, PollableInputStream):
    """
    #GUnixInputStream implements #GInputStream for reading from a UNIX
    file descriptor, including asynchronous operations. (If the file
    descriptor refers to a socket or pipe, this will use poll() to do
    asynchronous I/O. If it refers to a regular file, it will fall back
    to doing asynchronous I/O in another thread.)

    Note that `<gio/gunixinputstream.h>` belongs to the UNIX-specific GIO
    interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
    file when using it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, fd: int, close_fd: bool) -> InputStream:
        """
        Creates a new #GUnixInputStream for the given @fd.

        If @close_fd is %TRUE, the file descriptor will be closed
        when the stream is closed.
        """
        ...

    def get_close_fd(self) -> bool:
        """
        Returns whether the file descriptor of @stream will be
        closed when the stream is closed.
        """
        ...

    def get_fd(self) -> int:
        """
        Return the UNIX file descriptor that the stream reads from.
        """
        ...

    def set_close_fd(self, close_fd: bool) -> object:
        """
        Sets whether the file descriptor of @stream shall be closed
        when the stream is closed.
        """
        ...


    ...

class UnixMountMonitor(GObject.Object):
    """
    Watches #GUnixMounts for changes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> UnixMountMonitor:
        """
        Deprecated alias for g_unix_mount_monitor_get().

        This function was never a true constructor, which is why it was
        renamed.
        """
        ...

    def set_rate_limit(self, limit_msec: int) -> object:
        """
        This function does nothing.

        Before 2.44, this was a partially-effective way of controlling the
        rate at which events would be reported under some uncommon
        circumstances.  Since @mount_monitor is a singleton, it also meant
        that calling this function would have side effects for other users of
        the monitor.
        """
        ...


    ...

class UnixOutputStream(OutputStream, FileDescriptorBased, PollableOutputStream):
    """
    #GUnixOutputStream implements #GOutputStream for writing to a UNIX
    file descriptor, including asynchronous operations. (If the file
    descriptor refers to a socket or pipe, this will use poll() to do
    asynchronous I/O. If it refers to a regular file, it will fall back
    to doing asynchronous I/O in another thread.)

    Note that `<gio/gunixoutputstream.h>` belongs to the UNIX-specific GIO
    interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file
    when using it.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, fd: int, close_fd: bool) -> OutputStream:
        """
        Creates a new #GUnixOutputStream for the given @fd.

        If @close_fd, is %TRUE, the file descriptor will be closed when
        the output stream is destroyed.
        """
        ...

    def get_close_fd(self) -> bool:
        """
        Returns whether the file descriptor of @stream will be
        closed when the stream is closed.
        """
        ...

    def get_fd(self) -> int:
        """
        Return the UNIX file descriptor that the stream writes to.
        """
        ...

    def set_close_fd(self, close_fd: bool) -> object:
        """
        Sets whether the file descriptor of @stream shall be closed
        when the stream is closed.
        """
        ...


    ...

class UnixSocketAddress(SocketAddress, SocketConnectable):
    """
    Support for UNIX-domain (also known as local) sockets.

    UNIX domain sockets are generally visible in the filesystem.
    However, some systems support abstract socket names which are not
    visible in the filesystem and not affected by the filesystem
    permissions, visibility, etc. Currently this is only supported
    under Linux. If you attempt to use abstract sockets on other
    systems, function calls may return %G_IO_ERROR_NOT_SUPPORTED
    errors. You can use g_unix_socket_address_abstract_names_supported()
    to see if abstract names are supported.

    Since GLib 2.72, #GUnixSocketAddress is available on all platforms. It
    requires underlying system support (such as Windows 10 with `AF_UNIX`) at
    run time.

    Before GLib 2.72, `<gio/gunixsocketaddress.h>` belonged to the UNIX-specific
    GIO interfaces, thus you had to use the `gio-unix-2.0.pc` pkg-config file
    when using it. This is no longer necessary since GLib 2.72.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, path: str) -> SocketAddress:
        """
        Creates a new #GUnixSocketAddress for @path.

        To create abstract socket addresses, on systems that support that,
        use g_unix_socket_address_new_abstract().
        """
        ...


    @classmethod
    def new_abstract(cls, path: object, path_len: int) -> SocketAddress:
        """
        Creates a new %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
        #GUnixSocketAddress for @path.
        """
        ...


    @classmethod
    def new_with_type(cls, path: object, path_len: int, type: UnixSocketAddressType) -> SocketAddress:
        """
        Creates a new #GUnixSocketAddress of type @type with name @path.

        If @type is %G_UNIX_SOCKET_ADDRESS_PATH, this is equivalent to
        calling g_unix_socket_address_new().

        If @type is %G_UNIX_SOCKET_ADDRESS_ANONYMOUS, @path and @path_len will be
        ignored.

        If @path_type is %G_UNIX_SOCKET_ADDRESS_ABSTRACT, then @path_len
        bytes of @path will be copied to the socket's path, and only those
        bytes will be considered part of the name. (If @path_len is -1,
        then @path is assumed to be NUL-terminated.) For example, if @path
        was "test", then calling g_socket_address_get_native_size() on the
        returned socket would return 7 (2 bytes of overhead, 1 byte for the
        abstract-socket indicator byte, and 4 bytes for the name "test").

        If @path_type is %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED, then
        @path_len bytes of @path will be copied to the socket's path, the
        rest of the path will be padded with 0 bytes, and the entire
        zero-padded buffer will be considered the name. (As above, if
        @path_len is -1, then @path is assumed to be NUL-terminated.) In
        this case, g_socket_address_get_native_size() will always return
        the full size of a `struct sockaddr_un`, although
        g_unix_socket_address_get_path_len() will still return just the
        length of @path.

        %G_UNIX_SOCKET_ADDRESS_ABSTRACT is preferred over
        %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED for new programs. Of course,
        when connecting to a server created by another process, you must
        use the appropriate type corresponding to how that process created
        its listening socket.
        """
        ...

    def get_address_type(self) -> UnixSocketAddressType:
        """
        Gets @address's type.
        """
        ...

    def get_is_abstract(self) -> bool:
        """
        Tests if @address is abstract.
        """
        ...

    def get_path(self) -> str:
        """
        Gets @address's path, or for abstract sockets the "name".

        Guaranteed to be zero-terminated, but an abstract socket
        may contain embedded zeros, and thus you should use
        g_unix_socket_address_get_path_len() to get the true length
        of this string.
        """
        ...

    def get_path_len(self) -> int:
        """
        Gets the length of @address's path.

        For details, see g_unix_socket_address_get_path().
        """
        ...


    ...

class Vfs(GObject.Object):
    """
    Entry point for using GIO functionality.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_file_for_path(self, path: str) -> File:
        """
        Gets a #GFile for @path.
        """
        ...

    def get_file_for_uri(self, uri: str) -> File:
        """
        Gets a #GFile for @uri.

        This operation never fails, but the returned object
        might not support any I/O operation if the URI
        is malformed or if the URI scheme is not supported.
        """
        ...

    def get_supported_uri_schemes(self) -> object:
        """
        Gets a list of URI schemes supported by @vfs.
        """
        ...

    def is_active(self) -> bool:
        """
        Checks if the VFS is active.
        """
        ...

    def parse_name(self, parse_name: str) -> File:
        """
        This operation never fails, but the returned object might
        not support any I/O operations if the @parse_name cannot
        be parsed by the #GVfs module.
        """
        ...

    def register_uri_scheme(self, scheme: str, uri_func: _T.Optional[VfsFileLookupFunc], uri_data: _T.Optional[object], uri_destroy: _T.Optional[GLib.DestroyNotify], parse_name_func: _T.Optional[VfsFileLookupFunc], parse_name_data: _T.Optional[object], parse_name_destroy: _T.Optional[GLib.DestroyNotify]) -> bool:
        """
        Registers @uri_func and @parse_name_func as the #GFile URI and parse name
        lookup functions for URIs with a scheme matching @scheme.
        Note that @scheme is registered only within the running application, as
        opposed to desktop-wide as it happens with GVfs backends.

        When a #GFile is requested with an URI containing @scheme (e.g. through
        g_file_new_for_uri()), @uri_func will be called to allow a custom
        constructor. The implementation of @uri_func should not be blocking, and
        must not call g_vfs_register_uri_scheme() or g_vfs_unregister_uri_scheme().

        When g_file_parse_name() is called with a parse name obtained from such file,
        @parse_name_func will be called to allow the #GFile to be created again. In
        that case, it's responsibility of @parse_name_func to make sure the parse
        name matches what the custom #GFile implementation returned when
        g_file_get_parse_name() was previously called. The implementation of
        @parse_name_func should not be blocking, and must not call
        g_vfs_register_uri_scheme() or g_vfs_unregister_uri_scheme().

        It's an error to call this function twice with the same scheme. To unregister
        a custom URI scheme, use g_vfs_unregister_uri_scheme().
        """
        ...

    def unregister_uri_scheme(self, scheme: str) -> bool:
        """
        Unregisters the URI handler for @scheme previously registered with
        g_vfs_register_uri_scheme().
        """
        ...


    ...

class VolumeMonitor(GObject.Object):
    """
    #GVolumeMonitor is for listing the user interesting devices and volumes
    on the computer. In other words, what a file selector or file manager
    would show in a sidebar.

    #GVolumeMonitor is not
    [thread-default-context aware][g-main-context-push-thread-default],
    and so should not be used other than from the main thread, with no
    thread-default-context active.

    In order to receive updates about volumes and mounts monitored through GVFS,
    a main loop must be running.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_connected_drives(self) -> GLib.List:
        """
        Gets a list of drives connected to the system.

        The returned list should be freed with g_list_free(), after
        its elements have been unreffed with g_object_unref().
        """
        ...

    def get_mount_for_uuid(self, uuid: str) -> Mount:
        """
        Finds a #GMount object by its UUID (see g_mount_get_uuid())
        """
        ...

    def get_mounts(self) -> GLib.List:
        """
        Gets a list of the mounts on the system.

        The returned list should be freed with g_list_free(), after
        its elements have been unreffed with g_object_unref().
        """
        ...

    def get_volume_for_uuid(self, uuid: str) -> Volume:
        """
        Finds a #GVolume object by its UUID (see g_volume_get_uuid())
        """
        ...

    def get_volumes(self) -> GLib.List:
        """
        Gets a list of the volumes on the system.

        The returned list should be freed with g_list_free(), after
        its elements have been unreffed with g_object_unref().
        """
        ...


    ...

class ZlibCompressor(GObject.Object, Converter):
    """
    #GZlibCompressor is an implementation of #GConverter that
    compresses data using zlib.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, format: ZlibCompressorFormat, level: int) -> ZlibCompressor:
        """
        Creates a new #GZlibCompressor.
        """
        ...

    def get_file_info(self) -> FileInfo:
        """
        Returns the #GZlibCompressor:file-info property.
        """
        ...

    def set_file_info(self, file_info: _T.Optional[FileInfo]) -> object:
        """
        Sets @file_info in @compressor. If non-%NULL, and @compressor's
        #GZlibCompressor:format property is %G_ZLIB_COMPRESSOR_FORMAT_GZIP,
        it will be used to set the file name and modification time in
        the GZIP header of the compressed data.

        Note: it is an error to call this function while a compression is in
        progress; it may only be called immediately after creation of @compressor,
        or after resetting it with g_converter_reset().
        """
        ...


    ...

class ZlibDecompressor(GObject.Object, Converter):
    """
    #GZlibDecompressor is an implementation of #GConverter that
    decompresses data compressed with zlib.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, format: ZlibCompressorFormat) -> ZlibDecompressor:
        """
        Creates a new #GZlibDecompressor.
        """
        ...

    def get_file_info(self) -> FileInfo:
        """
        Retrieves the #GFileInfo constructed from the GZIP header data
        of compressed data processed by @compressor, or %NULL if @decompressor's
        #GZlibDecompressor:format property is not %G_ZLIB_COMPRESSOR_FORMAT_GZIP,
        or the header data was not fully processed yet, or it not present in the
        data stream at all.
        """
        ...


    ...


