"""
Stub file for GLib. Autogenerated with gi-stubgen.
"""

import typing as _T  # noqa
from enum import Enum

from gi.repository import 

ANALYZER_ANALYZING = 1

ASCII_DTOSTR_BUF_SIZE = 39
"""
A good size for a buffer to be passed into g_ascii_dtostr().
It is guaranteed to be enough for all output of that function
on systems with 64bit IEEE-compatible doubles.

The typical usage would be something like:
|[<!-- language="C" -->
  char buf[G_ASCII_DTOSTR_BUF_SIZE];

  fprintf (out, "value=%s\n", g_ascii_dtostr (buf, sizeof (buf), value));
]|
"""

BIG_ENDIAN = 4321
"""
Specifies one of the possible types of byte order.
See %G_BYTE_ORDER.
"""

CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
"""
The set of uppercase ASCII alphabet characters.
Used for specifying valid identifier characters
in #GScannerConfig.
"""

CSET_DIGITS = 123456789
"""
The set of ASCII digits.
Used for specifying valid identifier characters
in #GScannerConfig.
"""

CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz"
"""
The set of lowercase ASCII alphabet characters.
Used for specifying valid identifier characters
in #GScannerConfig.
"""

DATALIST_FLAGS_MASK = 3
"""
A bitmask that restricts the possible flags passed to
g_datalist_set_flags(). Passing a flags value where
flags & ~G_DATALIST_FLAGS_MASK != 0 is an error.
"""

DATE_BAD_DAY = 0
"""
Represents an invalid #GDateDay.
"""

DATE_BAD_JULIAN = 0
"""
Represents an invalid Julian day number.
"""

DATE_BAD_YEAR = 0
"""
Represents an invalid year.
"""

DIR_SEPARATOR = 47
"""
The directory separator character.
This is '/' on UNIX machines and '\' under Windows.
"""

DIR_SEPARATOR_S = "/"
"""
The directory separator as a string.
This is "/" on UNIX machines and "\" under Windows.
"""

E = 2.718282
"""
The base of natural logarithms.
"""

GINT16_FORMAT = "hi"
"""
This is the platform dependent conversion specifier for scanning and
printing values of type #gint16. It is a string literal, but doesn't
include the percent-sign, such that you can add precision and length
modifiers between percent-sign and conversion specifier.

|[<!-- language="C" -->
gint16 in;
gint32 out;
sscanf ("42", "%" G_GINT16_FORMAT, &in)
out = in * 1000;
g_print ("%" G_GINT32_FORMAT, out);
]|
"""

GINT16_MODIFIER = "h"
"""
The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gint16 or #guint16. It
is a string literal, but doesn't include the percent-sign, such
that you can add precision and length modifiers between percent-sign
and conversion specifier and append a conversion specifier.

The following example prints "0x7b";
|[<!-- language="C" -->
gint16 value = 123;
g_print ("%#" G_GINT16_MODIFIER "x", value);
]|
"""

GINT32_FORMAT = "i"
"""
This is the platform dependent conversion specifier for scanning
and printing values of type #gint32. See also %G_GINT16_FORMAT.
"""

GINT64_FORMAT = "li"
"""
This is the platform dependent conversion specifier for scanning
and printing values of type #gint64. See also %G_GINT16_FORMAT.

Some platforms do not support scanning and printing 64-bit integers,
even though the types are supported. On such platforms %G_GINT64_FORMAT
is not defined. Note that scanf() may not support 64-bit integers, even
if %G_GINT64_FORMAT is defined. Due to its weak error handling, scanf()
is not recommended for parsing anyway; consider using g_ascii_strtoull()
instead.
"""

GINT64_MODIFIER = "l"
"""
The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gint64 or #guint64.
It is a string literal.

Some platforms do not support printing 64-bit integers, even
though the types are supported. On such platforms %G_GINT64_MODIFIER
is not defined.
"""

GINTPTR_FORMAT = "li"
"""
This is the platform dependent conversion specifier for scanning
and printing values of type #gintptr.
"""

GINTPTR_MODIFIER = "l"
"""
The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gintptr or #guintptr.
It is a string literal.
"""

GSIZE_FORMAT = "lu"
"""
This is the platform dependent conversion specifier for scanning
and printing values of type #gsize. See also %G_GINT16_FORMAT.
"""

GSIZE_MODIFIER = "l"
"""
The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gsize. It
is a string literal.
"""

GSSIZE_FORMAT = "li"
"""
This is the platform dependent conversion specifier for scanning
and printing values of type #gssize. See also %G_GINT16_FORMAT.
"""

GSSIZE_MODIFIER = "l"
"""
The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gssize. It
is a string literal.
"""

GUINT16_FORMAT = "hu"
"""
This is the platform dependent conversion specifier for scanning
and printing values of type #guint16. See also %G_GINT16_FORMAT
"""

GUINT32_FORMAT = "u"
"""
This is the platform dependent conversion specifier for scanning
and printing values of type #guint32. See also %G_GINT16_FORMAT.
"""

GUINT64_FORMAT = "lu"
"""
This is the platform dependent conversion specifier for scanning
and printing values of type #guint64. See also %G_GINT16_FORMAT.

Some platforms do not support scanning and printing 64-bit integers,
even though the types are supported. On such platforms %G_GUINT64_FORMAT
is not defined.  Note that scanf() may not support 64-bit integers, even
if %G_GINT64_FORMAT is defined. Due to its weak error handling, scanf()
is not recommended for parsing anyway; consider using g_ascii_strtoull()
instead.
"""

GUINTPTR_FORMAT = "lu"
"""
This is the platform dependent conversion specifier
for scanning and printing values of type #guintptr.
"""

HAVE_GINT64 = 1

HAVE_GNUC_VARARGS = 1

HAVE_GNUC_VISIBILITY = 1
"""
Defined to 1 if gcc-style visibility handling is supported.
"""

HAVE_GROWING_STACK = 0

HAVE_ISO_VARARGS = 1

HOOK_FLAG_USER_SHIFT = 4
"""
The position of the first bit which is not reserved for internal
use be the #GHook implementation, i.e.
`1 << G_HOOK_FLAG_USER_SHIFT` is the first
bit which can be used for application-defined flags.
"""

IEEE754_DOUBLE_BIAS = 1023
"""
The bias by which exponents in double-precision floats are offset.
"""

IEEE754_FLOAT_BIAS = 127
"""
The bias by which exponents in single-precision floats are offset.
"""

KEY_FILE_DESKTOP_GROUP = "Desktop Entry"
"""
The name of the main group of a desktop entry file, as defined in the
[Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec).
Consult the specification for more
details about the meanings of the keys below.
"""

KEY_FILE_DESKTOP_KEY_ACTIONS = "Actions"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a string list
giving the available application actions.
"""

KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a list
of strings giving the categories in which the desktop entry
should be shown in a menu.
"""

KEY_FILE_DESKTOP_KEY_COMMENT = "Comment"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the tooltip for the desktop entry.
"""

KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = "DBusActivatable"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
set to true if the application is D-Bus activatable.
"""

KEY_FILE_DESKTOP_KEY_EXEC = "Exec"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the command line to execute. It is only valid for desktop
entries with the `Application` type.
"""

KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the generic name of the desktop entry.
"""

KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the desktop entry has been deleted by the user.
"""

KEY_FILE_DESKTOP_KEY_ICON = "Icon"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the name of the icon to be displayed for the desktop
entry.
"""

KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a list
of strings giving the MIME types supported by this desktop entry.
"""

KEY_FILE_DESKTOP_KEY_NAME = "Name"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the specific name of the desktop entry.
"""

KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a list of
strings identifying the environments that should not display the
desktop entry.
"""

KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the desktop entry should be shown in menus.
"""

KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a list of
strings identifying the environments that should display the
desktop entry.
"""

KEY_FILE_DESKTOP_KEY_PATH = "Path"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a string
containing the working directory to run the program in. It is only
valid for desktop entries with the `Application` type.
"""

KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the application supports the
[Startup Notification Protocol Specification](http://www.freedesktop.org/Standards/startup-notification-spec).
"""

KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is string
identifying the WM class or name hint of a window that the application
will create, which can be used to emulate Startup Notification with
older applications.
"""

KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the program should be run in a terminal window.

It is only valid for desktop entries with the `Application` type.
"""

KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the file name of a binary on disk used to determine if the
program is actually installed. It is only valid for desktop entries
with the `Application` type.
"""

KEY_FILE_DESKTOP_KEY_TYPE = "Type"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the type of the desktop entry.

Usually %G_KEY_FILE_DESKTOP_TYPE_APPLICATION,
%G_KEY_FILE_DESKTOP_TYPE_LINK, or
%G_KEY_FILE_DESKTOP_TYPE_DIRECTORY.
"""

KEY_FILE_DESKTOP_KEY_URL = "URL"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the URL to access. It is only valid for desktop entries
with the `Link` type.
"""

KEY_FILE_DESKTOP_KEY_VERSION = "Version"
"""
A key under %G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the version of the Desktop Entry Specification used for
the desktop entry file.
"""

KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application"
"""
The value of the %G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing applications.
"""

KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory"
"""
The value of the %G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing directories.
"""

KEY_FILE_DESKTOP_TYPE_LINK = "Link"
"""
The value of the %G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing links to documents.
"""

LITTLE_ENDIAN = 1234
"""
Specifies one of the possible types of byte order.
See %G_BYTE_ORDER.
"""

LN10 = 2.302585
"""
The natural logarithm of 10.
"""

LN2 = 0.693147
"""
The natural logarithm of 2.
"""

LOG_2_BASE_10 = 0.30103
"""
Multiplying the base 2 exponent by this number yields the base 10 exponent.
"""

LOG_DOMAIN = 0
"""
Defines the log domain. See [Log Domains](#log-domains).

Libraries should define this so that any messages
which they log can be differentiated from messages from other
libraries and application code. But be careful not to define
it in any public header files.

Log domains must be unique, and it is recommended that they are the
application or library name, optionally followed by a hyphen and a sub-domain
name. For example, `bloatpad` or `bloatpad-io`.

If undefined, it defaults to the default %NULL (or `""`) log domain; this is
not advisable, as it cannot be filtered against using the `G_MESSAGES_DEBUG`
environment variable.

For example, GTK+ uses this in its `Makefile.am`:
|[
AM_CPPFLAGS = -DG_LOG_DOMAIN=\"Gtk\"
]|

Applications can choose to leave it as the default %NULL (or `""`)
domain. However, defining the domain offers the same advantages as
above.
"""

LOG_FATAL_MASK = 5
"""
GLib log levels that are considered fatal by default.

This is not used if structured logging is enabled; see
[Using Structured Logging][using-structured-logging].
"""

LOG_LEVEL_USER_SHIFT = 8
"""
Log levels below 1<<G_LOG_LEVEL_USER_SHIFT are used by GLib.
Higher bits can be used for user-defined log levels.
"""

MAJOR_VERSION = 2
"""
The major version number of the GLib library.

Like #glib_major_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.
"""

MAXINT16 = 32767
"""
The maximum value which can be held in a #gint16.
"""

MAXINT32 = 2147483647
"""
The maximum value which can be held in a #gint32.
"""

MAXINT64 = 9223372036854775807
"""
The maximum value which can be held in a #gint64.
"""

MAXINT8 = 127
"""
The maximum value which can be held in a #gint8.
"""

MAXUINT16 = 65535
"""
The maximum value which can be held in a #guint16.
"""

MAXUINT32 = 4294967295
"""
The maximum value which can be held in a #guint32.
"""

MAXUINT64 = 18446744073709551615
"""
The maximum value which can be held in a #guint64.
"""

MAXUINT8 = 255
"""
The maximum value which can be held in a #guint8.
"""

MICRO_VERSION = 3
"""
The micro version number of the GLib library.

Like #gtk_micro_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.
"""

MININT16 = -32768
"""
The minimum value which can be held in a #gint16.
"""

MININT32 = -2147483648
"""
The minimum value which can be held in a #gint32.
"""

MININT64 = -9223372036854775808
"""
The minimum value which can be held in a #gint64.
"""

MININT8 = -128
"""
The minimum value which can be held in a #gint8.
"""

MINOR_VERSION = 71
"""
The minor version number of the GLib library.

Like #gtk_minor_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.
"""

MODULE_SUFFIX = "so"

PDP_ENDIAN = 3412
"""
Specifies one of the possible types of byte order
(currently unused). See %G_BYTE_ORDER.
"""

PI = 3.141593
"""
The value of pi (ratio of circle's circumference to its diameter).
"""

PID_FORMAT = "i"
"""
A format specifier that can be used in printf()-style format strings
when printing a #GPid.
"""

PI_2 = 1.570796
"""
Pi divided by 2.
"""

PI_4 = 0.785398
"""
Pi divided by 4.
"""

POLLFD_FORMAT = "%d"
"""
A format specifier that can be used in printf()-style format strings
when printing the @fd member of a #GPollFD.
"""

PRIORITY_DEFAULT = 0
"""
Use this for default priority event sources.

In GLib this priority is used when adding timeout functions
with g_timeout_add(). In GDK this priority is used for events
from the X server.
"""

PRIORITY_DEFAULT_IDLE = 200
"""
Use this for default priority idle functions.

In GLib this priority is used when adding idle functions with
g_idle_add().
"""

PRIORITY_HIGH = -100
"""
Use this for high priority event sources.

It is not used within GLib or GTK+.
"""

PRIORITY_HIGH_IDLE = 100
"""
Use this for high priority idle functions.

GTK+ uses %G_PRIORITY_HIGH_IDLE + 10 for resizing operations,
and %G_PRIORITY_HIGH_IDLE + 20 for redrawing operations. (This is
done to ensure that any pending resizes are processed before any
pending redraws, so that widgets are not redrawn twice unnecessarily.)
"""

PRIORITY_LOW = 300
"""
Use this for very low priority background tasks.

It is not used within GLib or GTK+.
"""

SEARCHPATH_SEPARATOR = 58
"""
The search path separator character.
This is ':' on UNIX machines and ';' under Windows.
"""

SEARCHPATH_SEPARATOR_S = ":"
"""
The search path separator as a string.
This is ":" on UNIX machines and ";" under Windows.
"""

SIZEOF_LONG = 8

SIZEOF_SIZE_T = 8

SIZEOF_SSIZE_T = 8

SIZEOF_VOID_P = 8

SOURCE_CONTINUE = "true"
"""
Use this macro as the return value of a #GSourceFunc to leave
the #GSource in the main loop.
"""

SOURCE_REMOVE = "false"
"""
Use this macro as the return value of a #GSourceFunc to remove
the #GSource from the main loop.
"""

SQRT2 = 1.414214
"""
The square root of two.
"""

STR_DELIMITERS = "_-|> <."
"""
The standard delimiters, used in g_strdelimit().
"""

SYSDEF_AF_INET = 2

SYSDEF_AF_INET6 = 10

SYSDEF_AF_UNIX = 1

SYSDEF_MSG_DONTROUTE = 4

SYSDEF_MSG_OOB = 1

SYSDEF_MSG_PEEK = 2

TEST_OPTION_ISOLATE_DIRS = "isolate_dirs"
"""
Creates a unique temporary directory for each unit test and uses
g_set_user_dirs() to set XDG directories to point into subdirectories of it
for the duration of the unit test. The directory tree is cleaned up after the
test finishes successfully. Note that this doesn’t take effect until
g_test_run() is called, so calls to (for example) g_get_user_home_dir() will
return the system-wide value when made in a test program’s main() function.

The following functions will return subdirectories of the temporary directory
when this option is used. The specific subdirectory paths in use are not
guaranteed to be stable API — always use a getter function to retrieve them.

 - g_get_home_dir()
 - g_get_user_cache_dir()
 - g_get_system_config_dirs()
 - g_get_user_config_dir()
 - g_get_system_data_dirs()
 - g_get_user_data_dir()
 - g_get_user_state_dir()
 - g_get_user_runtime_dir()

The subdirectories may not be created by the test harness; as with normal
calls to functions like g_get_user_cache_dir(), the caller must be prepared
to create the directory if it doesn’t exist.
"""

TIME_SPAN_DAY = 86400000000
"""
Evaluates to a time span of one day.
"""

TIME_SPAN_HOUR = 3600000000
"""
Evaluates to a time span of one hour.
"""

TIME_SPAN_MILLISECOND = 1000
"""
Evaluates to a time span of one millisecond.
"""

TIME_SPAN_MINUTE = 60000000
"""
Evaluates to a time span of one minute.
"""

TIME_SPAN_SECOND = 1000000
"""
Evaluates to a time span of one second.
"""

UNICHAR_MAX_DECOMPOSITION_LENGTH = 18
"""
The maximum length (in codepoints) of a compatibility or canonical
decomposition of a single Unicode character.

This is as defined by Unicode 6.1.
"""

URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@"
"""
Generic delimiters characters as defined in
[RFC 3986](https://tools.ietf.org/html/rfc3986). Includes `:/?#[]@`.
"""

URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!$&'()*+,;="
"""
Subcomponent delimiter characters as defined in
[RFC 3986](https://tools.ietf.org/html/rfc3986). Includes `!$&'()*+,;=`.
"""

USEC_PER_SEC = 1000000
"""
Number of microseconds in one second (1 million).
This macro is provided for code readability.
"""

VA_COPY_AS_ARRAY = 1

VERSION_MIN_REQUIRED = 2
"""
A macro that should be defined by the user prior to including
the glib.h header.
The definition should be one of the predefined GLib version
macros: %GLIB_VERSION_2_26, %GLIB_VERSION_2_28,...

This macro defines the earliest version of GLib that the package is
required to be able to compile against.

If the compiler is configured to warn about the use of deprecated
functions, then using functions that were deprecated in version
%GLIB_VERSION_MIN_REQUIRED or earlier will cause warnings (but
using functions deprecated in later releases will not).
"""

WIN32_MSG_HANDLE = 19981206

macro__has_attribute___noreturn__ = 0


class ChecksumType(Enum):
    """
    The hashing algorithm to be used by #GChecksum when performing the
    digest of some data.

    Note that the #GChecksumType enumeration may be extended at a later
    date to include new hashing algorithm types.
    """
    MD5 = 0
    SHA1 = 1
    SHA256 = 2
    SHA512 = 3
    SHA384 = 4

class DateDMY(Enum):
    """
    This enumeration isn't used in the API, but may be useful if you need
    to mark a number as a day, month, or year.
    """
    DAY = 0
    MONTH = 1
    YEAR = 2

class DateMonth(Enum):
    """
    Enumeration representing a month; values are %G_DATE_JANUARY,
    %G_DATE_FEBRUARY, etc. %G_DATE_BAD_MONTH is the invalid value.
    """
    BAD_MONTH = 0
    JANUARY = 1
    FEBRUARY = 2
    MARCH = 3
    APRIL = 4
    MAY = 5
    JUNE = 6
    JULY = 7
    AUGUST = 8
    SEPTEMBER = 9
    OCTOBER = 10
    NOVEMBER = 11
    DECEMBER = 12

class DateWeekday(Enum):
    """
    Enumeration representing a day of the week; %G_DATE_MONDAY,
    %G_DATE_TUESDAY, etc. %G_DATE_BAD_WEEKDAY is an invalid weekday.
    """
    BAD_WEEKDAY = 0
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 3
    THURSDAY = 4
    FRIDAY = 5
    SATURDAY = 6
    SUNDAY = 7

class ErrorType(Enum):
    """
    The possible errors, used in the @v_error field
    of #GTokenValue, when the token is a %G_TOKEN_ERROR.
    """
    UNKNOWN = 0
    UNEXP_EOF = 1
    UNEXP_EOF_IN_STRING = 2
    UNEXP_EOF_IN_COMMENT = 3
    NON_DIGIT_IN_CONST = 4
    DIGIT_RADIX = 5
    FLOAT_RADIX = 6
    FLOAT_MALFORMED = 7

class IOError(Enum):
    """
    #GIOError is only used by the deprecated functions
    g_io_channel_read(), g_io_channel_write(), and g_io_channel_seek().
    """
    NONE = 0
    AGAIN = 1
    INVAL = 2
    UNKNOWN = 3

class IOStatus(Enum):
    """
    Statuses returned by most of the #GIOFuncs functions.
    """
    ERROR = 0
    NORMAL = 1
    EOF = 2
    AGAIN = 3

class LogWriterOutput(Enum):
    """
    Return values from #GLogWriterFuncs to indicate whether the given log entry
    was successfully handled by the writer, or whether there was an error in
    handling it (and hence a fallback writer should be used).

    If a #GLogWriterFunc ignores a log entry, it should return
    %G_LOG_WRITER_HANDLED.
    """
    HANDLED = 1
    UNHANDLED = 0

class NormalizeMode(Enum):
    """
    Defines how a Unicode string is transformed in a canonical
    form, standardizing such issues as whether a character with
    an accent is represented as a base character and combining
    accent or as a single precomposed character. Unicode strings
    should generally be normalized before comparing them.
    """
    DEFAULT = 0
    NFD = 0
    DEFAULT_COMPOSE = 1
    NFC = 1
    ALL = 2
    NFKD = 2
    ALL_COMPOSE = 3
    NFKC = 3

class OnceStatus(Enum):
    """
    The possible statuses of a one-time initialization function
    controlled by a #GOnce struct.
    """
    NOTCALLED = 0
    PROGRESS = 1
    READY = 2

class OptionArg(Enum):
    """
    The #GOptionArg enum values determine which type of extra argument the
    options expect to find. If an option expects an extra argument, it can
    be specified in several ways; with a short option: `-x arg`, with a long
    option: `--name arg` or combined in a single argument: `--name=arg`.
    """
    NONE = 0
    STRING = 1
    INT = 2
    CALLBACK = 3
    FILENAME = 4
    STRING_ARRAY = 5
    FILENAME_ARRAY = 6
    DOUBLE = 7
    INT64 = 8

class SeekType(Enum):
    """
    An enumeration specifying the base position for a
    g_io_channel_seek_position() operation.
    """
    CUR = 0
    SET = 1
    END = 2

class SliceConfig(Enum):
    ALWAYS_MALLOC = 1
    BYPASS_MAGAZINES = 2
    WORKING_SET_MSECS = 3
    COLOR_INCREMENT = 4
    CHUNK_SIZES = 5
    CONTENTION_COUNTER = 6

class TestFileType(Enum):
    """
    The type of file to return the filename for, when used with
    g_test_build_filename().

    These two options correspond rather directly to the 'dist' and
    'built' terminology that automake uses and are explicitly used to
    distinguish between the 'srcdir' and 'builddir' being separate.  All
    files in your project should either be dist (in the
    `EXTRA_DIST` or `dist_schema_DATA`
    sense, in which case they will always be in the srcdir) or built (in
    the `BUILT_SOURCES` sense, in which case they will
    always be in the builddir).

    Note: as a general rule of automake, files that are generated only as
    part of the build-from-git process (but then are distributed with the
    tarball) always go in srcdir (even if doing a srcdir != builddir
    build from git) and are considered as distributed files.
    """
    DIST = 0
    BUILT = 1

class TestLogType(Enum):
    NONE = 0
    ERROR = 1
    START_BINARY = 2
    LIST_CASE = 3
    SKIP_CASE = 4
    START_CASE = 5
    STOP_CASE = 6
    MIN_RESULT = 7
    MAX_RESULT = 8
    MESSAGE = 9
    START_SUITE = 10
    STOP_SUITE = 11

class TestResult(Enum):
    SUCCESS = 0
    SKIPPED = 1
    FAILURE = 2
    INCOMPLETE = 3

class TimeType(Enum):
    """
    Disambiguates a given time in two ways.

    First, specifies if the given time is in universal or local time.

    Second, if the time is in local time, specifies if it is local
    standard time or local daylight time.  This is important for the case
    where the same local time occurs twice (during daylight savings time
    transitions, for example).
    """
    STANDARD = 0
    DAYLIGHT = 1
    UNIVERSAL = 2

class TokenType(Enum):
    """
    The possible types of token returned from each
    g_scanner_get_next_token() call.
    """
    EOF = 0
    LEFT_PAREN = 40
    RIGHT_PAREN = 41
    LEFT_CURLY = 123
    RIGHT_CURLY = 125
    LEFT_BRACE = 91
    RIGHT_BRACE = 93
    EQUAL_SIGN = 61
    COMMA = 44
    NONE = 256
    ERROR = 257
    CHAR = 258
    BINARY = 259
    OCTAL = 260
    INT = 261
    HEX = 262
    FLOAT = 263
    STRING = 264
    SYMBOL = 265
    IDENTIFIER = 266
    IDENTIFIER_NULL = 267
    COMMENT_SINGLE = 268
    COMMENT_MULTI = 269

class TraverseType(Enum):
    """
    Specifies the type of traversal performed by g_tree_traverse(),
    g_node_traverse() and g_node_find(). The different orders are
    illustrated here:
    - In order: A, B, C, D, E, F, G, H, I
      ![](Sorted_binary_tree_inorder.svg)
    - Pre order: F, B, A, D, C, E, G, I, H
      ![](Sorted_binary_tree_preorder.svg)
    - Post order: A, C, E, D, B, H, I, G, F
      ![](Sorted_binary_tree_postorder.svg)
    - Level order: F, B, G, A, D, I, C, E, H
      ![](Sorted_binary_tree_breadth-first_traversal.svg)
    """
    IN_ORDER = 0
    PRE_ORDER = 1
    POST_ORDER = 2
    LEVEL_ORDER = 3

class UnicodeBreakType(Enum):
    """
    These are the possible line break classifications.

    Since new unicode versions may add new types here, applications should be ready
    to handle unknown values. They may be regarded as %G_UNICODE_BREAK_UNKNOWN.

    See [Unicode Line Breaking Algorithm](http://www.unicode.org/unicode/reports/tr14/).
    """
    MANDATORY = 0
    CARRIAGE_RETURN = 1
    LINE_FEED = 2
    COMBINING_MARK = 3
    SURROGATE = 4
    ZERO_WIDTH_SPACE = 5
    INSEPARABLE = 6
    NON_BREAKING_GLUE = 7
    CONTINGENT = 8
    SPACE = 9
    AFTER = 10
    BEFORE = 11
    BEFORE_AND_AFTER = 12
    HYPHEN = 13
    NON_STARTER = 14
    OPEN_PUNCTUATION = 15
    CLOSE_PUNCTUATION = 16
    QUOTATION = 17
    EXCLAMATION = 18
    IDEOGRAPHIC = 19
    NUMERIC = 20
    INFIX_SEPARATOR = 21
    SYMBOL = 22
    ALPHABETIC = 23
    PREFIX = 24
    POSTFIX = 25
    COMPLEX_CONTEXT = 26
    AMBIGUOUS = 27
    UNKNOWN = 28
    NEXT_LINE = 29
    WORD_JOINER = 30
    HANGUL_L_JAMO = 31
    HANGUL_V_JAMO = 32
    HANGUL_T_JAMO = 33
    HANGUL_LV_SYLLABLE = 34
    HANGUL_LVT_SYLLABLE = 35
    CLOSE_PARANTHESIS = 36
    CLOSE_PARENTHESIS = 36
    CONDITIONAL_JAPANESE_STARTER = 37
    HEBREW_LETTER = 38
    REGIONAL_INDICATOR = 39
    EMOJI_BASE = 40
    EMOJI_MODIFIER = 41
    ZERO_WIDTH_JOINER = 42

class UnicodeScript(Enum):
    """
    The #GUnicodeScript enumeration identifies different writing
    systems. The values correspond to the names as defined in the
    Unicode standard. The enumeration has been added in GLib 2.14,
    and is interchangeable with #PangoScript.

    Note that new types may be added in the future. Applications
    should be ready to handle unknown values.
    See [Unicode Standard Annex #24: Script names](http://www.unicode.org/reports/tr24/).
    """
    INVALID_CODE = -1
    COMMON = 0
    INHERITED = 1
    ARABIC = 2
    ARMENIAN = 3
    BENGALI = 4
    BOPOMOFO = 5
    CHEROKEE = 6
    COPTIC = 7
    CYRILLIC = 8
    DESERET = 9
    DEVANAGARI = 10
    ETHIOPIC = 11
    GEORGIAN = 12
    GOTHIC = 13
    GREEK = 14
    GUJARATI = 15
    GURMUKHI = 16
    HAN = 17
    HANGUL = 18
    HEBREW = 19
    HIRAGANA = 20
    KANNADA = 21
    KATAKANA = 22
    KHMER = 23
    LAO = 24
    LATIN = 25
    MALAYALAM = 26
    MONGOLIAN = 27
    MYANMAR = 28
    OGHAM = 29
    OLD_ITALIC = 30
    ORIYA = 31
    RUNIC = 32
    SINHALA = 33
    SYRIAC = 34
    TAMIL = 35
    TELUGU = 36
    THAANA = 37
    THAI = 38
    TIBETAN = 39
    CANADIAN_ABORIGINAL = 40
    YI = 41
    TAGALOG = 42
    HANUNOO = 43
    BUHID = 44
    TAGBANWA = 45
    BRAILLE = 46
    CYPRIOT = 47
    LIMBU = 48
    OSMANYA = 49
    SHAVIAN = 50
    LINEAR_B = 51
    TAI_LE = 52
    UGARITIC = 53
    NEW_TAI_LUE = 54
    BUGINESE = 55
    GLAGOLITIC = 56
    TIFINAGH = 57
    SYLOTI_NAGRI = 58
    OLD_PERSIAN = 59
    KHAROSHTHI = 60
    UNKNOWN = 61
    BALINESE = 62
    CUNEIFORM = 63
    PHOENICIAN = 64
    PHAGS_PA = 65
    NKO = 66
    KAYAH_LI = 67
    LEPCHA = 68
    REJANG = 69
    SUNDANESE = 70
    SAURASHTRA = 71
    CHAM = 72
    OL_CHIKI = 73
    VAI = 74
    CARIAN = 75
    LYCIAN = 76
    LYDIAN = 77
    AVESTAN = 78
    BAMUM = 79
    EGYPTIAN_HIEROGLYPHS = 80
    IMPERIAL_ARAMAIC = 81
    INSCRIPTIONAL_PAHLAVI = 82
    INSCRIPTIONAL_PARTHIAN = 83
    JAVANESE = 84
    KAITHI = 85
    LISU = 86
    MEETEI_MAYEK = 87
    OLD_SOUTH_ARABIAN = 88
    OLD_TURKIC = 89
    SAMARITAN = 90
    TAI_THAM = 91
    TAI_VIET = 92
    BATAK = 93
    BRAHMI = 94
    MANDAIC = 95
    CHAKMA = 96
    MEROITIC_CURSIVE = 97
    MEROITIC_HIEROGLYPHS = 98
    MIAO = 99
    SHARADA = 100
    SORA_SOMPENG = 101
    TAKRI = 102
    BASSA_VAH = 103
    CAUCASIAN_ALBANIAN = 104
    DUPLOYAN = 105
    ELBASAN = 106
    GRANTHA = 107
    KHOJKI = 108
    KHUDAWADI = 109
    LINEAR_A = 110
    MAHAJANI = 111
    MANICHAEAN = 112
    MENDE_KIKAKUI = 113
    MODI = 114
    MRO = 115
    NABATAEAN = 116
    OLD_NORTH_ARABIAN = 117
    OLD_PERMIC = 118
    PAHAWH_HMONG = 119
    PALMYRENE = 120
    PAU_CIN_HAU = 121
    PSALTER_PAHLAVI = 122
    SIDDHAM = 123
    TIRHUTA = 124
    WARANG_CITI = 125
    AHOM = 126
    ANATOLIAN_HIEROGLYPHS = 127
    HATRAN = 128
    MULTANI = 129
    OLD_HUNGARIAN = 130
    SIGNWRITING = 131
    ADLAM = 132
    BHAIKSUKI = 133
    MARCHEN = 134
    NEWA = 135
    OSAGE = 136
    TANGUT = 137
    MASARAM_GONDI = 138
    NUSHU = 139
    SOYOMBO = 140
    ZANABAZAR_SQUARE = 141
    DOGRA = 142
    GUNJALA_GONDI = 143
    HANIFI_ROHINGYA = 144
    MAKASAR = 145
    MEDEFAIDRIN = 146
    OLD_SOGDIAN = 147
    SOGDIAN = 148
    ELYMAIC = 149
    NANDINAGARI = 150
    NYIAKENG_PUACHUE_HMONG = 151
    WANCHO = 152
    CHORASMIAN = 153
    DIVES_AKURU = 154
    KHITAN_SMALL_SCRIPT = 155
    YEZIDI = 156
    CYPRO_MINOAN = 157
    OLD_UYGHUR = 158
    TANGSA = 159
    TOTO = 160
    VITHKUQI = 161
    MATH = 162

class UnicodeType(Enum):
    """
    These are the possible character classifications from the
    Unicode specification.
    See [Unicode Character Database](http://www.unicode.org/reports/tr44/#General_Category_Values).
    """
    CONTROL = 0
    FORMAT = 1
    UNASSIGNED = 2
    PRIVATE_USE = 3
    SURROGATE = 4
    LOWERCASE_LETTER = 5
    MODIFIER_LETTER = 6
    OTHER_LETTER = 7
    TITLECASE_LETTER = 8
    UPPERCASE_LETTER = 9
    SPACING_MARK = 10
    ENCLOSING_MARK = 11
    NON_SPACING_MARK = 12
    DECIMAL_NUMBER = 13
    LETTER_NUMBER = 14
    OTHER_NUMBER = 15
    CONNECT_PUNCTUATION = 16
    DASH_PUNCTUATION = 17
    CLOSE_PUNCTUATION = 18
    FINAL_PUNCTUATION = 19
    INITIAL_PUNCTUATION = 20
    OTHER_PUNCTUATION = 21
    OPEN_PUNCTUATION = 22
    CURRENCY_SYMBOL = 23
    MODIFIER_SYMBOL = 24
    MATH_SYMBOL = 25
    OTHER_SYMBOL = 26
    LINE_SEPARATOR = 27
    PARAGRAPH_SEPARATOR = 28
    SPACE_SEPARATOR = 29

class UserDirectory(Enum):
    """
    These are logical ids for special directories which are defined
    depending on the platform used. You should use g_get_user_special_dir()
    to retrieve the full path associated to the logical id.

    The #GUserDirectory enumeration can be extended at later date. Not
    every platform has a directory for every logical id in this
    enumeration.
    """
    DIRECTORY_DESKTOP = 0
    DIRECTORY_DOCUMENTS = 1
    DIRECTORY_DOWNLOAD = 2
    DIRECTORY_MUSIC = 3
    DIRECTORY_PICTURES = 4
    DIRECTORY_PUBLIC_SHARE = 5
    DIRECTORY_TEMPLATES = 6
    DIRECTORY_VIDEOS = 7
    N_DIRECTORIES = 8

class VariantClass(Enum):
    """
    The range of possible top-level types of #GVariant instances.
    """
    BOOLEAN = 98
    BYTE = 121
    INT16 = 110
    UINT16 = 113
    INT32 = 105
    UINT32 = 117
    INT64 = 120
    UINT64 = 116
    HANDLE = 104
    DOUBLE = 100
    STRING = 115
    OBJECT_PATH = 111
    SIGNATURE = 103
    VARIANT = 118
    MAYBE = 109
    ARRAY = 97
    TUPLE = 40
    DICT_ENTRY = 123

class AsciiType(Enum):
    ALNUM = 1
    ALPHA = 2
    CNTRL = 4
    DIGIT = 8
    GRAPH = 16
    LOWER = 32
    PRINT = 64
    PUNCT = 128
    SPACE = 256
    UPPER = 512
    XDIGIT = 1024

class FileSetContentsFlags(Enum):
    """
    Flags to pass to g_file_set_contents_full() to affect its safety and
    performance.
    """
    NONE = 0
    CONSISTENT = 1
    DURABLE = 2
    ONLY_EXISTING = 4

class FileTest(Enum):
    """
    A test to perform on a file using g_file_test().
    """
    IS_REGULAR = 1
    IS_SYMLINK = 2
    IS_DIR = 4
    IS_EXECUTABLE = 8
    EXISTS = 16

class FormatSizeFlags(Enum):
    """
    Flags to modify the format of the string returned by g_format_size_full().
    """
    DEFAULT = 0
    LONG_FORMAT = 1
    IEC_UNITS = 2
    BITS = 4

class HookFlagMask(Enum):
    """
    Flags used internally in the #GHook implementation.
    """
    ACTIVE = 1
    IN_CALL = 2
    MASK = 15

class IOCondition(Enum):
    """
    A bitwise combination representing a condition to watch for on an
    event source.
    """
    IN = 1
    OUT = 4
    PRI = 2
    ERR = 8
    HUP = 16
    NVAL = 32

class IOFlags(Enum):
    """
    Specifies properties of a #GIOChannel. Some of the flags can only be
    read with g_io_channel_get_flags(), but not changed with
    g_io_channel_set_flags().
    """
    APPEND = 1
    NONBLOCK = 2
    IS_READABLE = 4
    IS_WRITABLE = 8
    IS_WRITEABLE = 8
    IS_SEEKABLE = 16
    MASK = 31
    GET_MASK = 31
    SET_MASK = 3

class KeyFileFlags(Enum):
    """
    Flags which influence the parsing.
    """
    NONE = 0
    KEEP_COMMENTS = 1
    KEEP_TRANSLATIONS = 2

class LogLevelFlags(Enum):
    """
    Flags specifying the level of log messages.

    It is possible to change how GLib treats messages of the various
    levels using g_log_set_handler() and g_log_set_fatal_mask().
    """
    FLAG_RECURSION = 1
    FLAG_FATAL = 2
    LEVEL_ERROR = 4
    LEVEL_CRITICAL = 8
    LEVEL_WARNING = 16
    LEVEL_MESSAGE = 32
    LEVEL_INFO = 64
    LEVEL_DEBUG = 128
    LEVEL_MASK = -4

class MainContextFlags(Enum):
    """
    Flags to pass to g_main_context_new_with_flags() which affect the behaviour
    of a #GMainContext.
    """
    NONE = 0
    OWNERLESS_POLLING = 1

class MarkupCollectType(Enum):
    """
    A mixed enumerated type and flags field. You must specify one type
    (string, strdup, boolean, tristate).  Additionally, you may  optionally
    bitwise OR the type with the flag %G_MARKUP_COLLECT_OPTIONAL.

    It is likely that this enum will be extended in the future to
    support other types.
    """
    INVALID = 0
    STRING = 1
    STRDUP = 2
    BOOLEAN = 3
    TRISTATE = 4
    OPTIONAL = 65536

class MarkupParseFlags(Enum):
    """
    Flags that affect the behaviour of the parser.
    """
    DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1
    TREAT_CDATA_AS_TEXT = 2
    PREFIX_ERROR_POSITION = 4
    IGNORE_QUALIFIED = 8

class OptionFlags(Enum):
    """
    Flags which modify individual options.
    """
    NONE = 0
    HIDDEN = 1
    IN_MAIN = 2
    REVERSE = 4
    NO_ARG = 8
    FILENAME = 16
    OPTIONAL_ARG = 32
    NOALIAS = 64

class RegexCompileFlags(Enum):
    """
    Flags specifying compile-time options.
    """
    CASELESS = 1
    MULTILINE = 2
    DOTALL = 4
    EXTENDED = 8
    ANCHORED = 16
    DOLLAR_ENDONLY = 32
    UNGREEDY = 512
    RAW = 2048
    NO_AUTO_CAPTURE = 4096
    OPTIMIZE = 8192
    FIRSTLINE = 262144
    DUPNAMES = 524288
    NEWLINE_CR = 1048576
    NEWLINE_LF = 2097152
    NEWLINE_CRLF = 3145728
    NEWLINE_ANYCRLF = 5242880
    BSR_ANYCRLF = 8388608
    JAVASCRIPT_COMPAT = 33554432

class RegexMatchFlags(Enum):
    """
    Flags specifying match-time options.
    """
    ANCHORED = 16
    NOTBOL = 128
    NOTEOL = 256
    NOTEMPTY = 1024
    PARTIAL = 32768
    NEWLINE_CR = 1048576
    NEWLINE_LF = 2097152
    NEWLINE_CRLF = 3145728
    NEWLINE_ANY = 4194304
    NEWLINE_ANYCRLF = 5242880
    BSR_ANYCRLF = 8388608
    BSR_ANY = 16777216
    PARTIAL_SOFT = 32768
    PARTIAL_HARD = 134217728
    NOTEMPTY_ATSTART = 268435456

class SpawnFlags(Enum):
    """
    Flags passed to g_spawn_sync(), g_spawn_async() and g_spawn_async_with_pipes().
    """
    DEFAULT = 0
    LEAVE_DESCRIPTORS_OPEN = 1
    DO_NOT_REAP_CHILD = 2
    SEARCH_PATH = 4
    STDOUT_TO_DEV_NULL = 8
    STDERR_TO_DEV_NULL = 16
    CHILD_INHERITS_STDIN = 32
    FILE_AND_ARGV_ZERO = 64
    SEARCH_PATH_FROM_ENVP = 128
    CLOEXEC_PIPES = 256

class TestSubprocessFlags(Enum):
    """
    Flags to pass to g_test_trap_subprocess() to control input and output.

    Note that in contrast with g_test_trap_fork(), the default is to
    not show stdout and stderr.
    """
    STDIN = 1
    STDOUT = 2
    STDERR = 4

class TestTrapFlags(Enum):
    """
    Test traps are guards around forked tests.
    These flags determine what traps to set.
    """
    SILENCE_STDOUT = 128
    SILENCE_STDERR = 256
    INHERIT_STDIN = 512

class TraverseFlags(Enum):
    """
    Specifies which nodes are visited during several of the tree
    functions, including g_node_traverse() and g_node_find().
    """
    LEAVES = 1
    NON_LEAVES = 2
    ALL = 3
    MASK = 3
    LEAFS = 1
    NON_LEAFS = 2

class UriFlags(Enum):
    """
    Flags that describe a URI.

    When parsing a URI, if you need to choose different flags based on
    the type of URI, you can use g_uri_peek_scheme() on the URI string
    to check the scheme first, and use that to decide what flags to
    parse it with.
    """
    NONE = 0
    PARSE_RELAXED = 1
    HAS_PASSWORD = 2
    HAS_AUTH_PARAMS = 4
    ENCODED = 8
    NON_DNS = 16
    ENCODED_QUERY = 32
    ENCODED_PATH = 64
    ENCODED_FRAGMENT = 128
    SCHEME_NORMALIZE = 256

class UriHideFlags(Enum):
    """
    Flags describing what parts of the URI to hide in
    g_uri_to_string_partial(). Note that %G_URI_HIDE_PASSWORD and
    %G_URI_HIDE_AUTH_PARAMS will only work if the #GUri was parsed with
    the corresponding flags.
    """
    NONE = 0
    USERINFO = 1
    PASSWORD = 2
    AUTH_PARAMS = 4
    QUERY = 8
    FRAGMENT = 16

class UriParamsFlags(Enum):
    """
    Flags modifying the way parameters are handled by g_uri_parse_params() and
    #GUriParamsIter.
    """
    NONE = 0
    CASE_INSENSITIVE = 1
    WWW_FORM = 2
    PARSE_RELAXED = 4


def access(filename: str, mode: int) -> int:
    """
    A wrapper for the POSIX access() function. This function is used to
    test a pathname for one or several of read, write or execute
    permissions, or just existence.

    On Windows, the file protection mechanism is not at all POSIX-like,
    and the underlying function in the C library only checks the
    FAT-style READONLY attribute, and does not look at the ACL of a
    file at all. This function is this in practise almost useless on
    Windows. Software that needs to handle file permissions on Windows
    more exactly should use the Win32 API.

    See your C library manual for more details about access().
    """
    ...

def aligned_alloc(n_blocks: int, n_block_bytes: int, alignment: int) -> object:
    """
    This function is similar to g_malloc(), allocating (@n_blocks * @n_block_bytes)
    bytes, but care is taken to align the allocated memory to with the given
    alignment value. Additionally, it will detect possible overflow during
    multiplication.

    Aligned memory allocations returned by this function can only be
    freed using g_aligned_free().
    """
    ...

def aligned_alloc0(n_blocks: int, n_block_bytes: int, alignment: int) -> object:
    """
    This function is similar to g_aligned_alloc(), but it will
    also clear the allocated memory before returning it.
    """
    ...

def aligned_free(mem: _T.Optional[object]) -> object:
    """
    Frees the memory allocated by g_aligned_alloc().
    """
    ...

def ascii_digit_value(c: str) -> int:
    """
    Determines the numeric value of a character as a decimal digit.
    Differs from g_unichar_digit_value() because it takes a char, so
    there's no worry about sign extension if characters are signed.
    """
    ...

def ascii_dtostr(buffer: str, buf_len: int, d: float) -> str:
    """
    Converts a #gdouble to a string, using the '.' as
    decimal point.

    This function generates enough precision that converting
    the string back using g_ascii_strtod() gives the same machine-number
    (on machines with IEEE compatible 64bit doubles). It is
    guaranteed that the size of the resulting string will never
    be larger than %G_ASCII_DTOSTR_BUF_SIZE bytes, including the terminating
    nul character, which is always added.
    """
    ...

def ascii_formatd(buffer: str, buf_len: int, format: str, d: float) -> str:
    """
    Converts a #gdouble to a string, using the '.' as
    decimal point. To format the number you pass in
    a printf()-style format string. Allowed conversion
    specifiers are 'e', 'E', 'f', 'F', 'g' and 'G'.

    The @format must just be a single format specifier
    starting with `%`, expecting a #gdouble argument.

    The returned buffer is guaranteed to be nul-terminated.

    If you just want to want to serialize the value into a
    string, use g_ascii_dtostr().
    """
    ...

def ascii_strcasecmp(s1: str, s2: str) -> int:
    """
    Compare two strings, ignoring the case of ASCII characters.

    Unlike the BSD strcasecmp() function, this only recognizes standard
    ASCII letters and ignores the locale, treating all non-ASCII
    bytes as if they are not letters.

    This function should be used only on strings that are known to be
    in encodings where the bytes corresponding to ASCII letters always
    represent themselves. This includes UTF-8 and the ISO-8859-*
    charsets, but not for instance double-byte encodings like the
    Windows Codepage 932, where the trailing bytes of double-byte
    characters include all ASCII letters. If you compare two CP932
    strings using this function, you will get false matches.

    Both @s1 and @s2 must be non-%NULL.
    """
    ...

def ascii_strdown(str: str, len: int) -> str:
    """
    Converts all upper case ASCII letters to lower case ASCII letters.
    """
    ...

def ascii_string_to_signed(str: str, base: int, min: gint64, max: gint64, out_num: gint64) -> bool:
    """
    A convenience function for converting a string to a signed number.

    This function assumes that @str contains only a number of the given
    @base that is within inclusive bounds limited by @min and @max. If
    this is true, then the converted number is stored in @out_num. An
    empty string is not a valid input. A string with leading or
    trailing whitespace is also an invalid input.

    @base can be between 2 and 36 inclusive. Hexadecimal numbers must
    not be prefixed with "0x" or "0X". Such a problem does not exist
    for octal numbers, since they were usually prefixed with a zero
    which does not change the value of the parsed number.

    Parsing failures result in an error with the %G_NUMBER_PARSER_ERROR
    domain. If the input is invalid, the error code will be
    %G_NUMBER_PARSER_ERROR_INVALID. If the parsed number is out of
    bounds - %G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS.

    See g_ascii_strtoll() if you have more complex needs such as
    parsing a string which starts with a number, but then has other
    characters.
    """
    ...

def ascii_string_to_unsigned(str: str, base: int, min: guint64, max: guint64, out_num: guint64) -> bool:
    """
    A convenience function for converting a string to an unsigned number.

    This function assumes that @str contains only a number of the given
    @base that is within inclusive bounds limited by @min and @max. If
    this is true, then the converted number is stored in @out_num. An
    empty string is not a valid input. A string with leading or
    trailing whitespace is also an invalid input. A string with a leading sign
    (`-` or `+`) is not a valid input for the unsigned parser.

    @base can be between 2 and 36 inclusive. Hexadecimal numbers must
    not be prefixed with "0x" or "0X". Such a problem does not exist
    for octal numbers, since they were usually prefixed with a zero
    which does not change the value of the parsed number.

    Parsing failures result in an error with the %G_NUMBER_PARSER_ERROR
    domain. If the input is invalid, the error code will be
    %G_NUMBER_PARSER_ERROR_INVALID. If the parsed number is out of
    bounds - %G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS.

    See g_ascii_strtoull() if you have more complex needs such as
    parsing a string which starts with a number, but then has other
    characters.
    """
    ...

def ascii_strncasecmp(s1: str, s2: str, n: int) -> int:
    """
    Compare @s1 and @s2, ignoring the case of ASCII characters and any
    characters after the first @n in each string. If either string is
    less than @n bytes long, comparison will stop at the first nul byte
    encountered.

    Unlike the BSD strcasecmp() function, this only recognizes standard
    ASCII letters and ignores the locale, treating all non-ASCII
    characters as if they are not letters.

    The same warning as in g_ascii_strcasecmp() applies: Use this
    function only on strings known to be in encodings where bytes
    corresponding to ASCII letters always represent themselves.
    """
    ...

def ascii_strtod(nptr: str, endptr: str) -> float:
    """
    Converts a string to a #gdouble value.

    This function behaves like the standard strtod() function
    does in the C locale. It does this without actually changing
    the current locale, since that would not be thread-safe.
    A limitation of the implementation is that this function
    will still accept localized versions of infinities and NANs.

    This function is typically used when reading configuration
    files or other non-user input that should be locale independent.
    To handle input from the user you should normally use the
    locale-sensitive system strtod() function.

    To convert from a #gdouble to a string in a locale-insensitive
    way, use g_ascii_dtostr().

    If the correct value would cause overflow, plus or minus %HUGE_VAL
    is returned (according to the sign of the value), and %ERANGE is
    stored in %errno. If the correct value would cause underflow,
    zero is returned and %ERANGE is stored in %errno.

    This function resets %errno before calling strtod() so that
    you can reliably detect overflow and underflow.
    """
    ...

def ascii_strtoll(nptr: str, endptr: str, base: int) -> gint64:
    """
    Converts a string to a #gint64 value.
    This function behaves like the standard strtoll() function
    does in the C locale. It does this without actually
    changing the current locale, since that would not be
    thread-safe.

    This function is typically used when reading configuration
    files or other non-user input that should be locale independent.
    To handle input from the user you should normally use the
    locale-sensitive system strtoll() function.

    If the correct value would cause overflow, %G_MAXINT64 or %G_MININT64
    is returned, and `ERANGE` is stored in `errno`.
    If the base is outside the valid range, zero is returned, and
    `EINVAL` is stored in `errno`. If the
    string conversion fails, zero is returned, and @endptr returns @nptr
    (if @endptr is non-%NULL).
    """
    ...

def ascii_strtoull(nptr: str, endptr: str, base: int) -> guint64:
    """
    Converts a string to a #guint64 value.
    This function behaves like the standard strtoull() function
    does in the C locale. It does this without actually
    changing the current locale, since that would not be
    thread-safe.

    Note that input with a leading minus sign (`-`) is accepted, and will return
    the negation of the parsed number, unless that would overflow a #guint64.
    Critically, this means you cannot assume that a short fixed length input will
    never result in a low return value, as the input could have a leading `-`.

    This function is typically used when reading configuration
    files or other non-user input that should be locale independent.
    To handle input from the user you should normally use the
    locale-sensitive system strtoull() function.

    If the correct value would cause overflow, %G_MAXUINT64
    is returned, and `ERANGE` is stored in `errno`.
    If the base is outside the valid range, zero is returned, and
    `EINVAL` is stored in `errno`.
    If the string conversion fails, zero is returned, and @endptr returns
    @nptr (if @endptr is non-%NULL).
    """
    ...

def ascii_strup(str: str, len: int) -> str:
    """
    Converts all lower case ASCII letters to upper case ASCII letters.
    """
    ...

def ascii_tolower(c: str) -> str:
    """
    Convert a character to ASCII lower case.

    Unlike the standard C library tolower() function, this only
    recognizes standard ASCII letters and ignores the locale, returning
    all non-ASCII characters unchanged, even if they are lower case
    letters in a particular character set. Also unlike the standard
    library function, this takes and returns a char, not an int, so
    don't call it on %EOF but no need to worry about casting to #guchar
    before passing a possibly non-ASCII character in.
    """
    ...

def ascii_toupper(c: str) -> str:
    """
    Convert a character to ASCII upper case.

    Unlike the standard C library toupper() function, this only
    recognizes standard ASCII letters and ignores the locale, returning
    all non-ASCII characters unchanged, even if they are upper case
    letters in a particular character set. Also unlike the standard
    library function, this takes and returns a char, not an int, so
    don't call it on %EOF but no need to worry about casting to #guchar
    before passing a possibly non-ASCII character in.
    """
    ...

def ascii_xdigit_value(c: str) -> int:
    """
    Determines the numeric value of a character as a hexadecimal
    digit. Differs from g_unichar_xdigit_value() because it takes
    a char, so there's no worry about sign extension if characters
    are signed.
    """
    ...

def assert_warning(log_domain: str, file: str, line: int, pretty_function: str, expression: str) -> object:
    ...

def assertion_message(domain: str, file: str, line: int, func: str, message: str) -> object:
    ...

def assertion_message_cmpnum(domain: str, file: str, line: int, func: str, expr: str, arg1: long double, cmp: str, arg2: long double, numtype: str) -> object:
    ...

def assertion_message_cmpstr(domain: str, file: str, line: int, func: str, expr: str, arg1: str, cmp: str, arg2: str) -> object:
    ...

def assertion_message_cmpstrv(domain: str, file: str, line: int, func: str, expr: str, arg1: str, arg2: str, first_wrong_idx: int) -> object:
    ...

def assertion_message_error(domain: str, file: str, line: int, func: str, expr: str, error: Error, error_domain: Quark, error_code: int) -> object:
    ...

def assertion_message_expr(domain: _T.Optional[str], file: str, line: int, func: str, expr: _T.Optional[str]) -> object:
    """
    Internal function used to print messages from the public g_assert() and
    g_assert_not_reached() macros.
    """
    ...

def atexit(func: VoidFunc) -> object:
    """
    Specifies a function to be called at normal program termination.

    Since GLib 2.8.2, on Windows g_atexit() actually is a preprocessor
    macro that maps to a call to the atexit() function in the C
    library. This means that in case the code that calls g_atexit(),
    i.e. atexit(), is in a DLL, the function will be called when the
    DLL is detached from the program. This typically makes more sense
    than that the function is called when the GLib DLL is detached,
    which happened earlier when g_atexit() was a function in the GLib
    DLL.

    The behaviour of atexit() in the context of dynamically loaded
    modules is not formally specified and varies wildly.

    On POSIX systems, calling g_atexit() (or atexit()) in a dynamically
    loaded module which is unloaded before the program terminates might
    well cause a crash at program exit.

    Some POSIX systems implement atexit() like Windows, and have each
    dynamically loaded module maintain an own atexit chain that is
    called when the module is unloaded.

    On other POSIX systems, before a dynamically loaded module is
    unloaded, the registered atexit functions (if any) residing in that
    module are called, regardless where the code that registered them
    resided. This is presumably the most robust approach.

    As can be seen from the above, for portability it's best to avoid
    calling g_atexit() (or atexit()) except in the main executable of a
    program.
    """
    ...

def atomic_int_add(atomic: int, val: int) -> int:
    """
    Atomically adds @val to the value of @atomic.

    Think of this operation as an atomic version of
    `{ tmp = *atomic; *atomic += val; return tmp; }`.

    This call acts as a full compiler and hardware memory barrier.

    Before version 2.30, this function did not return a value
    (but g_atomic_int_exchange_and_add() did, and had the same meaning).

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_int_and(atomic: int, val: int) -> int:
    """
    Performs an atomic bitwise 'and' of the value of @atomic and @val,
    storing the result back in @atomic.

    This call acts as a full compiler and hardware memory barrier.

    Think of this operation as an atomic version of
    `{ tmp = *atomic; *atomic &= val; return tmp; }`.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_int_compare_and_exchange(atomic: int, oldval: int, newval: int) -> bool:
    """
    Compares @atomic to @oldval and, if equal, sets it to @newval.
    If @atomic was not equal to @oldval then no change occurs.

    This compare and exchange is done atomically.

    Think of this operation as an atomic version of
    `{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_int_dec_and_test(atomic: int) -> bool:
    """
    Decrements the value of @atomic by 1.

    Think of this operation as an atomic version of
    `{ *atomic -= 1; return (*atomic == 0); }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_int_exchange_and_add(atomic: int, val: int) -> int:
    """
    This function existed before g_atomic_int_add() returned the prior
    value of the integer (which it now does).  It is retained only for
    compatibility reasons.  Don't use this function in new code.
    """
    ...

def atomic_int_get(atomic: int) -> int:
    """
    Gets the current value of @atomic.

    This call acts as a full compiler and hardware
    memory barrier (before the get).

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_int_inc(atomic: int) -> object:
    """
    Increments the value of @atomic by 1.

    Think of this operation as an atomic version of `{ *atomic += 1; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_int_or(atomic: int, val: int) -> int:
    """
    Performs an atomic bitwise 'or' of the value of @atomic and @val,
    storing the result back in @atomic.

    Think of this operation as an atomic version of
    `{ tmp = *atomic; *atomic |= val; return tmp; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_int_set(atomic: int, newval: int) -> object:
    """
    Sets the value of @atomic to @newval.

    This call acts as a full compiler and hardware
    memory barrier (after the set).

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_int_xor(atomic: int, val: int) -> int:
    """
    Performs an atomic bitwise 'xor' of the value of @atomic and @val,
    storing the result back in @atomic.

    Think of this operation as an atomic version of
    `{ tmp = *atomic; *atomic ^= val; return tmp; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_pointer_add(atomic: object, val: int) -> int:
    """
    Atomically adds @val to the value of @atomic.

    Think of this operation as an atomic version of
    `{ tmp = *atomic; *atomic += val; return tmp; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_pointer_and(atomic: object, val: int) -> int:
    """
    Performs an atomic bitwise 'and' of the value of @atomic and @val,
    storing the result back in @atomic.

    Think of this operation as an atomic version of
    `{ tmp = *atomic; *atomic &= val; return tmp; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_pointer_compare_and_exchange(atomic: object, oldval: _T.Optional[object], newval: _T.Optional[object]) -> bool:
    """
    Compares @atomic to @oldval and, if equal, sets it to @newval.
    If @atomic was not equal to @oldval then no change occurs.

    This compare and exchange is done atomically.

    Think of this operation as an atomic version of
    `{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_pointer_get(atomic: object) -> object:
    """
    Gets the current value of @atomic.

    This call acts as a full compiler and hardware
    memory barrier (before the get).

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_pointer_or(atomic: object, val: int) -> int:
    """
    Performs an atomic bitwise 'or' of the value of @atomic and @val,
    storing the result back in @atomic.

    Think of this operation as an atomic version of
    `{ tmp = *atomic; *atomic |= val; return tmp; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_pointer_set(atomic: object, newval: _T.Optional[object]) -> object:
    """
    Sets the value of @atomic to @newval.

    This call acts as a full compiler and hardware
    memory barrier (after the set).

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_pointer_xor(atomic: object, val: int) -> int:
    """
    Performs an atomic bitwise 'xor' of the value of @atomic and @val,
    storing the result back in @atomic.

    Think of this operation as an atomic version of
    `{ tmp = *atomic; *atomic ^= val; return tmp; }`.

    This call acts as a full compiler and hardware memory barrier.

    While @atomic has a `volatile` qualifier, this is a historical artifact and
    the pointer passed to it should not be `volatile`.
    """
    ...

def atomic_rc_box_acquire(mem_block: object) -> object:
    """
    Atomically acquires a reference on the data pointed by @mem_block.
    """
    ...

def atomic_rc_box_alloc(block_size: int) -> object:
    """
    Allocates @block_size bytes of memory, and adds atomic
    reference counting semantics to it.

    The data will be freed when its reference count drops to
    zero.

    The allocated data is guaranteed to be suitably aligned for any
    built-in type.
    """
    ...

def atomic_rc_box_alloc0(block_size: int) -> object:
    """
    Allocates @block_size bytes of memory, and adds atomic
    reference counting semantics to it.

    The contents of the returned data is set to zero.

    The data will be freed when its reference count drops to
    zero.

    The allocated data is guaranteed to be suitably aligned for any
    built-in type.
    """
    ...

def atomic_rc_box_dup(block_size: int, mem_block: object) -> object:
    """
    Allocates a new block of data with atomic reference counting
    semantics, and copies @block_size bytes of @mem_block
    into it.
    """
    ...

def atomic_rc_box_get_size(mem_block: object) -> int:
    """
    Retrieves the size of the reference counted data pointed by @mem_block.
    """
    ...

def atomic_rc_box_release(mem_block: object) -> object:
    """
    Atomically releases a reference on the data pointed by @mem_block.

    If the reference was the last one, it will free the
    resources allocated for @mem_block.
    """
    ...

def atomic_rc_box_release_full(mem_block: object, clear_func: DestroyNotify) -> object:
    """
    Atomically releases a reference on the data pointed by @mem_block.

    If the reference was the last one, it will call @clear_func
    to clear the contents of @mem_block, and then will free the
    resources allocated for @mem_block.
    """
    ...

def atomic_ref_count_compare(arc: int, val: int) -> bool:
    """
    Atomically compares the current value of @arc with @val.
    """
    ...

def atomic_ref_count_dec(arc: int) -> bool:
    """
    Atomically decreases the reference count.

    If %TRUE is returned, the reference count reached 0. After this point, @arc
    is an undefined state and must be reinitialized with
    g_atomic_ref_count_init() to be used again.
    """
    ...

def atomic_ref_count_inc(arc: int) -> object:
    """
    Atomically increases the reference count.
    """
    ...

def atomic_ref_count_init(arc: int) -> object:
    """
    Initializes a reference count variable to 1.
    """
    ...

def base64_decode(text: str, out_len: int) -> object:
    """
    Decode a sequence of Base-64 encoded text into binary data.  Note
    that the returned binary data is not necessarily zero-terminated,
    so it should not be used as a character string.
    """
    ...

def base64_decode_inplace(text: object, out_len: int) -> int:
    """
    Decode a sequence of Base-64 encoded text into binary data
    by overwriting the input data.
    """
    ...

def base64_decode_step(in: object, len: int, out: object, state: int, save: int) -> int:
    """
    Incrementally decode a sequence of binary data from its Base-64 stringified
    representation. By calling this function multiple times you can convert
    data in chunks to avoid having to have the full encoded data in memory.

    The output buffer must be large enough to fit all the data that will
    be written to it. Since base64 encodes 3 bytes in 4 chars you need
    at least: (@len / 4) * 3 + 3 bytes (+ 3 may be needed in case of non-zero
    state).
    """
    ...

def base64_encode(data: _T.Optional[object], len: int) -> str:
    """
    Encode a sequence of binary data into its Base-64 stringified
    representation.
    """
    ...

def base64_encode_close(break_lines: bool, out: object, state: int, save: int) -> int:
    """
    Flush the status from a sequence of calls to g_base64_encode_step().

    The output buffer must be large enough to fit all the data that will
    be written to it. It will need up to 4 bytes, or up to 5 bytes if
    line-breaking is enabled.

    The @out array will not be automatically nul-terminated.
    """
    ...

def base64_encode_step(in: object, len: int, break_lines: bool, out: object, state: int, save: int) -> int:
    """
    Incrementally encode a sequence of binary data into its Base-64 stringified
    representation. By calling this function multiple times you can convert
    data in chunks to avoid having to have the full encoded data in memory.

    When all of the data has been converted you must call
    g_base64_encode_close() to flush the saved state.

    The output buffer must be large enough to fit all the data that will
    be written to it. Due to the way base64 encodes you will need
    at least: (@len / 3 + 1) * 4 + 4 bytes (+ 4 may be needed in case of
    non-zero state). If you enable line-breaking you will need at least:
    ((@len / 3 + 1) * 4 + 4) / 76 + 1 bytes of extra space.

    @break_lines is typically used when putting base64-encoded data in emails.
    It breaks the lines at 76 columns instead of putting all of the text on
    the same line. This avoids problems with long lines in the email system.
    Note however that it breaks the lines with `LF` characters, not
    `CR LF` sequences, so the result cannot be passed directly to SMTP
    or certain other protocols.
    """
    ...

def basename(file_name: str) -> str:
    """
    Gets the name of the file without any leading directory
    components. It returns a pointer into the given file name
    string.
    """
    ...

def bit_lock(address: int, lock_bit: int) -> object:
    """
    Sets the indicated @lock_bit in @address.  If the bit is already
    set, this call will block until g_bit_unlock() unsets the
    corresponding bit.

    Attempting to lock on two different bits within the same integer is
    not supported and will very probably cause deadlocks.

    The value of the bit that is set is (1u << @bit).  If @bit is not
    between 0 and 31 then the result is undefined.

    This function accesses @address atomically.  All other accesses to
    @address must be atomic in order for this function to work
    reliably. While @address has a `volatile` qualifier, this is a historical
    artifact and the argument passed to it should not be `volatile`.
    """
    ...

def bit_nth_lsf(mask: int, nth_bit: int) -> int:
    """
    Find the position of the first bit set in @mask, searching
    from (but not including) @nth_bit upwards. Bits are numbered
    from 0 (least significant) to sizeof(#gulong) * 8 - 1 (31 or 63,
    usually). To start searching from the 0th bit, set @nth_bit to -1.
    """
    ...

def bit_nth_msf(mask: int, nth_bit: int) -> int:
    """
    Find the position of the first bit set in @mask, searching
    from (but not including) @nth_bit downwards. Bits are numbered
    from 0 (least significant) to sizeof(#gulong) * 8 - 1 (31 or 63,
    usually). To start searching from the last bit, set @nth_bit to
    -1 or GLIB_SIZEOF_LONG * 8.
    """
    ...

def bit_storage(number: int) -> int:
    """
    Gets the number of bits used to hold @number,
    e.g. if @number is 4, 3 bits are needed.
    """
    ...

def bit_trylock(address: int, lock_bit: int) -> bool:
    """
    Sets the indicated @lock_bit in @address, returning %TRUE if
    successful.  If the bit is already set, returns %FALSE immediately.

    Attempting to lock on two different bits within the same integer is
    not supported.

    The value of the bit that is set is (1u << @bit).  If @bit is not
    between 0 and 31 then the result is undefined.

    This function accesses @address atomically.  All other accesses to
    @address must be atomic in order for this function to work
    reliably. While @address has a `volatile` qualifier, this is a historical
    artifact and the argument passed to it should not be `volatile`.
    """
    ...

def bit_unlock(address: int, lock_bit: int) -> object:
    """
    Clears the indicated @lock_bit in @address.  If another thread is
    currently blocked in g_bit_lock() on this same bit then it will be
    woken up.

    This function accesses @address atomically.  All other accesses to
    @address must be atomic in order for this function to work
    reliably. While @address has a `volatile` qualifier, this is a historical
    artifact and the argument passed to it should not be `volatile`.
    """
    ...

def build_filename(first_element: str, *args: object) -> str:
    """
    Creates a filename from a series of elements using the correct
    separator for filenames.

    On Unix, this function behaves identically to `g_build_path
    (G_DIR_SEPARATOR_S, first_element, ....)`.

    On Windows, it takes into account that either the backslash
    (`\` or slash (`/`) can be used as separator in filenames, but
    otherwise behaves as on UNIX. When file pathname separators need
    to be inserted, the one that last previously occurred in the
    parameters (reading from left to right) is used.

    No attempt is made to force the resulting filename to be an absolute
    path. If the first element is a relative path, the result will
    be a relative path.
    """
    ...

def build_filename_valist(first_element: str, args: list) -> str:
    """
    Behaves exactly like g_build_filename(), but takes the path elements
    as a va_list. This function is mainly meant for language bindings.
    """
    ...

def build_filenamev(args: object) -> str:
    """
    Behaves exactly like g_build_filename(), but takes the path elements
    as a string array, instead of varargs. This function is mainly
    meant for language bindings.
    """
    ...

def build_path(separator: str, first_element: str, *args: object) -> str:
    """
    Creates a path from a series of elements using @separator as the
    separator between elements. At the boundary between two elements,
    any trailing occurrences of separator in the first element, or
    leading occurrences of separator in the second element are removed
    and exactly one copy of the separator is inserted.

    Empty elements are ignored.

    The number of leading copies of the separator on the result is
    the same as the number of leading copies of the separator on
    the first non-empty element.

    The number of trailing copies of the separator on the result is
    the same as the number of trailing copies of the separator on
    the last non-empty element. (Determination of the number of
    trailing copies is done without stripping leading copies, so
    if the separator is `ABA`, then `ABABA` has 1 trailing copy.)

    However, if there is only a single non-empty element, and there
    are no characters in that element not part of the leading or
    trailing separators, then the result is exactly the original value
    of that element.

    Other than for determination of the number of leading and trailing
    copies of the separator, elements consisting only of copies
    of the separator are ignored.
    """
    ...

def build_pathv(separator: str, args: object) -> str:
    """
    Behaves exactly like g_build_path(), but takes the path elements
    as a string array, instead of varargs. This function is mainly
    meant for language bindings.
    """
    ...

def canonicalize_filename(filename: str, relative_to: _T.Optional[str]) -> str:
    """
    Gets the canonical file name from @filename. All triple slashes are turned into
    single slashes, and all `..` and `.`s resolved against @relative_to.

    Symlinks are not followed, and the returned path is guaranteed to be absolute.

    If @filename is an absolute path, @relative_to is ignored. Otherwise,
    @relative_to will be prepended to @filename to make it absolute. @relative_to
    must be an absolute path, or %NULL. If @relative_to is %NULL, it'll fallback
    to g_get_current_dir().

    This function never fails, and will canonicalize file paths even if they don't
    exist.

    No file system I/O is done.
    """
    ...

def chdir(path: str) -> int:
    """
    A wrapper for the POSIX chdir() function. The function changes the
    current directory of the process to @path.

    See your C library manual for more details about chdir().
    """
    ...

def check_version(required_major: int, required_minor: int, required_micro: int) -> str:
    """
    Checks that the GLib library in use is compatible with the
    given version.

    Generally you would pass in the constants %GLIB_MAJOR_VERSION,
    %GLIB_MINOR_VERSION, %GLIB_MICRO_VERSION as the three arguments
    to this function; that produces a check that the library in use
    is compatible with the version of GLib the application or module
    was compiled against.

    Compatibility is defined by two things: first the version
    of the running library is newer than the version
    `@required_major.required_minor.@required_micro`. Second
    the running library must be binary compatible with the
    version `@required_major.@required_minor.@required_micro`
    (same major version.)
    """
    ...

def child_watch_add(pid: Pid, function: ChildWatchFunc, data: _T.Optional[object]) -> int:
    """
    Sets a function to be called when the child indicated by @pid
    exits, at a default priority, %G_PRIORITY_DEFAULT.

    If you obtain @pid from g_spawn_async() or g_spawn_async_with_pipes()
    you will need to pass %G_SPAWN_DO_NOT_REAP_CHILD as flag to
    the spawn function for the child watching to work.

    Note that on platforms where #GPid must be explicitly closed
    (see g_spawn_close_pid()) @pid must not be closed while the
    source is still active. Typically, you will want to call
    g_spawn_close_pid() in the callback function for the source.

    GLib supports only a single callback per process id.
    On POSIX platforms, the same restrictions mentioned for
    g_child_watch_source_new() apply to this function.

    This internally creates a main loop source using
    g_child_watch_source_new() and attaches it to the main loop context
    using g_source_attach(). You can do these steps manually if you
    need greater control.
    """
    ...

def child_watch_add_full(priority: int, pid: Pid, function: ChildWatchFunc, data: _T.Optional[object], notify: _T.Optional[DestroyNotify]) -> int:
    """
    Sets a function to be called when the child indicated by @pid
    exits, at the priority @priority.

    If you obtain @pid from g_spawn_async() or g_spawn_async_with_pipes()
    you will need to pass %G_SPAWN_DO_NOT_REAP_CHILD as flag to
    the spawn function for the child watching to work.

    In many programs, you will want to call g_spawn_check_wait_status()
    in the callback to determine whether or not the child exited
    successfully.

    Also, note that on platforms where #GPid must be explicitly closed
    (see g_spawn_close_pid()) @pid must not be closed while the source
    is still active.  Typically, you should invoke g_spawn_close_pid()
    in the callback function for the source.

    GLib supports only a single callback per process id.
    On POSIX platforms, the same restrictions mentioned for
    g_child_watch_source_new() apply to this function.

    This internally creates a main loop source using
    g_child_watch_source_new() and attaches it to the main loop context
    using g_source_attach(). You can do these steps manually if you
    need greater control.
    """
    ...

def child_watch_source_new(pid: Pid) -> Source:
    """
    Creates a new child_watch source.

    The source will not initially be associated with any #GMainContext
    and must be added to one with g_source_attach() before it will be
    executed.

    Note that child watch sources can only be used in conjunction with
    `g_spawn...` when the %G_SPAWN_DO_NOT_REAP_CHILD flag is used.

    Note that on platforms where #GPid must be explicitly closed
    (see g_spawn_close_pid()) @pid must not be closed while the
    source is still active. Typically, you will want to call
    g_spawn_close_pid() in the callback function for the source.

    On POSIX platforms, the following restrictions apply to this API
    due to limitations in POSIX process interfaces:

    * @pid must be a child of this process
    * @pid must be positive
    * the application must not call `waitpid` with a non-positive
      first argument, for instance in another thread
    * the application must not wait for @pid to exit by any other
      mechanism, including `waitpid(pid, ...)` or a second child-watch
      source for the same @pid
    * the application must not ignore `SIGCHLD`

    If any of those conditions are not met, this and related APIs will
    not work correctly. This can often be diagnosed via a GLib warning
    stating that `ECHILD` was received by `waitpid`.

    Calling `waitpid` for specific processes other than @pid remains a
    valid thing to do.
    """
    ...

def clear_error() -> object:
    """
    If @err or *@err is %NULL, does nothing. Otherwise,
    calls g_error_free() on *@err and sets *@err to %NULL.
    """
    ...

def clear_handle_id(tag_ptr: int, clear_func: ClearHandleFunc) -> object:
    """
    Clears a numeric handler, such as a #GSource ID.

    @tag_ptr must be a valid pointer to the variable holding the handler.

    If the ID is zero then this function does nothing.
    Otherwise, clear_func() is called with the ID as a parameter, and the tag is
    set to zero.

    A macro is also included that allows this function to be used without
    pointer casts.
    """
    ...

def clear_list(list_ptr: List, destroy: _T.Optional[DestroyNotify]) -> object:
    """
    Clears a pointer to a #GList, freeing it and, optionally, freeing its elements using @destroy.

    @list_ptr must be a valid pointer. If @list_ptr points to a null #GList, this does nothing.
    """
    ...

def clear_pointer(pp: object, destroy: DestroyNotify) -> object:
    """
    Clears a reference to a variable.

    @pp must not be %NULL.

    If the reference is %NULL then this function does nothing.
    Otherwise, the variable is destroyed using @destroy and the
    pointer is set to %NULL.

    A macro is also included that allows this function to be used without
    pointer casts. This will mask any warnings about incompatible function types
    or calling conventions, so you must ensure that your @destroy function is
    compatible with being called as `GDestroyNotify` using the standard calling
    convention for the platform that GLib was compiled for; otherwise the program
    will experience undefined behaviour.
    """
    ...

def clear_slist(slist_ptr: SList, destroy: _T.Optional[DestroyNotify]) -> object:
    """
    Clears a pointer to a #GSList, freeing it and, optionally, freeing its elements using @destroy.

    @slist_ptr must be a valid pointer. If @slist_ptr points to a null #GSList, this does nothing.
    """
    ...

def close(fd: int) -> bool:
    """
    This wraps the close() call; in case of error, %errno will be
    preserved, but the error will also be stored as a #GError in @error.

    Besides using #GError, there is another major reason to prefer this
    function over the call provided by the system; on Unix, it will
    attempt to correctly handle %EINTR, which has platform-specific
    semantics.
    """
    ...

def compute_checksum_for_bytes(checksum_type: ChecksumType, data: Bytes) -> str:
    """
    Computes the checksum for a binary @data. This is a
    convenience wrapper for g_checksum_new(), g_checksum_get_string()
    and g_checksum_free().

    The hexadecimal string returned will be in lower case.
    """
    ...

def compute_checksum_for_data(checksum_type: ChecksumType, data: object, length: int) -> str:
    """
    Computes the checksum for a binary @data of @length. This is a
    convenience wrapper for g_checksum_new(), g_checksum_get_string()
    and g_checksum_free().

    The hexadecimal string returned will be in lower case.
    """
    ...

def compute_checksum_for_string(checksum_type: ChecksumType, str: str, length: int) -> str:
    """
    Computes the checksum of a string.

    The hexadecimal string returned will be in lower case.
    """
    ...

def compute_hmac_for_bytes(digest_type: ChecksumType, key: Bytes, data: Bytes) -> str:
    """
    Computes the HMAC for a binary @data. This is a
    convenience wrapper for g_hmac_new(), g_hmac_get_string()
    and g_hmac_unref().

    The hexadecimal string returned will be in lower case.
    """
    ...

def compute_hmac_for_data(digest_type: ChecksumType, key: object, key_len: int, data: object, length: int) -> str:
    """
    Computes the HMAC for a binary @data of @length. This is a
    convenience wrapper for g_hmac_new(), g_hmac_get_string()
    and g_hmac_unref().

    The hexadecimal string returned will be in lower case.
    """
    ...

def compute_hmac_for_string(digest_type: ChecksumType, key: object, key_len: int, str: str, length: int) -> str:
    """
    Computes the HMAC for a string.

    The hexadecimal string returned will be in lower case.
    """
    ...

def convert(str: object, len: int, to_codeset: str, from_codeset: str, bytes_read: int, bytes_written: int) -> object:
    """
    Converts a string from one character set to another.

    Note that you should use g_iconv() for streaming conversions.
    Despite the fact that @bytes_read can return information about partial
    characters, the g_convert_... functions are not generally suitable
    for streaming. If the underlying converter maintains internal state,
    then this won't be preserved across successive calls to g_convert(),
    g_convert_with_iconv() or g_convert_with_fallback(). (An example of
    this is the GNU C converter for CP1255 which does not emit a base
    character until it knows that the next character is not a mark that
    could combine with the base character.)

    Using extensions such as "//TRANSLIT" may not work (or may not work
    well) on many platforms.  Consider using g_str_to_ascii() instead.
    """
    ...

def convert_error_quark() -> Quark:
    ...

def convert_with_fallback(str: object, len: int, to_codeset: str, from_codeset: str, fallback: str, bytes_read: int, bytes_written: int) -> object:
    """
    Converts a string from one character set to another, possibly
    including fallback sequences for characters not representable
    in the output. Note that it is not guaranteed that the specification
    for the fallback sequences in @fallback will be honored. Some
    systems may do an approximate conversion from @from_codeset
    to @to_codeset in their iconv() functions,
    in which case GLib will simply return that approximate conversion.

    Note that you should use g_iconv() for streaming conversions.
    Despite the fact that @bytes_read can return information about partial
    characters, the g_convert_... functions are not generally suitable
    for streaming. If the underlying converter maintains internal state,
    then this won't be preserved across successive calls to g_convert(),
    g_convert_with_iconv() or g_convert_with_fallback(). (An example of
    this is the GNU C converter for CP1255 which does not emit a base
    character until it knows that the next character is not a mark that
    could combine with the base character.)
    """
    ...

def convert_with_iconv(str: object, len: int, converter: IConv, bytes_read: int, bytes_written: int) -> object:
    """
    Converts a string from one character set to another.

    Note that you should use g_iconv() for streaming conversions.
    Despite the fact that @bytes_read can return information about partial
    characters, the g_convert_... functions are not generally suitable
    for streaming. If the underlying converter maintains internal state,
    then this won't be preserved across successive calls to g_convert(),
    g_convert_with_iconv() or g_convert_with_fallback(). (An example of
    this is the GNU C converter for CP1255 which does not emit a base
    character until it knows that the next character is not a mark that
    could combine with the base character.)

    Characters which are valid in the input character set, but which have no
    representation in the output character set will result in a
    %G_CONVERT_ERROR_ILLEGAL_SEQUENCE error. This is in contrast to the iconv()
    specification, which leaves this behaviour implementation defined. Note that
    this is the same error code as is returned for an invalid byte sequence in
    the input character set. To get defined behaviour for conversion of
    unrepresentable characters, use g_convert_with_fallback().
    """
    ...

def datalist_clear(datalist: Data) -> object:
    """
    Frees all the data elements of the datalist.
    The data elements' destroy functions are called
    if they have been set.
    """
    ...

def datalist_foreach(datalist: Data, func: DataForeachFunc, user_data: _T.Optional[object]) -> object:
    """
    Calls the given function for each data element of the datalist. The
    function is called with each data element's #GQuark id and data,
    together with the given @user_data parameter. Note that this
    function is NOT thread-safe. So unless @datalist can be protected
    from any modifications during invocation of this function, it should
    not be called.

    @func can make changes to @datalist, but the iteration will not
    reflect changes made during the g_datalist_foreach() call, other
    than skipping over elements that are removed.
    """
    ...

def datalist_get_data(datalist: Data, key: str) -> object:
    """
    Gets a data element, using its string identifier. This is slower than
    g_datalist_id_get_data() because it compares strings.
    """
    ...

def datalist_get_flags(datalist: Data) -> int:
    """
    Gets flags values packed in together with the datalist.
    See g_datalist_set_flags().
    """
    ...

def datalist_id_dup_data(datalist: Data, key_id: Quark, dup_func: _T.Optional[DuplicateFunc], user_data: _T.Optional[object]) -> object:
    """
    This is a variant of g_datalist_id_get_data() which
    returns a 'duplicate' of the value. @dup_func defines the
    meaning of 'duplicate' in this context, it could e.g.
    take a reference on a ref-counted object.

    If the @key_id is not set in the datalist then @dup_func
    will be called with a %NULL argument.

    Note that @dup_func is called while the datalist is locked, so it
    is not allowed to read or modify the datalist.

    This function can be useful to avoid races when multiple
    threads are using the same datalist and the same key.
    """
    ...

def datalist_id_get_data(datalist: Data, key_id: Quark) -> object:
    """
    Retrieves the data element corresponding to @key_id.
    """
    ...

def datalist_id_remove_no_notify(datalist: Data, key_id: Quark) -> object:
    """
    Removes an element, without calling its destroy notification
    function.
    """
    ...

def datalist_id_replace_data(datalist: Data, key_id: Quark, oldval: _T.Optional[object], newval: _T.Optional[object], destroy: _T.Optional[DestroyNotify], old_destroy: DestroyNotify) -> bool:
    """
    Compares the member that is associated with @key_id in
    @datalist to @oldval, and if they are the same, replace
    @oldval with @newval.

    This is like a typical atomic compare-and-exchange
    operation, for a member of @datalist.

    If the previous value was replaced then ownership of the
    old value (@oldval) is passed to the caller, including
    the registered destroy notify for it (passed out in @old_destroy).
    Its up to the caller to free this as they wish, which may
    or may not include using @old_destroy as sometimes replacement
    should not destroy the object in the normal way.
    """
    ...

def datalist_id_set_data_full(datalist: Data, key_id: Quark, data: _T.Optional[object], destroy_func: _T.Optional[DestroyNotify]) -> object:
    """
    Sets the data corresponding to the given #GQuark id, and the
    function to be called when the element is removed from the datalist.
    Any previous data with the same key is removed, and its destroy
    function is called.
    """
    ...

def datalist_init(datalist: Data) -> object:
    """
    Resets the datalist to %NULL. It does not free any memory or call
    any destroy functions.
    """
    ...

def datalist_set_flags(datalist: Data, flags: int) -> object:
    """
    Turns on flag values for a data list. This function is used
    to keep a small number of boolean flags in an object with
    a data list without using any additional space. It is
    not generally useful except in circumstances where space
    is very tight. (It is used in the base #GObject type, for
    example.)
    """
    ...

def datalist_unset_flags(datalist: Data, flags: int) -> object:
    """
    Turns off flag values for a data list. See g_datalist_unset_flags()
    """
    ...

def dataset_destroy(dataset_location: object) -> object:
    """
    Destroys the dataset, freeing all memory allocated, and calling any
    destroy functions set for data elements.
    """
    ...

def dataset_foreach(dataset_location: object, func: DataForeachFunc, user_data: _T.Optional[object]) -> object:
    """
    Calls the given function for each data element which is associated
    with the given location. Note that this function is NOT thread-safe.
    So unless @dataset_location can be protected from any modifications
    during invocation of this function, it should not be called.

    @func can make changes to the dataset, but the iteration will not
    reflect changes made during the g_dataset_foreach() call, other
    than skipping over elements that are removed.
    """
    ...

def dataset_id_get_data(dataset_location: object, key_id: Quark) -> object:
    """
    Gets the data element corresponding to a #GQuark.
    """
    ...

def dataset_id_remove_no_notify(dataset_location: object, key_id: Quark) -> object:
    """
    Removes an element, without calling its destroy notification
    function.
    """
    ...

def dataset_id_set_data_full(dataset_location: object, key_id: Quark, data: _T.Optional[object], destroy_func: DestroyNotify) -> object:
    """
    Sets the data element associated with the given #GQuark id, and also
    the function to call when the data element is destroyed. Any
    previous data with the same key is removed, and its destroy function
    is called.
    """
    ...

def dcgettext(domain: _T.Optional[str], msgid: str, category: int) -> str:
    """
    This is a variant of g_dgettext() that allows specifying a locale
    category instead of always using `LC_MESSAGES`. See g_dgettext() for
    more information about how this functions differs from calling
    dcgettext() directly.
    """
    ...

def dgettext(domain: _T.Optional[str], msgid: str) -> str:
    """
    This function is a wrapper of dgettext() which does not translate
    the message if the default domain as set with textdomain() has no
    translations for the current locale.

    The advantage of using this function over dgettext() proper is that
    libraries using this function (like GTK+) will not use translations
    if the application using the library does not have translations for
    the current locale.  This results in a consistent English-only
    interface instead of one having partial translations.  For this
    feature to work, the call to textdomain() and setlocale() should
    precede any g_dgettext() invocations.  For GTK+, it means calling
    textdomain() before gtk_init or its variants.

    This function disables translations if and only if upon its first
    call all the following conditions hold:

    - @domain is not %NULL

    - textdomain() has been called to set a default text domain

    - there is no translations available for the default text domain
      and the current locale

    - current locale is not "C" or any English locales (those
      starting with "en_")

    Note that this behavior may not be desired for example if an application
    has its untranslated messages in a language other than English. In those
    cases the application should call textdomain() after initializing GTK+.

    Applications should normally not use this function directly,
    but use the _() macro for translations.
    """
    ...

def direct_equal(v1: _T.Optional[object], v2: _T.Optional[object]) -> bool:
    """
    Compares two #gpointer arguments and returns %TRUE if they are equal.
    It can be passed to g_hash_table_new() as the @key_equal_func
    parameter, when using opaque pointers compared by pointer value as
    keys in a #GHashTable.

    This equality function is also appropriate for keys that are integers
    stored in pointers, such as `GINT_TO_POINTER (n)`.
    """
    ...

def direct_hash(v: _T.Optional[object]) -> int:
    """
    Converts a gpointer to a hash value.
    It can be passed to g_hash_table_new() as the @hash_func parameter,
    when using opaque pointers compared by pointer value as keys in a
    #GHashTable.

    This hash function is also appropriate for keys that are integers
    stored in pointers, such as `GINT_TO_POINTER (n)`.
    """
    ...

def dngettext(domain: _T.Optional[str], msgid: str, msgid_plural: str, n: int) -> str:
    """
    This function is a wrapper of dngettext() which does not translate
    the message if the default domain as set with textdomain() has no
    translations for the current locale.

    See g_dgettext() for details of how this differs from dngettext()
    proper.
    """
    ...

def double_equal(v1: object, v2: object) -> bool:
    """
    Compares the two #gdouble values being pointed to and returns
    %TRUE if they are equal.
    It can be passed to g_hash_table_new() as the @key_equal_func
    parameter, when using non-%NULL pointers to doubles as keys in a
    #GHashTable.
    """
    ...

def double_hash(v: object) -> int:
    """
    Converts a pointer to a #gdouble to a hash value.
    It can be passed to g_hash_table_new() as the @hash_func parameter,
    It can be passed to g_hash_table_new() as the @hash_func parameter,
    when using non-%NULL pointers to doubles as keys in a #GHashTable.
    """
    ...

def dpgettext(domain: _T.Optional[str], msgctxtid: str, msgidoffset: int) -> str:
    """
    This function is a variant of g_dgettext() which supports
    a disambiguating message context. GNU gettext uses the
    '\004' character to separate the message context and
    message id in @msgctxtid.
    If 0 is passed as @msgidoffset, this function will fall back to
    trying to use the deprecated convention of using "|" as a separation
    character.

    This uses g_dgettext() internally. See that functions for differences
    with dgettext() proper.

    Applications should normally not use this function directly,
    but use the C_() macro for translations with context.
    """
    ...

def dpgettext2(domain: _T.Optional[str], context: str, msgid: str) -> str:
    """
    This function is a variant of g_dgettext() which supports
    a disambiguating message context. GNU gettext uses the
    '\004' character to separate the message context and
    message id in @msgctxtid.

    This uses g_dgettext() internally. See that functions for differences
    with dgettext() proper.

    This function differs from C_() in that it is not a macro and
    thus you may use non-string-literals as context and msgid arguments.
    """
    ...

def environ_getenv(envp: _T.Optional[object], variable: str) -> str:
    """
    Returns the value of the environment variable @variable in the
    provided list @envp.
    """
    ...

def environ_setenv(envp: _T.Optional[object], variable: str, value: str, overwrite: bool) -> object:
    """
    Sets the environment variable @variable in the provided list
    @envp to @value.
    """
    ...

def environ_unsetenv(envp: _T.Optional[object], variable: str) -> object:
    """
    Removes the environment variable @variable from the provided
    environment @envp.
    """
    ...

def file_error_from_errno(err_no: int) -> FileError:
    """
    Gets a #GFileError constant based on the passed-in @err_no.

    For example, if you pass in `EEXIST` this function returns
    %G_FILE_ERROR_EXIST. Unlike `errno` values, you can portably
    assume that all #GFileError values will exist.

    Normally a #GFileError value goes into a #GError returned
    from a function that manipulates files. So you would use
    g_file_error_from_errno() when constructing a #GError.
    """
    ...

def file_error_quark() -> Quark:
    ...

def file_get_contents(filename: str, contents: object, length: _T.Optional[int]) -> bool:
    """
    Reads an entire file into allocated memory, with good error
    checking.

    If the call was successful, it returns %TRUE and sets @contents to the file
    contents and @length to the length of the file contents in bytes. The string
    stored in @contents will be nul-terminated, so for text files you can pass
    %NULL for the @length argument. If the call was not successful, it returns
    %FALSE and sets @error. The error domain is %G_FILE_ERROR. Possible error
    codes are those in the #GFileError enumeration. In the error case,
    @contents is set to %NULL and @length is set to zero.
    """
    ...

def file_open_tmp(tmpl: _T.Optional[str], name_used: str) -> int:
    """
    Opens a file for writing in the preferred directory for temporary
    files (as returned by g_get_tmp_dir()).

    @tmpl should be a string in the GLib file name encoding containing
    a sequence of six 'X' characters, as the parameter to g_mkstemp().
    However, unlike these functions, the template should only be a
    basename, no directory components are allowed. If template is
    %NULL, a default template is used.

    Note that in contrast to g_mkstemp() (and mkstemp()) @tmpl is not
    modified, and might thus be a read-only literal string.

    Upon success, and if @name_used is non-%NULL, the actual name used
    is returned in @name_used. This string should be freed with g_free()
    when not needed any longer. The returned name is in the GLib file
    name encoding.
    """
    ...

def file_read_link(filename: str) -> str:
    """
    Reads the contents of the symbolic link @filename like the POSIX
    readlink() function.  The returned string is in the encoding used
    for filenames. Use g_filename_to_utf8() to convert it to UTF-8.
    """
    ...

def file_set_contents(filename: str, contents: object, length: int) -> bool:
    """
    Writes all of @contents to a file named @filename. This is a convenience
    wrapper around calling g_file_set_contents_full() with `flags` set to
    `G_FILE_SET_CONTENTS_CONSISTENT | G_FILE_SET_CONTENTS_ONLY_EXISTING` and
    `mode` set to `0666`.
    """
    ...

def file_set_contents_full(filename: str, contents: object, length: int, flags: FileSetContentsFlags, mode: int) -> bool:
    """
    Writes all of @contents to a file named @filename, with good error checking.
    If a file called @filename already exists it will be overwritten.

    @flags control the properties of the write operation: whether it’s atomic,
    and what the tradeoff is between returning quickly or being resilient to
    system crashes.

    As this function performs file I/O, it is recommended to not call it anywhere
    where blocking would cause problems, such as in the main loop of a graphical
    application. In particular, if @flags has any value other than
    %G_FILE_SET_CONTENTS_NONE then this function may call `fsync()`.

    If %G_FILE_SET_CONTENTS_CONSISTENT is set in @flags, the operation is atomic
    in the sense that it is first written to a temporary file which is then
    renamed to the final name.

    Notes:

    - On UNIX, if @filename already exists hard links to @filename will break.
      Also since the file is recreated, existing permissions, access control
      lists, metadata etc. may be lost. If @filename is a symbolic link,
      the link itself will be replaced, not the linked file.

    - On UNIX, if @filename already exists and is non-empty, and if the system
      supports it (via a journalling filesystem or equivalent), and if
      %G_FILE_SET_CONTENTS_CONSISTENT is set in @flags, the `fsync()` call (or
      equivalent) will be used to ensure atomic replacement: @filename
      will contain either its old contents or @contents, even in the face of
      system power loss, the disk being unsafely removed, etc.

    - On UNIX, if @filename does not already exist or is empty, there is a
      possibility that system power loss etc. after calling this function will
      leave @filename empty or full of NUL bytes, depending on the underlying
      filesystem, unless %G_FILE_SET_CONTENTS_DURABLE and
      %G_FILE_SET_CONTENTS_CONSISTENT are set in @flags.

    - On Windows renaming a file will not remove an existing file with the
      new name, so on Windows there is a race condition between the existing
      file being removed and the temporary file being renamed.

    - On Windows there is no way to remove a file that is open to some
      process, or mapped into memory. Thus, this function will fail if
      @filename already exists and is open.

    If the call was successful, it returns %TRUE. If the call was not successful,
    it returns %FALSE and sets @error. The error domain is %G_FILE_ERROR.
    Possible error codes are those in the #GFileError enumeration.

    Note that the name for the temporary file is constructed by appending up
    to 7 characters to @filename.

    If the file didn’t exist before and is created, it will be given the
    permissions from @mode. Otherwise, the permissions of the existing file may
    be changed to @mode depending on @flags, or they may remain unchanged.
    """
    ...

def file_test(filename: str, test: FileTest) -> bool:
    """
    Returns %TRUE if any of the tests in the bitfield @test are
    %TRUE. For example, `(G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)`
    will return %TRUE if the file exists; the check whether it's a
    directory doesn't matter since the existence test is %TRUE. With
    the current set of available tests, there's no point passing in
    more than one test at a time.

    Apart from %G_FILE_TEST_IS_SYMLINK all tests follow symbolic links,
    so for a symbolic link to a regular file g_file_test() will return
    %TRUE for both %G_FILE_TEST_IS_SYMLINK and %G_FILE_TEST_IS_REGULAR.

    Note, that for a dangling symbolic link g_file_test() will return
    %TRUE for %G_FILE_TEST_IS_SYMLINK and %FALSE for all other flags.

    You should never use g_file_test() to test whether it is safe
    to perform an operation, because there is always the possibility
    of the condition changing before you actually perform the operation.
    For example, you might think you could use %G_FILE_TEST_IS_SYMLINK
    to know whether it is safe to write to a file without being
    tricked into writing into a different location. It doesn't work!
    |[<!-- language="C" -->
     // DON'T DO THIS
     if (!g_file_test (filename, G_FILE_TEST_IS_SYMLINK))
       {
         fd = g_open (filename, O_WRONLY);
         // write to fd
       }
    ]|

    Another thing to note is that %G_FILE_TEST_EXISTS and
    %G_FILE_TEST_IS_EXECUTABLE are implemented using the access()
    system call. This usually doesn't matter, but if your program
    is setuid or setgid it means that these tests will give you
    the answer for the real user ID and group ID, rather than the
    effective user ID and group ID.

    On Windows, there are no symlinks, so testing for
    %G_FILE_TEST_IS_SYMLINK will always return %FALSE. Testing for
    %G_FILE_TEST_IS_EXECUTABLE will just check that the file exists and
    its name indicates that it is executable, checking for well-known
    extensions and those listed in the `PATHEXT` environment variable.
    """
    ...

def filename_display_basename(filename: str) -> str:
    """
    Returns the display basename for the particular filename, guaranteed
    to be valid UTF-8. The display name might not be identical to the filename,
    for instance there might be problems converting it to UTF-8, and some files
    can be translated in the display.

    If GLib cannot make sense of the encoding of @filename, as a last resort it
    replaces unknown characters with U+FFFD, the Unicode replacement character.
    You can search the result for the UTF-8 encoding of this character (which is
    "\357\277\275" in octal notation) to find out if @filename was in an invalid
    encoding.

    You must pass the whole absolute pathname to this functions so that
    translation of well known locations can be done.

    This function is preferred over g_filename_display_name() if you know the
    whole path, as it allows translation.
    """
    ...

def filename_display_name(filename: str) -> str:
    """
    Converts a filename into a valid UTF-8 string. The conversion is
    not necessarily reversible, so you should keep the original around
    and use the return value of this function only for display purposes.
    Unlike g_filename_to_utf8(), the result is guaranteed to be non-%NULL
    even if the filename actually isn't in the GLib file name encoding.

    If GLib cannot make sense of the encoding of @filename, as a last resort it
    replaces unknown characters with U+FFFD, the Unicode replacement character.
    You can search the result for the UTF-8 encoding of this character (which is
    "\357\277\275" in octal notation) to find out if @filename was in an invalid
    encoding.

    If you know the whole pathname of the file you should use
    g_filename_display_basename(), since that allows location-based
    translation of filenames.
    """
    ...

def filename_from_uri(uri: str, hostname: _T.Optional[str]) -> str:
    """
    Converts an escaped ASCII-encoded URI to a local filename in the
    encoding used for filenames.
    """
    ...

def filename_from_utf8(utf8string: str, len: int, bytes_read: int, bytes_written: int) -> str:
    """
    Converts a string from UTF-8 to the encoding GLib uses for
    filenames. Note that on Windows GLib uses UTF-8 for filenames;
    on other platforms, this function indirectly depends on the
    [current locale][setlocale].

    The input string shall not contain nul characters even if the @len
    argument is positive. A nul character found inside the string will result
    in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE. If the filename encoding is
    not UTF-8 and the conversion output contains a nul character, the error
    %G_CONVERT_ERROR_EMBEDDED_NUL is set and the function returns %NULL.
    """
    ...

def filename_to_uri(filename: str, hostname: _T.Optional[str]) -> str:
    """
    Converts an absolute filename to an escaped ASCII-encoded URI, with the path
    component following Section 3.3. of RFC 2396.
    """
    ...

def filename_to_utf8(opsysstring: str, len: int, bytes_read: int, bytes_written: int) -> str:
    """
    Converts a string which is in the encoding used by GLib for
    filenames into a UTF-8 string. Note that on Windows GLib uses UTF-8
    for filenames; on other platforms, this function indirectly depends on
    the [current locale][setlocale].

    The input string shall not contain nul characters even if the @len
    argument is positive. A nul character found inside the string will result
    in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE.
    If the source encoding is not UTF-8 and the conversion output contains a
    nul character, the error %G_CONVERT_ERROR_EMBEDDED_NUL is set and the
    function returns %NULL. Use g_convert() to produce output that
    may contain embedded nul characters.
    """
    ...

def find_program_in_path(program: str) -> str:
    """
    Locates the first executable named @program in the user's path, in the
    same way that execvp() would locate it. Returns an allocated string
    with the absolute path name, or %NULL if the program is not found in
    the path. If @program is already an absolute path, returns a copy of
    @program if @program exists and is executable, and %NULL otherwise.
     
    On Windows, if @program does not have a file type suffix, tries
    with the suffixes .exe, .cmd, .bat and .com, and the suffixes in
    the `PATHEXT` environment variable.

    On Windows, it looks for the file in the same way as CreateProcess()
    would. This means first in the directory where the executing
    program was loaded from, then in the current directory, then in the
    Windows 32-bit system directory, then in the Windows directory, and
    finally in the directories in the `PATH` environment variable. If
    the program is found, the return value contains the full name
    including the type suffix.
    """
    ...

def format_size(size: guint64) -> str:
    """
    Formats a size (for example the size of a file) into a human readable
    string.  Sizes are rounded to the nearest size prefix (kB, MB, GB)
    and are displayed rounded to the nearest tenth. E.g. the file size
    3292528 bytes will be converted into the string "3.2 MB". The returned string
    is UTF-8, and may use a non-breaking space to separate the number and units,
    to ensure they aren’t separated when line wrapped.

    The prefix units base is 1000 (i.e. 1 kB is 1000 bytes).

    This string should be freed with g_free() when not needed any longer.

    See g_format_size_full() for more options about how the size might be
    formatted.
    """
    ...

def format_size_for_display(size: gint64) -> str:
    """
    Formats a size (for example the size of a file) into a human
    readable string. Sizes are rounded to the nearest size prefix
    (KB, MB, GB) and are displayed rounded to the nearest tenth.
    E.g. the file size 3292528 bytes will be converted into the
    string "3.1 MB".

    The prefix units base is 1024 (i.e. 1 KB is 1024 bytes).

    This string should be freed with g_free() when not needed any longer.
    """
    ...

def format_size_full(size: guint64, flags: FormatSizeFlags) -> str:
    """
    Formats a size.

    This function is similar to g_format_size() but allows for flags
    that modify the output. See #GFormatSizeFlags.
    """
    ...

def fprintf(file: object, format: str, *args: object) -> int:
    """
    An implementation of the standard fprintf() function which supports
    positional parameters, as specified in the Single Unix Specification.

    `glib/gprintf.h` must be explicitly included in order to use this function.
    """
    ...

def free(mem: _T.Optional[object]) -> object:
    """
    Frees the memory pointed to by @mem.

    If @mem is %NULL it simply returns, so there is no need to check @mem
    against %NULL before calling this function.
    """
    ...

def get_application_name() -> str:
    """
    Gets a human-readable name for the application, as set by
    g_set_application_name(). This name should be localized if
    possible, and is intended for display to the user.  Contrast with
    g_get_prgname(), which gets a non-localized name. If
    g_set_application_name() has not been called, returns the result of
    g_get_prgname() (which may be %NULL if g_set_prgname() has also not
    been called).
    """
    ...

def get_charset(charset: str) -> bool:
    """
    Obtains the character set for the [current locale][setlocale]; you
    might use this character set as an argument to g_convert(), to convert
    from the current locale's encoding to some other encoding. (Frequently
    g_locale_to_utf8() and g_locale_from_utf8() are nice shortcuts, though.)

    On Windows the character set returned by this function is the
    so-called system default ANSI code-page. That is the character set
    used by the "narrow" versions of C library and Win32 functions that
    handle file names. It might be different from the character set
    used by the C library's current locale.

    On Linux, the character set is found by consulting nl_langinfo() if
    available. If not, the environment variables `LC_ALL`, `LC_CTYPE`, `LANG`
    and `CHARSET` are queried in order.

    The return value is %TRUE if the locale's encoding is UTF-8, in that
    case you can perhaps avoid calling g_convert().

    The string returned in @charset is not allocated, and should not be
    freed.
    """
    ...

def get_codeset() -> str:
    """
    Gets the character set for the current locale.
    """
    ...

def get_console_charset(charset: str) -> bool:
    """
    Obtains the character set used by the console attached to the process,
    which is suitable for printing output to the terminal.

    Usually this matches the result returned by g_get_charset(), but in
    environments where the locale's character set does not match the encoding
    of the console this function tries to guess a more suitable value instead.

    On Windows the character set returned by this function is the
    output code page used by the console associated with the calling process.
    If the codepage can't be determined (for example because there is no
    console attached) UTF-8 is assumed.

    The return value is %TRUE if the locale's encoding is UTF-8, in that
    case you can perhaps avoid calling g_convert().

    The string returned in @charset is not allocated, and should not be
    freed.
    """
    ...

def get_current_dir() -> str:
    """
    Gets the current directory.

    The returned string should be freed when no longer needed.
    The encoding of the returned string is system defined.
    On Windows, it is always UTF-8.

    Since GLib 2.40, this function will return the value of the "PWD"
    environment variable if it is set and it happens to be the same as
    the current directory.  This can make a difference in the case that
    the current directory is the target of a symbolic link.
    """
    ...

def get_current_time(result: TimeVal) -> object:
    """
    Equivalent to the UNIX gettimeofday() function, but portable.

    You may find g_get_real_time() to be more convenient.
    """
    ...

def get_environ() -> object:
    """
    Gets the list of environment variables for the current process.

    The list is %NULL terminated and each item in the list is of the
    form 'NAME=VALUE'.

    This is equivalent to direct access to the 'environ' global variable,
    except portable.

    The return value is freshly allocated and it should be freed with
    g_strfreev() when it is no longer needed.
    """
    ...

def get_filename_charsets(filename_charsets: object) -> bool:
    """
    Determines the preferred character sets used for filenames.
    The first character set from the @charsets is the filename encoding, the
    subsequent character sets are used when trying to generate a displayable
    representation of a filename, see g_filename_display_name().

    On Unix, the character sets are determined by consulting the
    environment variables `G_FILENAME_ENCODING` and `G_BROKEN_FILENAMES`.
    On Windows, the character set used in the GLib API is always UTF-8
    and said environment variables have no effect.

    `G_FILENAME_ENCODING` may be set to a comma-separated list of
    character set names. The special token "\@locale" is taken
    to  mean the character set for the [current locale][setlocale].
    If `G_FILENAME_ENCODING` is not set, but `G_BROKEN_FILENAMES` is,
    the character set of the current locale is taken as the filename
    encoding. If neither environment variable  is set, UTF-8 is taken
    as the filename encoding, but the character set of the current locale
    is also put in the list of encodings.

    The returned @charsets belong to GLib and must not be freed.

    Note that on Unix, regardless of the locale character set or
    `G_FILENAME_ENCODING` value, the actual file names present
    on a system might be in any random encoding or just gibberish.
    """
    ...

def get_home_dir() -> str:
    """
    Gets the current user's home directory.

    As with most UNIX tools, this function will return the value of the
    `HOME` environment variable if it is set to an existing absolute path
    name, falling back to the `passwd` file in the case that it is unset.

    If the path given in `HOME` is non-absolute, does not exist, or is
    not a directory, the result is undefined.

    Before version 2.36 this function would ignore the `HOME` environment
    variable, taking the value from the `passwd` database instead. This was
    changed to increase the compatibility of GLib with other programs (and
    the XDG basedir specification) and to increase testability of programs
    based on GLib (by making it easier to run them from test frameworks).

    If your program has a strong requirement for either the new or the
    old behaviour (and if you don't wish to increase your GLib
    dependency to ensure that the new behaviour is in effect) then you
    should either directly check the `HOME` environment variable yourself
    or unset it before calling any functions in GLib.
    """
    ...

def get_host_name() -> str:
    """
    Return a name for the machine.

    The returned name is not necessarily a fully-qualified domain name,
    or even present in DNS or some other name service at all. It need
    not even be unique on your local network or site, but usually it
    is. Callers should not rely on the return value having any specific
    properties like uniqueness for security purposes. Even if the name
    of the machine is changed while an application is running, the
    return value from this function does not change. The returned
    string is owned by GLib and should not be modified or freed. If no
    name can be determined, a default fixed string "localhost" is
    returned.

    The encoding of the returned string is UTF-8.
    """
    ...

def get_language_names() -> object:
    """
    Computes a list of applicable locale names, which can be used to
    e.g. construct locale-dependent filenames or search paths. The returned
    list is sorted from most desirable to least desirable and always contains
    the default locale "C".

    For example, if LANGUAGE=de:en_US, then the returned list is
    "de", "en_US", "en", "C".

    This function consults the environment variables `LANGUAGE`, `LC_ALL`,
    `LC_MESSAGES` and `LANG` to find the list of locales specified by the
    user.
    """
    ...

def get_language_names_with_category(category_name: str) -> object:
    """
    Computes a list of applicable locale names with a locale category name,
    which can be used to construct the fallback locale-dependent filenames
    or search paths. The returned list is sorted from most desirable to
    least desirable and always contains the default locale "C".

    This function consults the environment variables `LANGUAGE`, `LC_ALL`,
    @category_name, and `LANG` to find the list of locales specified by the
    user.

    g_get_language_names() returns g_get_language_names_with_category("LC_MESSAGES").
    """
    ...

def get_locale_variants(locale: str) -> object:
    """
    Returns a list of derived variants of @locale, which can be used to
    e.g. construct locale-dependent filenames or search paths. The returned
    list is sorted from most desirable to least desirable.
    This function handles territory, charset and extra locale modifiers. See
    [`setlocale(3)`](man:setlocale) for information about locales and their format.

    @locale itself is guaranteed to be returned in the output.

    For example, if @locale is `fr_BE`, then the returned list
    is `fr_BE`, `fr`. If @locale is `en_GB.UTF-8@euro`, then the returned list
    is `en_GB.UTF-8@euro`, `en_GB.UTF-8`, `en_GB@euro`, `en_GB`, `en.UTF-8@euro`,
    `en.UTF-8`, `en@euro`, `en`.

    If you need the list of variants for the current locale,
    use g_get_language_names().
    """
    ...

def get_monotonic_time() -> gint64:
    """
    Queries the system monotonic time.

    The monotonic clock will always increase and doesn't suffer
    discontinuities when the user (or NTP) changes the system time.  It
    may or may not continue to tick during times where the machine is
    suspended.

    We try to use the clock that corresponds as closely as possible to
    the passage of time as measured by system calls such as poll() but it
    may not always be possible to do this.
    """
    ...

def get_num_processors() -> int:
    """
    Determine the approximate number of threads that the system will
    schedule simultaneously for this process.  This is intended to be
    used as a parameter to g_thread_pool_new() for CPU bound tasks and
    similar cases.
    """
    ...

def get_os_info(key_name: str) -> str:
    """
    Get information about the operating system.

    On Linux this comes from the `/etc/os-release` file. On other systems, it may
    come from a variety of sources. You can either use the standard key names
    like %G_OS_INFO_KEY_NAME or pass any UTF-8 string key name. For example,
    `/etc/os-release` provides a number of other less commonly used values that may
    be useful. No key is guaranteed to be provided, so the caller should always
    check if the result is %NULL.
    """
    ...

def get_prgname() -> str:
    """
    Gets the name of the program. This name should not be localized,
    in contrast to g_get_application_name().

    If you are using #GApplication the program name is set in
    g_application_run(). In case of GDK or GTK+ it is set in
    gdk_init(), which is called by gtk_init() and the
    #GtkApplication::startup handler. The program name is found by
    taking the last component of @argv[0].
    """
    ...

def get_real_name() -> str:
    """
    Gets the real name of the user. This usually comes from the user's
    entry in the `passwd` file. The encoding of the returned string is
    system-defined. (On Windows, it is, however, always UTF-8.) If the
    real user name cannot be determined, the string "Unknown" is
    returned.
    """
    ...

def get_real_time() -> gint64:
    """
    Queries the system wall-clock time.

    This call is functionally equivalent to g_get_current_time() except
    that the return value is often more convenient than dealing with a
    #GTimeVal.

    You should only use this call if you are actually interested in the real
    wall-clock time.  g_get_monotonic_time() is probably more useful for
    measuring intervals.
    """
    ...

def get_system_config_dirs() -> object:
    """
    Returns an ordered list of base directories in which to access
    system-wide configuration information.

    On UNIX platforms this is determined using the mechanisms described
    in the
    [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
    In this case the list of directories retrieved will be `XDG_CONFIG_DIRS`.

    On Windows it follows XDG Base Directory Specification if `XDG_CONFIG_DIRS` is defined.
    If `XDG_CONFIG_DIRS` is undefined, the directory that contains application
    data for all users is used instead. A typical path is
    `C:\Documents and Settings\All Users\Application Data`.
    This folder is used for application data
    that is not user specific. For example, an application can store
    a spell-check dictionary, a database of clip art, or a log file in the
    FOLDERID_ProgramData folder. This information will not roam and is available
    to anyone using the computer.

    The return value is cached and modifying it at runtime is not supported, as
    it’s not thread-safe to modify environment variables at runtime.
    """
    ...

def get_system_data_dirs() -> object:
    """
    Returns an ordered list of base directories in which to access
    system-wide application data.

    On UNIX platforms this is determined using the mechanisms described
    in the
    [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec)
    In this case the list of directories retrieved will be `XDG_DATA_DIRS`.

    On Windows it follows XDG Base Directory Specification if `XDG_DATA_DIRS` is defined.
    If `XDG_DATA_DIRS` is undefined,
    the first elements in the list are the Application Data
    and Documents folders for All Users. (These can be determined only
    on Windows 2000 or later and are not present in the list on other
    Windows versions.) See documentation for FOLDERID_ProgramData and
    FOLDERID_PublicDocuments.

    Then follows the "share" subfolder in the installation folder for
    the package containing the DLL that calls this function, if it can
    be determined.

    Finally the list contains the "share" subfolder in the installation
    folder for GLib, and in the installation folder for the package the
    application's .exe file belongs to.

    The installation folders above are determined by looking up the
    folder where the module (DLL or EXE) in question is located. If the
    folder's name is "bin", its parent is used, otherwise the folder
    itself.

    Note that on Windows the returned list can vary depending on where
    this function is called.

    The return value is cached and modifying it at runtime is not supported, as
    it’s not thread-safe to modify environment variables at runtime.
    """
    ...

def get_tmp_dir() -> str:
    """
    Gets the directory to use for temporary files.

    On UNIX, this is taken from the `TMPDIR` environment variable.
    If the variable is not set, `P_tmpdir` is
    used, as defined by the system C library. Failing that, a
    hard-coded default of "/tmp" is returned.

    On Windows, the `TEMP` environment variable is used, with the
    root directory of the Windows installation (eg: "C:\") used
    as a default.

    The encoding of the returned string is system-defined. On Windows,
    it is always UTF-8. The return value is never %NULL or the empty
    string.
    """
    ...

def get_user_cache_dir() -> str:
    """
    Returns a base directory in which to store non-essential, cached
    data specific to particular user.

    On UNIX platforms this is determined using the mechanisms described
    in the
    [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
    In this case the directory retrieved will be `XDG_CACHE_HOME`.

    On Windows it follows XDG Base Directory Specification if `XDG_CACHE_HOME` is defined.
    If `XDG_CACHE_HOME` is undefined, the directory that serves as a common
    repository for temporary Internet files is used instead. A typical path is
    `C:\Documents and Settings\username\Local Settings\Temporary Internet Files`.
    See the [documentation for `FOLDERID_InternetCache`](https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid).

    The return value is cached and modifying it at runtime is not supported, as
    it’s not thread-safe to modify environment variables at runtime.
    """
    ...

def get_user_config_dir() -> str:
    """
    Returns a base directory in which to store user-specific application
    configuration information such as user preferences and settings.

    On UNIX platforms this is determined using the mechanisms described
    in the
    [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
    In this case the directory retrieved will be `XDG_CONFIG_HOME`.

    On Windows it follows XDG Base Directory Specification if `XDG_CONFIG_HOME` is defined.
    If `XDG_CONFIG_HOME` is undefined, the folder to use for local (as opposed
    to roaming) application data is used instead. See the
    [documentation for `FOLDERID_LocalAppData`](https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid).
    Note that in this case on Windows it will be  the same
    as what g_get_user_data_dir() returns.

    The return value is cached and modifying it at runtime is not supported, as
    it’s not thread-safe to modify environment variables at runtime.
    """
    ...

def get_user_data_dir() -> str:
    """
    Returns a base directory in which to access application data such
    as icons that is customized for a particular user.

    On UNIX platforms this is determined using the mechanisms described
    in the
    [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
    In this case the directory retrieved will be `XDG_DATA_HOME`.

    On Windows it follows XDG Base Directory Specification if `XDG_DATA_HOME`
    is defined. If `XDG_DATA_HOME` is undefined, the folder to use for local (as
    opposed to roaming) application data is used instead. See the
    [documentation for `FOLDERID_LocalAppData`](https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid).
    Note that in this case on Windows it will be the same
    as what g_get_user_config_dir() returns.

    The return value is cached and modifying it at runtime is not supported, as
    it’s not thread-safe to modify environment variables at runtime.
    """
    ...

def get_user_name() -> str:
    """
    Gets the user name of the current user. The encoding of the returned
    string is system-defined. On UNIX, it might be the preferred file name
    encoding, or something else, and there is no guarantee that it is even
    consistent on a machine. On Windows, it is always UTF-8.
    """
    ...

def get_user_runtime_dir() -> str:
    """
    Returns a directory that is unique to the current user on the local
    system.

    This is determined using the mechanisms described
    in the
    [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
    This is the directory
    specified in the `XDG_RUNTIME_DIR` environment variable.
    In the case that this variable is not set, we return the value of
    g_get_user_cache_dir(), after verifying that it exists.

    The return value is cached and modifying it at runtime is not supported, as
    it’s not thread-safe to modify environment variables at runtime.
    """
    ...

def get_user_special_dir(directory: UserDirectory) -> str:
    """
    Returns the full path of a special directory using its logical id.

    On UNIX this is done using the XDG special user directories.
    For compatibility with existing practise, %G_USER_DIRECTORY_DESKTOP
    falls back to `$HOME/Desktop` when XDG special user directories have
    not been set up.

    Depending on the platform, the user might be able to change the path
    of the special directory without requiring the session to restart; GLib
    will not reflect any change once the special directories are loaded.
    """
    ...

def get_user_state_dir() -> str:
    """
    Returns a base directory in which to store state files specific to
    particular user.

    On UNIX platforms this is determined using the mechanisms described
    in the
    [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
    In this case the directory retrieved will be `XDG_STATE_HOME`.

    On Windows it follows XDG Base Directory Specification if `XDG_STATE_HOME` is defined.
    If `XDG_STATE_HOME` is undefined, the folder to use for local (as opposed
    to roaming) application data is used instead. See the
    [documentation for `FOLDERID_LocalAppData`](https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid).
    Note that in this case on Windows it will be the same
    as what g_get_user_data_dir() returns.

    The return value is cached and modifying it at runtime is not supported, as
    it’s not thread-safe to modify environment variables at runtime.
    """
    ...

def getenv(variable: str) -> str:
    """
    Returns the value of an environment variable.

    On UNIX, the name and value are byte strings which might or might not
    be in some consistent character set and encoding. On Windows, they are
    in UTF-8.
    On Windows, in case the environment variable's value contains
    references to other environment variables, they are expanded.
    """
    ...

def hostname_is_ascii_encoded(hostname: str) -> bool:
    """
    Tests if @hostname contains segments with an ASCII-compatible
    encoding of an Internationalized Domain Name. If this returns
    %TRUE, you should decode the hostname with g_hostname_to_unicode()
    before displaying it to the user.

    Note that a hostname might contain a mix of encoded and unencoded
    segments, and so it is possible for g_hostname_is_non_ascii() and
    g_hostname_is_ascii_encoded() to both return %TRUE for a name.
    """
    ...

def hostname_is_ip_address(hostname: str) -> bool:
    """
    Tests if @hostname is the string form of an IPv4 or IPv6 address.
    (Eg, "192.168.0.1".)

    Since 2.66, IPv6 addresses with a zone-id are accepted (RFC6874).
    """
    ...

def hostname_is_non_ascii(hostname: str) -> bool:
    """
    Tests if @hostname contains Unicode characters. If this returns
    %TRUE, you need to encode the hostname with g_hostname_to_ascii()
    before using it in non-IDN-aware contexts.

    Note that a hostname might contain a mix of encoded and unencoded
    segments, and so it is possible for g_hostname_is_non_ascii() and
    g_hostname_is_ascii_encoded() to both return %TRUE for a name.
    """
    ...

def hostname_to_ascii(hostname: str) -> str:
    """
    Converts @hostname to its canonical ASCII form; an ASCII-only
    string containing no uppercase letters and not ending with a
    trailing dot.
    """
    ...

def hostname_to_unicode(hostname: str) -> str:
    """
    Converts @hostname to its canonical presentation form; a UTF-8
    string in Unicode normalization form C, containing no uppercase
    letters, no forbidden characters, and no ASCII-encoded segments,
    and not ending with a trailing dot.

    Of course if @hostname is not an internationalized hostname, then
    the canonical presentation form will be entirely ASCII.
    """
    ...

def iconv(converter: IConv, inbuf: str, inbytes_left: int, outbuf: str, outbytes_left: int) -> int:
    """
    Same as the standard UNIX routine iconv(), but
    may be implemented via libiconv on UNIX flavors that lack
    a native implementation.

    GLib provides g_convert() and g_locale_to_utf8() which are likely
    more convenient than the raw iconv wrappers.

    Note that the behaviour of iconv() for characters which are valid in the
    input character set, but which have no representation in the output character
    set, is implementation defined. This function may return success (with a
    positive number of non-reversible conversions as replacement characters were
    used), or it may return -1 and set an error such as %EILSEQ, in such a
    situation.
    """
    ...

def idle_add(function: SourceFunc, data: _T.Optional[object]) -> int:
    """
    Adds a function to be called whenever there are no higher priority
    events pending to the default main loop. The function is given the
    default idle priority, %G_PRIORITY_DEFAULT_IDLE.  If the function
    returns %FALSE it is automatically removed from the list of event
    sources and will not be called again.

    See [memory management of sources][mainloop-memory-management] for details
    on how to handle the return value and memory management of @data.

    This internally creates a main loop source using g_idle_source_new()
    and attaches it to the global #GMainContext using g_source_attach(), so
    the callback will be invoked in whichever thread is running that main
    context. You can do these steps manually if you need greater control or to
    use a custom main context.
    """
    ...

def idle_add_full(priority: int, function: SourceFunc, data: _T.Optional[object], notify: _T.Optional[DestroyNotify]) -> int:
    """
    Adds a function to be called whenever there are no higher priority
    events pending.

    If the function returns %G_SOURCE_REMOVE or %FALSE it is automatically
    removed from the list of event sources and will not be called again.

    See [memory management of sources][mainloop-memory-management] for details
    on how to handle the return value and memory management of @data.

    This internally creates a main loop source using g_idle_source_new()
    and attaches it to the global #GMainContext using g_source_attach(), so
    the callback will be invoked in whichever thread is running that main
    context. You can do these steps manually if you need greater control or to
    use a custom main context.
    """
    ...

def idle_remove_by_data(data: _T.Optional[object]) -> bool:
    """
    Removes the idle function with the given data.
    """
    ...

def idle_source_new() -> Source:
    """
    Creates a new idle source.

    The source will not initially be associated with any #GMainContext
    and must be added to one with g_source_attach() before it will be
    executed. Note that the default priority for idle sources is
    %G_PRIORITY_DEFAULT_IDLE, as compared to other sources which
    have a default priority of %G_PRIORITY_DEFAULT.
    """
    ...

def int64_equal(v1: object, v2: object) -> bool:
    """
    Compares the two #gint64 values being pointed to and returns
    %TRUE if they are equal.
    It can be passed to g_hash_table_new() as the @key_equal_func
    parameter, when using non-%NULL pointers to 64-bit integers as keys in a
    #GHashTable.
    """
    ...

def int64_hash(v: object) -> int:
    """
    Converts a pointer to a #gint64 to a hash value.

    It can be passed to g_hash_table_new() as the @hash_func parameter,
    when using non-%NULL pointers to 64-bit integer values as keys in a
    #GHashTable.
    """
    ...

def int_equal(v1: object, v2: object) -> bool:
    """
    Compares the two #gint values being pointed to and returns
    %TRUE if they are equal.
    It can be passed to g_hash_table_new() as the @key_equal_func
    parameter, when using non-%NULL pointers to integers as keys in a
    #GHashTable.

    Note that this function acts on pointers to #gint, not on #gint
    directly: if your hash table's keys are of the form
    `GINT_TO_POINTER (n)`, use g_direct_equal() instead.
    """
    ...

def int_hash(v: object) -> int:
    """
    Converts a pointer to a #gint to a hash value.
    It can be passed to g_hash_table_new() as the @hash_func parameter,
    when using non-%NULL pointers to integer values as keys in a #GHashTable.

    Note that this function acts on pointers to #gint, not on #gint
    directly: if your hash table's keys are of the form
    `GINT_TO_POINTER (n)`, use g_direct_hash() instead.
    """
    ...

def intern_static_string(string: _T.Optional[str]) -> str:
    """
    Returns a canonical representation for @string. Interned strings
    can be compared for equality by comparing the pointers, instead of
    using strcmp(). g_intern_static_string() does not copy the string,
    therefore @string must not be freed or modified.

    This function must not be used before library constructors have finished
    running. In particular, this means it cannot be used to initialize global
    variables in C++.
    """
    ...

def intern_string(string: _T.Optional[str]) -> str:
    """
    Returns a canonical representation for @string. Interned strings
    can be compared for equality by comparing the pointers, instead of
    using strcmp().

    This function must not be used before library constructors have finished
    running. In particular, this means it cannot be used to initialize global
    variables in C++.
    """
    ...

def io_add_watch(channel: IOChannel, condition: IOCondition, func: IOFunc, user_data: _T.Optional[object]) -> int:
    """
    Adds the #GIOChannel into the default main loop context
    with the default priority.
    """
    ...

def io_add_watch_full(channel: IOChannel, priority: int, condition: IOCondition, func: IOFunc, user_data: _T.Optional[object], notify: DestroyNotify) -> int:
    """
    Adds the #GIOChannel into the default main loop context
    with the given priority.

    This internally creates a main loop source using g_io_create_watch()
    and attaches it to the main loop context with g_source_attach().
    You can do these steps manually if you need greater control.
    """
    ...

def io_create_watch(channel: IOChannel, condition: IOCondition) -> Source:
    """
    Creates a #GSource that's dispatched when @condition is met for the
    given @channel. For example, if condition is %G_IO_IN, the source will
    be dispatched when there's data available for reading.

    The callback function invoked by the #GSource should be added with
    g_source_set_callback(), but it has type #GIOFunc (not #GSourceFunc).

    g_io_add_watch() is a simpler interface to this same functionality, for
    the case where you want to add the source to the default main loop context
    at the default priority.

    On Windows, polling a #GSource created to watch a channel for a socket
    puts the socket in non-blocking mode. This is a side-effect of the
    implementation and unavoidable.
    """
    ...

def listenv() -> object:
    """
    Gets the names of all variables set in the environment.

    Programs that want to be portable to Windows should typically use
    this function and g_getenv() instead of using the environ array
    from the C library directly. On Windows, the strings in the environ
    array are in system codepage encoding, while in most of the typical
    use cases for environment variables in GLib-using programs you want
    the UTF-8 encoding that this function and g_getenv() provide.
    """
    ...

def locale_from_utf8(utf8string: str, len: int, bytes_read: int, bytes_written: int) -> object:
    """
    Converts a string from UTF-8 to the encoding used for strings by
    the C runtime (usually the same as that used by the operating
    system) in the [current locale][setlocale]. On Windows this means
    the system codepage.

    The input string shall not contain nul characters even if the @len
    argument is positive. A nul character found inside the string will result
    in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE. Use g_convert() to convert
    input that may contain embedded nul characters.
    """
    ...

def locale_to_utf8(opsysstring: object, len: int, bytes_read: int, bytes_written: int) -> str:
    """
    Converts a string which is in the encoding used for strings by
    the C runtime (usually the same as that used by the operating
    system) in the [current locale][setlocale] into a UTF-8 string.

    If the source encoding is not UTF-8 and the conversion output contains a
    nul character, the error %G_CONVERT_ERROR_EMBEDDED_NUL is set and the
    function returns %NULL.
    If the source encoding is UTF-8, an embedded nul character is treated with
    the %G_CONVERT_ERROR_ILLEGAL_SEQUENCE error for backward compatibility with
    earlier versions of this library. Use g_convert() to produce output that
    may contain embedded nul characters.
    """
    ...

def log(log_domain: _T.Optional[str], log_level: LogLevelFlags, format: str, *args: object) -> object:
    """
    Logs an error or debugging message.

    If the log level has been set as fatal, G_BREAKPOINT() is called
    to terminate the program. See the documentation for G_BREAKPOINT() for
    details of the debugging options this provides.

    If g_log_default_handler() is used as the log handler function, a new-line
    character will automatically be appended to @..., and need not be entered
    manually.

    If [structured logging is enabled][using-structured-logging] this will
    output via the structured log writer function (see g_log_set_writer_func()).
    """
    ...

def log_default_handler(log_domain: _T.Optional[str], log_level: LogLevelFlags, message: _T.Optional[str], unused_data: _T.Optional[object]) -> object:
    """
    The default log handler set up by GLib; g_log_set_default_handler()
    allows to install an alternate default log handler.
    This is used if no log handler has been set for the particular log
    domain and log level combination. It outputs the message to stderr
    or stdout and if the log level is fatal it calls G_BREAKPOINT(). It automatically
    prints a new-line character after the message, so one does not need to be
    manually included in @message.

    The behavior of this log handler can be influenced by a number of
    environment variables:

    - `G_MESSAGES_PREFIXED`: A :-separated list of log levels for which
      messages should be prefixed by the program name and PID of the
      application.

    - `G_MESSAGES_DEBUG`: A space-separated list of log domains for
      which debug and informational messages are printed. By default
      these messages are not printed.

    stderr is used for levels %G_LOG_LEVEL_ERROR, %G_LOG_LEVEL_CRITICAL,
    %G_LOG_LEVEL_WARNING and %G_LOG_LEVEL_MESSAGE. stdout is used for
    the rest, unless stderr was requested by
    g_log_writer_default_set_use_stderr().

    This has no effect if structured logging is enabled; see
    [Using Structured Logging][using-structured-logging].
    """
    ...

def log_get_debug_enabled() -> bool:
    """
    Return whether debug output from the GLib logging system is enabled.

    Note that this should not be used to conditionalise calls to g_debug() or
    other logging functions; it should only be used from %GLogWriterFunc
    implementations.

    Note also that the value of this does not depend on `G_MESSAGES_DEBUG`; see
    the docs for g_log_set_debug_enabled().
    """
    ...

def log_remove_handler(log_domain: str, handler_id: int) -> object:
    """
    Removes the log handler.

    This has no effect if structured logging is enabled; see
    [Using Structured Logging][using-structured-logging].
    """
    ...

def log_set_always_fatal(fatal_mask: LogLevelFlags) -> LogLevelFlags:
    """
    Sets the message levels which are always fatal, in any log domain.
    When a message with any of these levels is logged the program terminates.
    You can only set the levels defined by GLib to be fatal.
    %G_LOG_LEVEL_ERROR is always fatal.

    You can also make some message levels fatal at runtime by setting
    the `G_DEBUG` environment variable (see
    [Running GLib Applications](glib-running.html)).

    Libraries should not call this function, as it affects all messages logged
    by a process, including those from other libraries.

    Structured log messages (using g_log_structured() and
    g_log_structured_array()) are fatal only if the default log writer is used;
    otherwise it is up to the writer function to determine which log messages
    are fatal. See [Using Structured Logging][using-structured-logging].
    """
    ...

def log_set_debug_enabled(enabled: bool) -> object:
    """
    Enable or disable debug output from the GLib logging system for all domains.
    This value interacts disjunctively with `G_MESSAGES_DEBUG` — if either of
    them would allow a debug message to be outputted, it will be.

    Note that this should not be used from within library code to enable debug
    output — it is intended for external use.
    """
    ...

def log_set_default_handler(log_func: LogFunc, user_data: _T.Optional[object]) -> LogFunc:
    """
    Installs a default log handler which is used if no
    log handler has been set for the particular log domain
    and log level combination. By default, GLib uses
    g_log_default_handler() as default log handler.

    This has no effect if structured logging is enabled; see
    [Using Structured Logging][using-structured-logging].
    """
    ...

def log_set_fatal_mask(log_domain: str, fatal_mask: LogLevelFlags) -> LogLevelFlags:
    """
    Sets the log levels which are fatal in the given domain.
    %G_LOG_LEVEL_ERROR is always fatal.

    This has no effect on structured log messages (using g_log_structured() or
    g_log_structured_array()). To change the fatal behaviour for specific log
    messages, programs must install a custom log writer function using
    g_log_set_writer_func(). See
    [Using Structured Logging][using-structured-logging].

    This function is mostly intended to be used with
    %G_LOG_LEVEL_CRITICAL.  You should typically not set
    %G_LOG_LEVEL_WARNING, %G_LOG_LEVEL_MESSAGE, %G_LOG_LEVEL_INFO or
    %G_LOG_LEVEL_DEBUG as fatal except inside of test programs.
    """
    ...

def log_set_handler(log_domain: _T.Optional[str], log_levels: LogLevelFlags, log_func: LogFunc, user_data: _T.Optional[object]) -> int:
    """
    Sets the log handler for a domain and a set of log levels.

    To handle fatal and recursive messages the @log_levels parameter
    must be combined with the %G_LOG_FLAG_FATAL and %G_LOG_FLAG_RECURSION
    bit flags.

    Note that since the %G_LOG_LEVEL_ERROR log level is always fatal, if
    you want to set a handler for this log level you must combine it with
    %G_LOG_FLAG_FATAL.

    This has no effect if structured logging is enabled; see
    [Using Structured Logging][using-structured-logging].

    Here is an example for adding a log handler for all warning messages
    in the default domain:

    |[<!-- language="C" -->
    g_log_set_handler (NULL, G_LOG_LEVEL_WARNING | G_LOG_FLAG_FATAL
                       | G_LOG_FLAG_RECURSION, my_log_handler, NULL);
    ]|

    This example adds a log handler for all critical messages from GTK+:

    |[<!-- language="C" -->
    g_log_set_handler ("Gtk", G_LOG_LEVEL_CRITICAL | G_LOG_FLAG_FATAL
                       | G_LOG_FLAG_RECURSION, my_log_handler, NULL);
    ]|

    This example adds a log handler for all messages from GLib:

    |[<!-- language="C" -->
    g_log_set_handler ("GLib", G_LOG_LEVEL_MASK | G_LOG_FLAG_FATAL
                       | G_LOG_FLAG_RECURSION, my_log_handler, NULL);
    ]|
    """
    ...

def log_set_handler_full(log_domain: _T.Optional[str], log_levels: LogLevelFlags, log_func: LogFunc, user_data: _T.Optional[object], destroy: DestroyNotify) -> int:
    """
    Like g_log_set_handler(), but takes a destroy notify for the @user_data.

    This has no effect if structured logging is enabled; see
    [Using Structured Logging][using-structured-logging].
    """
    ...

def log_set_writer_func(func: _T.Optional[LogWriterFunc], user_data: _T.Optional[object], user_data_free: DestroyNotify) -> object:
    """
    Set a writer function which will be called to format and write out each log
    message. Each program should set a writer function, or the default writer
    (g_log_writer_default()) will be used.

    Libraries **must not** call this function — only programs are allowed to
    install a writer function, as there must be a single, central point where
    log messages are formatted and outputted.

    There can only be one writer function. It is an error to set more than one.
    """
    ...

def log_structured(log_domain: str, log_level: LogLevelFlags, *args: object) -> object:
    """
    Log a message with structured data.

    The message will be passed through to the log writer set by the application
    using g_log_set_writer_func(). If the message is fatal (i.e. its log level
    is %G_LOG_LEVEL_ERROR), the program will be aborted by calling
    G_BREAKPOINT() at the end of this function. If the log writer returns
    %G_LOG_WRITER_UNHANDLED (failure), no other fallback writers will be tried.
    See the documentation for #GLogWriterFunc for information on chaining
    writers.

    The structured data is provided as key–value pairs, where keys are UTF-8
    strings, and values are arbitrary pointers — typically pointing to UTF-8
    strings, but that is not a requirement. To pass binary (non-nul-terminated)
    structured data, use g_log_structured_array(). The keys for structured data
    should follow the [systemd journal
    fields](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html)
    specification. It is suggested that custom keys are namespaced according to
    the code which sets them. For example, custom keys from GLib all have a
    `GLIB_` prefix.

    The @log_domain will be converted into a `GLIB_DOMAIN` field. @log_level will
    be converted into a
    [`PRIORITY`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#PRIORITY=)
    field. The format string will have its placeholders substituted for the provided
    values and be converted into a
    [`MESSAGE`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#MESSAGE=)
    field.

    Other fields you may commonly want to pass into this function:

     * [`MESSAGE_ID`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#MESSAGE_ID=)
     * [`CODE_FILE`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#CODE_FILE=)
     * [`CODE_LINE`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#CODE_LINE=)
     * [`CODE_FUNC`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#CODE_FUNC=)
     * [`ERRNO`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#ERRNO=)

    Note that `CODE_FILE`, `CODE_LINE` and `CODE_FUNC` are automatically set by
    the logging macros, G_DEBUG_HERE(), g_message(), g_warning(), g_critical(),
    g_error(), etc, if the symbols `G_LOG_USE_STRUCTURED` is defined before including
    `glib.h`.

    For example:

    |[<!-- language="C" -->
    g_log_structured (G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG,
                      "MESSAGE_ID", "06d4df59e6c24647bfe69d2c27ef0b4e",
                      "MY_APPLICATION_CUSTOM_FIELD", "some debug string",
                      "MESSAGE", "This is a debug message about pointer %p and integer %u.",
                      some_pointer, some_integer);
    ]|

    Note that each `MESSAGE_ID` must be [uniquely and randomly
    generated](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#MESSAGE_ID=).
    If adding a `MESSAGE_ID`, consider shipping a [message
    catalog](https://www.freedesktop.org/wiki/Software/systemd/catalog/) with
    your software.

    To pass a user data pointer to the log writer function which is specific to
    this logging call, you must use g_log_structured_array() and pass the pointer
    as a field with #GLogField.length set to zero, otherwise it will be
    interpreted as a string.

    For example:

    |[<!-- language="C" -->
    const GLogField fields[] = {
      { "MESSAGE", "This is a debug message.", -1 },
      { "MESSAGE_ID", "fcfb2e1e65c3494386b74878f1abf893", -1 },
      { "MY_APPLICATION_CUSTOM_FIELD", "some debug string", -1 },
      { "MY_APPLICATION_STATE", state_object, 0 },
    };
    g_log_structured_array (G_LOG_LEVEL_DEBUG, fields, G_N_ELEMENTS (fields));
    ]|

    Note also that, even if no other structured fields are specified, there
    must always be a `MESSAGE` key before the format string. The `MESSAGE`-format
    pair has to be the last of the key-value pairs, and `MESSAGE` is the only
    field for which printf()-style formatting is supported.

    The default writer function for `stdout` and `stderr` will automatically
    append a new-line character after the message, so you should not add one
    manually to the format string.
    """
    ...

def log_structured_array(log_level: LogLevelFlags, fields: object, n_fields: int) -> object:
    """
    Log a message with structured data. The message will be passed through to the
    log writer set by the application using g_log_set_writer_func(). If the
    message is fatal (i.e. its log level is %G_LOG_LEVEL_ERROR), the program will
    be aborted at the end of this function.

    See g_log_structured() for more documentation.

    This assumes that @log_level is already present in @fields (typically as the
    `PRIORITY` field).
    """
    ...

def log_structured_standard(log_domain: str, log_level: LogLevelFlags, file: str, line: str, func: str, message_format: str, *args: object) -> object:
    ...

def log_variant(log_domain: _T.Optional[str], log_level: LogLevelFlags, fields: Variant) -> object:
    """
    Log a message with structured data, accepting the data within a #GVariant. This
    version is especially useful for use in other languages, via introspection.

    The only mandatory item in the @fields dictionary is the "MESSAGE" which must
    contain the text shown to the user.

    The values in the @fields dictionary are likely to be of type String
    (%G_VARIANT_TYPE_STRING). Array of bytes (%G_VARIANT_TYPE_BYTESTRING) is also
    supported. In this case the message is handled as binary and will be forwarded
    to the log writer as such. The size of the array should not be higher than
    %G_MAXSSIZE. Otherwise it will be truncated to this size. For other types
    g_variant_print() will be used to convert the value into a string.

    For more details on its usage and about the parameters, see g_log_structured().
    """
    ...

def log_writer_default(log_level: LogLevelFlags, fields: object, n_fields: int, user_data: _T.Optional[object]) -> LogWriterOutput:
    """
    Format a structured log message and output it to the default log destination
    for the platform. On Linux, this is typically the systemd journal, falling
    back to `stdout` or `stderr` if running from the terminal or if output is
    being redirected to a file.

    Support for other platform-specific logging mechanisms may be added in
    future. Distributors of GLib may modify this function to impose their own
    (documented) platform-specific log writing policies.

    This is suitable for use as a #GLogWriterFunc, and is the default writer used
    if no other is set using g_log_set_writer_func().

    As with g_log_default_handler(), this function drops debug and informational
    messages unless their log domain (or `all`) is listed in the space-separated
    `G_MESSAGES_DEBUG` environment variable.

    g_log_writer_default() uses the mask set by g_log_set_always_fatal() to
    determine which messages are fatal. When using a custom writer func instead it is
    up to the writer function to determine which log messages are fatal.
    """
    ...

def log_writer_default_set_use_stderr(use_stderr: bool) -> object:
    """
    Configure whether the built-in log functions
    (g_log_default_handler() for the old-style API, and both
    g_log_writer_default() and g_log_writer_standard_streams() for the
    structured API) will output all log messages to `stderr`.

    By default, log messages of levels %G_LOG_LEVEL_INFO and
    %G_LOG_LEVEL_DEBUG are sent to `stdout`, and other log messages are
    sent to `stderr`. This is problematic for applications that intend
    to reserve `stdout` for structured output such as JSON or XML.

    This function sets global state. It is not thread-aware, and should be
    called at the very start of a program, before creating any other threads
    or creating objects that could create worker threads of their own.
    """
    ...

def log_writer_default_would_drop(log_level: LogLevelFlags, log_domain: _T.Optional[str]) -> bool:
    """
    Check whether g_log_writer_default() and g_log_default_handler() would
    ignore a message with the given domain and level.

    As with g_log_default_handler(), this function drops debug and informational
    messages unless their log domain (or `all`) is listed in the space-separated
    `G_MESSAGES_DEBUG` environment variable.

    This can be used when implementing log writers with the same filtering
    behaviour as the default, but a different destination or output format:

    |[<!-- language="C" -->
      if (g_log_writer_default_would_drop (log_level, log_domain))
        return G_LOG_WRITER_HANDLED;
    ]|

    or to skip an expensive computation if it is only needed for a debugging
    message, and `G_MESSAGES_DEBUG` is not set:

    |[<!-- language="C" -->
      if (!g_log_writer_default_would_drop (G_LOG_LEVEL_DEBUG, G_LOG_DOMAIN))
        {
          gchar *result = expensive_computation (my_object);

          g_debug ("my_object result: %s", result);
          g_free (result);
        }
    ]|
    """
    ...

def log_writer_format_fields(log_level: LogLevelFlags, fields: object, n_fields: int, use_color: bool) -> str:
    """
    Format a structured log message as a string suitable for outputting to the
    terminal (or elsewhere). This will include the values of all fields it knows
    how to interpret, which includes `MESSAGE` and `GLIB_DOMAIN` (see the
    documentation for g_log_structured()). It does not include values from
    unknown fields.

    The returned string does **not** have a trailing new-line character. It is
    encoded in the character set of the current locale, which is not necessarily
    UTF-8.
    """
    ...

def log_writer_is_journald(output_fd: int) -> bool:
    """
    Check whether the given @output_fd file descriptor is a connection to the
    systemd journal, or something else (like a log file or `stdout` or
    `stderr`).

    Invalid file descriptors are accepted and return %FALSE, which allows for
    the following construct without needing any additional error handling:
    |[<!-- language="C" -->
      is_journald = g_log_writer_is_journald (fileno (stderr));
    ]|
    """
    ...

def log_writer_journald(log_level: LogLevelFlags, fields: object, n_fields: int, user_data: _T.Optional[object]) -> LogWriterOutput:
    """
    Format a structured log message and send it to the systemd journal as a set
    of key–value pairs. All fields are sent to the journal, but if a field has
    length zero (indicating program-specific data) then only its key will be
    sent.

    This is suitable for use as a #GLogWriterFunc.

    If GLib has been compiled without systemd support, this function is still
    defined, but will always return %G_LOG_WRITER_UNHANDLED.
    """
    ...

def log_writer_standard_streams(log_level: LogLevelFlags, fields: object, n_fields: int, user_data: _T.Optional[object]) -> LogWriterOutput:
    """
    Format a structured log message and print it to either `stdout` or `stderr`,
    depending on its log level. %G_LOG_LEVEL_INFO and %G_LOG_LEVEL_DEBUG messages
    are sent to `stdout`, or to `stderr` if requested by
    g_log_writer_default_set_use_stderr();
    all other log levels are sent to `stderr`. Only fields
    which are understood by this function are included in the formatted string
    which is printed.

    If the output stream supports ANSI color escape sequences, they will be used
    in the output.

    A trailing new-line character is added to the log message when it is printed.

    This is suitable for use as a #GLogWriterFunc.
    """
    ...

def log_writer_supports_color(output_fd: int) -> bool:
    """
    Check whether the given @output_fd file descriptor supports ANSI color
    escape sequences. If so, they can safely be used when formatting log
    messages.
    """
    ...

def logv(log_domain: _T.Optional[str], log_level: LogLevelFlags, format: str, args: list) -> object:
    """
    Logs an error or debugging message.

    If the log level has been set as fatal, G_BREAKPOINT() is called
    to terminate the program. See the documentation for G_BREAKPOINT() for
    details of the debugging options this provides.

    If g_log_default_handler() is used as the log handler function, a new-line
    character will automatically be appended to @..., and need not be entered
    manually.

    If [structured logging is enabled][using-structured-logging] this will
    output via the structured log writer function (see g_log_set_writer_func()).
    """
    ...

def main_current_source() -> Source:
    """
    Returns the currently firing source for this thread.
    """
    ...

def main_depth() -> int:
    """
    Returns the depth of the stack of calls to
    g_main_context_dispatch() on any #GMainContext in the current thread.
     That is, when called from the toplevel, it gives 0. When
    called from within a callback from g_main_context_iteration()
    (or g_main_loop_run(), etc.) it returns 1. When called from within
    a callback to a recursive call to g_main_context_iteration(),
    it returns 2. And so forth.

    This function is useful in a situation like the following:
    Imagine an extremely simple "garbage collected" system.

    |[<!-- language="C" -->
    static GList *free_list;

    gpointer
    allocate_memory (gsize size)
    {
      gpointer result = g_malloc (size);
      free_list = g_list_prepend (free_list, result);
      return result;
    }

    void
    free_allocated_memory (void)
    {
      GList *l;
      for (l = free_list; l; l = l->next);
        g_free (l->data);
      g_list_free (free_list);
      free_list = NULL;
     }

    [...]

    while (TRUE);
     {
       g_main_context_iteration (NULL, TRUE);
       free_allocated_memory();
      }
    ]|

    This works from an application, however, if you want to do the same
    thing from a library, it gets more difficult, since you no longer
    control the main loop. You might think you can simply use an idle
    function to make the call to free_allocated_memory(), but that
    doesn't work, since the idle function could be called from a
    recursive callback. This can be fixed by using g_main_depth()

    |[<!-- language="C" -->
    gpointer
    allocate_memory (gsize size)
    {
      FreeListBlock *block = g_new (FreeListBlock, 1);
      block->mem = g_malloc (size);
      block->depth = g_main_depth ();
      free_list = g_list_prepend (free_list, block);
      return block->mem;
    }

    void
    free_allocated_memory (void)
    {
      GList *l;
      
      int depth = g_main_depth ();
      for (l = free_list; l; );
        {
          GList *next = l->next;
          FreeListBlock *block = l->data;
          if (block->depth > depth)
            {
              g_free (block->mem);
              g_free (block);
              free_list = g_list_delete_link (free_list, l);
            }
                  
          l = next;
        }
      }
    ]|

    There is a temptation to use g_main_depth() to solve
    problems with reentrancy. For instance, while waiting for data
    to be received from the network in response to a menu item,
    the menu item might be selected again. It might seem that
    one could make the menu item's callback return immediately
    and do nothing if g_main_depth() returns a value greater than 1.
    However, this should be avoided since the user then sees selecting
    the menu item do nothing. Furthermore, you'll find yourself adding
    these checks all over your code, since there are doubtless many,
    many things that the user could do. Instead, you can use the
    following techniques:

    1. Use gtk_widget_set_sensitive() or modal dialogs to prevent
       the user from interacting with elements while the main
       loop is recursing.

    2. Avoid main loop recursion in situations where you can't handle
       arbitrary  callbacks. Instead, structure your code so that you
       simply return to the main loop and then get called again when
       there is more work to do.
    """
    ...

def malloc(n_bytes: int) -> object:
    """
    Allocates @n_bytes bytes of memory.
    If @n_bytes is 0 it returns %NULL.
    """
    ...

def malloc0(n_bytes: int) -> object:
    """
    Allocates @n_bytes bytes of memory, initialized to 0's.
    If @n_bytes is 0 it returns %NULL.
    """
    ...

def malloc0_n(n_blocks: int, n_block_bytes: int) -> object:
    """
    This function is similar to g_malloc0(), allocating (@n_blocks * @n_block_bytes) bytes,
    but care is taken to detect possible overflow during multiplication.
    """
    ...

def malloc_n(n_blocks: int, n_block_bytes: int) -> object:
    """
    This function is similar to g_malloc(), allocating (@n_blocks * @n_block_bytes) bytes,
    but care is taken to detect possible overflow during multiplication.
    """
    ...

def markup_collect_attributes(element_name: str, attribute_names: str, attribute_values: str, error: Error, first_type: MarkupCollectType, first_attr: str, *args: object) -> bool:
    """
    Collects the attributes of the element from the data passed to the
    #GMarkupParser start_element function, dealing with common error
    conditions and supporting boolean values.

    This utility function is not required to write a parser but can save
    a lot of typing.

    The @element_name, @attribute_names, @attribute_values and @error
    parameters passed to the start_element callback should be passed
    unmodified to this function.

    Following these arguments is a list of "supported" attributes to collect.
    It is an error to specify multiple attributes with the same name. If any
    attribute not in the list appears in the @attribute_names array then an
    unknown attribute error will result.

    The #GMarkupCollectType field allows specifying the type of collection
    to perform and if a given attribute must appear or is optional.

    The attribute name is simply the name of the attribute to collect.

    The pointer should be of the appropriate type (see the descriptions
    under #GMarkupCollectType) and may be %NULL in case a particular
    attribute is to be allowed but ignored.

    This function deals with issuing errors for missing attributes
    (of type %G_MARKUP_ERROR_MISSING_ATTRIBUTE), unknown attributes
    (of type %G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE) and duplicate
    attributes (of type %G_MARKUP_ERROR_INVALID_CONTENT) as well
    as parse errors for boolean-valued attributes (again of type
    %G_MARKUP_ERROR_INVALID_CONTENT). In all of these cases %FALSE
    will be returned and @error will be set as appropriate.
    """
    ...

def markup_error_quark() -> Quark:
    ...

def markup_escape_text(text: str, length: int) -> str:
    """
    Escapes text so that the markup parser will parse it verbatim.
    Less than, greater than, ampersand, etc. are replaced with the
    corresponding entities. This function would typically be used
    when writing out a file to be parsed with the markup parser.

    Note that this function doesn't protect whitespace and line endings
    from being processed according to the XML rules for normalization
    of line endings and attribute values.

    Note also that this function will produce character references in
    the range of &#x1; ... &#x1f; for all control sequences
    except for tabstop, newline and carriage return.  The character
    references in this range are not valid XML 1.0, but they are
    valid XML 1.1 and will be accepted by the GMarkup parser.
    """
    ...

def markup_printf_escaped(format: str, *args: object) -> str:
    """
    Formats arguments according to @format, escaping
    all string and character arguments in the fashion
    of g_markup_escape_text(). This is useful when you
    want to insert literal strings into XML-style markup
    output, without having to worry that the strings
    might themselves contain markup.

    |[<!-- language="C" -->
    const char *store = "Fortnum & Mason";
    const char *item = "Tea";
    char *output;

    output = g_markup_printf_escaped ("<purchase>"
                                      "<store>%s</store>"
                                      "<item>%s</item>"
                                      "</purchase>",
                                      store, item);
    ]|
    """
    ...

def markup_vprintf_escaped(format: str, args: list) -> str:
    """
    Formats the data in @args according to @format, escaping
    all string and character arguments in the fashion
    of g_markup_escape_text(). See g_markup_printf_escaped().
    """
    ...

def mem_is_system_malloc() -> bool:
    """
    Checks whether the allocator used by g_malloc() is the system's
    malloc implementation. If it returns %TRUE memory allocated with
    malloc() can be used interchangeably with memory allocated using g_malloc().
    This function is useful for avoiding an extra copy of allocated memory returned
    by a non-GLib-based API.
    """
    ...

def mem_profile() -> object:
    """
    GLib used to support some tools for memory profiling, but this
    no longer works. There are many other useful tools for memory
    profiling these days which can be used instead.
    """
    ...

def mem_set_vtable(vtable: MemVTable) -> object:
    """
    This function used to let you override the memory allocation function.
    However, its use was incompatible with the use of global constructors
    in GLib and GIO, because those use the GLib allocators before main is
    reached. Therefore this function is now deprecated and is just a stub.
    """
    ...

def memdup(mem: _T.Optional[object], byte_size: int) -> object:
    """
    Allocates @byte_size bytes of memory, and copies @byte_size bytes into it
    from @mem. If @mem is %NULL it returns %NULL.
    """
    ...

def memdup2(mem: _T.Optional[object], byte_size: int) -> object:
    """
    Allocates @byte_size bytes of memory, and copies @byte_size bytes into it
    from @mem. If @mem is %NULL it returns %NULL.

    This replaces g_memdup(), which was prone to integer overflows when
    converting the argument from a #gsize to a #guint.
    """
    ...

def mkdir_with_parents(pathname: str, mode: int) -> int:
    """
    Create a directory if it doesn't already exist. Create intermediate
    parent directories as needed, too.
    """
    ...

def mkdtemp(tmpl: str) -> str:
    """
    Creates a temporary directory. See the mkdtemp() documentation
    on most UNIX-like systems.

    The parameter is a string that should follow the rules for
    mkdtemp() templates, i.e. contain the string "XXXXXX".
    g_mkdtemp() is slightly more flexible than mkdtemp() in that the
    sequence does not have to occur at the very end of the template.
    The X string will be modified to form the name of a directory that
    didn't exist.
    The string should be in the GLib file name encoding. Most importantly,
    on Windows it should be in UTF-8.

    If you are going to be creating a temporary directory inside the
    directory returned by g_get_tmp_dir(), you might want to use
    g_dir_make_tmp() instead.
    """
    ...

def mkdtemp_full(tmpl: str, mode: int) -> str:
    """
    Creates a temporary directory. See the mkdtemp() documentation
    on most UNIX-like systems.

    The parameter is a string that should follow the rules for
    mkdtemp() templates, i.e. contain the string "XXXXXX".
    g_mkdtemp_full() is slightly more flexible than mkdtemp() in that the
    sequence does not have to occur at the very end of the template
    and you can pass a @mode. The X string will be modified to form
    the name of a directory that didn't exist. The string should be
    in the GLib file name encoding. Most importantly, on Windows it
    should be in UTF-8.

    If you are going to be creating a temporary directory inside the
    directory returned by g_get_tmp_dir(), you might want to use
    g_dir_make_tmp() instead.
    """
    ...

def mkstemp(tmpl: str) -> int:
    """
    Opens a temporary file. See the mkstemp() documentation
    on most UNIX-like systems.

    The parameter is a string that should follow the rules for
    mkstemp() templates, i.e. contain the string "XXXXXX".
    g_mkstemp() is slightly more flexible than mkstemp() in that the
    sequence does not have to occur at the very end of the template.
    The X string will be modified to form the name of a file that
    didn't exist. The string should be in the GLib file name encoding.
    Most importantly, on Windows it should be in UTF-8.
    """
    ...

def mkstemp_full(tmpl: str, flags: int, mode: int) -> int:
    """
    Opens a temporary file. See the mkstemp() documentation
    on most UNIX-like systems.

    The parameter is a string that should follow the rules for
    mkstemp() templates, i.e. contain the string "XXXXXX".
    g_mkstemp_full() is slightly more flexible than mkstemp()
    in that the sequence does not have to occur at the very end of the
    template and you can pass a @mode and additional @flags. The X
    string will be modified to form the name of a file that didn't exist.
    The string should be in the GLib file name encoding. Most importantly,
    on Windows it should be in UTF-8.
    """
    ...

def nullify_pointer(nullify_location: object) -> object:
    """
    Set the pointer at the specified location to %NULL.
    """
    ...

def number_parser_error_quark() -> Quark:
    ...

def on_error_query(prg_name: str) -> object:
    """
    Prompts the user with
    `[E]xit, [H]alt, show [S]tack trace or [P]roceed`.
    This function is intended to be used for debugging use only.
    The following example shows how it can be used together with
    the g_log() functions.

    |[<!-- language="C" -->
    #include <glib.h>

    static void
    log_handler (const gchar   *log_domain,
                 GLogLevelFlags log_level,
                 const gchar   *message,
                 gpointer       user_data)
    {
      g_log_default_handler (log_domain, log_level, message, user_data);

      g_on_error_query (MY_PROGRAM_NAME);
    }

    int
    main (int argc, char *argv[])
    {
      g_log_set_handler (MY_LOG_DOMAIN,
                         G_LOG_LEVEL_WARNING |
                         G_LOG_LEVEL_ERROR |
                         G_LOG_LEVEL_CRITICAL,
                         log_handler,
                         NULL);
      ...
    ]|

    If "[E]xit" is selected, the application terminates with a call
    to _exit(0).

    If "[S]tack" trace is selected, g_on_error_stack_trace() is called.
    This invokes gdb, which attaches to the current process and shows
    a stack trace. The prompt is then shown again.

    If "[P]roceed" is selected, the function returns.

    This function may cause different actions on non-UNIX platforms.

    On Windows consider using the `G_DEBUGGER` environment
    variable (see [Running GLib Applications](glib-running.html)) and
    calling g_on_error_stack_trace() instead.
    """
    ...

def on_error_stack_trace(prg_name: str) -> object:
    """
    Invokes gdb, which attaches to the current process and shows a
    stack trace. Called by g_on_error_query() when the "[S]tack trace"
    option is selected. You can get the current process's program name
    with g_get_prgname(), assuming that you have called gtk_init() or
    gdk_init().

    This function may cause different actions on non-UNIX platforms.

    When running on Windows, this function is *not* called by
    g_on_error_query(). If called directly, it will raise an
    exception, which will crash the program. If the `G_DEBUGGER` environment
    variable is set, a debugger will be invoked to attach and
    handle that exception (see [Running GLib Applications](glib-running.html)).
    """
    ...

def option_error_quark() -> Quark:
    ...

def parse_debug_string(string: _T.Optional[str], keys: object, nkeys: int) -> int:
    """
    Parses a string containing debugging options
    into a %guint containing bit flags. This is used
    within GDK and GTK+ to parse the debug options passed on the
    command line or through environment variables.

    If @string is equal to "all", all flags are set. Any flags
    specified along with "all" in @string are inverted; thus,
    "all,foo,bar" or "foo,bar,all" sets all flags except those
    corresponding to "foo" and "bar".

    If @string is equal to "help", all the available keys in @keys
    are printed out to standard error.
    """
    ...

def path_get_basename(file_name: str) -> str:
    """
    Gets the last component of the filename.

    If @file_name ends with a directory separator it gets the component
    before the last slash. If @file_name consists only of directory
    separators (and on Windows, possibly a drive letter), a single
    separator is returned. If @file_name is empty, it gets ".".
    """
    ...

def path_get_dirname(file_name: str) -> str:
    """
    Gets the directory components of a file name. For example, the directory
    component of `/usr/bin/test` is `/usr/bin`. The directory component of `/`
    is `/`.

    If the file name has no directory components "." is returned.
    The returned string should be freed when no longer needed.
    """
    ...

def path_is_absolute(file_name: str) -> bool:
    """
    Returns %TRUE if the given @file_name is an absolute file name.
    Note that this is a somewhat vague concept on Windows.

    On POSIX systems, an absolute file name is well-defined. It always
    starts from the single root directory. For example "/usr/local".

    On Windows, the concepts of current drive and drive-specific
    current directory introduce vagueness. This function interprets as
    an absolute file name one that either begins with a directory
    separator such as "\Users\tml" or begins with the root on a drive,
    for example "C:\Windows". The first case also includes UNC paths
    such as "\\\\myserver\docs\foo". In all cases, either slashes or
    backslashes are accepted.

    Note that a file name relative to the current drive root does not
    truly specify a file uniquely over time and across processes, as
    the current drive is a per-process value and can be changed.

    File names relative the current directory on some specific drive,
    such as "D:foo/bar", are not interpreted as absolute by this
    function, but they obviously are not relative to the normal current
    directory as returned by getcwd() or g_get_current_dir()
    either. Such paths should be avoided, or need to be handled using
    Windows-specific code.
    """
    ...

def path_skip_root(file_name: str) -> str:
    """
    Returns a pointer into @file_name after the root component,
    i.e. after the "/" in UNIX or "C:\" under Windows. If @file_name
    is not an absolute path it returns %NULL.
    """
    ...

def pattern_match(pspec: PatternSpec, string_length: int, string: str, string_reversed: _T.Optional[str]) -> bool:
    """
    Matches a string against a compiled pattern. Passing the correct
    length of the string given is mandatory. The reversed string can be
    omitted by passing %NULL, this is more efficient if the reversed
    version of the string to be matched is not at hand, as
    g_pattern_match() will only construct it if the compiled pattern
    requires reverse matches.

    Note that, if the user code will (possibly) match a string against a
    multitude of patterns containing wildcards, chances are high that
    some patterns will require a reversed string. In this case, it's
    more efficient to provide the reversed string to avoid multiple
    constructions thereof in the various calls to g_pattern_match().

    Note also that the reverse of a UTF-8 encoded string can in general
    not be obtained by g_strreverse(). This works only if the string
    does not contain any multibyte characters. GLib offers the
    g_utf8_strreverse() function to reverse UTF-8 encoded strings.
    """
    ...

def pattern_match_simple(pattern: str, string: str) -> bool:
    """
    Matches a string against a pattern given as a string. If this
    function is to be called in a loop, it's more efficient to compile
    the pattern once with g_pattern_spec_new() and call
    g_pattern_match_string() repeatedly.
    """
    ...

def pattern_match_string(pspec: PatternSpec, string: str) -> bool:
    """
    Matches a string against a compiled pattern. If the string is to be
    matched against more than one pattern, consider using
    g_pattern_match() instead while supplying the reversed string.
    """
    ...

def pointer_bit_lock(address: object, lock_bit: int) -> object:
    """
    This is equivalent to g_bit_lock, but working on pointers (or other
    pointer-sized values).

    For portability reasons, you may only lock on the bottom 32 bits of
    the pointer.

    While @address has a `volatile` qualifier, this is a historical
    artifact and the argument passed to it should not be `volatile`.
    """
    ...

def pointer_bit_trylock(address: object, lock_bit: int) -> bool:
    """
    This is equivalent to g_bit_trylock(), but working on pointers (or
    other pointer-sized values).

    For portability reasons, you may only lock on the bottom 32 bits of
    the pointer.

    While @address has a `volatile` qualifier, this is a historical
    artifact and the argument passed to it should not be `volatile`.
    """
    ...

def pointer_bit_unlock(address: object, lock_bit: int) -> object:
    """
    This is equivalent to g_bit_unlock, but working on pointers (or other
    pointer-sized values).

    For portability reasons, you may only lock on the bottom 32 bits of
    the pointer.

    While @address has a `volatile` qualifier, this is a historical
    artifact and the argument passed to it should not be `volatile`.
    """
    ...

def poll(fds: PollFD, nfds: int, timeout: int) -> int:
    """
    Polls @fds, as with the poll() system call, but portably. (On
    systems that don't have poll(), it is emulated using select().)
    This is used internally by #GMainContext, but it can be called
    directly if you need to block until a file descriptor is ready, but
    don't want to run the full main loop.

    Each element of @fds is a #GPollFD describing a single file
    descriptor to poll. The @fd field indicates the file descriptor,
    and the @events field indicates the events to poll for. On return,
    the @revents fields will be filled with the events that actually
    occurred.

    On POSIX systems, the file descriptors in @fds can be any sort of
    file descriptor, but the situation is much more complicated on
    Windows. If you need to use g_poll() in code that has to run on
    Windows, the easiest solution is to construct all of your
    #GPollFDs with g_io_channel_win32_make_pollfd().
    """
    ...

def prefix_error(err: _T.Optional[Error], format: str, *args: object) -> object:
    """
    Formats a string according to @format and prefix it to an existing
    error message. If @err is %NULL (ie: no error variable) then do
    nothing.

    If *@err is %NULL (ie: an error variable is present but there is no
    error condition) then also do nothing.
    """
    ...

def prefix_error_literal(err: _T.Optional[Error], prefix: str) -> object:
    """
    Prefixes @prefix to an existing error message. If @err or *@err is
    %NULL (i.e.: no error variable) then do nothing.
    """
    ...

def print(format: str, *args: object) -> object:
    """
    Outputs a formatted message via the print handler.
    The default print handler simply outputs the message to stdout, without
    appending a trailing new-line character. Typically, @format should end with
    its own new-line character.

    g_print() should not be used from within libraries for debugging
    messages, since it may be redirected by applications to special
    purpose message windows or even files. Instead, libraries should
    use g_log(), g_log_structured(), or the convenience macros g_message(),
    g_warning() and g_error().
    """
    ...

def printerr(format: str, *args: object) -> object:
    """
    Outputs a formatted message via the error message handler.
    The default handler simply outputs the message to stderr, without appending
    a trailing new-line character. Typically, @format should end with its own
    new-line character.

    g_printerr() should not be used from within libraries.
    Instead g_log() or g_log_structured() should be used, or the convenience
    macros g_message(), g_warning() and g_error().
    """
    ...

def printf(format: str, *args: object) -> int:
    """
    An implementation of the standard printf() function which supports
    positional parameters, as specified in the Single Unix Specification.

    As with the standard printf(), this does not automatically append a trailing
    new-line character to the message, so typically @format should end with its
    own new-line character.

    `glib/gprintf.h` must be explicitly included in order to use this function.
    """
    ...

def printf_string_upper_bound(format: str, args: list) -> int:
    """
    Calculates the maximum space needed to store the output
    of the sprintf() function.
    """
    ...

def propagate_error(dest: _T.Optional[Error], src: Error) -> object:
    """
    If @dest is %NULL, free @src; otherwise, moves @src into *@dest.
    The error variable @dest points to must be %NULL.

    @src must be non-%NULL.

    Note that @src is no longer valid after this call. If you want
    to keep using the same GError*, you need to set it to %NULL
    after calling this function on it.
    """
    ...

def propagate_prefixed_error(dest: Error, src: Error, format: str, *args: object) -> object:
    """
    If @dest is %NULL, free @src; otherwise, moves @src into *@dest.
    *@dest must be %NULL. After the move, add a prefix as with
    g_prefix_error().
    """
    ...

def qsort_with_data(pbase: object, total_elems: int, size: int, compare_func: CompareDataFunc, user_data: _T.Optional[object]) -> object:
    """
    This is just like the standard C qsort() function, but
    the comparison routine accepts a user data argument.

    This is guaranteed to be a stable sort since version 2.32.
    """
    ...

def quark_from_static_string(string: _T.Optional[str]) -> Quark:
    """
    Gets the #GQuark identifying the given (static) string. If the
    string does not currently have an associated #GQuark, a new #GQuark
    is created, linked to the given string.

    Note that this function is identical to g_quark_from_string() except
    that if a new #GQuark is created the string itself is used rather
    than a copy. This saves memory, but can only be used if the string
    will continue to exist until the program terminates. It can be used
    with statically allocated strings in the main program, but not with
    statically allocated memory in dynamically loaded modules, if you
    expect to ever unload the module again (e.g. do not use this
    function in GTK+ theme engines).

    This function must not be used before library constructors have finished
    running. In particular, this means it cannot be used to initialize global
    variables in C++.
    """
    ...

def quark_from_string(string: _T.Optional[str]) -> Quark:
    """
    Gets the #GQuark identifying the given string. If the string does
    not currently have an associated #GQuark, a new #GQuark is created,
    using a copy of the string.

    This function must not be used before library constructors have finished
    running. In particular, this means it cannot be used to initialize global
    variables in C++.
    """
    ...

def quark_to_string(quark: Quark) -> str:
    """
    Gets the string associated with the given #GQuark.
    """
    ...

def quark_try_string(string: _T.Optional[str]) -> Quark:
    """
    Gets the #GQuark associated with the given string, or 0 if string is
    %NULL or it has no associated #GQuark.

    If you want the GQuark to be created if it doesn't already exist,
    use g_quark_from_string() or g_quark_from_static_string().

    This function must not be used before library constructors have finished
    running.
    """
    ...

def random_double() -> float:
    """
    Returns a random #gdouble equally distributed over the range [0..1).
    """
    ...

def random_double_range(begin: float, end: float) -> float:
    """
    Returns a random #gdouble equally distributed over the range
    [@begin..@end).
    """
    ...

def random_int() -> int:
    """
    Return a random #guint32 equally distributed over the range
    [0..2^32-1].
    """
    ...

def random_int_range(begin: int, end: int) -> int:
    """
    Returns a random #gint32 equally distributed over the range
    [@begin..@end-1].
    """
    ...

def random_set_seed(seed: int) -> object:
    """
    Sets the seed for the global random number generator, which is used
    by the g_random_* functions, to @seed.
    """
    ...

def rc_box_acquire(mem_block: object) -> object:
    """
    Acquires a reference on the data pointed by @mem_block.
    """
    ...

def rc_box_alloc(block_size: int) -> object:
    """
    Allocates @block_size bytes of memory, and adds reference
    counting semantics to it.

    The data will be freed when its reference count drops to
    zero.

    The allocated data is guaranteed to be suitably aligned for any
    built-in type.
    """
    ...

def rc_box_alloc0(block_size: int) -> object:
    """
    Allocates @block_size bytes of memory, and adds reference
    counting semantics to it.

    The contents of the returned data is set to zero.

    The data will be freed when its reference count drops to
    zero.

    The allocated data is guaranteed to be suitably aligned for any
    built-in type.
    """
    ...

def rc_box_dup(block_size: int, mem_block: object) -> object:
    """
    Allocates a new block of data with reference counting
    semantics, and copies @block_size bytes of @mem_block
    into it.
    """
    ...

def rc_box_get_size(mem_block: object) -> int:
    """
    Retrieves the size of the reference counted data pointed by @mem_block.
    """
    ...

def rc_box_release(mem_block: object) -> object:
    """
    Releases a reference on the data pointed by @mem_block.

    If the reference was the last one, it will free the
    resources allocated for @mem_block.
    """
    ...

def rc_box_release_full(mem_block: object, clear_func: DestroyNotify) -> object:
    """
    Releases a reference on the data pointed by @mem_block.

    If the reference was the last one, it will call @clear_func
    to clear the contents of @mem_block, and then will free the
    resources allocated for @mem_block.
    """
    ...

def realloc(mem: _T.Optional[object], n_bytes: int) -> object:
    """
    Reallocates the memory pointed to by @mem, so that it now has space for
    @n_bytes bytes of memory. It returns the new address of the memory, which may
    have been moved. @mem may be %NULL, in which case it's considered to
    have zero-length. @n_bytes may be 0, in which case %NULL will be returned
    and @mem will be freed unless it is %NULL.
    """
    ...

def realloc_n(mem: _T.Optional[object], n_blocks: int, n_block_bytes: int) -> object:
    """
    This function is similar to g_realloc(), allocating (@n_blocks * @n_block_bytes) bytes,
    but care is taken to detect possible overflow during multiplication.
    """
    ...

def ref_count_compare(rc: int, val: int) -> bool:
    """
    Compares the current value of @rc with @val.
    """
    ...

def ref_count_dec(rc: int) -> bool:
    """
    Decreases the reference count.

    If %TRUE is returned, the reference count reached 0. After this point, @rc
    is an undefined state and must be reinitialized with
    g_ref_count_init() to be used again.
    """
    ...

def ref_count_inc(rc: int) -> object:
    """
    Increases the reference count.
    """
    ...

def ref_count_init(rc: int) -> object:
    """
    Initializes a reference count variable to 1.
    """
    ...

def ref_string_acquire(str: str) -> str:
    """
    Acquires a reference on a string.
    """
    ...

def ref_string_length(str: str) -> int:
    """
    Retrieves the length of @str.
    """
    ...

def ref_string_new(str: str) -> str:
    """
    Creates a new reference counted string and copies the contents of @str
    into it.
    """
    ...

def ref_string_new_intern(str: str) -> str:
    """
    Creates a new reference counted string and copies the content of @str
    into it.

    If you call this function multiple times with the same @str, or with
    the same contents of @str, it will return a new reference, instead of
    creating a new string.
    """
    ...

def ref_string_new_len(str: str, len: int) -> str:
    """
    Creates a new reference counted string and copies the contents of @str
    into it, up to @len bytes.

    Since this function does not stop at nul bytes, it is the caller's
    responsibility to ensure that @str has at least @len addressable bytes.
    """
    ...

def ref_string_release(str: str) -> object:
    """
    Releases a reference on a string; if it was the last reference, the
    resources allocated by the string are freed as well.
    """
    ...

def reload_user_special_dirs_cache() -> object:
    """
    Resets the cache used for g_get_user_special_dir(), so
    that the latest on-disk version is used. Call this only
    if you just changed the data on disk yourself.

    Due to thread safety issues this may cause leaking of strings
    that were previously returned from g_get_user_special_dir()
    that can't be freed. We ensure to only leak the data for
    the directories that actually changed value though.
    """
    ...

def return_if_fail_warning(log_domain: _T.Optional[str], pretty_function: str, expression: _T.Optional[str]) -> object:
    """
    Internal function used to print messages from the public g_return_if_fail()
    and g_return_val_if_fail() macros.
    """
    ...

def rmdir(filename: str) -> int:
    """
    A wrapper for the POSIX rmdir() function. The rmdir() function
    deletes a directory from the filesystem.

    See your C library manual for more details about how rmdir() works
    on your system.
    """
    ...

def set_application_name(application_name: str) -> object:
    """
    Sets a human-readable name for the application. This name should be
    localized if possible, and is intended for display to the user.
    Contrast with g_set_prgname(), which sets a non-localized name.
    g_set_prgname() will be called automatically by gtk_init(),
    but g_set_application_name() will not.

    Note that for thread safety reasons, this function can only
    be called once.

    The application name will be used in contexts such as error messages,
    or when displaying an application's name in the task list.
    """
    ...

def set_error(err: Error, domain: Quark, code: int, format: str, *args: object) -> object:
    """
    Does nothing if @err is %NULL; if @err is non-%NULL, then *@err
    must be %NULL. A new #GError is created and assigned to *@err.
    """
    ...

def set_error_literal(err: Error, domain: Quark, code: int, message: str) -> object:
    """
    Does nothing if @err is %NULL; if @err is non-%NULL, then *@err
    must be %NULL. A new #GError is created and assigned to *@err.
    Unlike g_set_error(), @message is not a printf()-style format string.
    Use this function if @message contains text you don't have control over,
    that could include printf() escape sequences.
    """
    ...

def set_prgname(prgname: str) -> object:
    """
    Sets the name of the program. This name should not be localized,
    in contrast to g_set_application_name().

    If you are using #GApplication the program name is set in
    g_application_run(). In case of GDK or GTK+ it is set in
    gdk_init(), which is called by gtk_init() and the
    #GtkApplication::startup handler. The program name is found by
    taking the last component of @argv[0].

    Since GLib 2.72, this function can be called multiple times
    and is fully thread safe. Prior to GLib 2.72, this function
    could only be called once per process.
    """
    ...

def set_print_handler(func: PrintFunc) -> PrintFunc:
    """
    Sets the print handler.

    Any messages passed to g_print() will be output via
    the new handler. The default handler simply outputs
    the message to stdout. By providing your own handler
    you can redirect the output, to a GTK+ widget or a
    log file for example.
    """
    ...

def set_printerr_handler(func: PrintFunc) -> PrintFunc:
    """
    Sets the handler for printing error messages.

    Any messages passed to g_printerr() will be output via
    the new handler. The default handler simply outputs the
    message to stderr. By providing your own handler you can
    redirect the output, to a GTK+ widget or a log file for
    example.
    """
    ...

def setenv(variable: str, value: str, overwrite: bool) -> bool:
    """
    Sets an environment variable. On UNIX, both the variable's name and
    value can be arbitrary byte strings, except that the variable's name
    cannot contain '='. On Windows, they should be in UTF-8.

    Note that on some systems, when variables are overwritten, the memory
    used for the previous variables and its value isn't reclaimed.

    You should be mindful of the fact that environment variable handling
    in UNIX is not thread-safe, and your program may crash if one thread
    calls g_setenv() while another thread is calling getenv(). (And note
    that many functions, such as gettext(), call getenv() internally.)
    This function is only safe to use at the very start of your program,
    before creating any other threads (or creating objects that create
    worker threads of their own).

    If you need to set up the environment for a child process, you can
    use g_get_environ() to get an environment array, modify that with
    g_environ_setenv() and g_environ_unsetenv(), and then pass that
    array directly to execvpe(), g_spawn_async(), or the like.
    """
    ...

def shell_error_quark() -> Quark:
    ...

def shell_parse_argv(command_line: str, argcp: int, argvp: object) -> bool:
    """
    Parses a command line into an argument vector, in much the same way
    the shell would, but without many of the expansions the shell would
    perform (variable expansion, globs, operators, filename expansion,
    etc. are not supported).

    The results are defined to be the same as those you would get from
    a UNIX98 `/bin/sh`, as long as the input contains none of the
    unsupported shell expansions. If the input does contain such expansions,
    they are passed through literally.

    Possible errors are those from the %G_SHELL_ERROR domain.

    In particular, if @command_line is an empty string (or a string containing
    only whitespace), %G_SHELL_ERROR_EMPTY_STRING will be returned. It’s
    guaranteed that @argvp will be a non-empty array if this function returns
    successfully.

    Free the returned vector with g_strfreev().
    """
    ...

def shell_quote(unquoted_string: str) -> str:
    """
    Quotes a string so that the shell (/bin/sh) will interpret the
    quoted string to mean @unquoted_string.

    If you pass a filename to the shell, for example, you should first
    quote it with this function.

    The return value must be freed with g_free().

    The quoting style used is undefined (single or double quotes may be
    used).
    """
    ...

def shell_unquote(quoted_string: str) -> str:
    """
    Unquotes a string as the shell (/bin/sh) would.

    This function only handles quotes; if a string contains file globs,
    arithmetic operators, variables, backticks, redirections, or other
    special-to-the-shell features, the result will be different from the
    result a real shell would produce (the variables, backticks, etc.
    will be passed through literally instead of being expanded).

    This function is guaranteed to succeed if applied to the result of
    g_shell_quote(). If it fails, it returns %NULL and sets the
    error.

    The @quoted_string need not actually contain quoted or escaped text;
    g_shell_unquote() simply goes through the string and unquotes/unescapes
    anything that the shell would. Both single and double quotes are
    handled, as are escapes including escaped newlines.

    The return value must be freed with g_free().

    Possible errors are in the %G_SHELL_ERROR domain.

    Shell quoting rules are a bit strange. Single quotes preserve the
    literal string exactly. escape sequences are not allowed; not even
    `\'` - if you want a `'` in the quoted text, you have to do something
    like `'foo'\''bar'`. Double quotes allow `$`, ```, `"`, `\`, and
    newline to be escaped with backslash. Otherwise double quotes
    preserve things literally.
    """
    ...

def slice_alloc(block_size: int) -> object:
    """
    Allocates a block of memory from the slice allocator.

    The block address handed out can be expected to be aligned
    to at least `1 * sizeof (void*)`, though in general slices
    are `2 * sizeof (void*)` bytes aligned; if a `malloc()`
    fallback implementation is used instead, the alignment may
    be reduced in a libc dependent fashion.

    Note that the underlying slice allocation mechanism can
    be changed with the [`G_SLICE=always-malloc`][G_SLICE]
    environment variable.
    """
    ...

def slice_alloc0(block_size: int) -> object:
    """
    Allocates a block of memory via g_slice_alloc() and initializes
    the returned memory to 0. Note that the underlying slice allocation
    mechanism can be changed with the [`G_SLICE=always-malloc`][G_SLICE]
    environment variable.
    """
    ...

def slice_copy(block_size: int, mem_block: _T.Optional[object]) -> object:
    """
    Allocates a block of memory from the slice allocator
    and copies @block_size bytes into it from @mem_block.

    @mem_block must be non-%NULL if @block_size is non-zero.
    """
    ...

def slice_free1(block_size: int, mem_block: _T.Optional[object]) -> object:
    """
    Frees a block of memory.

    The memory must have been allocated via g_slice_alloc() or
    g_slice_alloc0() and the @block_size has to match the size
    specified upon allocation. Note that the exact release behaviour
    can be changed with the [`G_DEBUG=gc-friendly`][G_DEBUG] environment
    variable, also see [`G_SLICE`][G_SLICE] for related debugging options.

    If @mem_block is %NULL, this function does nothing.
    """
    ...

def slice_free_chain_with_offset(block_size: int, mem_chain: _T.Optional[object], next_offset: int) -> object:
    """
    Frees a linked list of memory blocks of structure type @type.

    The memory blocks must be equal-sized, allocated via
    g_slice_alloc() or g_slice_alloc0() and linked together by a
    @next pointer (similar to #GSList). The offset of the @next
    field in each block is passed as third argument.
    Note that the exact release behaviour can be changed with the
    [`G_DEBUG=gc-friendly`][G_DEBUG] environment variable, also see
    [`G_SLICE`][G_SLICE] for related debugging options.

    If @mem_chain is %NULL, this function does nothing.
    """
    ...

def slice_get_config(ckey: SliceConfig) -> gint64:
    ...

def slice_get_config_state(ckey: SliceConfig, address: gint64, n_values: int) -> gint64:
    ...

def slice_set_config(ckey: SliceConfig, value: gint64) -> object:
    ...

def snprintf(string: str, n: int, format: str, *args: object) -> int:
    """
    A safer form of the standard sprintf() function. The output is guaranteed
    to not exceed @n characters (including the terminating nul character), so
    it is easy to ensure that a buffer overflow cannot occur.

    See also g_strdup_printf().

    In versions of GLib prior to 1.2.3, this function may return -1 if the
    output was truncated, and the truncated string may not be nul-terminated.
    In versions prior to 1.3.12, this function returns the length of the output
    string.

    The return value of g_snprintf() conforms to the snprintf()
    function as standardized in ISO C99. Note that this is different from
    traditional snprintf(), which returns the length of the output string.

    The format string may contain positional parameters, as specified in
    the Single Unix Specification.
    """
    ...

def spaced_primes_closest(num: int) -> int:
    """
    Gets the smallest prime number from a built-in array of primes which
    is larger than @num. This is used within GLib to calculate the optimum
    size of a #GHashTable.

    The built-in array of primes ranges from 11 to 13845163 such that
    each prime is approximately 1.5-2 times the previous prime.
    """
    ...

def spawn_async(working_directory: _T.Optional[str], argv: object, envp: _T.Optional[object], flags: SpawnFlags, child_setup: _T.Optional[SpawnChildSetupFunc], user_data: _T.Optional[object], child_pid: Pid) -> bool:
    """
    Executes a child program asynchronously.

    See g_spawn_async_with_pipes() for a full description; this function
    simply calls the g_spawn_async_with_pipes() without any pipes.

    You should call g_spawn_close_pid() on the returned child process
    reference when you don't need it any more.

    If you are writing a GTK application, and the program you are spawning is a
    graphical application too, then to ensure that the spawned program opens its
    windows on the right screen, you may want to use #GdkAppLaunchContext,
    #GAppLaunchContext, or set the %DISPLAY environment variable.

    Note that the returned @child_pid on Windows is a handle to the child
    process and not its identifier. Process handles and process identifiers
    are different concepts on Windows.
    """
    ...

def spawn_async_with_fds(working_directory: _T.Optional[str], argv: object, envp: _T.Optional[object], flags: SpawnFlags, child_setup: _T.Optional[SpawnChildSetupFunc], user_data: _T.Optional[object], child_pid: Pid, stdin_fd: int, stdout_fd: int, stderr_fd: int) -> bool:
    """
    Executes a child program asynchronously.

    Identical to g_spawn_async_with_pipes_and_fds() but with `n_fds` set to zero,
    so no FD assignments are used.
    """
    ...

def spawn_async_with_pipes(working_directory: _T.Optional[str], argv: object, envp: _T.Optional[object], flags: SpawnFlags, child_setup: _T.Optional[SpawnChildSetupFunc], user_data: _T.Optional[object], child_pid: Pid, standard_input: int, standard_output: int, standard_error: int) -> bool:
    """
    Identical to g_spawn_async_with_pipes_and_fds() but with `n_fds` set to zero,
    so no FD assignments are used.
    """
    ...

def spawn_async_with_pipes_and_fds(working_directory: _T.Optional[str], argv: object, envp: _T.Optional[object], flags: SpawnFlags, child_setup: _T.Optional[SpawnChildSetupFunc], user_data: _T.Optional[object], stdin_fd: int, stdout_fd: int, stderr_fd: int, source_fds: _T.Optional[object], target_fds: _T.Optional[object], n_fds: int, child_pid_out: Pid, stdin_pipe_out: int, stdout_pipe_out: int, stderr_pipe_out: int) -> bool:
    """
    Executes a child program asynchronously (your program will not
    block waiting for the child to exit).

    The child program is specified by the only argument that must be
    provided, @argv. @argv should be a %NULL-terminated array of strings,
    to be passed as the argument vector for the child. The first string
    in @argv is of course the name of the program to execute. By default,
    the name of the program must be a full path. If @flags contains the
    %G_SPAWN_SEARCH_PATH flag, the `PATH` environment variable is used to
    search for the executable. If @flags contains the
    %G_SPAWN_SEARCH_PATH_FROM_ENVP flag, the `PATH` variable from @envp
    is used to search for the executable. If both the
    %G_SPAWN_SEARCH_PATH and %G_SPAWN_SEARCH_PATH_FROM_ENVP flags are
    set, the `PATH` variable from @envp takes precedence over the
    environment variable.

    If the program name is not a full path and %G_SPAWN_SEARCH_PATH flag
    is not used, then the program will be run from the current directory
    (or @working_directory, if specified); this might be unexpected or even
    dangerous in some cases when the current directory is world-writable.

    On Windows, note that all the string or string vector arguments to
    this function and the other `g_spawn*()` functions are in UTF-8, the
    GLib file name encoding. Unicode characters that are not part of
    the system codepage passed in these arguments will be correctly
    available in the spawned program only if it uses wide character API
    to retrieve its command line. For C programs built with Microsoft's
    tools it is enough to make the program have a `wmain()` instead of
    `main()`. `wmain()` has a wide character argument vector as parameter.

    At least currently, mingw doesn't support `wmain()`, so if you use
    mingw to develop the spawned program, it should call
    g_win32_get_command_line() to get arguments in UTF-8.

    On Windows the low-level child process creation API `CreateProcess()`
    doesn't use argument vectors, but a command line. The C runtime
    library's `spawn*()` family of functions (which g_spawn_async_with_pipes()
    eventually calls) paste the argument vector elements together into
    a command line, and the C runtime startup code does a corresponding
    reconstruction of an argument vector from the command line, to be
    passed to `main()`. Complications arise when you have argument vector
    elements that contain spaces or double quotes. The `spawn*()` functions
    don't do any quoting or escaping, but on the other hand the startup
    code does do unquoting and unescaping in order to enable receiving
    arguments with embedded spaces or double quotes. To work around this
    asymmetry, g_spawn_async_with_pipes() will do quoting and escaping on
    argument vector elements that need it before calling the C runtime
    `spawn()` function.

    The returned @child_pid on Windows is a handle to the child
    process, not its identifier. Process handles and process
    identifiers are different concepts on Windows.

    @envp is a %NULL-terminated array of strings, where each string
    has the form `KEY=VALUE`. This will become the child's environment.
    If @envp is %NULL, the child inherits its parent's environment.

    @flags should be the bitwise OR of any flags you want to affect the
    function's behaviour. The %G_SPAWN_DO_NOT_REAP_CHILD means that the
    child will not automatically be reaped; you must use a child watch
    (g_child_watch_add()) to be notified about the death of the child process,
    otherwise it will stay around as a zombie process until this process exits.
    Eventually you must call g_spawn_close_pid() on the @child_pid, in order to
    free resources which may be associated with the child process. (On Unix,
    using a child watch is equivalent to calling waitpid() or handling
    the `SIGCHLD` signal manually. On Windows, calling g_spawn_close_pid()
    is equivalent to calling `CloseHandle()` on the process handle returned
    in @child_pid). See g_child_watch_add().

    Open UNIX file descriptors marked as `FD_CLOEXEC` will be automatically
    closed in the child process. %G_SPAWN_LEAVE_DESCRIPTORS_OPEN means that
    other open file descriptors will be inherited by the child; otherwise all
    descriptors except stdin/stdout/stderr will be closed before calling `exec()`
    in the child. %G_SPAWN_SEARCH_PATH means that @argv[0] need not be an
    absolute path, it will be looked for in the `PATH` environment
    variable. %G_SPAWN_SEARCH_PATH_FROM_ENVP means need not be an
    absolute path, it will be looked for in the `PATH` variable from
    @envp. If both %G_SPAWN_SEARCH_PATH and %G_SPAWN_SEARCH_PATH_FROM_ENVP
    are used, the value from @envp takes precedence over the environment.

    %G_SPAWN_STDOUT_TO_DEV_NULL means that the child's standard output
    will be discarded, instead of going to the same location as the parent's
    standard output. If you use this flag, @stdout_pipe_out must be %NULL.

    %G_SPAWN_STDERR_TO_DEV_NULL means that the child's standard error
    will be discarded, instead of going to the same location as the parent's
    standard error. If you use this flag, @stderr_pipe_out must be %NULL.

    %G_SPAWN_CHILD_INHERITS_STDIN means that the child will inherit the parent's
    standard input (by default, the child's standard input is attached to
    `/dev/null`). If you use this flag, @stdin_pipe_out must be %NULL.

    It is valid to pass the same FD in multiple parameters (e.g. you can pass
    a single FD for both @stdout_fd and @stderr_fd, and include it in
    @source_fds too).

    @source_fds and @target_fds allow zero or more FDs from this process to be
    remapped to different FDs in the spawned process. If @n_fds is greater than
    zero, @source_fds and @target_fds must both be non-%NULL and the same length.
    Each FD in @source_fds is remapped to the FD number at the same index in
    @target_fds. The source and target FD may be equal to simply propagate an FD
    to the spawned process. FD remappings are processed after standard FDs, so
    any target FDs which equal @stdin_fd, @stdout_fd or @stderr_fd will overwrite
    them in the spawned process.

    @source_fds is supported on Windows since 2.72.

    %G_SPAWN_FILE_AND_ARGV_ZERO means that the first element of @argv is
    the file to execute, while the remaining elements are the actual
    argument vector to pass to the file. Normally g_spawn_async_with_pipes()
    uses @argv[0] as the file to execute, and passes all of @argv to the child.

    @child_setup and @user_data are a function and user data. On POSIX
    platforms, the function is called in the child after GLib has
    performed all the setup it plans to perform (including creating
    pipes, closing file descriptors, etc.) but before calling `exec()`.
    That is, @child_setup is called just before calling `exec()` in the
    child. Obviously actions taken in this function will only affect
    the child, not the parent.

    On Windows, there is no separate `fork()` and `exec()` functionality.
    Child processes are created and run with a single API call,
    `CreateProcess()`. There is no sensible thing @child_setup
    could be used for on Windows so it is ignored and not called.

    If non-%NULL, @child_pid will on Unix be filled with the child's
    process ID. You can use the process ID to send signals to the child,
    or to use g_child_watch_add() (or `waitpid()`) if you specified the
    %G_SPAWN_DO_NOT_REAP_CHILD flag. On Windows, @child_pid will be
    filled with a handle to the child process only if you specified the
    %G_SPAWN_DO_NOT_REAP_CHILD flag. You can then access the child
    process using the Win32 API, for example wait for its termination
    with the `WaitFor*()` functions, or examine its exit code with
    `GetExitCodeProcess()`. You should close the handle with `CloseHandle()`
    or g_spawn_close_pid() when you no longer need it.

    If non-%NULL, the @stdin_pipe_out, @stdout_pipe_out, @stderr_pipe_out
    locations will be filled with file descriptors for writing to the child's
    standard input or reading from its standard output or standard error.
    The caller of g_spawn_async_with_pipes() must close these file descriptors
    when they are no longer in use. If these parameters are %NULL, the
    corresponding pipe won't be created.

    If @stdin_pipe_out is %NULL, the child's standard input is attached to
    `/dev/null` unless %G_SPAWN_CHILD_INHERITS_STDIN is set.

    If @stderr_pipe_out is NULL, the child's standard error goes to the same
    location as the parent's standard error unless %G_SPAWN_STDERR_TO_DEV_NULL
    is set.

    If @stdout_pipe_out is NULL, the child's standard output goes to the same
    location as the parent's standard output unless %G_SPAWN_STDOUT_TO_DEV_NULL
    is set.

    @error can be %NULL to ignore errors, or non-%NULL to report errors.
    If an error is set, the function returns %FALSE. Errors are reported
    even if they occur in the child (for example if the executable in
    `@argv[0]` is not found). Typically the `message` field of returned
    errors should be displayed to users. Possible errors are those from
    the %G_SPAWN_ERROR domain.

    If an error occurs, @child_pid, @stdin_pipe_out, @stdout_pipe_out,
    and @stderr_pipe_out will not be filled with valid values.

    If @child_pid is not %NULL and an error does not occur then the returned
    process reference must be closed using g_spawn_close_pid().

    On modern UNIX platforms, GLib can use an efficient process launching
    codepath driven internally by `posix_spawn()`. This has the advantage of
    avoiding the fork-time performance costs of cloning the parent process
    address space, and avoiding associated memory overcommit checks that are
    not relevant in the context of immediately executing a distinct process.
    This optimized codepath will be used provided that the following conditions
    are met:

    1. %G_SPAWN_DO_NOT_REAP_CHILD is set
    2. %G_SPAWN_LEAVE_DESCRIPTORS_OPEN is set
    3. %G_SPAWN_SEARCH_PATH_FROM_ENVP is not set
    4. @working_directory is %NULL
    5. @child_setup is %NULL
    6. The program is of a recognised binary format, or has a shebang.
       Otherwise, GLib will have to execute the program through the
       shell, which is not done using the optimized codepath.

    If you are writing a GTK application, and the program you are spawning is a
    graphical application too, then to ensure that the spawned program opens its
    windows on the right screen, you may want to use #GdkAppLaunchContext,
    #GAppLaunchContext, or set the `DISPLAY` environment variable.
    """
    ...

def spawn_check_exit_status(wait_status: int) -> bool:
    """
    An old name for g_spawn_check_wait_status(), deprecated because its
    name is misleading.

    Despite the name of the function, @wait_status must be the wait status
    as returned by g_spawn_sync(), g_subprocess_get_status(), `waitpid()`,
    etc. On Unix platforms, it is incorrect for it to be the exit status
    as passed to `exit()` or returned by g_subprocess_get_exit_status() or
    `WEXITSTATUS()`.
    """
    ...

def spawn_check_wait_status(wait_status: int) -> bool:
    """
    Set @error if @wait_status indicates the child exited abnormally
    (e.g. with a nonzero exit code, or via a fatal signal).

    The g_spawn_sync() and g_child_watch_add() family of APIs return the
    status of subprocesses encoded in a platform-specific way.
    On Unix, this is guaranteed to be in the same format waitpid() returns,
    and on Windows it is guaranteed to be the result of GetExitCodeProcess().

    Prior to the introduction of this function in GLib 2.34, interpreting
    @wait_status required use of platform-specific APIs, which is problematic
    for software using GLib as a cross-platform layer.

    Additionally, many programs simply want to determine whether or not
    the child exited successfully, and either propagate a #GError or
    print a message to standard error. In that common case, this function
    can be used. Note that the error message in @error will contain
    human-readable information about the wait status.

    The @domain and @code of @error have special semantics in the case
    where the process has an "exit code", as opposed to being killed by
    a signal. On Unix, this happens if WIFEXITED() would be true of
    @wait_status. On Windows, it is always the case.

    The special semantics are that the actual exit code will be the
    code set in @error, and the domain will be %G_SPAWN_EXIT_ERROR.
    This allows you to differentiate between different exit codes.

    If the process was terminated by some means other than an exit
    status (for example if it was killed by a signal), the domain will be
    %G_SPAWN_ERROR and the code will be %G_SPAWN_ERROR_FAILED.

    This function just offers convenience; you can of course also check
    the available platform via a macro such as %G_OS_UNIX, and use
    WIFEXITED() and WEXITSTATUS() on @wait_status directly. Do not attempt
    to scan or parse the error message string; it may be translated and/or
    change in future versions of GLib.

    Prior to version 2.70, g_spawn_check_exit_status() provides the same
    functionality, although under a misleading name.
    """
    ...

def spawn_close_pid(pid: Pid) -> object:
    """
    On some platforms, notably Windows, the #GPid type represents a resource
    which must be closed to prevent resource leaking. g_spawn_close_pid()
    is provided for this purpose. It should be used on all platforms, even
    though it doesn't do anything under UNIX.
    """
    ...

def spawn_command_line_async(command_line: str) -> bool:
    """
    A simple version of g_spawn_async() that parses a command line with
    g_shell_parse_argv() and passes it to g_spawn_async().

    Runs a command line in the background. Unlike g_spawn_async(), the
    %G_SPAWN_SEARCH_PATH flag is enabled, other flags are not. Note
    that %G_SPAWN_SEARCH_PATH can have security implications, so
    consider using g_spawn_async() directly if appropriate. Possible
    errors are those from g_shell_parse_argv() and g_spawn_async().

    The same concerns on Windows apply as for g_spawn_command_line_sync().
    """
    ...

def spawn_command_line_sync(command_line: str, standard_output: object, standard_error: object, wait_status: int) -> bool:
    """
    A simple version of g_spawn_sync() with little-used parameters
    removed, taking a command line instead of an argument vector.

    See g_spawn_sync() for full details.

    The @command_line argument will be parsed by g_shell_parse_argv().

    Unlike g_spawn_sync(), the %G_SPAWN_SEARCH_PATH flag is enabled.
    Note that %G_SPAWN_SEARCH_PATH can have security implications, so
    consider using g_spawn_sync() directly if appropriate.

    Possible errors are those from g_spawn_sync() and those
    from g_shell_parse_argv().

    If @wait_status is non-%NULL, the platform-specific status of
    the child is stored there; see the documentation of
    g_spawn_check_wait_status() for how to use and interpret this.
    On Unix platforms, note that it is usually not equal
    to the integer passed to `exit()` or returned from `main()`.

    On Windows, please note the implications of g_shell_parse_argv()
    parsing @command_line. Parsing is done according to Unix shell rules, not
    Windows command interpreter rules.
    Space is a separator, and backslashes are
    special. Thus you cannot simply pass a @command_line containing
    canonical Windows paths, like "c:\\program files\\app\\app.exe", as
    the backslashes will be eaten, and the space will act as a
    separator. You need to enclose such paths with single quotes, like
    "'c:\\program files\\app\\app.exe' 'e:\\folder\\argument.txt'".
    """
    ...

def spawn_error_quark() -> Quark:
    ...

def spawn_exit_error_quark() -> Quark:
    ...

def spawn_sync(working_directory: _T.Optional[str], argv: object, envp: _T.Optional[object], flags: SpawnFlags, child_setup: _T.Optional[SpawnChildSetupFunc], user_data: _T.Optional[object], standard_output: object, standard_error: object, wait_status: int) -> bool:
    """
    Executes a child synchronously (waits for the child to exit before returning).

    All output from the child is stored in @standard_output and @standard_error,
    if those parameters are non-%NULL. Note that you must set the
    %G_SPAWN_STDOUT_TO_DEV_NULL and %G_SPAWN_STDERR_TO_DEV_NULL flags when
    passing %NULL for @standard_output and @standard_error.

    If @wait_status is non-%NULL, the platform-specific status of
    the child is stored there; see the documentation of
    g_spawn_check_wait_status() for how to use and interpret this.
    On Unix platforms, note that it is usually not equal
    to the integer passed to `exit()` or returned from `main()`.

    Note that it is invalid to pass %G_SPAWN_DO_NOT_REAP_CHILD in
    @flags, and on POSIX platforms, the same restrictions as for
    g_child_watch_source_new() apply.

    If an error occurs, no data is returned in @standard_output,
    @standard_error, or @wait_status.

    This function calls g_spawn_async_with_pipes() internally; see that
    function for full details on the other parameters and details on
    how these functions work on Windows.
    """
    ...

def sprintf(string: str, format: str, *args: object) -> int:
    """
    An implementation of the standard sprintf() function which supports
    positional parameters, as specified in the Single Unix Specification.

    Note that it is usually better to use g_snprintf(), to avoid the
    risk of buffer overflow.

    `glib/gprintf.h` must be explicitly included in order to use this function.

    See also g_strdup_printf().
    """
    ...

def stpcpy(dest: str, src: str) -> str:
    """
    Copies a nul-terminated string into the dest buffer, include the
    trailing nul, and return a pointer to the trailing nul byte.
    This is useful for concatenating multiple strings together
    without having to repeatedly scan for the end.
    """
    ...

def str_equal(v1: object, v2: object) -> bool:
    """
    Compares two strings for byte-by-byte equality and returns %TRUE
    if they are equal. It can be passed to g_hash_table_new() as the
    @key_equal_func parameter, when using non-%NULL strings as keys in a
    #GHashTable.

    This function is typically used for hash table comparisons, but can be used
    for general purpose comparisons of non-%NULL strings. For a %NULL-safe string
    comparison function, see g_strcmp0().
    """
    ...

def str_has_prefix(str: str, prefix: str) -> bool:
    """
    Looks whether the string @str begins with @prefix.
    """
    ...

def str_has_suffix(str: str, suffix: str) -> bool:
    """
    Looks whether the string @str ends with @suffix.
    """
    ...

def str_hash(v: object) -> int:
    """
    Converts a string to a hash value.

    This function implements the widely used "djb" hash apparently
    posted by Daniel Bernstein to comp.lang.c some time ago.  The 32
    bit unsigned hash value starts at 5381 and for each byte 'c' in
    the string, is updated: `hash = hash * 33 + c`. This function
    uses the signed value of each byte.

    It can be passed to g_hash_table_new() as the @hash_func parameter,
    when using non-%NULL strings as keys in a #GHashTable.

    Note that this function may not be a perfect fit for all use cases.
    For example, it produces some hash collisions with strings as short
    as 2.
    """
    ...

def str_is_ascii(str: str) -> bool:
    """
    Determines if a string is pure ASCII. A string is pure ASCII if it
    contains no bytes with the high bit set.
    """
    ...

def str_match_string(search_term: str, potential_hit: str, accept_alternates: bool) -> bool:
    """
    Checks if a search conducted for @search_term should match
    @potential_hit.

    This function calls g_str_tokenize_and_fold() on both
    @search_term and @potential_hit.  ASCII alternates are never taken
    for @search_term but will be taken for @potential_hit according to
    the value of @accept_alternates.

    A hit occurs when each folded token in @search_term is a prefix of a
    folded token from @potential_hit.

    Depending on how you're performing the search, it will typically be
    faster to call g_str_tokenize_and_fold() on each string in
    your corpus and build an index on the returned folded tokens, then
    call g_str_tokenize_and_fold() on the search term and
    perform lookups into that index.

    As some examples, searching for ‘fred’ would match the potential hit
    ‘Smith, Fred’ and also ‘Frédéric’.  Searching for ‘Fréd’ would match
    ‘Frédéric’ but not ‘Frederic’ (due to the one-directional nature of
    accent matching).  Searching ‘fo’ would match ‘Foo’ and ‘Bar Foo
    Baz’, but not ‘SFO’ (because no word has ‘fo’ as a prefix).
    """
    ...

def str_to_ascii(str: str, from_locale: _T.Optional[str]) -> str:
    """
    Transliterate @str to plain ASCII.

    For best results, @str should be in composed normalised form.

    This function performs a reasonably good set of character
    replacements.  The particular set of replacements that is done may
    change by version or even by runtime environment.

    If the source language of @str is known, it can used to improve the
    accuracy of the translation by passing it as @from_locale.  It should
    be a valid POSIX locale string (of the form
    `language[_territory][.codeset][@modifier]`).

    If @from_locale is %NULL then the current locale is used.

    If you want to do translation for no specific locale, and you want it
    to be done independently of the currently locale, specify `"C"` for
    @from_locale.
    """
    ...

def str_tokenize_and_fold(string: str, translit_locale: _T.Optional[str], ascii_alternates: object) -> object:
    """
    Tokenises @string and performs folding on each token.

    A token is a non-empty sequence of alphanumeric characters in the
    source string, separated by non-alphanumeric characters.  An
    "alphanumeric" character for this purpose is one that matches
    g_unichar_isalnum() or g_unichar_ismark().

    Each token is then (Unicode) normalised and case-folded.  If
    @ascii_alternates is non-%NULL and some of the returned tokens
    contain non-ASCII characters, ASCII alternatives will be generated.

    The number of ASCII alternatives that are generated and the method
    for doing so is unspecified, but @translit_locale (if specified) may
    improve the transliteration if the language of the source string is
    known.
    """
    ...

def strcanon(string: str, valid_chars: str, substitutor: str) -> str:
    """
    For each character in @string, if the character is not in @valid_chars,
    replaces the character with @substitutor.

    Modifies @string in place, and return @string itself, not a copy. The
    return value is to allow nesting such as:

    |[<!-- language="C" -->
      g_ascii_strup (g_strcanon (str, "abc", '?'))
    ]|

    In order to modify a copy, you may use g_strdup():

    |[<!-- language="C" -->
      reformatted = g_strcanon (g_strdup (const_str), "abc", '?');
      ...
      g_free (reformatted);
    ]|
    """
    ...

def strcasecmp(s1: str, s2: str) -> int:
    """
    A case-insensitive string comparison, corresponding to the standard
    strcasecmp() function on platforms which support it.
    """
    ...

def strchomp(string: str) -> str:
    """
    Removes trailing whitespace from a string.

    This function doesn't allocate or reallocate any memory;
    it modifies @string in place. Therefore, it cannot be used
    on statically allocated strings.

    The pointer to @string is returned to allow the nesting of functions.

    Also see g_strchug() and g_strstrip().
    """
    ...

def strchug(string: str) -> str:
    """
    Removes leading whitespace from a string, by moving the rest
    of the characters forward.

    This function doesn't allocate or reallocate any memory;
    it modifies @string in place. Therefore, it cannot be used on
    statically allocated strings.

    The pointer to @string is returned to allow the nesting of functions.

    Also see g_strchomp() and g_strstrip().
    """
    ...

def strcmp0(str1: _T.Optional[str], str2: _T.Optional[str]) -> int:
    """
    Compares @str1 and @str2 like strcmp(). Handles %NULL
    gracefully by sorting it before non-%NULL strings.
    Comparing two %NULL pointers returns 0.
    """
    ...

def strcompress(source: str) -> str:
    """
    Replaces all escaped characters with their one byte equivalent.

    This function does the reverse conversion of g_strescape().
    """
    ...

def strconcat(string1: str, *args: object) -> str:
    """
    Concatenates all of the given strings into one long string. The
    returned string should be freed with g_free() when no longer needed.

    The variable argument list must end with %NULL. If you forget the %NULL,
    g_strconcat() will start appending random memory junk to your string.

    Note that this function is usually not the right function to use to
    assemble a translated message from pieces, since proper translation
    often requires the pieces to be reordered.
    """
    ...

def strdelimit(string: str, delimiters: _T.Optional[str], new_delimiter: str) -> str:
    """
    Converts any delimiter characters in @string to @new_delimiter.

    Any characters in @string which are found in @delimiters are
    changed to the @new_delimiter character. Modifies @string in place,
    and returns @string itself, not a copy.

    The return value is to allow nesting such as:

    |[<!-- language="C" -->
      g_ascii_strup (g_strdelimit (str, "abc", '?'))
    ]|

    In order to modify a copy, you may use g_strdup():

    |[<!-- language="C" -->
      reformatted = g_strdelimit (g_strdup (const_str), "abc", '?');
      ...
      g_free (reformatted);
    ]|
    """
    ...

def strdown(string: str) -> str:
    """
    Converts a string to lower case.
    """
    ...

def strdup(str: _T.Optional[str]) -> str:
    """
    Duplicates a string. If @str is %NULL it returns %NULL.
    The returned string should be freed with g_free()
    when no longer needed.
    """
    ...

def strdup_printf(format: str, *args: object) -> str:
    """
    Similar to the standard C sprintf() function but safer, since it
    calculates the maximum space required and allocates memory to hold
    the result. The returned string should be freed with g_free() when no
    longer needed.

    The returned string is guaranteed to be non-NULL, unless @format
    contains `%lc` or `%ls` conversions, which can fail if no multibyte
    representation is available for the given character.
    """
    ...

def strdup_vprintf(format: str, args: list) -> str:
    """
    Similar to the standard C vsprintf() function but safer, since it
    calculates the maximum space required and allocates memory to hold
    the result. The returned string should be freed with g_free() when
    no longer needed.

    The returned string is guaranteed to be non-NULL, unless @format
    contains `%lc` or `%ls` conversions, which can fail if no multibyte
    representation is available for the given character.

    See also g_vasprintf(), which offers the same functionality, but
    additionally returns the length of the allocated string.
    """
    ...

def strdupv(str_array: _T.Optional[str]) -> object:
    """
    Copies %NULL-terminated array of strings. The copy is a deep copy;
    the new array should be freed by first freeing each string, then
    the array itself. g_strfreev() does this for you. If called
    on a %NULL value, g_strdupv() simply returns %NULL.
    """
    ...

def strerror(errnum: int) -> str:
    """
    Returns a string corresponding to the given error code, e.g. "no
    such process". Unlike strerror(), this always returns a string in
    UTF-8 encoding, and the pointer is guaranteed to remain valid for
    the lifetime of the process.

    Note that the string may be translated according to the current locale.

    The value of %errno will not be changed by this function. However, it may
    be changed by intermediate function calls, so you should save its value
    as soon as the call returns:
    |[
      int saved_errno;

      ret = read (blah);
      saved_errno = errno;

      g_strerror (saved_errno);
    ]|
    """
    ...

def strescape(source: str, exceptions: _T.Optional[str]) -> str:
    """
    Escapes the special characters '\b', '\f', '\n', '\r', '\t', '\v', '\'
    and '"' in the string @source by inserting a '\' before
    them. Additionally all characters in the range 0x01-0x1F (everything
    below SPACE) and in the range 0x7F-0xFF (all non-ASCII chars) are
    replaced with a '\' followed by their octal representation.
    Characters supplied in @exceptions are not escaped.

    g_strcompress() does the reverse conversion.
    """
    ...

def strfreev(str_array: _T.Optional[str]) -> object:
    """
    Frees a %NULL-terminated array of strings, as well as each
    string it contains.

    If @str_array is %NULL, this function simply returns.
    """
    ...

def strip_context(msgid: str, msgval: str) -> str:
    """
    An auxiliary function for gettext() support (see Q_()).
    """
    ...

def strjoin(separator: _T.Optional[str], *args: object) -> str:
    """
    Joins a number of strings together to form one long string, with the
    optional @separator inserted between each of them. The returned string
    should be freed with g_free().
    """
    ...

def strjoinv(separator: _T.Optional[str], str_array: str) -> str:
    """
    Joins a number of strings together to form one long string, with the
    optional @separator inserted between each of them. The returned string
    should be freed with g_free().

    If @str_array has no items, the return value will be an
    empty string. If @str_array contains a single item, @separator will not
    appear in the resulting string.
    """
    ...

def strlcat(dest: str, src: str, dest_size: int) -> int:
    """
    Portability wrapper that calls strlcat() on systems which have it,
    and emulates it otherwise. Appends nul-terminated @src string to @dest,
    guaranteeing nul-termination for @dest. The total size of @dest won't
    exceed @dest_size.

    At most @dest_size - 1 characters will be copied. Unlike strncat(),
    @dest_size is the full size of dest, not the space left over. This
    function does not allocate memory. It always nul-terminates (unless
    @dest_size == 0 or there were no nul characters in the @dest_size
    characters of dest to start with).

    Caveat: this is supposedly a more secure alternative to strcat() or
    strncat(), but for real security g_strconcat() is harder to mess up.
    """
    ...

def strlcpy(dest: str, src: str, dest_size: int) -> int:
    """
    Portability wrapper that calls strlcpy() on systems which have it,
    and emulates strlcpy() otherwise. Copies @src to @dest; @dest is
    guaranteed to be nul-terminated; @src must be nul-terminated;
    @dest_size is the buffer size, not the number of bytes to copy.

    At most @dest_size - 1 characters will be copied. Always nul-terminates
    (unless @dest_size is 0). This function does not allocate memory. Unlike
    strncpy(), this function doesn't pad @dest (so it's often faster). It
    returns the size of the attempted result, strlen (src), so if
    @retval >= @dest_size, truncation occurred.

    Caveat: strlcpy() is supposedly more secure than strcpy() or strncpy(),
    but if you really want to avoid screwups, g_strdup() is an even better
    idea.
    """
    ...

def strncasecmp(s1: str, s2: str, n: int) -> int:
    """
    A case-insensitive string comparison, corresponding to the standard
    strncasecmp() function on platforms which support it. It is similar
    to g_strcasecmp() except it only compares the first @n characters of
    the strings.
    """
    ...

def strndup(str: str, n: int) -> str:
    """
    Duplicates the first @n bytes of a string, returning a newly-allocated
    buffer @n + 1 bytes long which will always be nul-terminated. If @str
    is less than @n bytes long the buffer is padded with nuls. If @str is
    %NULL it returns %NULL. The returned value should be freed when no longer
    needed.

    To copy a number of characters from a UTF-8 encoded string,
    use g_utf8_strncpy() instead.
    """
    ...

def strnfill(length: int, fill_char: str) -> str:
    """
    Creates a new string @length bytes long filled with @fill_char.
    The returned string should be freed when no longer needed.
    """
    ...

def strreverse(string: str) -> str:
    """
    Reverses all of the bytes in a string. For example,
    `g_strreverse ("abcdef")` will result in "fedcba".

    Note that g_strreverse() doesn't work on UTF-8 strings
    containing multibyte characters. For that purpose, use
    g_utf8_strreverse().
    """
    ...

def strrstr(haystack: str, needle: str) -> str:
    """
    Searches the string @haystack for the last occurrence
    of the string @needle.
    """
    ...

def strrstr_len(haystack: str, haystack_len: int, needle: str) -> str:
    """
    Searches the string @haystack for the last occurrence
    of the string @needle, limiting the length of the search
    to @haystack_len.
    """
    ...

def strsignal(signum: int) -> str:
    """
    Returns a string describing the given signal, e.g. "Segmentation fault".
    You should use this function in preference to strsignal(), because it
    returns a string in UTF-8 encoding, and since not all platforms support
    the strsignal() function.
    """
    ...

def strsplit(string: str, delimiter: str, max_tokens: int) -> object:
    """
    Splits a string into a maximum of @max_tokens pieces, using the given
    @delimiter. If @max_tokens is reached, the remainder of @string is
    appended to the last token.

    As an example, the result of g_strsplit (":a:bc::d:", ":", -1) is a
    %NULL-terminated vector containing the six strings "", "a", "bc", "", "d"
    and "".

    As a special case, the result of splitting the empty string "" is an empty
    vector, not a vector containing a single string. The reason for this
    special case is that being able to represent an empty vector is typically
    more useful than consistent handling of empty elements. If you do need
    to represent empty elements, you'll need to check for the empty string
    before calling g_strsplit().
    """
    ...

def strsplit_set(string: str, delimiters: str, max_tokens: int) -> object:
    """
    Splits @string into a number of tokens not containing any of the characters
    in @delimiter. A token is the (possibly empty) longest string that does not
    contain any of the characters in @delimiters. If @max_tokens is reached, the
    remainder is appended to the last token.

    For example the result of g_strsplit_set ("abc:def/ghi", ":/", -1) is a
    %NULL-terminated vector containing the three strings "abc", "def",
    and "ghi".

    The result of g_strsplit_set (":def/ghi:", ":/", -1) is a %NULL-terminated
    vector containing the four strings "", "def", "ghi", and "".

    As a special case, the result of splitting the empty string "" is an empty
    vector, not a vector containing a single string. The reason for this
    special case is that being able to represent an empty vector is typically
    more useful than consistent handling of empty elements. If you do need
    to represent empty elements, you'll need to check for the empty string
    before calling g_strsplit_set().

    Note that this function works on bytes not characters, so it can't be used
    to delimit UTF-8 strings for anything but ASCII characters.
    """
    ...

def strstr_len(haystack: str, haystack_len: int, needle: str) -> str:
    """
    Searches the string @haystack for the first occurrence
    of the string @needle, limiting the length of the search
    to @haystack_len.
    """
    ...

def strtod(nptr: str, endptr: str) -> float:
    """
    Converts a string to a #gdouble value.
    It calls the standard strtod() function to handle the conversion, but
    if the string is not completely converted it attempts the conversion
    again with g_ascii_strtod(), and returns the best match.

    This function should seldom be used. The normal situation when reading
    numbers not for human consumption is to use g_ascii_strtod(). Only when
    you know that you must expect both locale formatted and C formatted numbers
    should you use this. Make sure that you don't pass strings such as comma
    separated lists of values, since the commas may be interpreted as a decimal
    point in some locales, causing unexpected results.
    """
    ...

def strup(string: str) -> str:
    """
    Converts a string to upper case.
    """
    ...

def strv_contains(strv: str, str: str) -> bool:
    """
    Checks if @strv contains @str. @strv must not be %NULL.
    """
    ...

def strv_equal(strv1: str, strv2: str) -> bool:
    """
    Checks if @strv1 and @strv2 contain exactly the same elements in exactly the
    same order. Elements are compared using g_str_equal(). To match independently
    of order, sort the arrays first (using g_qsort_with_data() or similar).

    Two empty arrays are considered equal. Neither @strv1 not @strv2 may be
    %NULL.
    """
    ...

def strv_get_type() -> GObject.Type:
    ...

def strv_length(str_array: str) -> int:
    """
    Returns the length of the given %NULL-terminated
    string array @str_array. @str_array must not be %NULL.
    """
    ...

def test_add_data_func(testpath: str, test_data: _T.Optional[object], test_func: TestDataFunc) -> object:
    """
    Create a new test case, similar to g_test_create_case(). However
    the test is assumed to use no fixture, and test suites are automatically
    created on the fly and added to the root fixture, based on the
    slash-separated portions of @testpath. The @test_data argument
    will be passed as first argument to @test_func.

    If @testpath includes the component "subprocess" anywhere in it,
    the test will be skipped by default, and only run if explicitly
    required via the `-p` command-line option or g_test_trap_subprocess().

    No component of @testpath may start with a dot (`.`) if the
    %G_TEST_OPTION_ISOLATE_DIRS option is being used; and it is recommended to
    do so even if it isn’t.
    """
    ...

def test_add_data_func_full(testpath: str, test_data: _T.Optional[object], test_func: TestDataFunc, data_free_func: DestroyNotify) -> object:
    """
    Create a new test case, as with g_test_add_data_func(), but freeing
    @test_data after the test run is complete.
    """
    ...

def test_add_func(testpath: str, test_func: TestFunc) -> object:
    """
    Create a new test case, similar to g_test_create_case(). However
    the test is assumed to use no fixture, and test suites are automatically
    created on the fly and added to the root fixture, based on the
    slash-separated portions of @testpath.

    If @testpath includes the component "subprocess" anywhere in it,
    the test will be skipped by default, and only run if explicitly
    required via the `-p` command-line option or g_test_trap_subprocess().

    No component of @testpath may start with a dot (`.`) if the
    %G_TEST_OPTION_ISOLATE_DIRS option is being used; and it is recommended to
    do so even if it isn’t.
    """
    ...

def test_add_vtable(testpath: str, data_size: int, test_data: _T.Optional[object], data_setup: TestFixtureFunc, data_test: TestFixtureFunc, data_teardown: TestFixtureFunc) -> object:
    ...

def test_assert_expected_messages_internal(domain: str, file: str, line: int, func: str) -> object:
    ...

def test_bug(bug_uri_snippet: str) -> object:
    """
    This function adds a message to test reports that
    associates a bug URI with a test case.

    Bug URIs are constructed from a base URI set with g_test_bug_base()
    and @bug_uri_snippet. If g_test_bug_base() has not been called, it is
    assumed to be the empty string, so a full URI can be provided to
    g_test_bug() instead.

    Since GLib 2.70, the base URI is not prepended to @bug_uri_snippet if it
    is already a valid URI.
    """
    ...

def test_bug_base(uri_pattern: str) -> object:
    """
    Specify the base URI for bug reports.

    The base URI is used to construct bug report messages for
    g_test_message() when g_test_bug() is called.
    Calling this function outside of a test case sets the
    default base URI for all test cases. Calling it from within
    a test case changes the base URI for the scope of the test
    case only.
    Bug URIs are constructed by appending a bug specific URI
    portion to @uri_pattern, or by replacing the special string
    `%s` within @uri_pattern if that is present.

    If g_test_bug_base() is not called, bug URIs are formed solely
    from the value provided by g_test_bug().
    """
    ...

def test_build_filename(file_type: TestFileType, first_path: str, *args: object) -> str:
    """
    Creates the pathname to a data file that is required for a test.

    This function is conceptually similar to g_build_filename() except
    that the first argument has been replaced with a #GTestFileType
    argument.

    The data file should either have been distributed with the module
    containing the test (%G_TEST_DIST) or built as part of the build
    system of that module (%G_TEST_BUILT).

    In order for this function to work in srcdir != builddir situations,
    the G_TEST_SRCDIR and G_TEST_BUILDDIR environment variables need to
    have been defined.  As of 2.38, this is done by the glib.mk
    included in GLib.  Please ensure that your copy is up to date before
    using this function.

    In case neither variable is set, this function will fall back to
    using the dirname portion of argv[0], possibly removing ".libs".
    This allows for casual running of tests directly from the commandline
    in the srcdir == builddir case and should also support running of
    installed tests, assuming the data files have been installed in the
    same relative path as the test binary.
    """
    ...

def test_create_case(test_name: str, data_size: int, test_data: _T.Optional[object], data_setup: TestFixtureFunc, data_test: TestFixtureFunc, data_teardown: TestFixtureFunc) -> TestCase:
    """
    Create a new #GTestCase, named @test_name.

    This API is fairly low level, and calling g_test_add() or g_test_add_func()
    is preferable.

    When this test is executed, a fixture structure of size @data_size
    will be automatically allocated and filled with zeros. Then @data_setup is
    called to initialize the fixture. After fixture setup, the actual test
    function @data_test is called. Once the test run completes, the
    fixture structure is torn down by calling @data_teardown and
    after that the memory is automatically released by the test framework.

    Splitting up a test run into fixture setup, test function and
    fixture teardown is most useful if the same fixture type is used for
    multiple tests. In this cases, g_test_create_case() will be
    called with the same type of fixture (the @data_size argument), but varying
    @test_name and @data_test arguments.
    """
    ...

def test_create_suite(suite_name: str) -> TestSuite:
    """
    Create a new test suite with the name @suite_name.
    """
    ...

def test_expect_message(log_domain: _T.Optional[str], log_level: LogLevelFlags, pattern: str) -> object:
    """
    Indicates that a message with the given @log_domain and @log_level,
    with text matching @pattern, is expected to be logged. When this
    message is logged, it will not be printed, and the test case will
    not abort.

    This API may only be used with the old logging API (g_log() without
    %G_LOG_USE_STRUCTURED defined). It will not work with the structured logging
    API. See [Testing for Messages][testing-for-messages].

    Use g_test_assert_expected_messages() to assert that all
    previously-expected messages have been seen and suppressed.

    You can call this multiple times in a row, if multiple messages are
    expected as a result of a single call. (The messages must appear in
    the same order as the calls to g_test_expect_message().)

    For example:

    |[<!-- language="C" -->
      // g_main_context_push_thread_default() should fail if the
      // context is already owned by another thread.
      g_test_expect_message (G_LOG_DOMAIN,
                             G_LOG_LEVEL_CRITICAL,
                             "assertion*acquired_context*failed");
      g_main_context_push_thread_default (bad_context);
      g_test_assert_expected_messages ();
    ]|

    Note that you cannot use this to test g_error() messages, since
    g_error() intentionally never returns even if the program doesn't
    abort; use g_test_trap_subprocess() in this case.

    If messages at %G_LOG_LEVEL_DEBUG are emitted, but not explicitly
    expected via g_test_expect_message() then they will be ignored.
    """
    ...

def test_fail() -> object:
    """
    Indicates that a test failed. This function can be called
    multiple times from the same test. You can use this function
    if your test failed in a recoverable way.

    Do not use this function if the failure of a test could cause
    other tests to malfunction.

    Calling this function will not stop the test from running, you
    need to return from the test function yourself. So you can
    produce additional diagnostic messages or even continue running
    the test.

    If not called from inside a test, this function does nothing.

    Note that unlike g_test_skip() and g_test_incomplete(), this
    function does not log a message alongside the test failure.
    If details of the test failure are available, either log them with
    g_test_message() before g_test_fail(), or use g_test_fail_printf()
    instead.
    """
    ...

def test_fail_printf(format: str, *args: object) -> object:
    """
    Equivalent to g_test_fail(), but also record a message like
    g_test_skip_printf().
    """
    ...

def test_failed() -> bool:
    """
    Returns whether a test has already failed. This will
    be the case when g_test_fail(), g_test_incomplete()
    or g_test_skip() have been called, but also if an
    assertion has failed.

    This can be useful to return early from a test if
    continuing after a failed assertion might be harmful.

    The return value of this function is only meaningful
    if it is called from inside a test function.
    """
    ...

def test_get_dir(file_type: TestFileType) -> str:
    """
    Gets the pathname of the directory containing test files of the type
    specified by @file_type.

    This is approximately the same as calling g_test_build_filename("."),
    but you don't need to free the return value.
    """
    ...

def test_get_filename(file_type: TestFileType, first_path: str, *args: object) -> str:
    """
    Gets the pathname to a data file that is required for a test.

    This is the same as g_test_build_filename() with two differences.
    The first difference is that you must only use this function from within
    a testcase function.  The second difference is that you need not free
    the return value — it will be automatically freed when the testcase
    finishes running.

    It is safe to use this function from a thread inside of a testcase
    but you must ensure that all such uses occur before the main testcase
    function returns (ie: it is best to ensure that all threads have been
    joined).
    """
    ...

def test_get_path() -> str:
    """
    Gets the test path for the test currently being run.

    In essence, it will be the same string passed as the first argument to
    e.g. g_test_add() when the test was added.

    This function returns a valid string only within a test function.
    """
    ...

def test_get_root() -> TestSuite:
    """
    Get the toplevel test suite for the test path API.
    """
    ...

def test_incomplete(msg: _T.Optional[str]) -> object:
    """
    Indicates that a test failed because of some incomplete
    functionality. This function can be called multiple times
    from the same test.

    Calling this function will not stop the test from running, you
    need to return from the test function yourself. So you can
    produce additional diagnostic messages or even continue running
    the test.

    If not called from inside a test, this function does nothing.
    """
    ...

def test_incomplete_printf(format: str, *args: object) -> object:
    """
    Equivalent to g_test_incomplete(), but the explanation is formatted
    as if by g_strdup_printf().
    """
    ...

def test_init(argc: int, argv: str, *args: object) -> object:
    """
    Initialize the GLib testing framework, e.g. by seeding the
    test random number generator, the name for g_get_prgname()
    and parsing test related command line args.

    So far, the following arguments are understood:

    - `-l`: List test cases available in a test executable.
    - `--seed=SEED`: Provide a random seed to reproduce test
      runs using random numbers.
    - `--verbose`: Run tests verbosely.
    - `-q`, `--quiet`: Run tests quietly.
    - `-p PATH`: Execute all tests matching the given path.
    - `-s PATH`: Skip all tests matching the given path.
      This can also be used to force a test to run that would otherwise
      be skipped (ie, a test whose name contains "/subprocess").
    - `-m {perf|slow|thorough|quick|undefined|no-undefined}`: Execute tests according to these test modes:

      `perf`: Performance tests, may take long and report results (off by default).

      `slow`, `thorough`: Slow and thorough tests, may take quite long and maximize coverage
      (off by default).

      `quick`: Quick tests, should run really quickly and give good coverage (the default).

      `undefined`: Tests for undefined behaviour, may provoke programming errors
      under g_test_trap_subprocess() or g_test_expect_message() to check
      that appropriate assertions or warnings are given (the default).

      `no-undefined`: Avoid tests for undefined behaviour

    - `--debug-log`: Debug test logging output.

    Options which can be passed to @... are:

     - `"no_g_set_prgname"`: Causes g_test_init() to not call g_set_prgname().
     - %G_TEST_OPTION_ISOLATE_DIRS: Creates a unique temporary directory for each
       unit test and uses g_set_user_dirs() to set XDG directories to point into
       that temporary directory for the duration of the unit test. See the
       documentation for %G_TEST_OPTION_ISOLATE_DIRS.

    Since 2.58, if tests are compiled with `G_DISABLE_ASSERT` defined,
    g_test_init() will print an error and exit. This is to prevent no-op tests
    from being executed, as g_assert() is commonly (erroneously) used in unit
    tests, and is a no-op when compiled with `G_DISABLE_ASSERT`. Ensure your
    tests are compiled without `G_DISABLE_ASSERT` defined.
    """
    ...

def test_log_set_fatal_handler(log_func: TestLogFatalFunc, user_data: _T.Optional[object]) -> object:
    """
    Installs a non-error fatal log handler which can be
    used to decide whether log messages which are counted
    as fatal abort the program.

    The use case here is that you are running a test case
    that depends on particular libraries or circumstances
    and cannot prevent certain known critical or warning
    messages. So you install a handler that compares the
    domain and message to precisely not abort in such a case.

    Note that the handler is reset at the beginning of
    any test case, so you have to set it inside each test
    function which needs the special behavior.

    This handler has no effect on g_error messages.

    This handler also has no effect on structured log messages (using
    g_log_structured() or g_log_structured_array()). To change the fatal
    behaviour for specific log messages, programs must install a custom log
    writer function using g_log_set_writer_func().See
    [Using Structured Logging][using-structured-logging].
    """
    ...

def test_log_type_name(log_type: TestLogType) -> str:
    ...

def test_maximized_result(maximized_quantity: float, format: str, *args: object) -> object:
    """
    Report the result of a performance or measurement test.
    The test should generally strive to maximize the reported
    quantities (larger values are better than smaller ones),
    this and @maximized_quantity can determine sorting
    order for test result reports.
    """
    ...

def test_message(format: str, *args: object) -> object:
    """
    Add a message to the test report.
    """
    ...

def test_minimized_result(minimized_quantity: float, format: str, *args: object) -> object:
    """
    Report the result of a performance or measurement test.
    The test should generally strive to minimize the reported
    quantities (smaller values are better than larger ones),
    this and @minimized_quantity can determine sorting
    order for test result reports.
    """
    ...

def test_queue_destroy(destroy_func: DestroyNotify, destroy_data: _T.Optional[object]) -> object:
    """
    This function enqueus a callback @destroy_func to be executed
    during the next test case teardown phase. This is most useful
    to auto destruct allocated test resources at the end of a test run.
    Resources are released in reverse queue order, that means enqueueing
    callback A before callback B will cause B() to be called before
    A() during teardown.
    """
    ...

def test_queue_free(gfree_pointer: _T.Optional[object]) -> object:
    """
    Enqueue a pointer to be released with g_free() during the next
    teardown phase. This is equivalent to calling g_test_queue_destroy()
    with a destroy callback of g_free().
    """
    ...

def test_rand_double() -> float:
    """
    Get a reproducible random floating point number,
    see g_test_rand_int() for details on test case random numbers.
    """
    ...

def test_rand_double_range(range_start: float, range_end: float) -> float:
    """
    Get a reproducible random floating pointer number out of a specified range,
    see g_test_rand_int() for details on test case random numbers.
    """
    ...

def test_rand_int() -> int:
    """
    Get a reproducible random integer number.

    The random numbers generated by the g_test_rand_*() family of functions
    change with every new test program start, unless the --seed option is
    given when starting test programs.

    For individual test cases however, the random number generator is
    reseeded, to avoid dependencies between tests and to make --seed
    effective for all test cases.
    """
    ...

def test_rand_int_range(begin: int, end: int) -> int:
    """
    Get a reproducible random integer number out of a specified range,
    see g_test_rand_int() for details on test case random numbers.
    """
    ...

def test_run() -> int:
    """
    Runs all tests under the toplevel suite which can be retrieved
    with g_test_get_root(). Similar to g_test_run_suite(), the test
    cases to be run are filtered according to test path arguments
    (`-p testpath` and `-s testpath`) as parsed by g_test_init().
    g_test_run_suite() or g_test_run() may only be called once in a
    program.

    In general, the tests and sub-suites within each suite are run in
    the order in which they are defined. However, note that prior to
    GLib 2.36, there was a bug in the `g_test_add_*`
    functions which caused them to create multiple suites with the same
    name, meaning that if you created tests "/foo/simple",
    "/bar/simple", and "/foo/using-bar" in that order, they would get
    run in that order (since g_test_run() would run the first "/foo"
    suite, then the "/bar" suite, then the second "/foo" suite). As of
    2.36, this bug is fixed, and adding the tests in that order would
    result in a running order of "/foo/simple", "/foo/using-bar",
    "/bar/simple". If this new ordering is sub-optimal (because it puts
    more-complicated tests before simpler ones, making it harder to
    figure out exactly what has failed), you can fix it by changing the
    test paths to group tests by suite in a way that will result in the
    desired running order. Eg, "/simple/foo", "/simple/bar",
    "/complex/foo-using-bar".

    However, you should never make the actual result of a test depend
    on the order that tests are run in. If you need to ensure that some
    particular code runs before or after a given test case, use
    g_test_add(), which lets you specify setup and teardown functions.

    If all tests are skipped or marked as incomplete (expected failures),
    this function will return 0 if producing TAP output, or 77 (treated
    as "skip test" by Automake) otherwise.
    """
    ...

def test_run_suite(suite: TestSuite) -> int:
    """
    Execute the tests within @suite and all nested #GTestSuites.
    The test suites to be executed are filtered according to
    test path arguments (`-p testpath` and `-s testpath`) as parsed by
    g_test_init(). See the g_test_run() documentation for more
    information on the order that tests are run in.

    g_test_run_suite() or g_test_run() may only be called once
    in a program.
    """
    ...

def test_set_nonfatal_assertions() -> object:
    """
    Changes the behaviour of the various `g_assert_*()` macros,
    g_test_assert_expected_messages() and the various
    `g_test_trap_assert_*()` macros to not abort to program, but instead
    call g_test_fail() and continue. (This also changes the behavior of
    g_test_fail() so that it will not cause the test program to abort
    after completing the failed test.)

    Note that the g_assert_not_reached() and g_assert() macros are not
    affected by this.

    This function can only be called after g_test_init().
    """
    ...

def test_skip(msg: _T.Optional[str]) -> object:
    """
    Indicates that a test was skipped.

    Calling this function will not stop the test from running, you
    need to return from the test function yourself. So you can
    produce additional diagnostic messages or even continue running
    the test.

    If not called from inside a test, this function does nothing.
    """
    ...

def test_skip_printf(format: str, *args: object) -> object:
    """
    Equivalent to g_test_skip(), but the explanation is formatted
    as if by g_strdup_printf().
    """
    ...

def test_subprocess() -> bool:
    """
    Returns %TRUE (after g_test_init() has been called) if the test
    program is running under g_test_trap_subprocess().
    """
    ...

def test_summary(summary: str) -> object:
    """
    Set the summary for a test, which describes what the test checks, and how it
    goes about checking it. This may be included in test report output, and is
    useful documentation for anyone reading the source code or modifying a test
    in future. It must be a single line.

    This should be called at the top of a test function.

    For example:
    |[<!-- language="C" -->
    static void
    test_array_sort (void)
    {
      g_test_summary ("Test my_array_sort() sorts the array correctly and stably, "
                      "including testing zero length and one-element arrays.");

      …
    }
    ]|
    """
    ...

def test_timer_elapsed() -> float:
    """
    Get the number of seconds since the last start of the timer with
    g_test_timer_start().
    """
    ...

def test_timer_last() -> float:
    """
    Report the last result of g_test_timer_elapsed().
    """
    ...

def test_timer_start() -> object:
    """
    Start a timing test. Call g_test_timer_elapsed() when the task is supposed
    to be done. Call this function again to restart the timer.
    """
    ...

def test_trap_assertions(domain: str, file: str, line: int, func: str, assertion_flags: guint64, pattern: str) -> object:
    ...

def test_trap_fork(usec_timeout: guint64, test_trap_flags: TestTrapFlags) -> bool:
    """
    Fork the current test program to execute a test case that might
    not return or that might abort.

    If @usec_timeout is non-0, the forked test case is aborted and
    considered failing if its run time exceeds it.

    The forking behavior can be configured with the #GTestTrapFlags flags.

    In the following example, the test code forks, the forked child
    process produces some sample output and exits successfully.
    The forking parent process then asserts successful child program
    termination and validates child program outputs.

    |[<!-- language="C" -->
      static void
      test_fork_patterns (void)
      {
        if (g_test_trap_fork (0, G_TEST_TRAP_SILENCE_STDOUT | G_TEST_TRAP_SILENCE_STDERR))
          {
            g_print ("some stdout text: somagic17\n");
            g_printerr ("some stderr text: semagic43\n");
            exit (0); // successful test run
          }
        g_test_trap_assert_passed ();
        g_test_trap_assert_stdout ("*somagic17*");
        g_test_trap_assert_stderr ("*semagic43*");
      }
    ]|
    """
    ...

def test_trap_has_passed() -> bool:
    """
    Check the result of the last g_test_trap_subprocess() call.
    """
    ...

def test_trap_reached_timeout() -> bool:
    """
    Check the result of the last g_test_trap_subprocess() call.
    """
    ...

def test_trap_subprocess(test_path: _T.Optional[str], usec_timeout: guint64, test_flags: TestSubprocessFlags) -> object:
    """
    Respawns the test program to run only @test_path in a subprocess.
    This can be used for a test case that might not return, or that
    might abort.

    If @test_path is %NULL then the same test is re-run in a subprocess.
    You can use g_test_subprocess() to determine whether the test is in
    a subprocess or not.

    @test_path can also be the name of the parent test, followed by
    "`/subprocess/`" and then a name for the specific subtest (or just
    ending with "`/subprocess`" if the test only has one child test);
    tests with names of this form will automatically be skipped in the
    parent process.

    If @usec_timeout is non-0, the test subprocess is aborted and
    considered failing if its run time exceeds it.

    The subprocess behavior can be configured with the
    #GTestSubprocessFlags flags.

    You can use methods such as g_test_trap_assert_passed(),
    g_test_trap_assert_failed(), and g_test_trap_assert_stderr() to
    check the results of the subprocess. (But note that
    g_test_trap_assert_stdout() and g_test_trap_assert_stderr()
    cannot be used if @test_flags specifies that the child should
    inherit the parent stdout/stderr.)

    If your `main ()` needs to behave differently in
    the subprocess, you can call g_test_subprocess() (after calling
    g_test_init()) to see whether you are in a subprocess.

    The following example tests that calling
    `my_object_new(1000000)` will abort with an error
    message.

    |[<!-- language="C" -->
      static void
      test_create_large_object (void)
      {
        if (g_test_subprocess ())
          {
            my_object_new (1000000);
            return;
          }

        // Reruns this same test in a subprocess
        g_test_trap_subprocess (NULL, 0, 0);
        g_test_trap_assert_failed ();
        g_test_trap_assert_stderr ("*ERROR*too large*");
      }

      int
      main (int argc, char **argv)
      {
        g_test_init (&argc, &argv, NULL);

        g_test_add_func ("/myobject/create_large_object",
                         test_create_large_object);
        return g_test_run ();
      }
    ]|
    """
    ...

def timeout_add(interval: int, function: SourceFunc, data: _T.Optional[object]) -> int:
    """
    Sets a function to be called at regular intervals, with the default
    priority, %G_PRIORITY_DEFAULT.

    The given @function is called repeatedly until it returns %G_SOURCE_REMOVE
    or %FALSE, at which point the timeout is automatically destroyed and the
    function will not be called again. The first call to the function will be
    at the end of the first @interval.

    Note that timeout functions may be delayed, due to the processing of other
    event sources. Thus they should not be relied on for precise timing.
    After each call to the timeout function, the time of the next
    timeout is recalculated based on the current time and the given interval
    (it does not try to 'catch up' time lost in delays).

    See [memory management of sources][mainloop-memory-management] for details
    on how to handle the return value and memory management of @data.

    If you want to have a timer in the "seconds" range and do not care
    about the exact time of the first call of the timer, use the
    g_timeout_add_seconds() function; this function allows for more
    optimizations and more efficient system power usage.

    This internally creates a main loop source using g_timeout_source_new()
    and attaches it to the global #GMainContext using g_source_attach(), so
    the callback will be invoked in whichever thread is running that main
    context. You can do these steps manually if you need greater control or to
    use a custom main context.

    It is safe to call this function from any thread.

    The interval given is in terms of monotonic time, not wall clock
    time.  See g_get_monotonic_time().
    """
    ...

def timeout_add_full(priority: int, interval: int, function: SourceFunc, data: _T.Optional[object], notify: _T.Optional[DestroyNotify]) -> int:
    """
    Sets a function to be called at regular intervals, with the given
    priority.  The function is called repeatedly until it returns
    %FALSE, at which point the timeout is automatically destroyed and
    the function will not be called again.  The @notify function is
    called when the timeout is destroyed.  The first call to the
    function will be at the end of the first @interval.

    Note that timeout functions may be delayed, due to the processing of other
    event sources. Thus they should not be relied on for precise timing.
    After each call to the timeout function, the time of the next
    timeout is recalculated based on the current time and the given interval
    (it does not try to 'catch up' time lost in delays).

    See [memory management of sources][mainloop-memory-management] for details
    on how to handle the return value and memory management of @data.

    This internally creates a main loop source using g_timeout_source_new()
    and attaches it to the global #GMainContext using g_source_attach(), so
    the callback will be invoked in whichever thread is running that main
    context. You can do these steps manually if you need greater control or to
    use a custom main context.

    The interval given is in terms of monotonic time, not wall clock time.
    See g_get_monotonic_time().
    """
    ...

def timeout_add_seconds(interval: int, function: SourceFunc, data: _T.Optional[object]) -> int:
    """
    Sets a function to be called at regular intervals with the default
    priority, %G_PRIORITY_DEFAULT.

    The function is called repeatedly until it returns %G_SOURCE_REMOVE
    or %FALSE, at which point the timeout is automatically destroyed
    and the function will not be called again.

    This internally creates a main loop source using
    g_timeout_source_new_seconds() and attaches it to the main loop context
    using g_source_attach(). You can do these steps manually if you need
    greater control. Also see g_timeout_add_seconds_full().

    It is safe to call this function from any thread.

    Note that the first call of the timer may not be precise for timeouts
    of one second. If you need finer precision and have such a timeout,
    you may want to use g_timeout_add() instead.

    See [memory management of sources][mainloop-memory-management] for details
    on how to handle the return value and memory management of @data.

    The interval given is in terms of monotonic time, not wall clock
    time.  See g_get_monotonic_time().
    """
    ...

def timeout_add_seconds_full(priority: int, interval: int, function: SourceFunc, data: _T.Optional[object], notify: _T.Optional[DestroyNotify]) -> int:
    """
    Sets a function to be called at regular intervals, with @priority.

    The function is called repeatedly until it returns %G_SOURCE_REMOVE
    or %FALSE, at which point the timeout is automatically destroyed and
    the function will not be called again.

    Unlike g_timeout_add(), this function operates at whole second granularity.
    The initial starting point of the timer is determined by the implementation
    and the implementation is expected to group multiple timers together so that
    they fire all at the same time. To allow this grouping, the @interval to the
    first timer is rounded and can deviate up to one second from the specified
    interval. Subsequent timer iterations will generally run at the specified
    interval.

    Note that timeout functions may be delayed, due to the processing of other
    event sources. Thus they should not be relied on for precise timing.
    After each call to the timeout function, the time of the next
    timeout is recalculated based on the current time and the given @interval

    See [memory management of sources][mainloop-memory-management] for details
    on how to handle the return value and memory management of @data.

    If you want timing more precise than whole seconds, use g_timeout_add()
    instead.

    The grouping of timers to fire at the same time results in a more power
    and CPU efficient behavior so if your timer is in multiples of seconds
    and you don't require the first timer exactly one second from now, the
    use of g_timeout_add_seconds() is preferred over g_timeout_add().

    This internally creates a main loop source using
    g_timeout_source_new_seconds() and attaches it to the main loop context
    using g_source_attach(). You can do these steps manually if you need
    greater control.

    It is safe to call this function from any thread.

    The interval given is in terms of monotonic time, not wall clock
    time.  See g_get_monotonic_time().
    """
    ...

def timeout_source_new(interval: int) -> Source:
    """
    Creates a new timeout source.

    The source will not initially be associated with any #GMainContext
    and must be added to one with g_source_attach() before it will be
    executed.

    The interval given is in terms of monotonic time, not wall clock
    time.  See g_get_monotonic_time().
    """
    ...

def timeout_source_new_seconds(interval: int) -> Source:
    """
    Creates a new timeout source.

    The source will not initially be associated with any #GMainContext
    and must be added to one with g_source_attach() before it will be
    executed.

    The scheduling granularity/accuracy of this timeout source will be
    in seconds.

    The interval given is in terms of monotonic time, not wall clock time.
    See g_get_monotonic_time().
    """
    ...

def try_malloc(n_bytes: int) -> object:
    """
    Attempts to allocate @n_bytes, and returns %NULL on failure.
    Contrast with g_malloc(), which aborts the program on failure.
    """
    ...

def try_malloc0(n_bytes: int) -> object:
    """
    Attempts to allocate @n_bytes, initialized to 0's, and returns %NULL on
    failure. Contrast with g_malloc0(), which aborts the program on failure.
    """
    ...

def try_malloc0_n(n_blocks: int, n_block_bytes: int) -> object:
    """
    This function is similar to g_try_malloc0(), allocating (@n_blocks * @n_block_bytes) bytes,
    but care is taken to detect possible overflow during multiplication.
    """
    ...

def try_malloc_n(n_blocks: int, n_block_bytes: int) -> object:
    """
    This function is similar to g_try_malloc(), allocating (@n_blocks * @n_block_bytes) bytes,
    but care is taken to detect possible overflow during multiplication.
    """
    ...

def try_realloc(mem: _T.Optional[object], n_bytes: int) -> object:
    """
    Attempts to realloc @mem to a new size, @n_bytes, and returns %NULL
    on failure. Contrast with g_realloc(), which aborts the program
    on failure.

    If @mem is %NULL, behaves the same as g_try_malloc().
    """
    ...

def try_realloc_n(mem: _T.Optional[object], n_blocks: int, n_block_bytes: int) -> object:
    """
    This function is similar to g_try_realloc(), allocating (@n_blocks * @n_block_bytes) bytes,
    but care is taken to detect possible overflow during multiplication.
    """
    ...

def ucs4_to_utf16(str: str, len: int, items_read: int, items_written: int) -> int:
    """
    Convert a string from UCS-4 to UTF-16. A 0 character will be
    added to the result after the converted text.
    """
    ...

def ucs4_to_utf8(str: str, len: int, items_read: int, items_written: int) -> str:
    """
    Convert a string from a 32-bit fixed width representation as UCS-4.
    to UTF-8. The result will be terminated with a 0 byte.
    """
    ...

def unichar_break_type(c: str) -> UnicodeBreakType:
    """
    Determines the break type of @c. @c should be a Unicode character
    (to derive a character from UTF-8 encoded text, use
    g_utf8_get_char()). The break type is used to find word and line
    breaks ("text boundaries"), Pango implements the Unicode boundary
    resolution algorithms and normally you would use a function such
    as pango_break() instead of caring about break types yourself.
    """
    ...

def unichar_combining_class(uc: str) -> int:
    """
    Determines the canonical combining class of a Unicode character.
    """
    ...

def unichar_compose(a: str, b: str, ch: str) -> bool:
    """
    Performs a single composition step of the
    Unicode canonical composition algorithm.

    This function includes algorithmic Hangul Jamo composition,
    but it is not exactly the inverse of g_unichar_decompose().
    No composition can have either of @a or @b equal to zero.
    To be precise, this function composes if and only if
    there exists a Primary Composite P which is canonically
    equivalent to the sequence <@a,@b>.  See the Unicode
    Standard for the definition of Primary Composite.

    If @a and @b do not compose a new character, @ch is set to zero.

    See
    [UAX#15](http://unicode.org/reports/tr15/)
    for details.
    """
    ...

def unichar_decompose(ch: str, a: str, b: str) -> bool:
    """
    Performs a single decomposition step of the
    Unicode canonical decomposition algorithm.

    This function does not include compatibility
    decompositions. It does, however, include algorithmic
    Hangul Jamo decomposition, as well as 'singleton'
    decompositions which replace a character by a single
    other character. In the case of singletons *@b will
    be set to zero.

    If @ch is not decomposable, *@a is set to @ch and *@b
    is set to zero.

    Note that the way Unicode decomposition pairs are
    defined, it is guaranteed that @b would not decompose
    further, but @a may itself decompose.  To get the full
    canonical decomposition for @ch, one would need to
    recursively call this function on @a.  Or use
    g_unichar_fully_decompose().

    See
    [UAX#15](http://unicode.org/reports/tr15/)
    for details.
    """
    ...

def unichar_digit_value(c: str) -> int:
    """
    Determines the numeric value of a character as a decimal
    digit.
    """
    ...

def unichar_fully_decompose(ch: str, compat: bool, result: str, result_len: int) -> int:
    """
    Computes the canonical or compatibility decomposition of a
    Unicode character.  For compatibility decomposition,
    pass %TRUE for @compat; for canonical decomposition
    pass %FALSE for @compat.

    The decomposed sequence is placed in @result.  Only up to
    @result_len characters are written into @result.  The length
    of the full decomposition (irrespective of @result_len) is
    returned by the function.  For canonical decomposition,
    currently all decompositions are of length at most 4, but
    this may change in the future (very unlikely though).
    At any rate, Unicode does guarantee that a buffer of length
    18 is always enough for both compatibility and canonical
    decompositions, so that is the size recommended. This is provided
    as %G_UNICHAR_MAX_DECOMPOSITION_LENGTH.

    See
    [UAX#15](http://unicode.org/reports/tr15/)
    for details.
    """
    ...

def unichar_get_mirror_char(ch: str, mirrored_ch: str) -> bool:
    """
    In Unicode, some characters are "mirrored". This means that their
    images are mirrored horizontally in text that is laid out from right
    to left. For instance, "(" would become its mirror image, ")", in
    right-to-left text.

    If @ch has the Unicode mirrored property and there is another unicode
    character that typically has a glyph that is the mirror image of @ch's
    glyph and @mirrored_ch is set, it puts that character in the address
    pointed to by @mirrored_ch.  Otherwise the original character is put.
    """
    ...

def unichar_get_script(ch: str) -> UnicodeScript:
    """
    Looks up the #GUnicodeScript for a particular character (as defined
    by Unicode Standard Annex \#24). No check is made for @ch being a
    valid Unicode character; if you pass in invalid character, the
    result is undefined.

    This function is equivalent to pango_script_for_unichar() and the
    two are interchangeable.
    """
    ...

def unichar_isalnum(c: str) -> bool:
    """
    Determines whether a character is alphanumeric.
    Given some UTF-8 text, obtain a character value
    with g_utf8_get_char().
    """
    ...

def unichar_isalpha(c: str) -> bool:
    """
    Determines whether a character is alphabetic (i.e. a letter).
    Given some UTF-8 text, obtain a character value with
    g_utf8_get_char().
    """
    ...

def unichar_iscntrl(c: str) -> bool:
    """
    Determines whether a character is a control character.
    Given some UTF-8 text, obtain a character value with
    g_utf8_get_char().
    """
    ...

def unichar_isdefined(c: str) -> bool:
    """
    Determines if a given character is assigned in the Unicode
    standard.
    """
    ...

def unichar_isdigit(c: str) -> bool:
    """
    Determines whether a character is numeric (i.e. a digit).  This
    covers ASCII 0-9 and also digits in other languages/scripts.  Given
    some UTF-8 text, obtain a character value with g_utf8_get_char().
    """
    ...

def unichar_isgraph(c: str) -> bool:
    """
    Determines whether a character is printable and not a space
    (returns %FALSE for control characters, format characters, and
    spaces). g_unichar_isprint() is similar, but returns %TRUE for
    spaces. Given some UTF-8 text, obtain a character value with
    g_utf8_get_char().
    """
    ...

def unichar_islower(c: str) -> bool:
    """
    Determines whether a character is a lowercase letter.
    Given some UTF-8 text, obtain a character value with
    g_utf8_get_char().
    """
    ...

def unichar_ismark(c: str) -> bool:
    """
    Determines whether a character is a mark (non-spacing mark,
    combining mark, or enclosing mark in Unicode speak).
    Given some UTF-8 text, obtain a character value
    with g_utf8_get_char().

    Note: in most cases where isalpha characters are allowed,
    ismark characters should be allowed to as they are essential
    for writing most European languages as well as many non-Latin
    scripts.
    """
    ...

def unichar_isprint(c: str) -> bool:
    """
    Determines whether a character is printable.
    Unlike g_unichar_isgraph(), returns %TRUE for spaces.
    Given some UTF-8 text, obtain a character value with
    g_utf8_get_char().
    """
    ...

def unichar_ispunct(c: str) -> bool:
    """
    Determines whether a character is punctuation or a symbol.
    Given some UTF-8 text, obtain a character value with
    g_utf8_get_char().
    """
    ...

def unichar_isspace(c: str) -> bool:
    """
    Determines whether a character is a space, tab, or line separator
    (newline, carriage return, etc.).  Given some UTF-8 text, obtain a
    character value with g_utf8_get_char().

    (Note: don't use this to do word breaking; you have to use
    Pango or equivalent to get word breaking right, the algorithm
    is fairly complex.)
    """
    ...

def unichar_istitle(c: str) -> bool:
    """
    Determines if a character is titlecase. Some characters in
    Unicode which are composites, such as the DZ digraph
    have three case variants instead of just two. The titlecase
    form is used at the beginning of a word where only the
    first letter is capitalized. The titlecase form of the DZ
    digraph is U+01F2 LATIN CAPITAL LETTTER D WITH SMALL LETTER Z.
    """
    ...

def unichar_isupper(c: str) -> bool:
    """
    Determines if a character is uppercase.
    """
    ...

def unichar_iswide(c: str) -> bool:
    """
    Determines if a character is typically rendered in a double-width
    cell.
    """
    ...

def unichar_iswide_cjk(c: str) -> bool:
    """
    Determines if a character is typically rendered in a double-width
    cell under legacy East Asian locales.  If a character is wide according to
    g_unichar_iswide(), then it is also reported wide with this function, but
    the converse is not necessarily true. See the
    [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)
    for details.

    If a character passes the g_unichar_iswide() test then it will also pass
    this test, but not the other way around.  Note that some characters may
    pass both this test and g_unichar_iszerowidth().
    """
    ...

def unichar_isxdigit(c: str) -> bool:
    """
    Determines if a character is a hexadecimal digit.
    """
    ...

def unichar_iszerowidth(c: str) -> bool:
    """
    Determines if a given character typically takes zero width when rendered.
    The return value is %TRUE for all non-spacing and enclosing marks
    (e.g., combining accents), format characters, zero-width
    space, but not U+00AD SOFT HYPHEN.

    A typical use of this function is with one of g_unichar_iswide() or
    g_unichar_iswide_cjk() to determine the number of cells a string occupies
    when displayed on a grid display (terminals).  However, note that not all
    terminals support zero-width rendering of zero-width marks.
    """
    ...

def unichar_to_utf8(c: str, outbuf: str) -> int:
    """
    Converts a single character to UTF-8.
    """
    ...

def unichar_tolower(c: str) -> str:
    """
    Converts a character to lower case.
    """
    ...

def unichar_totitle(c: str) -> str:
    """
    Converts a character to the titlecase.
    """
    ...

def unichar_toupper(c: str) -> str:
    """
    Converts a character to uppercase.
    """
    ...

def unichar_type(c: str) -> UnicodeType:
    """
    Classifies a Unicode character by type.
    """
    ...

def unichar_validate(ch: str) -> bool:
    """
    Checks whether @ch is a valid Unicode character. Some possible
    integer values of @ch will not be valid. 0 is considered a valid
    character, though it's normally a string terminator.
    """
    ...

def unichar_xdigit_value(c: str) -> int:
    """
    Determines the numeric value of a character as a hexadecimal
    digit.
    """
    ...

def unicode_canonical_decomposition(ch: str, result_len: int) -> str:
    """
    Computes the canonical decomposition of a Unicode character.
    """
    ...

def unicode_canonical_ordering(string: str, len: int) -> object:
    """
    Computes the canonical ordering of a string in-place.
    This rearranges decomposed characters in the string
    according to their combining classes.  See the Unicode
    manual for more information.
    """
    ...

def unicode_script_from_iso15924(iso15924: int) -> UnicodeScript:
    """
    Looks up the Unicode script for @iso15924.  ISO 15924 assigns four-letter
    codes to scripts.  For example, the code for Arabic is 'Arab'.
    This function accepts four letter codes encoded as a @guint32 in a
    big-endian fashion.  That is, the code expected for Arabic is
    0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).

    See
    [Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
    for details.
    """
    ...

def unicode_script_to_iso15924(script: UnicodeScript) -> int:
    """
    Looks up the ISO 15924 code for @script.  ISO 15924 assigns four-letter
    codes to scripts.  For example, the code for Arabic is 'Arab'.  The
    four letter codes are encoded as a @guint32 by this function in a
    big-endian fashion.  That is, the code returned for Arabic is
    0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).

    See
    [Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
    for details.
    """
    ...

def unix_error_quark() -> Quark:
    ...

def unix_fd_add(fd: int, condition: IOCondition, function: UnixFDSourceFunc, user_data: _T.Optional[object]) -> int:
    """
    Sets a function to be called when the IO condition, as specified by
    @condition becomes true for @fd.

    @function will be called when the specified IO condition becomes
    %TRUE.  The function is expected to clear whatever event caused the
    IO condition to become true and return %TRUE in order to be notified
    when it happens again.  If @function returns %FALSE then the watch
    will be cancelled.

    The return value of this function can be passed to g_source_remove()
    to cancel the watch at any time that it exists.

    The source will never close the fd -- you must do it yourself.
    """
    ...

def unix_fd_add_full(priority: int, fd: int, condition: IOCondition, function: UnixFDSourceFunc, user_data: _T.Optional[object], notify: DestroyNotify) -> int:
    """
    Sets a function to be called when the IO condition, as specified by
    @condition becomes true for @fd.

    This is the same as g_unix_fd_add(), except that it allows you to
    specify a non-default priority and a provide a #GDestroyNotify for
    @user_data.
    """
    ...

def unix_fd_source_new(fd: int, condition: IOCondition) -> Source:
    """
    Creates a #GSource to watch for a particular IO condition on a file
    descriptor.

    The source will never close the fd -- you must do it yourself.
    """
    ...

def unix_get_passwd_entry(user_name: str) -> object:
    """
    Get the `passwd` file entry for the given @user_name using `getpwnam_r()`.
    This can fail if the given @user_name doesn’t exist.

    The returned `struct passwd` has been allocated using g_malloc() and should
    be freed using g_free(). The strings referenced by the returned struct are
    included in the same allocation, so are valid until the `struct passwd` is
    freed.

    This function is safe to call from multiple threads concurrently.

    You will need to include `pwd.h` to get the definition of `struct passwd`.
    """
    ...

def unix_open_pipe(fds: int, flags: int) -> bool:
    """
    Similar to the UNIX pipe() call, but on modern systems like Linux
    uses the pipe2() system call, which atomically creates a pipe with
    the configured flags. The only supported flag currently is
    %FD_CLOEXEC. If for example you want to configure %O_NONBLOCK, that
    must still be done separately with fcntl().

    This function does not take %O_CLOEXEC, it takes %FD_CLOEXEC as if
    for fcntl(); these are different on Linux/glibc.
    """
    ...

def unix_set_fd_nonblocking(fd: int, nonblock: bool) -> bool:
    """
    Control the non-blocking state of the given file descriptor,
    according to @nonblock. On most systems this uses %O_NONBLOCK, but
    on some older ones may use %O_NDELAY.
    """
    ...

def unix_signal_add(signum: int, handler: SourceFunc, user_data: _T.Optional[object]) -> int:
    """
    A convenience function for g_unix_signal_source_new(), which
    attaches to the default #GMainContext.  You can remove the watch
    using g_source_remove().
    """
    ...

def unix_signal_add_full(priority: int, signum: int, handler: SourceFunc, user_data: _T.Optional[object], notify: DestroyNotify) -> int:
    """
    A convenience function for g_unix_signal_source_new(), which
    attaches to the default #GMainContext.  You can remove the watch
    using g_source_remove().
    """
    ...

def unix_signal_source_new(signum: int) -> Source:
    """
    Create a #GSource that will be dispatched upon delivery of the UNIX
    signal @signum.  In GLib versions before 2.36, only `SIGHUP`, `SIGINT`,
    `SIGTERM` can be monitored.  In GLib 2.36, `SIGUSR1` and `SIGUSR2`
    were added. In GLib 2.54, `SIGWINCH` was added.

    Note that unlike the UNIX default, all sources which have created a
    watch will be dispatched, regardless of which underlying thread
    invoked g_unix_signal_source_new().

    For example, an effective use of this function is to handle `SIGTERM`
    cleanly; flushing any outstanding files, and then calling
    g_main_loop_quit ().  It is not safe to do any of this a regular
    UNIX signal handler; your handler may be invoked while malloc() or
    another library function is running, causing reentrancy if you
    attempt to use it from the handler.  None of the GLib/GObject API
    is safe against this kind of reentrancy.

    The interaction of this source when combined with native UNIX
    functions like sigprocmask() is not defined.

    The source will not initially be associated with any #GMainContext
    and must be added to one with g_source_attach() before it will be
    executed.
    """
    ...

def unlink(filename: str) -> int:
    """
    A wrapper for the POSIX unlink() function. The unlink() function
    deletes a name from the filesystem. If this was the last link to the
    file and no processes have it opened, the diskspace occupied by the
    file is freed.

    See your C library manual for more details about unlink(). Note
    that on Windows, it is in general not possible to delete files that
    are open to some process, or mapped into memory.
    """
    ...

def unsetenv(variable: str) -> object:
    """
    Removes an environment variable from the environment.

    Note that on some systems, when variables are overwritten, the
    memory used for the previous variables and its value isn't reclaimed.

    You should be mindful of the fact that environment variable handling
    in UNIX is not thread-safe, and your program may crash if one thread
    calls g_unsetenv() while another thread is calling getenv(). (And note
    that many functions, such as gettext(), call getenv() internally.) This
    function is only safe to use at the very start of your program, before
    creating any other threads (or creating objects that create worker
    threads of their own).

    If you need to set up the environment for a child process, you can
    use g_get_environ() to get an environment array, modify that with
    g_environ_setenv() and g_environ_unsetenv(), and then pass that
    array directly to execvpe(), g_spawn_async(), or the like.
    """
    ...

def usleep(microseconds: int) -> object:
    """
    Pauses the current thread for the given number of microseconds.

    There are 1 million microseconds per second (represented by the
    %G_USEC_PER_SEC macro). g_usleep() may have limited precision,
    depending on hardware and operating system; don't rely on the exact
    length of the sleep.
    """
    ...

def utf16_to_ucs4(str: int, len: int, items_read: int, items_written: int) -> str:
    """
    Convert a string from UTF-16 to UCS-4. The result will be
    nul-terminated.
    """
    ...

def utf16_to_utf8(str: int, len: int, items_read: int, items_written: int) -> str:
    """
    Convert a string from UTF-16 to UTF-8. The result will be
    terminated with a 0 byte.

    Note that the input is expected to be already in native endianness,
    an initial byte-order-mark character is not handled specially.
    g_convert() can be used to convert a byte buffer of UTF-16 data of
    ambiguous endianness.

    Further note that this function does not validate the result
    string; it may e.g. include embedded NUL characters. The only
    validation done by this function is to ensure that the input can
    be correctly interpreted as UTF-16, i.e. it doesn't contain
    unpaired surrogates or partial character sequences.
    """
    ...

def utf8_casefold(str: str, len: int) -> str:
    """
    Converts a string into a form that is independent of case. The
    result will not correspond to any particular case, but can be
    compared for equality or ordered with the results of calling
    g_utf8_casefold() on other strings.

    Note that calling g_utf8_casefold() followed by g_utf8_collate() is
    only an approximation to the correct linguistic case insensitive
    ordering, though it is a fairly good one. Getting this exactly
    right would require a more sophisticated collation function that
    takes case sensitivity into account. GLib does not currently
    provide such a function.
    """
    ...

def utf8_collate(str1: str, str2: str) -> int:
    """
    Compares two strings for ordering using the linguistically
    correct rules for the [current locale][setlocale].
    When sorting a large number of strings, it will be significantly
    faster to obtain collation keys with g_utf8_collate_key() and
    compare the keys with strcmp() when sorting instead of sorting
    the original strings.

    If the two strings are not comparable due to being in different collation
    sequences, the result is undefined. This can happen if the strings are in
    different language scripts, for example.
    """
    ...

def utf8_collate_key(str: str, len: int) -> str:
    """
    Converts a string into a collation key that can be compared
    with other collation keys produced by the same function using
    strcmp().

    The results of comparing the collation keys of two strings
    with strcmp() will always be the same as comparing the two
    original keys with g_utf8_collate().

    Note that this function depends on the [current locale][setlocale].
    """
    ...

def utf8_collate_key_for_filename(str: str, len: int) -> str:
    """
    Converts a string into a collation key that can be compared
    with other collation keys produced by the same function using strcmp().

    In order to sort filenames correctly, this function treats the dot '.'
    as a special case. Most dictionary orderings seem to consider it
    insignificant, thus producing the ordering "event.c" "eventgenerator.c"
    "event.h" instead of "event.c" "event.h" "eventgenerator.c". Also, we
    would like to treat numbers intelligently so that "file1" "file10" "file5"
    is sorted as "file1" "file5" "file10".

    Note that this function depends on the [current locale][setlocale].
    """
    ...

def utf8_find_next_char(p: str, end: _T.Optional[str]) -> str:
    """
    Finds the start of the next UTF-8 character in the string after @p.

    @p does not have to be at the beginning of a UTF-8 character. No check
    is made to see if the character found is actually valid other than
    it starts with an appropriate byte.

    If @end is %NULL, the return value will never be %NULL: if the end of the
    string is reached, a pointer to the terminating nul byte is returned. If
    @end is non-%NULL, the return value will be %NULL if the end of the string
    is reached.
    """
    ...

def utf8_find_prev_char(str: str, p: str) -> str:
    """
    Given a position @p with a UTF-8 encoded string @str, find the start
    of the previous UTF-8 character starting before @p. Returns %NULL if no
    UTF-8 characters are present in @str before @p.

    @p does not have to be at the beginning of a UTF-8 character. No check
    is made to see if the character found is actually valid other than
    it starts with an appropriate byte.
    """
    ...

def utf8_get_char(p: str) -> str:
    """
    Converts a sequence of bytes encoded as UTF-8 to a Unicode character.

    If @p does not point to a valid UTF-8 encoded character, results
    are undefined. If you are not sure that the bytes are complete
    valid Unicode characters, you should use g_utf8_get_char_validated()
    instead.
    """
    ...

def utf8_get_char_validated(p: str, max_len: int) -> str:
    """
    Convert a sequence of bytes encoded as UTF-8 to a Unicode character.
    This function checks for incomplete characters, for invalid characters
    such as characters that are out of the range of Unicode, and for
    overlong encodings of valid characters.

    Note that g_utf8_get_char_validated() returns (gunichar)-2 if
    @max_len is positive and any of the bytes in the first UTF-8 character
    sequence are nul.
    """
    ...

def utf8_make_valid(str: str, len: int) -> str:
    """
    If the provided string is valid UTF-8, return a copy of it. If not,
    return a copy in which bytes that could not be interpreted as valid Unicode
    are replaced with the Unicode replacement character (U+FFFD).

    For example, this is an appropriate function to use if you have received
    a string that was incorrectly declared to be UTF-8, and you need a valid
    UTF-8 version of it that can be logged or displayed to the user, with the
    assumption that it is close enough to ASCII or UTF-8 to be mostly
    readable as-is.
    """
    ...

def utf8_normalize(str: str, len: int, mode: NormalizeMode) -> str:
    """
    Converts a string into canonical form, standardizing
    such issues as whether a character with an accent
    is represented as a base character and combining
    accent or as a single precomposed character. The
    string has to be valid UTF-8, otherwise %NULL is
    returned. You should generally call g_utf8_normalize()
    before comparing two Unicode strings.

    The normalization mode %G_NORMALIZE_DEFAULT only
    standardizes differences that do not affect the
    text content, such as the above-mentioned accent
    representation. %G_NORMALIZE_ALL also standardizes
    the "compatibility" characters in Unicode, such
    as SUPERSCRIPT THREE to the standard forms
    (in this case DIGIT THREE). Formatting information
    may be lost but for most text operations such
    characters should be considered the same.

    %G_NORMALIZE_DEFAULT_COMPOSE and %G_NORMALIZE_ALL_COMPOSE
    are like %G_NORMALIZE_DEFAULT and %G_NORMALIZE_ALL,
    but returned a result with composed forms rather
    than a maximally decomposed form. This is often
    useful if you intend to convert the string to
    a legacy encoding or pass it to a system with
    less capable Unicode handling.
    """
    ...

def utf8_offset_to_pointer(str: str, offset: int) -> str:
    """
    Converts from an integer character offset to a pointer to a position
    within the string.

    Since 2.10, this function allows to pass a negative @offset to
    step backwards. It is usually worth stepping backwards from the end
    instead of forwards if @offset is in the last fourth of the string,
    since moving forward is about 3 times faster than moving backward.

    Note that this function doesn't abort when reaching the end of @str.
    Therefore you should be sure that @offset is within string boundaries
    before calling that function. Call g_utf8_strlen() when unsure.
    This limitation exists as this function is called frequently during
    text rendering and therefore has to be as fast as possible.
    """
    ...

def utf8_pointer_to_offset(str: str, pos: str) -> int:
    """
    Converts from a pointer to position within a string to an integer
    character offset.

    Since 2.10, this function allows @pos to be before @str, and returns
    a negative offset in this case.
    """
    ...

def utf8_prev_char(p: str) -> str:
    """
    Finds the previous UTF-8 character in the string before @p.

    @p does not have to be at the beginning of a UTF-8 character. No check
    is made to see if the character found is actually valid other than
    it starts with an appropriate byte. If @p might be the first
    character of the string, you must use g_utf8_find_prev_char() instead.
    """
    ...

def utf8_strchr(p: str, len: int, c: str) -> str:
    """
    Finds the leftmost occurrence of the given Unicode character
    in a UTF-8 encoded string, while limiting the search to @len bytes.
    If @len is -1, allow unbounded search.
    """
    ...

def utf8_strdown(str: str, len: int) -> str:
    """
    Converts all Unicode characters in the string that have a case
    to lowercase. The exact manner that this is done depends
    on the current locale, and may result in the number of
    characters in the string changing.
    """
    ...

def utf8_strlen(p: str, max: int) -> int:
    """
    Computes the length of the string in characters, not including
    the terminating nul character. If the @max'th byte falls in the
    middle of a character, the last (partial) character is not counted.
    """
    ...

def utf8_strncpy(dest: str, src: str, n: int) -> str:
    """
    Like the standard C strncpy() function, but copies a given number
    of characters instead of a given number of bytes. The @src string
    must be valid UTF-8 encoded text. (Use g_utf8_validate() on all
    text before trying to use UTF-8 utility functions with it.)

    Note you must ensure @dest is at least 4 * @n to fit the
    largest possible UTF-8 characters
    """
    ...

def utf8_strrchr(p: str, len: int, c: str) -> str:
    """
    Find the rightmost occurrence of the given Unicode character
    in a UTF-8 encoded string, while limiting the search to @len bytes.
    If @len is -1, allow unbounded search.
    """
    ...

def utf8_strreverse(str: str, len: int) -> str:
    """
    Reverses a UTF-8 string. @str must be valid UTF-8 encoded text.
    (Use g_utf8_validate() on all text before trying to use UTF-8
    utility functions with it.)

    This function is intended for programmatic uses of reversed strings.
    It pays no attention to decomposed characters, combining marks, byte
    order marks, directional indicators (LRM, LRO, etc) and similar
    characters which might need special handling when reversing a string
    for display purposes.

    Note that unlike g_strreverse(), this function returns
    newly-allocated memory, which should be freed with g_free() when
    no longer needed.
    """
    ...

def utf8_strup(str: str, len: int) -> str:
    """
    Converts all Unicode characters in the string that have a case
    to uppercase. The exact manner that this is done depends
    on the current locale, and may result in the number of
    characters in the string increasing. (For instance, the
    German ess-zet will be changed to SS.)
    """
    ...

def utf8_substring(str: str, start_pos: int, end_pos: int) -> str:
    """
    Copies a substring out of a UTF-8 encoded string.
    The substring will contain @end_pos - @start_pos characters.

    Since GLib 2.72, `-1` can be passed to @end_pos to indicate the
    end of the string.
    """
    ...

def utf8_to_ucs4(str: str, len: int, items_read: int, items_written: int) -> str:
    """
    Convert a string from UTF-8 to a 32-bit fixed width
    representation as UCS-4. A trailing 0 character will be added to the
    string after the converted text.
    """
    ...

def utf8_to_ucs4_fast(str: str, len: int, items_written: int) -> str:
    """
    Convert a string from UTF-8 to a 32-bit fixed width
    representation as UCS-4, assuming valid UTF-8 input.
    This function is roughly twice as fast as g_utf8_to_ucs4()
    but does no error checking on the input. A trailing 0 character
    will be added to the string after the converted text.
    """
    ...

def utf8_to_utf16(str: str, len: int, items_read: int, items_written: int) -> int:
    """
    Convert a string from UTF-8 to UTF-16. A 0 character will be
    added to the result after the converted text.
    """
    ...

def utf8_validate(str: object, max_len: int, end: str) -> bool:
    """
    Validates UTF-8 encoded text. @str is the text to validate;
    if @str is nul-terminated, then @max_len can be -1, otherwise
    @max_len should be the number of bytes to validate.
    If @end is non-%NULL, then the end of the valid range
    will be stored there (i.e. the start of the first invalid
    character if some bytes were invalid, or the end of the text
    being validated otherwise).

    Note that g_utf8_validate() returns %FALSE if @max_len is
    positive and any of the @max_len bytes are nul.

    Returns %TRUE if all of @str was valid. Many GLib and GTK+
    routines require valid UTF-8 as input; so data read from a file
    or the network should be checked with g_utf8_validate() before
    doing anything else with it.
    """
    ...

def utf8_validate_len(str: object, max_len: int, end: str) -> bool:
    """
    Validates UTF-8 encoded text.

    As with g_utf8_validate(), but @max_len must be set, and hence this function
    will always return %FALSE if any of the bytes of @str are nul.
    """
    ...

def uuid_string_is_valid(str: str) -> bool:
    """
    Parses the string @str and verify if it is a UUID.

    The function accepts the following syntax:

    - simple forms (e.g. `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`)

    Note that hyphens are required within the UUID string itself,
    as per the aforementioned RFC.
    """
    ...

def uuid_string_random() -> str:
    """
    Generates a random UUID (RFC 4122 version 4) as a string. It has the same
    randomness guarantees as #GRand, so must not be used for cryptographic
    purposes such as key generation, nonces, salts or one-time pads.
    """
    ...

def variant_get_gtype() -> GObject.Type:
    ...

def vasprintf(string: str, format: str, args: list) -> int:
    """
    An implementation of the GNU vasprintf() function which supports
    positional parameters, as specified in the Single Unix Specification.
    This function is similar to g_vsprintf(), except that it allocates a
    string to hold the output, instead of putting the output in a buffer
    you allocate in advance.

    The returned value in @string is guaranteed to be non-NULL, unless
    @format contains `%lc` or `%ls` conversions, which can fail if no
    multibyte representation is available for the given character.

    `glib/gprintf.h` must be explicitly included in order to use this function.
    """
    ...

def vfprintf(file: object, format: str, args: list) -> int:
    """
    An implementation of the standard fprintf() function which supports
    positional parameters, as specified in the Single Unix Specification.

    `glib/gprintf.h` must be explicitly included in order to use this function.
    """
    ...

def vprintf(format: str, args: list) -> int:
    """
    An implementation of the standard vprintf() function which supports
    positional parameters, as specified in the Single Unix Specification.

    `glib/gprintf.h` must be explicitly included in order to use this function.
    """
    ...

def vsnprintf(string: str, n: int, format: str, args: list) -> int:
    """
    A safer form of the standard vsprintf() function. The output is guaranteed
    to not exceed @n characters (including the terminating nul character), so
    it is easy to ensure that a buffer overflow cannot occur.

    See also g_strdup_vprintf().

    In versions of GLib prior to 1.2.3, this function may return -1 if the
    output was truncated, and the truncated string may not be nul-terminated.
    In versions prior to 1.3.12, this function returns the length of the output
    string.

    The return value of g_vsnprintf() conforms to the vsnprintf() function
    as standardized in ISO C99. Note that this is different from traditional
    vsnprintf(), which returns the length of the output string.

    The format string may contain positional parameters, as specified in
    the Single Unix Specification.
    """
    ...

def vsprintf(string: str, format: str, args: list) -> int:
    """
    An implementation of the standard vsprintf() function which supports
    positional parameters, as specified in the Single Unix Specification.

    `glib/gprintf.h` must be explicitly included in order to use this function.
    """
    ...

def warn_message(domain: _T.Optional[str], file: str, line: int, func: str, warnexpr: _T.Optional[str]) -> object:
    """
    Internal function used to print messages from the public g_warn_if_reached()
    and g_warn_if_fail() macros.
    """
    ...


