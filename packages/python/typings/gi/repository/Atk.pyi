"""
Stub file for Atk. Autogenerated with gi-stubgen.
"""

import typing as _T  # noqa
from enum import Enum

from gi.repository import GLib, GObject

BINARY_AGE = 23610
"""
Like atk_get_binary_age(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

INTERFACE_AGE = 1
"""
Like atk_get_interface_age(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

MAJOR_VERSION = 2
"""
Like atk_get_major_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

MICRO_VERSION = 0
"""
Like atk_get_micro_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

MINOR_VERSION = 36
"""
Like atk_get_minor_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""

VERSION_MIN_REQUIRED = 2
"""
A macro that should be defined by the user prior to including
the atk/atk.h header.
The definition should be one of the predefined ATK version
macros: %ATK_VERSION_2_12, %ATK_VERSION_2_14,...

This macro defines the earliest version of ATK that the package is
required to be able to compile against.

If the compiler is configured to warn about the use of deprecated
functions, then using functions that were deprecated in version
%ATK_VERSION_MIN_REQUIRED or earlier will cause warnings (but
using functions deprecated in later releases will not).
"""


class CoordType(Enum):
    """
    Specifies how xy coordinates are to be interpreted. Used by functions such
    as atk_component_get_position() and atk_text_get_character_extents()
    """
    SCREEN = 0
    WINDOW = 1
    PARENT = 2

class KeyEventType(Enum):
    """
    Specifies the type of a keyboard evemt.
    """
    PRESS = 0
    RELEASE = 1
    LAST_DEFINED = 2

class Layer(Enum):
    """
    Describes the layer of a component

    These enumerated "layer values" are used when determining which UI
    rendering layer a component is drawn into, which can help in making
    determinations of when components occlude one another.
    """
    INVALID = 0
    BACKGROUND = 1
    CANVAS = 2
    WIDGET = 3
    MDI = 4
    POPUP = 5
    OVERLAY = 6
    WINDOW = 7

class RelationType(Enum):
    """
    Describes the type of the relation
    """
    NULL = 0
    CONTROLLED_BY = 1
    CONTROLLER_FOR = 2
    LABEL_FOR = 3
    LABELLED_BY = 4
    MEMBER_OF = 5
    NODE_CHILD_OF = 6
    FLOWS_TO = 7
    FLOWS_FROM = 8
    SUBWINDOW_OF = 9
    EMBEDS = 10
    EMBEDDED_BY = 11
    POPUP_FOR = 12
    PARENT_WINDOW_OF = 13
    DESCRIBED_BY = 14
    DESCRIPTION_FOR = 15
    NODE_PARENT_OF = 16
    DETAILS = 17
    DETAILS_FOR = 18
    ERROR_MESSAGE = 19
    ERROR_FOR = 20
    LAST_DEFINED = 21

class Role(Enum):
    """
    Describes the role of an object

    These are the built-in enumerated roles that UI components can have
    in ATK.  Other roles may be added at runtime, so an AtkRole >=
    %ATK_ROLE_LAST_DEFINED is not necessarily an error.
    """
    INVALID = 0
    ACCELERATOR_LABEL = 1
    ALERT = 2
    ANIMATION = 3
    ARROW = 4
    CALENDAR = 5
    CANVAS = 6
    CHECK_BOX = 7
    CHECK_MENU_ITEM = 8
    COLOR_CHOOSER = 9
    COLUMN_HEADER = 10
    COMBO_BOX = 11
    DATE_EDITOR = 12
    DESKTOP_ICON = 13
    DESKTOP_FRAME = 14
    DIAL = 15
    DIALOG = 16
    DIRECTORY_PANE = 17
    DRAWING_AREA = 18
    FILE_CHOOSER = 19
    FILLER = 20
    FONT_CHOOSER = 21
    FRAME = 22
    GLASS_PANE = 23
    HTML_CONTAINER = 24
    ICON = 25
    IMAGE = 26
    INTERNAL_FRAME = 27
    LABEL = 28
    LAYERED_PANE = 29
    LIST = 30
    LIST_ITEM = 31
    MENU = 32
    MENU_BAR = 33
    MENU_ITEM = 34
    OPTION_PANE = 35
    PAGE_TAB = 36
    PAGE_TAB_LIST = 37
    PANEL = 38
    PASSWORD_TEXT = 39
    POPUP_MENU = 40
    PROGRESS_BAR = 41
    PUSH_BUTTON = 42
    RADIO_BUTTON = 43
    RADIO_MENU_ITEM = 44
    ROOT_PANE = 45
    ROW_HEADER = 46
    SCROLL_BAR = 47
    SCROLL_PANE = 48
    SEPARATOR = 49
    SLIDER = 50
    SPLIT_PANE = 51
    SPIN_BUTTON = 52
    STATUSBAR = 53
    TABLE = 54
    TABLE_CELL = 55
    TABLE_COLUMN_HEADER = 56
    TABLE_ROW_HEADER = 57
    TEAR_OFF_MENU_ITEM = 58
    TERMINAL = 59
    TEXT = 60
    TOGGLE_BUTTON = 61
    TOOL_BAR = 62
    TOOL_TIP = 63
    TREE = 64
    TREE_TABLE = 65
    UNKNOWN = 66
    VIEWPORT = 67
    WINDOW = 68
    HEADER = 69
    FOOTER = 70
    PARAGRAPH = 71
    RULER = 72
    APPLICATION = 73
    AUTOCOMPLETE = 74
    EDIT_BAR = 75
    EMBEDDED = 76
    ENTRY = 77
    CHART = 78
    CAPTION = 79
    DOCUMENT_FRAME = 80
    HEADING = 81
    PAGE = 82
    SECTION = 83
    REDUNDANT_OBJECT = 84
    FORM = 85
    LINK = 86
    INPUT_METHOD_WINDOW = 87
    TABLE_ROW = 88
    TREE_ITEM = 89
    DOCUMENT_SPREADSHEET = 90
    DOCUMENT_PRESENTATION = 91
    DOCUMENT_TEXT = 92
    DOCUMENT_WEB = 93
    DOCUMENT_EMAIL = 94
    COMMENT = 95
    LIST_BOX = 96
    GROUPING = 97
    IMAGE_MAP = 98
    NOTIFICATION = 99
    INFO_BAR = 100
    LEVEL_BAR = 101
    TITLE_BAR = 102
    BLOCK_QUOTE = 103
    AUDIO = 104
    VIDEO = 105
    DEFINITION = 106
    ARTICLE = 107
    LANDMARK = 108
    LOG = 109
    MARQUEE = 110
    MATH = 111
    RATING = 112
    TIMER = 113
    DESCRIPTION_LIST = 114
    DESCRIPTION_TERM = 115
    DESCRIPTION_VALUE = 116
    STATIC = 117
    MATH_FRACTION = 118
    MATH_ROOT = 119
    SUBSCRIPT = 120
    SUPERSCRIPT = 121
    FOOTNOTE = 122
    CONTENT_DELETION = 123
    CONTENT_INSERTION = 124
    MARK = 125
    SUGGESTION = 126
    LAST_DEFINED = 127

class ScrollType(Enum):
    """
    Specifies where an object should be placed on the screen when using scroll_to.
    """
    TOP_LEFT = 0
    BOTTOM_RIGHT = 1
    TOP_EDGE = 2
    BOTTOM_EDGE = 3
    LEFT_EDGE = 4
    RIGHT_EDGE = 5
    ANYWHERE = 6

class StateType(Enum):
    """
    The possible types of states of an object
    """
    INVALID = 0
    ACTIVE = 1
    ARMED = 2
    BUSY = 3
    CHECKED = 4
    DEFUNCT = 5
    EDITABLE = 6
    ENABLED = 7
    EXPANDABLE = 8
    EXPANDED = 9
    FOCUSABLE = 10
    FOCUSED = 11
    HORIZONTAL = 12
    ICONIFIED = 13
    MODAL = 14
    MULTI_LINE = 15
    MULTISELECTABLE = 16
    OPAQUE = 17
    PRESSED = 18
    RESIZABLE = 19
    SELECTABLE = 20
    SELECTED = 21
    SENSITIVE = 22
    SHOWING = 23
    SINGLE_LINE = 24
    STALE = 25
    TRANSIENT = 26
    VERTICAL = 27
    VISIBLE = 28
    MANAGES_DESCENDANTS = 29
    INDETERMINATE = 30
    TRUNCATED = 31
    REQUIRED = 32
    INVALID_ENTRY = 33
    SUPPORTS_AUTOCOMPLETION = 34
    SELECTABLE_TEXT = 35
    DEFAULT = 36
    ANIMATED = 37
    VISITED = 38
    CHECKABLE = 39
    HAS_POPUP = 40
    HAS_TOOLTIP = 41
    READ_ONLY = 42
    LAST_DEFINED = 43

class TextAttribute(Enum):
    """
    Describes the text attributes supported
    """
    INVALID = 0
    LEFT_MARGIN = 1
    RIGHT_MARGIN = 2
    INDENT = 3
    INVISIBLE = 4
    EDITABLE = 5
    PIXELS_ABOVE_LINES = 6
    PIXELS_BELOW_LINES = 7
    PIXELS_INSIDE_WRAP = 8
    BG_FULL_HEIGHT = 9
    RISE = 10
    UNDERLINE = 11
    STRIKETHROUGH = 12
    SIZE = 13
    SCALE = 14
    WEIGHT = 15
    LANGUAGE = 16
    FAMILY_NAME = 17
    BG_COLOR = 18
    FG_COLOR = 19
    BG_STIPPLE = 20
    FG_STIPPLE = 21
    WRAP_MODE = 22
    DIRECTION = 23
    JUSTIFICATION = 24
    STRETCH = 25
    VARIANT = 26
    STYLE = 27
    TEXT_POSITION = 28
    LAST_DEFINED = 29

class TextBoundary(Enum):
    """
    Text boundary types used for specifying boundaries for regions of text.
    This enumeration is deprecated since 2.9.4 and should not be used. Use
    AtkTextGranularity with #atk_text_get_string_at_offset instead.
    """
    CHAR = 0
    WORD_START = 1
    WORD_END = 2
    SENTENCE_START = 3
    SENTENCE_END = 4
    LINE_START = 5
    LINE_END = 6

class TextClipType(Enum):
    """
    Describes the type of clipping required.
    """
    NONE = 0
    MIN = 1
    MAX = 2
    BOTH = 3

class TextGranularity(Enum):
    """
    Text granularity types used for specifying the granularity of the region of
    text we are interested in.
    """
    CHAR = 0
    WORD = 1
    SENTENCE = 2
    LINE = 3
    PARAGRAPH = 4

class ValueType(Enum):
    """
    Default types for a given value. Those are defined in order to
    easily get localized strings to describe a given value or a given
    subrange, using atk_value_type_get_localized_name().
    """
    VERY_WEAK = 0
    WEAK = 1
    ACCEPTABLE = 2
    STRONG = 3
    VERY_STRONG = 4
    VERY_LOW = 5
    LOW = 6
    MEDIUM = 7
    HIGH = 8
    VERY_HIGH = 9
    VERY_BAD = 10
    BAD = 11
    GOOD = 12
    VERY_GOOD = 13
    BEST = 14
    LAST_DEFINED = 15

class HyperlinkStateFlags(Enum):
    """
    Describes the type of link
    """
    INLINE = 1


def add_focus_tracker(focus_tracker: EventListener) -> int:
    """
    Adds the specified function to the list of functions to be called
    when an object receives focus.
    """
    ...

def add_global_event_listener(listener: GObject.SignalEmissionHook, event_type: str) -> int:
    """
    Adds the specified function to the list of functions to be called
    when an ATK event of type event_type occurs.

    The format of event_type is the following:
     "ATK:&lt;atk_type&gt;:&lt;atk_event&gt;:&lt;atk_event_detail&gt;

    Where "ATK" works as the namespace, &lt;atk_interface&gt; is the name of
    the ATK type (interface or object), &lt;atk_event&gt; is the name of the
    signal defined on that interface and &lt;atk_event_detail&gt; is the
    gsignal detail of that signal. You can find more info about gsignal
    details here:
    http://developer.gnome.org/gobject/stable/gobject-Signals.html

    The first three parameters are mandatory. The last one is optional.

    For example:
      ATK:AtkObject:state-change
      ATK:AtkText:text-selection-changed
      ATK:AtkText:text-insert:system

    Toolkit implementor note: ATK provides a default implementation for
    this virtual method. ATK implementors are discouraged from
    reimplementing this method.

    Toolkit implementor note: this method is not intended to be used by
    ATK implementors but by ATK consumers.

    ATK consumers note: as this method adds a listener for a given ATK
    type, that type should be already registered on the GType system
    before calling this method. A simple way to do that is creating an
    instance of #AtkNoOpObject. This class implements all ATK
    interfaces, so creating the instance will register all ATK types as
    a collateral effect.
    """
    ...

def add_key_event_listener(listener: KeySnoopFunc, data: _T.Optional[object]) -> int:
    """
    Adds the specified function to the list of functions to be called
           when a key event occurs.  The @data element will be passed to the
           #AtkKeySnoopFunc (@listener) as the @func_data param, on notification.
    """
    ...

def focus_tracker_init(init: EventListenerInit) -> object:
    """
    Specifies the function to be called for focus tracker initialization.
    This function should be called by an implementation of the
    ATK interface if any specific work needs to be done to enable
    focus tracking.
    """
    ...

def focus_tracker_notify(object: Object) -> object:
    """
    Cause the focus tracker functions which have been specified to be
    executed for the object.
    """
    ...

def get_binary_age() -> int:
    """
    Returns the binary age as passed to libtool when building the ATK
    library the process is running against.
    """
    ...

def get_default_registry() -> Registry:
    """
    Gets a default implementation of the #AtkObjectFactory/type
    registry.
    Note: For most toolkit maintainers, this will be the correct
    registry for registering new #AtkObject factories. Following
    a call to this function, maintainers may call atk_registry_set_factory_type()
    to associate an #AtkObjectFactory subclass with the GType of objects
    for whom accessibility information will be provided.
    """
    ...

def get_focus_object() -> Object:
    """
    Gets the currently focused object.
    """
    ...

def get_interface_age() -> int:
    """
    Returns the interface age as passed to libtool when building the
    ATK library the process is running against.
    """
    ...

def get_major_version() -> int:
    """
    Returns the major version number of the ATK library.  (e.g. in ATK
    version 2.7.4 this is 2.)

    This function is in the library, so it represents the ATK library
    your code is running against. In contrast, the #ATK_MAJOR_VERSION
    macro represents the major version of the ATK headers you have
    included when compiling your code.
    """
    ...

def get_micro_version() -> int:
    """
    Returns the micro version number of the ATK library.  (e.g. in ATK
    version 2.7.4 this is 4.)

    This function is in the library, so it represents the ATK library
    your code is are running against. In contrast, the
    #ATK_MICRO_VERSION macro represents the micro version of the ATK
    headers you have included when compiling your code.
    """
    ...

def get_minor_version() -> int:
    """
    Returns the minor version number of the ATK library.  (e.g. in ATK
    version 2.7.4 this is 7.)

    This function is in the library, so it represents the ATK library
    your code is are running against. In contrast, the
    #ATK_MINOR_VERSION macro represents the minor version of the ATK
    headers you have included when compiling your code.
    """
    ...

def get_root() -> Object:
    """
    Gets the root accessible container for the current application.
    """
    ...

def get_toolkit_name() -> str:
    """
    Gets name string for the GUI toolkit implementing ATK for this application.
    """
    ...

def get_toolkit_version() -> str:
    """
    Gets version string for the GUI toolkit implementing ATK for this application.
    """
    ...

def get_version() -> str:
    """
    Gets the current version for ATK.
    """
    ...

def remove_focus_tracker(tracker_id: int) -> object:
    """
    Removes the specified focus tracker from the list of functions
    to be called when any object receives focus.
    """
    ...

def remove_global_event_listener(listener_id: int) -> object:
    """
    @listener_id is the value returned by #atk_add_global_event_listener
    when you registered that event listener.

    Toolkit implementor note: ATK provides a default implementation for
    this virtual method. ATK implementors are discouraged from
    reimplementing this method.

    Toolkit implementor note: this method is not intended to be used by
    ATK implementors but by ATK consumers.

    Removes the specified event listener
    """
    ...

def remove_key_event_listener(listener_id: int) -> object:
    """
    @listener_id is the value returned by #atk_add_key_event_listener
    when you registered that event listener.

    Removes the specified event listener.
    """
    ...

class GObjectAccessible(Object):
    """
    This object class is derived from AtkObject. It can be used as a
    basis for implementing accessible objects for GObjects which are
    not derived from GtkWidget. One example of its use is in providing
    an accessible object for GnomeCanvasItem in the GAIL library.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_object(self) -> GObject.Object:
        """
        Gets the GObject for which @obj is the accessible object.
        """
        ...


    ...

class Hyperlink(GObject.Object, Action):
    """
    An ATK object which encapsulates a link or set of links (for
    instance in the case of client-side image maps) in a hypertext
    document.  It may implement the AtkAction interface.  AtkHyperlink
    may also be used to refer to inline embedded content, since it
    allows specification of a start and end offset within the host
    AtkHypertext object.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_end_index(self) -> int:
        """
        Gets the index with the hypertext document at which this link ends.
        """
        ...

    def get_n_anchors(self) -> int:
        """
        Gets the number of anchors associated with this hyperlink.
        """
        ...

    def get_object(self, i: int) -> Object:
        """
        Returns the item associated with this hyperlinks nth anchor.
        For instance, the returned #AtkObject will implement #AtkText
        if @link_ is a text hyperlink, #AtkImage if @link_ is an image
        hyperlink etc.

        Multiple anchors are primarily used by client-side image maps.
        """
        ...

    def get_start_index(self) -> int:
        """
        Gets the index with the hypertext document at which this link begins.
        """
        ...

    def get_uri(self, i: int) -> str:
        """
        Get a the URI associated with the anchor specified
        by @i of @link_.

        Multiple anchors are primarily used by client-side image maps.
        """
        ...

    def is_inline(self) -> bool:
        """
        Indicates whether the link currently displays some or all of its
                  content inline.  Ordinary HTML links will usually return
                  %FALSE, but an inline &lt;src&gt; HTML element will return
                  %TRUE.
        """
        ...

    def is_selected_link(self) -> bool:
        """
        Determines whether this AtkHyperlink is selected
        """
        ...

    def is_valid(self) -> bool:
        """
        Since the document that a link is associated with may have changed
        this method returns %TRUE if the link is still valid (with
        respect to the document it references) and %FALSE otherwise.
        """
        ...


    ...

class Misc(GObject.Object):
    """
    A set of utility functions for thread locking. This interface and
    all his related methods are deprecated since 2.12.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def threads_enter(self) -> object:
        """
        Take the thread mutex for the GUI toolkit,
        if one exists.
        (This method is implemented by the toolkit ATK implementation layer;
         for instance, for GTK+, GAIL implements this via GDK_THREADS_ENTER).
        """
        ...

    def threads_leave(self) -> object:
        """
        Release the thread mutex for the GUI toolkit,
        if one exists. This method, and atk_misc_threads_enter,
        are needed in some situations by threaded application code which
        services ATK requests, since fulfilling ATK requests often
        requires calling into the GUI toolkit.  If a long-running or
        potentially blocking call takes place inside such a block, it should
        be bracketed by atk_misc_threads_leave/atk_misc_threads_enter calls.
        (This method is implemented by the toolkit ATK implementation layer;
         for instance, for GTK+, GAIL implements this via GDK_THREADS_LEAVE).
        """
        ...


    ...

class NoOpObject(Object, Action, Component, Document, EditableText, Hypertext, Image, Selection, Table, TableCell, Text, Value, Window):
    """
    An AtkNoOpObject is an AtkObject which purports to implement all
    ATK interfaces. It is the type of AtkObject which is created if an
    accessible object is requested for an object type for which no
    factory type is specified.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, obj: GObject.Object) -> Object:
        """
        Provides a default (non-functioning stub) #AtkObject.
        Application maintainers should not use this method.
        """
        ...


    ...

class NoOpObjectFactory(ObjectFactory):
    """
    The AtkObjectFactory which creates an AtkNoOpObject. An instance of
    this is created by an AtkRegistry if no factory type has not been
    specified to create an accessible object of a particular type.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> ObjectFactory:
        """
        Creates an instance of an #AtkObjectFactory which generates primitive
        (non-functioning) #AtkObjects.
        """
        ...


    ...

class Object(GObject.Object):
    """
    This class is the primary class for accessibility support via the
    Accessibility ToolKit (ATK).  Objects which are instances of
    #AtkObject (or instances of AtkObject-derived types) are queried
    for properties which relate basic (and generic) properties of a UI
    component such as name and description.  Instances of #AtkObject
    may also be queried as to whether they implement other ATK
    interfaces (e.g. #AtkAction, #AtkComponent, etc.), as appropriate
    to the role which a given UI component plays in a user interface.

    All UI components in an application which provide useful
    information or services to the user must provide corresponding
    #AtkObject instances on request (in GTK+, for instance, usually on
    a call to #gtk_widget_get_accessible ()), either via ATK support
    built into the toolkit for the widget class or ancestor class, or
    in the case of custom widgets, if the inherited #AtkObject
    implementation is insufficient, via instances of a new #AtkObject
    subclass.

    See also: #AtkObjectFactory, #AtkRegistry.  (GTK+ users see also
    #GtkAccessible).
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def add_relationship(self, relationship: RelationType, target: Object) -> bool:
        """
        Adds a relationship of the specified type with the specified target.
        """
        ...

    def connect_property_change_handler(self, handler: PropertyChangeHandler) -> int:
        """
        Calls @handler on property changes.
        """
        ...

    def get_accessible_id(self) -> str:
        """
        Gets the accessible id of the accessible.
        """
        ...

    def get_attributes(self) -> AttributeSet:
        """
        Get a list of properties applied to this object as a whole, as an #AtkAttributeSet consisting of
        name-value pairs. As such these attributes may be considered weakly-typed properties or annotations,
        as distinct from strongly-typed object data available via other get/set methods.
        Not all objects have explicit "name-value pair" #AtkAttributeSet properties.
        """
        ...

    def get_description(self) -> str:
        """
        Gets the accessible description of the accessible.
        """
        ...

    def get_index_in_parent(self) -> int:
        """
        Gets the 0-based index of this accessible in its parent; returns -1 if the
        accessible does not have an accessible parent.
        """
        ...

    def get_layer(self) -> Layer:
        """
        Gets the layer of the accessible.
        """
        ...

    def get_mdi_zorder(self) -> int:
        """
        Gets the zorder of the accessible. The value G_MININT will be returned
        if the layer of the accessible is not ATK_LAYER_MDI.
        """
        ...

    def get_n_accessible_children(self) -> int:
        """
        Gets the number of accessible children of the accessible.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the accessible name of the accessible.
        """
        ...

    def get_object_locale(self) -> str:
        """
        Gets a UTF-8 string indicating the POSIX-style LC_MESSAGES locale
        of @accessible.
        """
        ...

    def get_parent(self) -> Object:
        """
        Gets the accessible parent of the accessible. By default this is
        the one assigned with atk_object_set_parent(), but it is assumed
        that ATK implementors have ways to get the parent of the object
        without the need of assigning it manually with
        atk_object_set_parent(), and will return it with this method.

        If you are only interested on the parent assigned with
        atk_object_set_parent(), use atk_object_peek_parent().
        """
        ...

    def get_role(self) -> Role:
        """
        Gets the role of the accessible.
        """
        ...

    def initialize(self, data: _T.Optional[object]) -> object:
        """
        This function is called when implementing subclasses of #AtkObject.
        It does initialization required for the new object. It is intended
        that this function should called only in the ..._new() functions used
        to create an instance of a subclass of #AtkObject
        """
        ...

    def notify_state_change(self, state: State, value: bool) -> object:
        """
        Emits a state-change signal for the specified state.

        Note that as a general rule when the state of an existing object changes,
        emitting a notification is expected.
        """
        ...

    def peek_parent(self) -> Object:
        """
        Gets the accessible parent of the accessible, if it has been
        manually assigned with atk_object_set_parent. Otherwise, this
        function returns %NULL.

        This method is intended as an utility for ATK implementors, and not
        to be exposed to accessible tools. See atk_object_get_parent() for
        further reference.
        """
        ...

    def ref_accessible_child(self, i: int) -> Object:
        """
        Gets a reference to the specified accessible child of the object.
        The accessible children are 0-based so the first accessible child is
        at index 0, the second at index 1 and so on.
        """
        ...

    def ref_relation_set(self) -> RelationSet:
        """
        Gets the #AtkRelationSet associated with the object.
        """
        ...

    def ref_state_set(self) -> StateSet:
        """
        Gets a reference to the state set of the accessible; the caller must
        unreference it when it is no longer needed.
        """
        ...

    def remove_property_change_handler(self, handler_id: int) -> object:
        """
        Removes a property change handler.
        """
        ...

    def remove_relationship(self, relationship: RelationType, target: Object) -> bool:
        """
        Removes a relationship of the specified type with the specified target.
        """
        ...

    def set_accessible_id(self, name: str) -> object:
        """
        Sets the accessible ID of the accessible.  This is not meant to be presented
        to the user, but to be an ID which is stable over application development.
        Typically, this is the gtkbuilder ID. Such an ID will be available for
        instance to identify a given well-known accessible object for tailored screen
        reading, or for automatic regression testing.
        """
        ...

    def set_description(self, description: str) -> object:
        """
        Sets the accessible description of the accessible. You can't set
        the description to NULL. This is reserved for the initial value. In
        this aspect NULL is similar to ATK_ROLE_UNKNOWN. If you want to set
        the name to a empty value you can use "".
        """
        ...

    def set_name(self, name: str) -> object:
        """
        Sets the accessible name of the accessible. You can't set the name
        to NULL. This is reserved for the initial value. In this aspect
        NULL is similar to ATK_ROLE_UNKNOWN. If you want to set the name to
        a empty value you can use "".
        """
        ...

    def set_parent(self, parent: Object) -> object:
        """
        Sets the accessible parent of the accessible. @parent can be NULL.
        """
        ...

    def set_role(self, role: Role) -> object:
        """
        Sets the role of the accessible.
        """
        ...


    ...

class ObjectFactory(GObject.Object):
    """
    This class is the base object class for a factory used to create an
    accessible object for a specific GType. The function
    atk_registry_set_factory_type() is normally called to store in the
    registry the factory type to be used to create an accessible of a
    particular GType.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def create_accessible(self, obj: GObject.Object) -> Object:
        """
        Provides an #AtkObject that implements an accessibility interface
        on behalf of @obj
        """
        ...

    def get_accessible_type(self) -> GObject.Type:
        """
        Gets the GType of the accessible which is created by the factory.
        """
        ...

    def invalidate(self) -> object:
        """
        Inform @factory that it is no longer being used to create
        accessibles. When called, @factory may need to inform
        #AtkObjects which it has created that they need to be re-instantiated.
        Note: primarily used for runtime replacement of #AtkObjectFactorys
        in object registries.
        """
        ...


    ...

class Plug(Object, Component):
    """
    See #AtkSocket
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Object:
        """
        Creates a new #AtkPlug instance.
        """
        ...

    def get_id(self) -> str:
        """
        Gets the unique ID of an #AtkPlug object, which can be used to
        embed inside of an #AtkSocket using atk_socket_embed().

        Internally, this calls a class function that should be registered
        by the IPC layer (usually at-spi2-atk). The implementor of an
        #AtkPlug object should call this function (after atk-bridge is
        loaded) and pass the value to the process implementing the
        #AtkSocket, so it could embed the plug.
        """
        ...

    def set_child(self, child: Object) -> object:
        """
        Sets @child as accessible child of @plug and @plug as accessible parent of
        @child. @child can be NULL.

        In some cases, one can not use the AtkPlug type directly as accessible
        object for the toplevel widget of the application. For instance in the gtk
        case, GtkPlugAccessible can not inherit both from GtkWindowAccessible and
        from AtkPlug. In such a case, one can create, in addition to the standard
        accessible object for the toplevel widget, an AtkPlug object, and make the
        former the child of the latter by calling atk_plug_set_child().
        """
        ...


    ...

class Registry(GObject.Object):
    """
    The AtkRegistry is normally used to create appropriate ATK "peers"
    for user interface components.  Application developers usually need
    only interact with the AtkRegistry by associating appropriate ATK
    implementation classes with GObject classes via the
    atk_registry_set_factory_type call, passing the appropriate GType
    for application custom widget classes.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_factory(self, type: GObject.Type) -> ObjectFactory:
        """
        Gets an #AtkObjectFactory appropriate for creating #AtkObjects
        appropriate for @type.
        """
        ...

    def get_factory_type(self, type: GObject.Type) -> GObject.Type:
        """
        Provides a #GType indicating the #AtkObjectFactory subclass
        associated with @type.
        """
        ...

    def set_factory_type(self, type: GObject.Type, factory_type: GObject.Type) -> object:
        """
        Associate an #AtkObjectFactory subclass with a #GType. Note:
        The associated @factory_type will thereafter be responsible for
        the creation of new #AtkObject implementations for instances
        appropriate for @type.
        """
        ...


    ...

class Relation(GObject.Object):
    """
    An AtkRelation describes a relation between an object and one or
    more other objects. The actual relations that an object has with
    other objects are defined as an AtkRelationSet, which is a set of
    AtkRelations.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, targets: object, n_targets: int, relationship: RelationType) -> Relation:
        """
        Create a new relation for the specified key and the specified list
        of targets.  See also atk_object_add_relationship().
        """
        ...

    def add_target(self, target: Object) -> object:
        """
        Adds the specified AtkObject to the target for the relation, if it is
        not already present.  See also atk_object_add_relationship().
        """
        ...

    def get_relation_type(self) -> RelationType:
        """
        Gets the type of @relation
        """
        ...

    def get_target(self) -> GLib.PtrArray:
        """
        Gets the target list of @relation
        """
        ...

    def remove_target(self, target: Object) -> bool:
        """
        Remove the specified AtkObject from the target for the relation.
        """
        ...


    ...

class RelationSet(GObject.Object):
    """
    The AtkRelationSet held by an object establishes its relationships
    with objects beyond the normal "parent/child" hierarchical
    relationships that all user interface objects have.
    AtkRelationSets establish whether objects are labelled or
    controlled by other components, share group membership with other
    components (for instance within a radio-button group), or share
    content which "flows" between them, among other types of possible
    relationships.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> RelationSet:
        """
        Creates a new empty relation set.
        """
        ...

    def add(self, relation: Relation) -> object:
        """
        Add a new relation to the current relation set if it is not already
        present.
        This function ref's the AtkRelation so the caller of this function
        should unref it to ensure that it will be destroyed when the AtkRelationSet
        is destroyed.
        """
        ...

    def add_relation_by_type(self, relationship: RelationType, target: Object) -> object:
        """
        Add a new relation of the specified type with the specified target to
        the current relation set if the relation set does not contain a relation
        of that type. If it is does contain a relation of that typea the target
        is added to the relation.
        """
        ...

    def contains(self, relationship: RelationType) -> bool:
        """
        Determines whether the relation set contains a relation that matches the
        specified type.
        """
        ...

    def contains_target(self, relationship: RelationType, target: Object) -> bool:
        """
        Determines whether the relation set contains a relation that
        matches the specified pair formed by type @relationship and object
        @target.
        """
        ...

    def get_n_relations(self) -> int:
        """
        Determines the number of relations in a relation set.
        """
        ...

    def get_relation(self, i: int) -> Relation:
        """
        Determines the relation at the specified position in the relation set.
        """
        ...

    def get_relation_by_type(self, relationship: RelationType) -> Relation:
        """
        Finds a relation that matches the specified type.
        """
        ...

    def remove(self, relation: Relation) -> object:
        """
        Removes a relation from the relation set.
        This function unref's the #AtkRelation so it will be deleted unless there
        is another reference to it.
        """
        ...


    ...

class Socket(Object, Component):
    """
    Together with #AtkPlug, #AtkSocket provides the ability to embed
    accessibles from one process into another in a fashion that is
    transparent to assistive technologies. #AtkSocket works as the
    container of #AtkPlug, embedding it using the method
    atk_socket_embed(). Any accessible contained in the #AtkPlug will
    appear to the assistive technologies as being inside the
    application that created the #AtkSocket.

    The communication between a #AtkSocket and a #AtkPlug is done by
    the IPC layer of the accessibility framework, normally implemented
    by the D-Bus based implementation of AT-SPI (at-spi2). If that is
    the case, at-spi-atk2 is the responsible to implement the abstract
    methods atk_plug_get_id() and atk_socket_embed(), so an ATK
    implementor shouldn't reimplement them. The process that contains
    the #AtkPlug is responsible to send the ID returned by
    atk_plug_id() to the process that contains the #AtkSocket, so it
    could call the method atk_socket_embed() in order to embed it.

    For the same reasons, an implementor doesn't need to implement
    atk_object_get_n_accessible_children() and
    atk_object_ref_accessible_child(). All the logic related to those
    functions will be implemented by the IPC layer.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> Object:
        """
        Creates a new #AtkSocket.
        """
        ...

    def embed(self, plug_id: str) -> object:
        """
        Embeds the children of an #AtkPlug as the children of the
        #AtkSocket. The plug may be in the same process or in a different
        process.

        The class item used by this function should be filled in by the IPC
        layer (usually at-spi2-atk). The implementor of the AtkSocket
        should call this function and pass the id for the plug as returned
        by atk_plug_get_id().  It is the responsibility of the application
        to pass the plug id on to the process implementing the #AtkSocket
        as needed.
        """
        ...

    def is_occupied(self) -> bool:
        """
        Determines whether or not the socket has an embedded plug.
        """
        ...


    ...

class StateSet(GObject.Object):
    """
    An AtkStateSet is a read-only representation of the full set of #AtkStates
    that apply to an object at a given time. This set is not meant to be
    modified, but rather created when #atk_object_ref_state_set() is called.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> StateSet:
        """
        Creates a new empty state set.
        """
        ...

    def add_state(self, type: StateType) -> bool:
        """
        Adds the state of the specified type to the state set if it is not already
        present.

        Note that because an #AtkStateSet is a read-only object, this method should
        be used to add a state to a newly-created set which will then be returned by
        #atk_object_ref_state_set. It should not be used to modify the existing state
        of an object. See also #atk_object_notify_state_change.
        """
        ...

    def add_states(self, types: object, n_types: int) -> object:
        """
        Adds the states of the specified types to the state set.

        Note that because an #AtkStateSet is a read-only object, this method should
        be used to add states to a newly-created set which will then be returned by
        #atk_object_ref_state_set. It should not be used to modify the existing state
        of an object. See also #atk_object_notify_state_change.
        """
        ...

    def and_sets(self, compare_set: StateSet) -> StateSet:
        """
        Constructs the intersection of the two sets, returning %NULL if the
        intersection is empty.
        """
        ...

    def clear_states(self) -> object:
        """
        Removes all states from the state set.
        """
        ...

    def contains_state(self, type: StateType) -> bool:
        """
        Checks whether the state for the specified type is in the specified set.
        """
        ...

    def contains_states(self, types: object, n_types: int) -> bool:
        """
        Checks whether the states for all the specified types are in the
        specified set.
        """
        ...

    def is_empty(self) -> bool:
        """
        Checks whether the state set is empty, i.e. has no states set.
        """
        ...

    def or_sets(self, compare_set: StateSet) -> StateSet:
        """
        Constructs the union of the two sets.
        """
        ...

    def remove_state(self, type: StateType) -> bool:
        """
        Removes the state for the specified type from the state set.

        Note that because an #AtkStateSet is a read-only object, this method should
        be used to remove a state to a newly-created set which will then be returned
        by #atk_object_ref_state_set. It should not be used to modify the existing
        state of an object. See also #atk_object_notify_state_change.
        """
        ...

    def xor_sets(self, compare_set: StateSet) -> StateSet:
        """
        Constructs the exclusive-or of the two sets, returning %NULL is empty.
        The set returned by this operation contains the states in exactly
        one of the two sets.
        """
        ...


    ...

class Util(GObject.Object):
    """
    A set of ATK utility functions which are used to support event
    registration of various types, and obtaining the 'root' accessible
    of a process and information about the current ATK implementation
    and toolkit version.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    ...


