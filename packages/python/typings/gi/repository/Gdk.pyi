"""
Stub file for Gdk. Autogenerated with gi-stubgen.
"""

import typing as _T  # noqa
from enum import Enum

from gi.repository import GLib, GModule, GObject, Gio, GdkPixbuf, HarfBuzz, cairo, Pango

BUTTON_MIDDLE = 2
"""
The middle button.
"""

BUTTON_PRIMARY = 1
"""
The primary button. This is typically the left mouse button, or the
right button in a left-handed setup.
"""

BUTTON_SECONDARY = 3
"""
The secondary button. This is typically the right mouse button, or the
left button in a left-handed setup.
"""

CURRENT_TIME = 0
"""
Represents the current time, and can be used anywhere a time is expected.
"""

EVENT_PROPAGATE = "false"
"""
Use this macro as the return value for continuing the propagation of
an event handler.
"""

EVENT_STOP = "true"
"""
Use this macro as the return value for stopping the propagation of
an event handler.
"""

KEY_0 = 48

KEY_1 = 49

KEY_2 = 50

KEY_3 = 51

KEY_3270_AltCursor = 64784

KEY_3270_Attn = 64782

KEY_3270_BackTab = 64773

KEY_3270_ChangeScreen = 64793

KEY_3270_Copy = 64789

KEY_3270_CursorBlink = 64783

KEY_3270_CursorSelect = 64796

KEY_3270_DeleteWord = 64794

KEY_3270_Duplicate = 64769

KEY_3270_Enter = 64798

KEY_3270_EraseEOF = 64774

KEY_3270_EraseInput = 64775

KEY_3270_ExSelect = 64795

KEY_3270_FieldMark = 64770

KEY_3270_Ident = 64787

KEY_3270_Jump = 64786

KEY_3270_KeyClick = 64785

KEY_3270_Left2 = 64772

KEY_3270_PA1 = 64778

KEY_3270_PA2 = 64779

KEY_3270_PA3 = 64780

KEY_3270_Play = 64790

KEY_3270_PrintScreen = 64797

KEY_3270_Quit = 64777

KEY_3270_Record = 64792

KEY_3270_Reset = 64776

KEY_3270_Right2 = 64771

KEY_3270_Rule = 64788

KEY_3270_Setup = 64791

KEY_3270_Test = 64781

KEY_4 = 52

KEY_5 = 53

KEY_6 = 54

KEY_7 = 55

KEY_8 = 56

KEY_9 = 57

KEY_A = 65

KEY_AE = 198

KEY_Aacute = 193

KEY_Abelowdot = 16785056

KEY_Abreve = 451

KEY_Abreveacute = 16785070

KEY_Abrevebelowdot = 16785078

KEY_Abrevegrave = 16785072

KEY_Abrevehook = 16785074

KEY_Abrevetilde = 16785076

KEY_AccessX_Enable = 65136

KEY_AccessX_Feedback_Enable = 65137

KEY_Acircumflex = 194

KEY_Acircumflexacute = 16785060

KEY_Acircumflexbelowdot = 16785068

KEY_Acircumflexgrave = 16785062

KEY_Acircumflexhook = 16785064

KEY_Acircumflextilde = 16785066

KEY_AddFavorite = 269025081

KEY_Adiaeresis = 196

KEY_Agrave = 192

KEY_Ahook = 16785058

KEY_Alt_L = 65513

KEY_Alt_R = 65514

KEY_Amacron = 960

KEY_Aogonek = 417

KEY_ApplicationLeft = 269025104

KEY_ApplicationRight = 269025105

KEY_Arabic_0 = 16778848

KEY_Arabic_1 = 16778849

KEY_Arabic_2 = 16778850

KEY_Arabic_3 = 16778851

KEY_Arabic_4 = 16778852

KEY_Arabic_5 = 16778853

KEY_Arabic_6 = 16778854

KEY_Arabic_7 = 16778855

KEY_Arabic_8 = 16778856

KEY_Arabic_9 = 16778857

KEY_Arabic_ain = 1497

KEY_Arabic_alef = 1479

KEY_Arabic_alefmaksura = 1513

KEY_Arabic_beh = 1480

KEY_Arabic_comma = 1452

KEY_Arabic_dad = 1494

KEY_Arabic_dal = 1487

KEY_Arabic_damma = 1519

KEY_Arabic_dammatan = 1516

KEY_Arabic_ddal = 16778888

KEY_Arabic_farsi_yeh = 16778956

KEY_Arabic_fatha = 1518

KEY_Arabic_fathatan = 1515

KEY_Arabic_feh = 1505

KEY_Arabic_fullstop = 16778964

KEY_Arabic_gaf = 16778927

KEY_Arabic_ghain = 1498

KEY_Arabic_ha = 1511

KEY_Arabic_hah = 1485

KEY_Arabic_hamza = 1473

KEY_Arabic_hamza_above = 16778836

KEY_Arabic_hamza_below = 16778837

KEY_Arabic_hamzaonalef = 1475

KEY_Arabic_hamzaonwaw = 1476

KEY_Arabic_hamzaonyeh = 1478

KEY_Arabic_hamzaunderalef = 1477

KEY_Arabic_heh = 1511

KEY_Arabic_heh_doachashmee = 16778942

KEY_Arabic_heh_goal = 16778945

KEY_Arabic_jeem = 1484

KEY_Arabic_jeh = 16778904

KEY_Arabic_kaf = 1507

KEY_Arabic_kasra = 1520

KEY_Arabic_kasratan = 1517

KEY_Arabic_keheh = 16778921

KEY_Arabic_khah = 1486

KEY_Arabic_lam = 1508

KEY_Arabic_madda_above = 16778835

KEY_Arabic_maddaonalef = 1474

KEY_Arabic_meem = 1509

KEY_Arabic_noon = 1510

KEY_Arabic_noon_ghunna = 16778938

KEY_Arabic_peh = 16778878

KEY_Arabic_percent = 16778858

KEY_Arabic_qaf = 1506

KEY_Arabic_question_mark = 1471

KEY_Arabic_ra = 1489

KEY_Arabic_rreh = 16778897

KEY_Arabic_sad = 1493

KEY_Arabic_seen = 1491

KEY_Arabic_semicolon = 1467

KEY_Arabic_shadda = 1521

KEY_Arabic_sheen = 1492

KEY_Arabic_sukun = 1522

KEY_Arabic_superscript_alef = 16778864

KEY_Arabic_switch = 65406

KEY_Arabic_tah = 1495

KEY_Arabic_tatweel = 1504

KEY_Arabic_tcheh = 16778886

KEY_Arabic_teh = 1482

KEY_Arabic_tehmarbuta = 1481

KEY_Arabic_thal = 1488

KEY_Arabic_theh = 1483

KEY_Arabic_tteh = 16778873

KEY_Arabic_veh = 16778916

KEY_Arabic_waw = 1512

KEY_Arabic_yeh = 1514

KEY_Arabic_yeh_baree = 16778962

KEY_Arabic_zah = 1496

KEY_Arabic_zain = 1490

KEY_Aring = 197

KEY_Armenian_AT = 16778552

KEY_Armenian_AYB = 16778545

KEY_Armenian_BEN = 16778546

KEY_Armenian_CHA = 16778569

KEY_Armenian_DA = 16778548

KEY_Armenian_DZA = 16778561

KEY_Armenian_E = 16778551

KEY_Armenian_FE = 16778582

KEY_Armenian_GHAT = 16778562

KEY_Armenian_GIM = 16778547

KEY_Armenian_HI = 16778565

KEY_Armenian_HO = 16778560

KEY_Armenian_INI = 16778555

KEY_Armenian_JE = 16778571

KEY_Armenian_KE = 16778580

KEY_Armenian_KEN = 16778559

KEY_Armenian_KHE = 16778557

KEY_Armenian_LYUN = 16778556

KEY_Armenian_MEN = 16778564

KEY_Armenian_NU = 16778566

KEY_Armenian_O = 16778581

KEY_Armenian_PE = 16778570

KEY_Armenian_PYUR = 16778579

KEY_Armenian_RA = 16778572

KEY_Armenian_RE = 16778576

KEY_Armenian_SE = 16778573

KEY_Armenian_SHA = 16778567

KEY_Armenian_TCHE = 16778563

KEY_Armenian_TO = 16778553

KEY_Armenian_TSA = 16778558

KEY_Armenian_TSO = 16778577

KEY_Armenian_TYUN = 16778575

KEY_Armenian_VEV = 16778574

KEY_Armenian_VO = 16778568

KEY_Armenian_VYUN = 16778578

KEY_Armenian_YECH = 16778549

KEY_Armenian_ZA = 16778550

KEY_Armenian_ZHE = 16778554

KEY_Armenian_accent = 16778587

KEY_Armenian_amanak = 16778588

KEY_Armenian_apostrophe = 16778586

KEY_Armenian_at = 16778600

KEY_Armenian_ayb = 16778593

KEY_Armenian_ben = 16778594

KEY_Armenian_but = 16778589

KEY_Armenian_cha = 16778617

KEY_Armenian_da = 16778596

KEY_Armenian_dza = 16778609

KEY_Armenian_e = 16778599

KEY_Armenian_exclam = 16778588

KEY_Armenian_fe = 16778630

KEY_Armenian_full_stop = 16778633

KEY_Armenian_ghat = 16778610

KEY_Armenian_gim = 16778595

KEY_Armenian_hi = 16778613

KEY_Armenian_ho = 16778608

KEY_Armenian_hyphen = 16778634

KEY_Armenian_ini = 16778603

KEY_Armenian_je = 16778619

KEY_Armenian_ke = 16778628

KEY_Armenian_ken = 16778607

KEY_Armenian_khe = 16778605

KEY_Armenian_ligature_ew = 16778631

KEY_Armenian_lyun = 16778604

KEY_Armenian_men = 16778612

KEY_Armenian_nu = 16778614

KEY_Armenian_o = 16778629

KEY_Armenian_paruyk = 16778590

KEY_Armenian_pe = 16778618

KEY_Armenian_pyur = 16778627

KEY_Armenian_question = 16778590

KEY_Armenian_ra = 16778620

KEY_Armenian_re = 16778624

KEY_Armenian_se = 16778621

KEY_Armenian_separation_mark = 16778589

KEY_Armenian_sha = 16778615

KEY_Armenian_shesht = 16778587

KEY_Armenian_tche = 16778611

KEY_Armenian_to = 16778601

KEY_Armenian_tsa = 16778606

KEY_Armenian_tso = 16778625

KEY_Armenian_tyun = 16778623

KEY_Armenian_verjaket = 16778633

KEY_Armenian_vev = 16778622

KEY_Armenian_vo = 16778616

KEY_Armenian_vyun = 16778626

KEY_Armenian_yech = 16778597

KEY_Armenian_yentamna = 16778634

KEY_Armenian_za = 16778598

KEY_Armenian_zhe = 16778602

KEY_Atilde = 195

KEY_AudibleBell_Enable = 65146

KEY_AudioCycleTrack = 269025179

KEY_AudioForward = 269025175

KEY_AudioLowerVolume = 269025041

KEY_AudioMedia = 269025074

KEY_AudioMicMute = 269025202

KEY_AudioMute = 269025042

KEY_AudioNext = 269025047

KEY_AudioPause = 269025073

KEY_AudioPlay = 269025044

KEY_AudioPreset = 269025206

KEY_AudioPrev = 269025046

KEY_AudioRaiseVolume = 269025043

KEY_AudioRandomPlay = 269025177

KEY_AudioRecord = 269025052

KEY_AudioRepeat = 269025176

KEY_AudioRewind = 269025086

KEY_AudioStop = 269025045

KEY_Away = 269025165

KEY_B = 66

KEY_Babovedot = 16784898

KEY_Back = 269025062

KEY_BackForward = 269025087

KEY_BackSpace = 65288

KEY_Battery = 269025171

KEY_Begin = 65368

KEY_Blue = 269025190

KEY_Bluetooth = 269025172

KEY_Book = 269025106

KEY_BounceKeys_Enable = 65140

KEY_Break = 65387

KEY_BrightnessAdjust = 269025083

KEY_Byelorussian_SHORTU = 1726

KEY_Byelorussian_shortu = 1710

KEY_C = 67

KEY_CD = 269025107

KEY_CH = 65186

KEY_C_H = 65189

KEY_C_h = 65188

KEY_Cabovedot = 709

KEY_Cacute = 454

KEY_Calculator = 269025053

KEY_Calendar = 269025056

KEY_Cancel = 65385

KEY_Caps_Lock = 65509

KEY_Ccaron = 456

KEY_Ccedilla = 199

KEY_Ccircumflex = 710

KEY_Ch = 65185

KEY_Clear = 65291

KEY_ClearGrab = 269024801

KEY_Close = 269025110

KEY_Codeinput = 65335

KEY_ColonSign = 16785569

KEY_Community = 269025085

KEY_ContrastAdjust = 269025058

KEY_Control_L = 65507

KEY_Control_R = 65508

KEY_Copy = 269025111

KEY_CruzeiroSign = 16785570

KEY_Cut = 269025112

KEY_CycleAngle = 269025180

KEY_Cyrillic_A = 1761

KEY_Cyrillic_BE = 1762

KEY_Cyrillic_CHE = 1790

KEY_Cyrillic_CHE_descender = 16778422

KEY_Cyrillic_CHE_vertstroke = 16778424

KEY_Cyrillic_DE = 1764

KEY_Cyrillic_DZHE = 1727

KEY_Cyrillic_E = 1788

KEY_Cyrillic_EF = 1766

KEY_Cyrillic_EL = 1772

KEY_Cyrillic_EM = 1773

KEY_Cyrillic_EN = 1774

KEY_Cyrillic_EN_descender = 16778402

KEY_Cyrillic_ER = 1778

KEY_Cyrillic_ES = 1779

KEY_Cyrillic_GHE = 1767

KEY_Cyrillic_GHE_bar = 16778386

KEY_Cyrillic_HA = 1768

KEY_Cyrillic_HARDSIGN = 1791

KEY_Cyrillic_HA_descender = 16778418

KEY_Cyrillic_I = 1769

KEY_Cyrillic_IE = 1765

KEY_Cyrillic_IO = 1715

KEY_Cyrillic_I_macron = 16778466

KEY_Cyrillic_JE = 1720

KEY_Cyrillic_KA = 1771

KEY_Cyrillic_KA_descender = 16778394

KEY_Cyrillic_KA_vertstroke = 16778396

KEY_Cyrillic_LJE = 1721

KEY_Cyrillic_NJE = 1722

KEY_Cyrillic_O = 1775

KEY_Cyrillic_O_bar = 16778472

KEY_Cyrillic_PE = 1776

KEY_Cyrillic_SCHWA = 16778456

KEY_Cyrillic_SHA = 1787

KEY_Cyrillic_SHCHA = 1789

KEY_Cyrillic_SHHA = 16778426

KEY_Cyrillic_SHORTI = 1770

KEY_Cyrillic_SOFTSIGN = 1784

KEY_Cyrillic_TE = 1780

KEY_Cyrillic_TSE = 1763

KEY_Cyrillic_U = 1781

KEY_Cyrillic_U_macron = 16778478

KEY_Cyrillic_U_straight = 16778414

KEY_Cyrillic_U_straight_bar = 16778416

KEY_Cyrillic_VE = 1783

KEY_Cyrillic_YA = 1777

KEY_Cyrillic_YERU = 1785

KEY_Cyrillic_YU = 1760

KEY_Cyrillic_ZE = 1786

KEY_Cyrillic_ZHE = 1782

KEY_Cyrillic_ZHE_descender = 16778390

KEY_Cyrillic_a = 1729

KEY_Cyrillic_be = 1730

KEY_Cyrillic_che = 1758

KEY_Cyrillic_che_descender = 16778423

KEY_Cyrillic_che_vertstroke = 16778425

KEY_Cyrillic_de = 1732

KEY_Cyrillic_dzhe = 1711

KEY_Cyrillic_e = 1756

KEY_Cyrillic_ef = 1734

KEY_Cyrillic_el = 1740

KEY_Cyrillic_em = 1741

KEY_Cyrillic_en = 1742

KEY_Cyrillic_en_descender = 16778403

KEY_Cyrillic_er = 1746

KEY_Cyrillic_es = 1747

KEY_Cyrillic_ghe = 1735

KEY_Cyrillic_ghe_bar = 16778387

KEY_Cyrillic_ha = 1736

KEY_Cyrillic_ha_descender = 16778419

KEY_Cyrillic_hardsign = 1759

KEY_Cyrillic_i = 1737

KEY_Cyrillic_i_macron = 16778467

KEY_Cyrillic_ie = 1733

KEY_Cyrillic_io = 1699

KEY_Cyrillic_je = 1704

KEY_Cyrillic_ka = 1739

KEY_Cyrillic_ka_descender = 16778395

KEY_Cyrillic_ka_vertstroke = 16778397

KEY_Cyrillic_lje = 1705

KEY_Cyrillic_nje = 1706

KEY_Cyrillic_o = 1743

KEY_Cyrillic_o_bar = 16778473

KEY_Cyrillic_pe = 1744

KEY_Cyrillic_schwa = 16778457

KEY_Cyrillic_sha = 1755

KEY_Cyrillic_shcha = 1757

KEY_Cyrillic_shha = 16778427

KEY_Cyrillic_shorti = 1738

KEY_Cyrillic_softsign = 1752

KEY_Cyrillic_te = 1748

KEY_Cyrillic_tse = 1731

KEY_Cyrillic_u = 1749

KEY_Cyrillic_u_macron = 16778479

KEY_Cyrillic_u_straight = 16778415

KEY_Cyrillic_u_straight_bar = 16778417

KEY_Cyrillic_ve = 1751

KEY_Cyrillic_ya = 1745

KEY_Cyrillic_yeru = 1753

KEY_Cyrillic_yu = 1728

KEY_Cyrillic_ze = 1754

KEY_Cyrillic_zhe = 1750

KEY_Cyrillic_zhe_descender = 16778391

KEY_D = 68

KEY_DOS = 269025114

KEY_Dabovedot = 16784906

KEY_Dcaron = 463

KEY_Delete = 65535

KEY_Display = 269025113

KEY_Documents = 269025115

KEY_DongSign = 16785579

KEY_Down = 65364

KEY_Dstroke = 464

KEY_E = 69

KEY_ENG = 957

KEY_ETH = 208

KEY_EZH = 16777655

KEY_Eabovedot = 972

KEY_Eacute = 201

KEY_Ebelowdot = 16785080

KEY_Ecaron = 460

KEY_Ecircumflex = 202

KEY_Ecircumflexacute = 16785086

KEY_Ecircumflexbelowdot = 16785094

KEY_Ecircumflexgrave = 16785088

KEY_Ecircumflexhook = 16785090

KEY_Ecircumflextilde = 16785092

KEY_EcuSign = 16785568

KEY_Ediaeresis = 203

KEY_Egrave = 200

KEY_Ehook = 16785082

KEY_Eisu_Shift = 65327

KEY_Eisu_toggle = 65328

KEY_Eject = 269025068

KEY_Emacron = 938

KEY_End = 65367

KEY_Eogonek = 458

KEY_Escape = 65307

KEY_Eth = 208

KEY_Etilde = 16785084

KEY_EuroSign = 8364

KEY_Excel = 269025116

KEY_Execute = 65378

KEY_Explorer = 269025117

KEY_F = 70

KEY_F1 = 65470

KEY_F10 = 65479

KEY_F11 = 65480

KEY_F12 = 65481

KEY_F13 = 65482

KEY_F14 = 65483

KEY_F15 = 65484

KEY_F16 = 65485

KEY_F17 = 65486

KEY_F18 = 65487

KEY_F19 = 65488

KEY_F2 = 65471

KEY_F20 = 65489

KEY_F21 = 65490

KEY_F22 = 65491

KEY_F23 = 65492

KEY_F24 = 65493

KEY_F25 = 65494

KEY_F26 = 65495

KEY_F27 = 65496

KEY_F28 = 65497

KEY_F29 = 65498

KEY_F3 = 65472

KEY_F30 = 65499

KEY_F31 = 65500

KEY_F32 = 65501

KEY_F33 = 65502

KEY_F34 = 65503

KEY_F35 = 65504

KEY_F4 = 65473

KEY_F5 = 65474

KEY_F6 = 65475

KEY_F7 = 65476

KEY_F8 = 65477

KEY_F9 = 65478

KEY_FFrancSign = 16785571

KEY_Fabovedot = 16784926

KEY_Farsi_0 = 16778992

KEY_Farsi_1 = 16778993

KEY_Farsi_2 = 16778994

KEY_Farsi_3 = 16778995

KEY_Farsi_4 = 16778996

KEY_Farsi_5 = 16778997

KEY_Farsi_6 = 16778998

KEY_Farsi_7 = 16778999

KEY_Farsi_8 = 16779000

KEY_Farsi_9 = 16779001

KEY_Farsi_yeh = 16778956

KEY_Favorites = 269025072

KEY_Finance = 269025084

KEY_Find = 65384

KEY_First_Virtual_Screen = 65232

KEY_Forward = 269025063

KEY_FrameBack = 269025181

KEY_FrameForward = 269025182

KEY_G = 71

KEY_Gabovedot = 725

KEY_Game = 269025118

KEY_Gbreve = 683

KEY_Gcaron = 16777702

KEY_Gcedilla = 939

KEY_Gcircumflex = 728

KEY_Georgian_an = 16781520

KEY_Georgian_ban = 16781521

KEY_Georgian_can = 16781546

KEY_Georgian_char = 16781549

KEY_Georgian_chin = 16781545

KEY_Georgian_cil = 16781548

KEY_Georgian_don = 16781523

KEY_Georgian_en = 16781524

KEY_Georgian_fi = 16781558

KEY_Georgian_gan = 16781522

KEY_Georgian_ghan = 16781542

KEY_Georgian_hae = 16781552

KEY_Georgian_har = 16781556

KEY_Georgian_he = 16781553

KEY_Georgian_hie = 16781554

KEY_Georgian_hoe = 16781557

KEY_Georgian_in = 16781528

KEY_Georgian_jhan = 16781551

KEY_Georgian_jil = 16781547

KEY_Georgian_kan = 16781529

KEY_Georgian_khar = 16781541

KEY_Georgian_las = 16781530

KEY_Georgian_man = 16781531

KEY_Georgian_nar = 16781532

KEY_Georgian_on = 16781533

KEY_Georgian_par = 16781534

KEY_Georgian_phar = 16781540

KEY_Georgian_qar = 16781543

KEY_Georgian_rae = 16781536

KEY_Georgian_san = 16781537

KEY_Georgian_shin = 16781544

KEY_Georgian_tan = 16781527

KEY_Georgian_tar = 16781538

KEY_Georgian_un = 16781539

KEY_Georgian_vin = 16781525

KEY_Georgian_we = 16781555

KEY_Georgian_xan = 16781550

KEY_Georgian_zen = 16781526

KEY_Georgian_zhar = 16781535

KEY_Go = 269025119

KEY_Greek_ALPHA = 1985

KEY_Greek_ALPHAaccent = 1953

KEY_Greek_BETA = 1986

KEY_Greek_CHI = 2007

KEY_Greek_DELTA = 1988

KEY_Greek_EPSILON = 1989

KEY_Greek_EPSILONaccent = 1954

KEY_Greek_ETA = 1991

KEY_Greek_ETAaccent = 1955

KEY_Greek_GAMMA = 1987

KEY_Greek_IOTA = 1993

KEY_Greek_IOTAaccent = 1956

KEY_Greek_IOTAdiaeresis = 1957

KEY_Greek_IOTAdieresis = 1957

KEY_Greek_KAPPA = 1994

KEY_Greek_LAMBDA = 1995

KEY_Greek_LAMDA = 1995

KEY_Greek_MU = 1996

KEY_Greek_NU = 1997

KEY_Greek_OMEGA = 2009

KEY_Greek_OMEGAaccent = 1963

KEY_Greek_OMICRON = 1999

KEY_Greek_OMICRONaccent = 1959

KEY_Greek_PHI = 2006

KEY_Greek_PI = 2000

KEY_Greek_PSI = 2008

KEY_Greek_RHO = 2001

KEY_Greek_SIGMA = 2002

KEY_Greek_TAU = 2004

KEY_Greek_THETA = 1992

KEY_Greek_UPSILON = 2005

KEY_Greek_UPSILONaccent = 1960

KEY_Greek_UPSILONdieresis = 1961

KEY_Greek_XI = 1998

KEY_Greek_ZETA = 1990

KEY_Greek_accentdieresis = 1966

KEY_Greek_alpha = 2017

KEY_Greek_alphaaccent = 1969

KEY_Greek_beta = 2018

KEY_Greek_chi = 2039

KEY_Greek_delta = 2020

KEY_Greek_epsilon = 2021

KEY_Greek_epsilonaccent = 1970

KEY_Greek_eta = 2023

KEY_Greek_etaaccent = 1971

KEY_Greek_finalsmallsigma = 2035

KEY_Greek_gamma = 2019

KEY_Greek_horizbar = 1967

KEY_Greek_iota = 2025

KEY_Greek_iotaaccent = 1972

KEY_Greek_iotaaccentdieresis = 1974

KEY_Greek_iotadieresis = 1973

KEY_Greek_kappa = 2026

KEY_Greek_lambda = 2027

KEY_Greek_lamda = 2027

KEY_Greek_mu = 2028

KEY_Greek_nu = 2029

KEY_Greek_omega = 2041

KEY_Greek_omegaaccent = 1979

KEY_Greek_omicron = 2031

KEY_Greek_omicronaccent = 1975

KEY_Greek_phi = 2038

KEY_Greek_pi = 2032

KEY_Greek_psi = 2040

KEY_Greek_rho = 2033

KEY_Greek_sigma = 2034

KEY_Greek_switch = 65406

KEY_Greek_tau = 2036

KEY_Greek_theta = 2024

KEY_Greek_upsilon = 2037

KEY_Greek_upsilonaccent = 1976

KEY_Greek_upsilonaccentdieresis = 1978

KEY_Greek_upsilondieresis = 1977

KEY_Greek_xi = 2030

KEY_Greek_zeta = 2022

KEY_Green = 269025188

KEY_H = 72

KEY_Hangul = 65329

KEY_Hangul_A = 3775

KEY_Hangul_AE = 3776

KEY_Hangul_AraeA = 3830

KEY_Hangul_AraeAE = 3831

KEY_Hangul_Banja = 65337

KEY_Hangul_Cieuc = 3770

KEY_Hangul_Codeinput = 65335

KEY_Hangul_Dikeud = 3751

KEY_Hangul_E = 3780

KEY_Hangul_EO = 3779

KEY_Hangul_EU = 3793

KEY_Hangul_End = 65331

KEY_Hangul_Hanja = 65332

KEY_Hangul_Hieuh = 3774

KEY_Hangul_I = 3795

KEY_Hangul_Ieung = 3767

KEY_Hangul_J_Cieuc = 3818

KEY_Hangul_J_Dikeud = 3802

KEY_Hangul_J_Hieuh = 3822

KEY_Hangul_J_Ieung = 3816

KEY_Hangul_J_Jieuj = 3817

KEY_Hangul_J_Khieuq = 3819

KEY_Hangul_J_Kiyeog = 3796

KEY_Hangul_J_KiyeogSios = 3798

KEY_Hangul_J_KkogjiDalrinIeung = 3833

KEY_Hangul_J_Mieum = 3811

KEY_Hangul_J_Nieun = 3799

KEY_Hangul_J_NieunHieuh = 3801

KEY_Hangul_J_NieunJieuj = 3800

KEY_Hangul_J_PanSios = 3832

KEY_Hangul_J_Phieuf = 3821

KEY_Hangul_J_Pieub = 3812

KEY_Hangul_J_PieubSios = 3813

KEY_Hangul_J_Rieul = 3803

KEY_Hangul_J_RieulHieuh = 3810

KEY_Hangul_J_RieulKiyeog = 3804

KEY_Hangul_J_RieulMieum = 3805

KEY_Hangul_J_RieulPhieuf = 3809

KEY_Hangul_J_RieulPieub = 3806

KEY_Hangul_J_RieulSios = 3807

KEY_Hangul_J_RieulTieut = 3808

KEY_Hangul_J_Sios = 3814

KEY_Hangul_J_SsangKiyeog = 3797

KEY_Hangul_J_SsangSios = 3815

KEY_Hangul_J_Tieut = 3820

KEY_Hangul_J_YeorinHieuh = 3834

KEY_Hangul_Jamo = 65333

KEY_Hangul_Jeonja = 65336

KEY_Hangul_Jieuj = 3768

KEY_Hangul_Khieuq = 3771

KEY_Hangul_Kiyeog = 3745

KEY_Hangul_KiyeogSios = 3747

KEY_Hangul_KkogjiDalrinIeung = 3827

KEY_Hangul_Mieum = 3761

KEY_Hangul_MultipleCandidate = 65341

KEY_Hangul_Nieun = 3748

KEY_Hangul_NieunHieuh = 3750

KEY_Hangul_NieunJieuj = 3749

KEY_Hangul_O = 3783

KEY_Hangul_OE = 3786

KEY_Hangul_PanSios = 3826

KEY_Hangul_Phieuf = 3773

KEY_Hangul_Pieub = 3762

KEY_Hangul_PieubSios = 3764

KEY_Hangul_PostHanja = 65339

KEY_Hangul_PreHanja = 65338

KEY_Hangul_PreviousCandidate = 65342

KEY_Hangul_Rieul = 3753

KEY_Hangul_RieulHieuh = 3760

KEY_Hangul_RieulKiyeog = 3754

KEY_Hangul_RieulMieum = 3755

KEY_Hangul_RieulPhieuf = 3759

KEY_Hangul_RieulPieub = 3756

KEY_Hangul_RieulSios = 3757

KEY_Hangul_RieulTieut = 3758

KEY_Hangul_RieulYeorinHieuh = 3823

KEY_Hangul_Romaja = 65334

KEY_Hangul_SingleCandidate = 65340

KEY_Hangul_Sios = 3765

KEY_Hangul_Special = 65343

KEY_Hangul_SsangDikeud = 3752

KEY_Hangul_SsangJieuj = 3769

KEY_Hangul_SsangKiyeog = 3746

KEY_Hangul_SsangPieub = 3763

KEY_Hangul_SsangSios = 3766

KEY_Hangul_Start = 65330

KEY_Hangul_SunkyeongeumMieum = 3824

KEY_Hangul_SunkyeongeumPhieuf = 3828

KEY_Hangul_SunkyeongeumPieub = 3825

KEY_Hangul_Tieut = 3772

KEY_Hangul_U = 3788

KEY_Hangul_WA = 3784

KEY_Hangul_WAE = 3785

KEY_Hangul_WE = 3790

KEY_Hangul_WEO = 3789

KEY_Hangul_WI = 3791

KEY_Hangul_YA = 3777

KEY_Hangul_YAE = 3778

KEY_Hangul_YE = 3782

KEY_Hangul_YEO = 3781

KEY_Hangul_YI = 3794

KEY_Hangul_YO = 3787

KEY_Hangul_YU = 3792

KEY_Hangul_YeorinHieuh = 3829

KEY_Hangul_switch = 65406

KEY_Hankaku = 65321

KEY_Hcircumflex = 678

KEY_Hebrew_switch = 65406

KEY_Help = 65386

KEY_Henkan = 65315

KEY_Henkan_Mode = 65315

KEY_Hibernate = 269025192

KEY_Hiragana = 65317

KEY_Hiragana_Katakana = 65319

KEY_History = 269025079

KEY_Home = 65360

KEY_HomePage = 269025048

KEY_HotLinks = 269025082

KEY_Hstroke = 673

KEY_Hyper_L = 65517

KEY_Hyper_R = 65518

KEY_I = 73

KEY_ISO_Center_Object = 65075

KEY_ISO_Continuous_Underline = 65072

KEY_ISO_Discontinuous_Underline = 65073

KEY_ISO_Emphasize = 65074

KEY_ISO_Enter = 65076

KEY_ISO_Fast_Cursor_Down = 65071

KEY_ISO_Fast_Cursor_Left = 65068

KEY_ISO_Fast_Cursor_Right = 65069

KEY_ISO_Fast_Cursor_Up = 65070

KEY_ISO_First_Group = 65036

KEY_ISO_First_Group_Lock = 65037

KEY_ISO_Group_Latch = 65030

KEY_ISO_Group_Lock = 65031

KEY_ISO_Group_Shift = 65406

KEY_ISO_Last_Group = 65038

KEY_ISO_Last_Group_Lock = 65039

KEY_ISO_Left_Tab = 65056

KEY_ISO_Level2_Latch = 65026

KEY_ISO_Level3_Latch = 65028

KEY_ISO_Level3_Lock = 65029

KEY_ISO_Level3_Shift = 65027

KEY_ISO_Level5_Latch = 65042

KEY_ISO_Level5_Lock = 65043

KEY_ISO_Level5_Shift = 65041

KEY_ISO_Lock = 65025

KEY_ISO_Move_Line_Down = 65058

KEY_ISO_Move_Line_Up = 65057

KEY_ISO_Next_Group = 65032

KEY_ISO_Next_Group_Lock = 65033

KEY_ISO_Partial_Line_Down = 65060

KEY_ISO_Partial_Line_Up = 65059

KEY_ISO_Partial_Space_Left = 65061

KEY_ISO_Partial_Space_Right = 65062

KEY_ISO_Prev_Group = 65034

KEY_ISO_Prev_Group_Lock = 65035

KEY_ISO_Release_Both_Margins = 65067

KEY_ISO_Release_Margin_Left = 65065

KEY_ISO_Release_Margin_Right = 65066

KEY_ISO_Set_Margin_Left = 65063

KEY_ISO_Set_Margin_Right = 65064

KEY_Iabovedot = 681

KEY_Iacute = 205

KEY_Ibelowdot = 16785098

KEY_Ibreve = 16777516

KEY_Icircumflex = 206

KEY_Idiaeresis = 207

KEY_Igrave = 204

KEY_Ihook = 16785096

KEY_Imacron = 975

KEY_Insert = 65379

KEY_Iogonek = 967

KEY_Itilde = 933

KEY_J = 74

KEY_Jcircumflex = 684

KEY_K = 75

KEY_KP_0 = 65456

KEY_KP_1 = 65457

KEY_KP_2 = 65458

KEY_KP_3 = 65459

KEY_KP_4 = 65460

KEY_KP_5 = 65461

KEY_KP_6 = 65462

KEY_KP_7 = 65463

KEY_KP_8 = 65464

KEY_KP_9 = 65465

KEY_KP_Add = 65451

KEY_KP_Begin = 65437

KEY_KP_Decimal = 65454

KEY_KP_Delete = 65439

KEY_KP_Divide = 65455

KEY_KP_Down = 65433

KEY_KP_End = 65436

KEY_KP_Enter = 65421

KEY_KP_Equal = 65469

KEY_KP_F1 = 65425

KEY_KP_F2 = 65426

KEY_KP_F3 = 65427

KEY_KP_F4 = 65428

KEY_KP_Home = 65429

KEY_KP_Insert = 65438

KEY_KP_Left = 65430

KEY_KP_Multiply = 65450

KEY_KP_Next = 65435

KEY_KP_Page_Down = 65435

KEY_KP_Page_Up = 65434

KEY_KP_Prior = 65434

KEY_KP_Right = 65432

KEY_KP_Separator = 65452

KEY_KP_Space = 65408

KEY_KP_Subtract = 65453

KEY_KP_Tab = 65417

KEY_KP_Up = 65431

KEY_Kana_Lock = 65325

KEY_Kana_Shift = 65326

KEY_Kanji = 65313

KEY_Kanji_Bangou = 65335

KEY_Katakana = 65318

KEY_KbdBrightnessDown = 269025030

KEY_KbdBrightnessUp = 269025029

KEY_KbdLightOnOff = 269025028

KEY_Kcedilla = 979

KEY_Keyboard = 269025203

KEY_Korean_Won = 3839

KEY_L = 76

KEY_L1 = 65480

KEY_L10 = 65489

KEY_L2 = 65481

KEY_L3 = 65482

KEY_L4 = 65483

KEY_L5 = 65484

KEY_L6 = 65485

KEY_L7 = 65486

KEY_L8 = 65487

KEY_L9 = 65488

KEY_Lacute = 453

KEY_Last_Virtual_Screen = 65236

KEY_Launch0 = 269025088

KEY_Launch1 = 269025089

KEY_Launch2 = 269025090

KEY_Launch3 = 269025091

KEY_Launch4 = 269025092

KEY_Launch5 = 269025093

KEY_Launch6 = 269025094

KEY_Launch7 = 269025095

KEY_Launch8 = 269025096

KEY_Launch9 = 269025097

KEY_LaunchA = 269025098

KEY_LaunchB = 269025099

KEY_LaunchC = 269025100

KEY_LaunchD = 269025101

KEY_LaunchE = 269025102

KEY_LaunchF = 269025103

KEY_Lbelowdot = 16784950

KEY_Lcaron = 421

KEY_Lcedilla = 934

KEY_Left = 65361

KEY_LightBulb = 269025077

KEY_Linefeed = 65290

KEY_LiraSign = 16785572

KEY_LogGrabInfo = 269024805

KEY_LogOff = 269025121

KEY_LogWindowTree = 269024804

KEY_Lstroke = 419

KEY_M = 77

KEY_Mabovedot = 16784960

KEY_Macedonia_DSE = 1717

KEY_Macedonia_GJE = 1714

KEY_Macedonia_KJE = 1724

KEY_Macedonia_dse = 1701

KEY_Macedonia_gje = 1698

KEY_Macedonia_kje = 1708

KEY_Mae_Koho = 65342

KEY_Mail = 269025049

KEY_MailForward = 269025168

KEY_Market = 269025122

KEY_Massyo = 65324

KEY_Meeting = 269025123

KEY_Memo = 269025054

KEY_Menu = 65383

KEY_MenuKB = 269025125

KEY_MenuPB = 269025126

KEY_Messenger = 269025166

KEY_Meta_L = 65511

KEY_Meta_R = 65512

KEY_MillSign = 16785573

KEY_ModeLock = 269025025

KEY_Mode_switch = 65406

KEY_MonBrightnessDown = 269025027

KEY_MonBrightnessUp = 269025026

KEY_MouseKeys_Accel_Enable = 65143

KEY_MouseKeys_Enable = 65142

KEY_Muhenkan = 65314

KEY_Multi_key = 65312

KEY_MultipleCandidate = 65341

KEY_Music = 269025170

KEY_MyComputer = 269025075

KEY_MySites = 269025127

KEY_N = 78

KEY_Nacute = 465

KEY_NairaSign = 16785574

KEY_Ncaron = 466

KEY_Ncedilla = 977

KEY_New = 269025128

KEY_NewSheqelSign = 16785578

KEY_News = 269025129

KEY_Next = 65366

KEY_Next_VMode = 269024802

KEY_Next_Virtual_Screen = 65234

KEY_Ntilde = 209

KEY_Num_Lock = 65407

KEY_O = 79

KEY_OE = 5052

KEY_Oacute = 211

KEY_Obarred = 16777631

KEY_Obelowdot = 16785100

KEY_Ocaron = 16777681

KEY_Ocircumflex = 212

KEY_Ocircumflexacute = 16785104

KEY_Ocircumflexbelowdot = 16785112

KEY_Ocircumflexgrave = 16785106

KEY_Ocircumflexhook = 16785108

KEY_Ocircumflextilde = 16785110

KEY_Odiaeresis = 214

KEY_Odoubleacute = 469

KEY_OfficeHome = 269025130

KEY_Ograve = 210

KEY_Ohook = 16785102

KEY_Ohorn = 16777632

KEY_Ohornacute = 16785114

KEY_Ohornbelowdot = 16785122

KEY_Ohorngrave = 16785116

KEY_Ohornhook = 16785118

KEY_Ohorntilde = 16785120

KEY_Omacron = 978

KEY_Ooblique = 216

KEY_Open = 269025131

KEY_OpenURL = 269025080

KEY_Option = 269025132

KEY_Oslash = 216

KEY_Otilde = 213

KEY_Overlay1_Enable = 65144

KEY_Overlay2_Enable = 65145

KEY_P = 80

KEY_Pabovedot = 16784982

KEY_Page_Down = 65366

KEY_Page_Up = 65365

KEY_Paste = 269025133

KEY_Pause = 65299

KEY_PesetaSign = 16785575

KEY_Phone = 269025134

KEY_Pictures = 269025169

KEY_Pointer_Accelerate = 65274

KEY_Pointer_Button1 = 65257

KEY_Pointer_Button2 = 65258

KEY_Pointer_Button3 = 65259

KEY_Pointer_Button4 = 65260

KEY_Pointer_Button5 = 65261

KEY_Pointer_Button_Dflt = 65256

KEY_Pointer_DblClick1 = 65263

KEY_Pointer_DblClick2 = 65264

KEY_Pointer_DblClick3 = 65265

KEY_Pointer_DblClick4 = 65266

KEY_Pointer_DblClick5 = 65267

KEY_Pointer_DblClick_Dflt = 65262

KEY_Pointer_DfltBtnNext = 65275

KEY_Pointer_DfltBtnPrev = 65276

KEY_Pointer_Down = 65251

KEY_Pointer_DownLeft = 65254

KEY_Pointer_DownRight = 65255

KEY_Pointer_Drag1 = 65269

KEY_Pointer_Drag2 = 65270

KEY_Pointer_Drag3 = 65271

KEY_Pointer_Drag4 = 65272

KEY_Pointer_Drag5 = 65277

KEY_Pointer_Drag_Dflt = 65268

KEY_Pointer_EnableKeys = 65273

KEY_Pointer_Left = 65248

KEY_Pointer_Right = 65249

KEY_Pointer_Up = 65250

KEY_Pointer_UpLeft = 65252

KEY_Pointer_UpRight = 65253

KEY_PowerDown = 269025057

KEY_PowerOff = 269025066

KEY_Prev_VMode = 269024803

KEY_Prev_Virtual_Screen = 65233

KEY_PreviousCandidate = 65342

KEY_Print = 65377

KEY_Prior = 65365

KEY_Q = 81

KEY_R = 82

KEY_R1 = 65490

KEY_R10 = 65499

KEY_R11 = 65500

KEY_R12 = 65501

KEY_R13 = 65502

KEY_R14 = 65503

KEY_R15 = 65504

KEY_R2 = 65491

KEY_R3 = 65492

KEY_R4 = 65493

KEY_R5 = 65494

KEY_R6 = 65495

KEY_R7 = 65496

KEY_R8 = 65497

KEY_R9 = 65498

KEY_RFKill = 269025205

KEY_Racute = 448

KEY_Rcaron = 472

KEY_Rcedilla = 931

KEY_Red = 269025187

KEY_Redo = 65382

KEY_Refresh = 269025065

KEY_Reload = 269025139

KEY_RepeatKeys_Enable = 65138

KEY_Reply = 269025138

KEY_Return = 65293

KEY_Right = 65363

KEY_RockerDown = 269025060

KEY_RockerEnter = 269025061

KEY_RockerUp = 269025059

KEY_Romaji = 65316

KEY_RotateWindows = 269025140

KEY_RotationKB = 269025142

KEY_RotationPB = 269025141

KEY_RupeeSign = 16785576

KEY_S = 83

KEY_SCHWA = 16777615

KEY_Sabovedot = 16784992

KEY_Sacute = 422

KEY_Save = 269025143

KEY_Scaron = 425

KEY_Scedilla = 426

KEY_Scircumflex = 734

KEY_ScreenSaver = 269025069

KEY_ScrollClick = 269025146

KEY_ScrollDown = 269025145

KEY_ScrollUp = 269025144

KEY_Scroll_Lock = 65300

KEY_Search = 269025051

KEY_Select = 65376

KEY_SelectButton = 269025184

KEY_Send = 269025147

KEY_Serbian_DJE = 1713

KEY_Serbian_DZE = 1727

KEY_Serbian_JE = 1720

KEY_Serbian_LJE = 1721

KEY_Serbian_NJE = 1722

KEY_Serbian_TSHE = 1723

KEY_Serbian_dje = 1697

KEY_Serbian_dze = 1711

KEY_Serbian_je = 1704

KEY_Serbian_lje = 1705

KEY_Serbian_nje = 1706

KEY_Serbian_tshe = 1707

KEY_Shift_L = 65505

KEY_Shift_Lock = 65510

KEY_Shift_R = 65506

KEY_Shop = 269025078

KEY_SingleCandidate = 65340

KEY_Sinh_a = 16780677

KEY_Sinh_aa = 16780678

KEY_Sinh_aa2 = 16780751

KEY_Sinh_ae = 16780679

KEY_Sinh_ae2 = 16780752

KEY_Sinh_aee = 16780680

KEY_Sinh_aee2 = 16780753

KEY_Sinh_ai = 16780691

KEY_Sinh_ai2 = 16780763

KEY_Sinh_al = 16780746

KEY_Sinh_au = 16780694

KEY_Sinh_au2 = 16780766

KEY_Sinh_ba = 16780726

KEY_Sinh_bha = 16780727

KEY_Sinh_ca = 16780704

KEY_Sinh_cha = 16780705

KEY_Sinh_dda = 16780713

KEY_Sinh_ddha = 16780714

KEY_Sinh_dha = 16780719

KEY_Sinh_dhha = 16780720

KEY_Sinh_e = 16780689

KEY_Sinh_e2 = 16780761

KEY_Sinh_ee = 16780690

KEY_Sinh_ee2 = 16780762

KEY_Sinh_fa = 16780742

KEY_Sinh_ga = 16780700

KEY_Sinh_gha = 16780701

KEY_Sinh_h2 = 16780675

KEY_Sinh_ha = 16780740

KEY_Sinh_i = 16780681

KEY_Sinh_i2 = 16780754

KEY_Sinh_ii = 16780682

KEY_Sinh_ii2 = 16780755

KEY_Sinh_ja = 16780706

KEY_Sinh_jha = 16780707

KEY_Sinh_jnya = 16780709

KEY_Sinh_ka = 16780698

KEY_Sinh_kha = 16780699

KEY_Sinh_kunddaliya = 16780788

KEY_Sinh_la = 16780733

KEY_Sinh_lla = 16780741

KEY_Sinh_lu = 16780687

KEY_Sinh_lu2 = 16780767

KEY_Sinh_luu = 16780688

KEY_Sinh_luu2 = 16780787

KEY_Sinh_ma = 16780728

KEY_Sinh_mba = 16780729

KEY_Sinh_na = 16780721

KEY_Sinh_ndda = 16780716

KEY_Sinh_ndha = 16780723

KEY_Sinh_ng = 16780674

KEY_Sinh_ng2 = 16780702

KEY_Sinh_nga = 16780703

KEY_Sinh_nja = 16780710

KEY_Sinh_nna = 16780715

KEY_Sinh_nya = 16780708

KEY_Sinh_o = 16780692

KEY_Sinh_o2 = 16780764

KEY_Sinh_oo = 16780693

KEY_Sinh_oo2 = 16780765

KEY_Sinh_pa = 16780724

KEY_Sinh_pha = 16780725

KEY_Sinh_ra = 16780731

KEY_Sinh_ri = 16780685

KEY_Sinh_rii = 16780686

KEY_Sinh_ru2 = 16780760

KEY_Sinh_ruu2 = 16780786

KEY_Sinh_sa = 16780739

KEY_Sinh_sha = 16780737

KEY_Sinh_ssha = 16780738

KEY_Sinh_tha = 16780717

KEY_Sinh_thha = 16780718

KEY_Sinh_tta = 16780711

KEY_Sinh_ttha = 16780712

KEY_Sinh_u = 16780683

KEY_Sinh_u2 = 16780756

KEY_Sinh_uu = 16780684

KEY_Sinh_uu2 = 16780758

KEY_Sinh_va = 16780736

KEY_Sinh_ya = 16780730

KEY_Sleep = 269025071

KEY_SlowKeys_Enable = 65139

KEY_Spell = 269025148

KEY_SplitScreen = 269025149

KEY_Standby = 269025040

KEY_Start = 269025050

KEY_StickyKeys_Enable = 65141

KEY_Stop = 269025064

KEY_Subtitle = 269025178

KEY_Super_L = 65515

KEY_Super_R = 65516

KEY_Support = 269025150

KEY_Suspend = 269025191

KEY_Switch_VT_1 = 269024769

KEY_Switch_VT_10 = 269024778

KEY_Switch_VT_11 = 269024779

KEY_Switch_VT_12 = 269024780

KEY_Switch_VT_2 = 269024770

KEY_Switch_VT_3 = 269024771

KEY_Switch_VT_4 = 269024772

KEY_Switch_VT_5 = 269024773

KEY_Switch_VT_6 = 269024774

KEY_Switch_VT_7 = 269024775

KEY_Switch_VT_8 = 269024776

KEY_Switch_VT_9 = 269024777

KEY_Sys_Req = 65301

KEY_T = 84

KEY_THORN = 222

KEY_Tab = 65289

KEY_Tabovedot = 16785002

KEY_TaskPane = 269025151

KEY_Tcaron = 427

KEY_Tcedilla = 478

KEY_Terminal = 269025152

KEY_Terminate_Server = 65237

KEY_Thai_baht = 3551

KEY_Thai_bobaimai = 3514

KEY_Thai_chochan = 3496

KEY_Thai_chochang = 3498

KEY_Thai_choching = 3497

KEY_Thai_chochoe = 3500

KEY_Thai_dochada = 3502

KEY_Thai_dodek = 3508

KEY_Thai_fofa = 3517

KEY_Thai_fofan = 3519

KEY_Thai_hohip = 3531

KEY_Thai_honokhuk = 3534

KEY_Thai_khokhai = 3490

KEY_Thai_khokhon = 3493

KEY_Thai_khokhuat = 3491

KEY_Thai_khokhwai = 3492

KEY_Thai_khorakhang = 3494

KEY_Thai_kokai = 3489

KEY_Thai_lakkhangyao = 3557

KEY_Thai_lekchet = 3575

KEY_Thai_lekha = 3573

KEY_Thai_lekhok = 3574

KEY_Thai_lekkao = 3577

KEY_Thai_leknung = 3569

KEY_Thai_lekpaet = 3576

KEY_Thai_leksam = 3571

KEY_Thai_leksi = 3572

KEY_Thai_leksong = 3570

KEY_Thai_leksun = 3568

KEY_Thai_lochula = 3532

KEY_Thai_loling = 3525

KEY_Thai_lu = 3526

KEY_Thai_maichattawa = 3563

KEY_Thai_maiek = 3560

KEY_Thai_maihanakat = 3537

KEY_Thai_maihanakat_maitho = 3550

KEY_Thai_maitaikhu = 3559

KEY_Thai_maitho = 3561

KEY_Thai_maitri = 3562

KEY_Thai_maiyamok = 3558

KEY_Thai_moma = 3521

KEY_Thai_ngongu = 3495

KEY_Thai_nikhahit = 3565

KEY_Thai_nonen = 3507

KEY_Thai_nonu = 3513

KEY_Thai_oang = 3533

KEY_Thai_paiyannoi = 3535

KEY_Thai_phinthu = 3546

KEY_Thai_phophan = 3518

KEY_Thai_phophung = 3516

KEY_Thai_phosamphao = 3520

KEY_Thai_popla = 3515

KEY_Thai_rorua = 3523

KEY_Thai_ru = 3524

KEY_Thai_saraa = 3536

KEY_Thai_saraaa = 3538

KEY_Thai_saraae = 3553

KEY_Thai_saraaimaimalai = 3556

KEY_Thai_saraaimaimuan = 3555

KEY_Thai_saraam = 3539

KEY_Thai_sarae = 3552

KEY_Thai_sarai = 3540

KEY_Thai_saraii = 3541

KEY_Thai_sarao = 3554

KEY_Thai_sarau = 3544

KEY_Thai_saraue = 3542

KEY_Thai_sarauee = 3543

KEY_Thai_sarauu = 3545

KEY_Thai_sorusi = 3529

KEY_Thai_sosala = 3528

KEY_Thai_soso = 3499

KEY_Thai_sosua = 3530

KEY_Thai_thanthakhat = 3564

KEY_Thai_thonangmontho = 3505

KEY_Thai_thophuthao = 3506

KEY_Thai_thothahan = 3511

KEY_Thai_thothan = 3504

KEY_Thai_thothong = 3512

KEY_Thai_thothung = 3510

KEY_Thai_topatak = 3503

KEY_Thai_totao = 3509

KEY_Thai_wowaen = 3527

KEY_Thai_yoyak = 3522

KEY_Thai_yoying = 3501

KEY_Thorn = 222

KEY_Time = 269025183

KEY_ToDoList = 269025055

KEY_Tools = 269025153

KEY_TopMenu = 269025186

KEY_TouchpadOff = 269025201

KEY_TouchpadOn = 269025200

KEY_TouchpadToggle = 269025193

KEY_Touroku = 65323

KEY_Travel = 269025154

KEY_Tslash = 940

KEY_U = 85

KEY_UWB = 269025174

KEY_Uacute = 218

KEY_Ubelowdot = 16785124

KEY_Ubreve = 733

KEY_Ucircumflex = 219

KEY_Udiaeresis = 220

KEY_Udoubleacute = 475

KEY_Ugrave = 217

KEY_Uhook = 16785126

KEY_Uhorn = 16777647

KEY_Uhornacute = 16785128

KEY_Uhornbelowdot = 16785136

KEY_Uhorngrave = 16785130

KEY_Uhornhook = 16785132

KEY_Uhorntilde = 16785134

KEY_Ukrainian_GHE_WITH_UPTURN = 1725

KEY_Ukrainian_I = 1718

KEY_Ukrainian_IE = 1716

KEY_Ukrainian_YI = 1719

KEY_Ukrainian_ghe_with_upturn = 1709

KEY_Ukrainian_i = 1702

KEY_Ukrainian_ie = 1700

KEY_Ukrainian_yi = 1703

KEY_Ukranian_I = 1718

KEY_Ukranian_JE = 1716

KEY_Ukranian_YI = 1719

KEY_Ukranian_i = 1702

KEY_Ukranian_je = 1700

KEY_Ukranian_yi = 1703

KEY_Umacron = 990

KEY_Undo = 65381

KEY_Ungrab = 269024800

KEY_Uogonek = 985

KEY_Up = 65362

KEY_Uring = 473

KEY_User1KB = 269025157

KEY_User2KB = 269025158

KEY_UserPB = 269025156

KEY_Utilde = 989

KEY_V = 86

KEY_VendorHome = 269025076

KEY_Video = 269025159

KEY_View = 269025185

KEY_VoidSymbol = 16777215

KEY_W = 87

KEY_WLAN = 269025173

KEY_WWAN = 269025204

KEY_WWW = 269025070

KEY_Wacute = 16785026

KEY_WakeUp = 269025067

KEY_Wcircumflex = 16777588

KEY_Wdiaeresis = 16785028

KEY_WebCam = 269025167

KEY_Wgrave = 16785024

KEY_WheelButton = 269025160

KEY_WindowClear = 269025109

KEY_WonSign = 16785577

KEY_Word = 269025161

KEY_X = 88

KEY_Xabovedot = 16785034

KEY_Xfer = 269025162

KEY_Y = 89

KEY_Yacute = 221

KEY_Ybelowdot = 16785140

KEY_Ycircumflex = 16777590

KEY_Ydiaeresis = 5054

KEY_Yellow = 269025189

KEY_Ygrave = 16785138

KEY_Yhook = 16785142

KEY_Ytilde = 16785144

KEY_Z = 90

KEY_Zabovedot = 431

KEY_Zacute = 428

KEY_Zcaron = 430

KEY_Zen_Koho = 65341

KEY_Zenkaku = 65320

KEY_Zenkaku_Hankaku = 65322

KEY_ZoomIn = 269025163

KEY_ZoomOut = 269025164

KEY_Zstroke = 16777653

KEY_a = 97

KEY_aacute = 225

KEY_abelowdot = 16785057

KEY_abovedot = 511

KEY_abreve = 483

KEY_abreveacute = 16785071

KEY_abrevebelowdot = 16785079

KEY_abrevegrave = 16785073

KEY_abrevehook = 16785075

KEY_abrevetilde = 16785077

KEY_acircumflex = 226

KEY_acircumflexacute = 16785061

KEY_acircumflexbelowdot = 16785069

KEY_acircumflexgrave = 16785063

KEY_acircumflexhook = 16785065

KEY_acircumflextilde = 16785067

KEY_acute = 180

KEY_adiaeresis = 228

KEY_ae = 230

KEY_agrave = 224

KEY_ahook = 16785059

KEY_amacron = 992

KEY_ampersand = 38

KEY_aogonek = 433

KEY_apostrophe = 39

KEY_approxeq = 16785992

KEY_approximate = 2248

KEY_aring = 229

KEY_asciicircum = 94

KEY_asciitilde = 126

KEY_asterisk = 42

KEY_at = 64

KEY_atilde = 227

KEY_b = 98

KEY_babovedot = 16784899

KEY_backslash = 92

KEY_ballotcross = 2804

KEY_bar = 124

KEY_because = 16785973

KEY_blank = 2527

KEY_botintegral = 2213

KEY_botleftparens = 2220

KEY_botleftsqbracket = 2216

KEY_botleftsummation = 2226

KEY_botrightparens = 2222

KEY_botrightsqbracket = 2218

KEY_botrightsummation = 2230

KEY_bott = 2550

KEY_botvertsummationconnector = 2228

KEY_braceleft = 123

KEY_braceright = 125

KEY_bracketleft = 91

KEY_bracketright = 93

KEY_braille_blank = 16787456

KEY_braille_dot_1 = 65521

KEY_braille_dot_10 = 65530

KEY_braille_dot_2 = 65522

KEY_braille_dot_3 = 65523

KEY_braille_dot_4 = 65524

KEY_braille_dot_5 = 65525

KEY_braille_dot_6 = 65526

KEY_braille_dot_7 = 65527

KEY_braille_dot_8 = 65528

KEY_braille_dot_9 = 65529

KEY_braille_dots_1 = 16787457

KEY_braille_dots_12 = 16787459

KEY_braille_dots_123 = 16787463

KEY_braille_dots_1234 = 16787471

KEY_braille_dots_12345 = 16787487

KEY_braille_dots_123456 = 16787519

KEY_braille_dots_1234567 = 16787583

KEY_braille_dots_12345678 = 16787711

KEY_braille_dots_1234568 = 16787647

KEY_braille_dots_123457 = 16787551

KEY_braille_dots_1234578 = 16787679

KEY_braille_dots_123458 = 16787615

KEY_braille_dots_12346 = 16787503

KEY_braille_dots_123467 = 16787567

KEY_braille_dots_1234678 = 16787695

KEY_braille_dots_123468 = 16787631

KEY_braille_dots_12347 = 16787535

KEY_braille_dots_123478 = 16787663

KEY_braille_dots_12348 = 16787599

KEY_braille_dots_1235 = 16787479

KEY_braille_dots_12356 = 16787511

KEY_braille_dots_123567 = 16787575

KEY_braille_dots_1235678 = 16787703

KEY_braille_dots_123568 = 16787639

KEY_braille_dots_12357 = 16787543

KEY_braille_dots_123578 = 16787671

KEY_braille_dots_12358 = 16787607

KEY_braille_dots_1236 = 16787495

KEY_braille_dots_12367 = 16787559

KEY_braille_dots_123678 = 16787687

KEY_braille_dots_12368 = 16787623

KEY_braille_dots_1237 = 16787527

KEY_braille_dots_12378 = 16787655

KEY_braille_dots_1238 = 16787591

KEY_braille_dots_124 = 16787467

KEY_braille_dots_1245 = 16787483

KEY_braille_dots_12456 = 16787515

KEY_braille_dots_124567 = 16787579

KEY_braille_dots_1245678 = 16787707

KEY_braille_dots_124568 = 16787643

KEY_braille_dots_12457 = 16787547

KEY_braille_dots_124578 = 16787675

KEY_braille_dots_12458 = 16787611

KEY_braille_dots_1246 = 16787499

KEY_braille_dots_12467 = 16787563

KEY_braille_dots_124678 = 16787691

KEY_braille_dots_12468 = 16787627

KEY_braille_dots_1247 = 16787531

KEY_braille_dots_12478 = 16787659

KEY_braille_dots_1248 = 16787595

KEY_braille_dots_125 = 16787475

KEY_braille_dots_1256 = 16787507

KEY_braille_dots_12567 = 16787571

KEY_braille_dots_125678 = 16787699

KEY_braille_dots_12568 = 16787635

KEY_braille_dots_1257 = 16787539

KEY_braille_dots_12578 = 16787667

KEY_braille_dots_1258 = 16787603

KEY_braille_dots_126 = 16787491

KEY_braille_dots_1267 = 16787555

KEY_braille_dots_12678 = 16787683

KEY_braille_dots_1268 = 16787619

KEY_braille_dots_127 = 16787523

KEY_braille_dots_1278 = 16787651

KEY_braille_dots_128 = 16787587

KEY_braille_dots_13 = 16787461

KEY_braille_dots_134 = 16787469

KEY_braille_dots_1345 = 16787485

KEY_braille_dots_13456 = 16787517

KEY_braille_dots_134567 = 16787581

KEY_braille_dots_1345678 = 16787709

KEY_braille_dots_134568 = 16787645

KEY_braille_dots_13457 = 16787549

KEY_braille_dots_134578 = 16787677

KEY_braille_dots_13458 = 16787613

KEY_braille_dots_1346 = 16787501

KEY_braille_dots_13467 = 16787565

KEY_braille_dots_134678 = 16787693

KEY_braille_dots_13468 = 16787629

KEY_braille_dots_1347 = 16787533

KEY_braille_dots_13478 = 16787661

KEY_braille_dots_1348 = 16787597

KEY_braille_dots_135 = 16787477

KEY_braille_dots_1356 = 16787509

KEY_braille_dots_13567 = 16787573

KEY_braille_dots_135678 = 16787701

KEY_braille_dots_13568 = 16787637

KEY_braille_dots_1357 = 16787541

KEY_braille_dots_13578 = 16787669

KEY_braille_dots_1358 = 16787605

KEY_braille_dots_136 = 16787493

KEY_braille_dots_1367 = 16787557

KEY_braille_dots_13678 = 16787685

KEY_braille_dots_1368 = 16787621

KEY_braille_dots_137 = 16787525

KEY_braille_dots_1378 = 16787653

KEY_braille_dots_138 = 16787589

KEY_braille_dots_14 = 16787465

KEY_braille_dots_145 = 16787481

KEY_braille_dots_1456 = 16787513

KEY_braille_dots_14567 = 16787577

KEY_braille_dots_145678 = 16787705

KEY_braille_dots_14568 = 16787641

KEY_braille_dots_1457 = 16787545

KEY_braille_dots_14578 = 16787673

KEY_braille_dots_1458 = 16787609

KEY_braille_dots_146 = 16787497

KEY_braille_dots_1467 = 16787561

KEY_braille_dots_14678 = 16787689

KEY_braille_dots_1468 = 16787625

KEY_braille_dots_147 = 16787529

KEY_braille_dots_1478 = 16787657

KEY_braille_dots_148 = 16787593

KEY_braille_dots_15 = 16787473

KEY_braille_dots_156 = 16787505

KEY_braille_dots_1567 = 16787569

KEY_braille_dots_15678 = 16787697

KEY_braille_dots_1568 = 16787633

KEY_braille_dots_157 = 16787537

KEY_braille_dots_1578 = 16787665

KEY_braille_dots_158 = 16787601

KEY_braille_dots_16 = 16787489

KEY_braille_dots_167 = 16787553

KEY_braille_dots_1678 = 16787681

KEY_braille_dots_168 = 16787617

KEY_braille_dots_17 = 16787521

KEY_braille_dots_178 = 16787649

KEY_braille_dots_18 = 16787585

KEY_braille_dots_2 = 16787458

KEY_braille_dots_23 = 16787462

KEY_braille_dots_234 = 16787470

KEY_braille_dots_2345 = 16787486

KEY_braille_dots_23456 = 16787518

KEY_braille_dots_234567 = 16787582

KEY_braille_dots_2345678 = 16787710

KEY_braille_dots_234568 = 16787646

KEY_braille_dots_23457 = 16787550

KEY_braille_dots_234578 = 16787678

KEY_braille_dots_23458 = 16787614

KEY_braille_dots_2346 = 16787502

KEY_braille_dots_23467 = 16787566

KEY_braille_dots_234678 = 16787694

KEY_braille_dots_23468 = 16787630

KEY_braille_dots_2347 = 16787534

KEY_braille_dots_23478 = 16787662

KEY_braille_dots_2348 = 16787598

KEY_braille_dots_235 = 16787478

KEY_braille_dots_2356 = 16787510

KEY_braille_dots_23567 = 16787574

KEY_braille_dots_235678 = 16787702

KEY_braille_dots_23568 = 16787638

KEY_braille_dots_2357 = 16787542

KEY_braille_dots_23578 = 16787670

KEY_braille_dots_2358 = 16787606

KEY_braille_dots_236 = 16787494

KEY_braille_dots_2367 = 16787558

KEY_braille_dots_23678 = 16787686

KEY_braille_dots_2368 = 16787622

KEY_braille_dots_237 = 16787526

KEY_braille_dots_2378 = 16787654

KEY_braille_dots_238 = 16787590

KEY_braille_dots_24 = 16787466

KEY_braille_dots_245 = 16787482

KEY_braille_dots_2456 = 16787514

KEY_braille_dots_24567 = 16787578

KEY_braille_dots_245678 = 16787706

KEY_braille_dots_24568 = 16787642

KEY_braille_dots_2457 = 16787546

KEY_braille_dots_24578 = 16787674

KEY_braille_dots_2458 = 16787610

KEY_braille_dots_246 = 16787498

KEY_braille_dots_2467 = 16787562

KEY_braille_dots_24678 = 16787690

KEY_braille_dots_2468 = 16787626

KEY_braille_dots_247 = 16787530

KEY_braille_dots_2478 = 16787658

KEY_braille_dots_248 = 16787594

KEY_braille_dots_25 = 16787474

KEY_braille_dots_256 = 16787506

KEY_braille_dots_2567 = 16787570

KEY_braille_dots_25678 = 16787698

KEY_braille_dots_2568 = 16787634

KEY_braille_dots_257 = 16787538

KEY_braille_dots_2578 = 16787666

KEY_braille_dots_258 = 16787602

KEY_braille_dots_26 = 16787490

KEY_braille_dots_267 = 16787554

KEY_braille_dots_2678 = 16787682

KEY_braille_dots_268 = 16787618

KEY_braille_dots_27 = 16787522

KEY_braille_dots_278 = 16787650

KEY_braille_dots_28 = 16787586

KEY_braille_dots_3 = 16787460

KEY_braille_dots_34 = 16787468

KEY_braille_dots_345 = 16787484

KEY_braille_dots_3456 = 16787516

KEY_braille_dots_34567 = 16787580

KEY_braille_dots_345678 = 16787708

KEY_braille_dots_34568 = 16787644

KEY_braille_dots_3457 = 16787548

KEY_braille_dots_34578 = 16787676

KEY_braille_dots_3458 = 16787612

KEY_braille_dots_346 = 16787500

KEY_braille_dots_3467 = 16787564

KEY_braille_dots_34678 = 16787692

KEY_braille_dots_3468 = 16787628

KEY_braille_dots_347 = 16787532

KEY_braille_dots_3478 = 16787660

KEY_braille_dots_348 = 16787596

KEY_braille_dots_35 = 16787476

KEY_braille_dots_356 = 16787508

KEY_braille_dots_3567 = 16787572

KEY_braille_dots_35678 = 16787700

KEY_braille_dots_3568 = 16787636

KEY_braille_dots_357 = 16787540

KEY_braille_dots_3578 = 16787668

KEY_braille_dots_358 = 16787604

KEY_braille_dots_36 = 16787492

KEY_braille_dots_367 = 16787556

KEY_braille_dots_3678 = 16787684

KEY_braille_dots_368 = 16787620

KEY_braille_dots_37 = 16787524

KEY_braille_dots_378 = 16787652

KEY_braille_dots_38 = 16787588

KEY_braille_dots_4 = 16787464

KEY_braille_dots_45 = 16787480

KEY_braille_dots_456 = 16787512

KEY_braille_dots_4567 = 16787576

KEY_braille_dots_45678 = 16787704

KEY_braille_dots_4568 = 16787640

KEY_braille_dots_457 = 16787544

KEY_braille_dots_4578 = 16787672

KEY_braille_dots_458 = 16787608

KEY_braille_dots_46 = 16787496

KEY_braille_dots_467 = 16787560

KEY_braille_dots_4678 = 16787688

KEY_braille_dots_468 = 16787624

KEY_braille_dots_47 = 16787528

KEY_braille_dots_478 = 16787656

KEY_braille_dots_48 = 16787592

KEY_braille_dots_5 = 16787472

KEY_braille_dots_56 = 16787504

KEY_braille_dots_567 = 16787568

KEY_braille_dots_5678 = 16787696

KEY_braille_dots_568 = 16787632

KEY_braille_dots_57 = 16787536

KEY_braille_dots_578 = 16787664

KEY_braille_dots_58 = 16787600

KEY_braille_dots_6 = 16787488

KEY_braille_dots_67 = 16787552

KEY_braille_dots_678 = 16787680

KEY_braille_dots_68 = 16787616

KEY_braille_dots_7 = 16787520

KEY_braille_dots_78 = 16787648

KEY_braille_dots_8 = 16787584

KEY_breve = 418

KEY_brokenbar = 166

KEY_c = 99

KEY_c_h = 65187

KEY_cabovedot = 741

KEY_cacute = 486

KEY_careof = 2744

KEY_caret = 2812

KEY_caron = 439

KEY_ccaron = 488

KEY_ccedilla = 231

KEY_ccircumflex = 742

KEY_cedilla = 184

KEY_cent = 162

KEY_ch = 65184

KEY_checkerboard = 2529

KEY_checkmark = 2803

KEY_circle = 3023

KEY_club = 2796

KEY_colon = 58

KEY_comma = 44

KEY_containsas = 16785931

KEY_copyright = 169

KEY_cr = 2532

KEY_crossinglines = 2542

KEY_cuberoot = 16785947

KEY_currency = 164

KEY_cursor = 2815

KEY_d = 100

KEY_dabovedot = 16784907

KEY_dagger = 2801

KEY_dcaron = 495

KEY_dead_A = 65153

KEY_dead_E = 65155

KEY_dead_I = 65157

KEY_dead_O = 65159

KEY_dead_U = 65161

KEY_dead_a = 65152

KEY_dead_abovecomma = 65124

KEY_dead_abovedot = 65110

KEY_dead_abovereversedcomma = 65125

KEY_dead_abovering = 65112

KEY_dead_aboveverticalline = 65169

KEY_dead_acute = 65105

KEY_dead_belowbreve = 65131

KEY_dead_belowcircumflex = 65129

KEY_dead_belowcomma = 65134

KEY_dead_belowdiaeresis = 65132

KEY_dead_belowdot = 65120

KEY_dead_belowmacron = 65128

KEY_dead_belowring = 65127

KEY_dead_belowtilde = 65130

KEY_dead_belowverticalline = 65170

KEY_dead_breve = 65109

KEY_dead_capital_schwa = 65163

KEY_dead_caron = 65114

KEY_dead_cedilla = 65115

KEY_dead_circumflex = 65106

KEY_dead_currency = 65135

KEY_dead_dasia = 65125

KEY_dead_diaeresis = 65111

KEY_dead_doubleacute = 65113

KEY_dead_doublegrave = 65126

KEY_dead_e = 65154

KEY_dead_grave = 65104

KEY_dead_greek = 65164

KEY_dead_hook = 65121

KEY_dead_horn = 65122

KEY_dead_i = 65156

KEY_dead_invertedbreve = 65133

KEY_dead_iota = 65117

KEY_dead_longsolidusoverlay = 65171

KEY_dead_lowline = 65168

KEY_dead_macron = 65108

KEY_dead_o = 65158

KEY_dead_ogonek = 65116

KEY_dead_perispomeni = 65107

KEY_dead_psili = 65124

KEY_dead_semivoiced_sound = 65119

KEY_dead_small_schwa = 65162

KEY_dead_stroke = 65123

KEY_dead_tilde = 65107

KEY_dead_u = 65160

KEY_dead_voiced_sound = 65118

KEY_decimalpoint = 2749

KEY_degree = 176

KEY_diaeresis = 168

KEY_diamond = 2797

KEY_digitspace = 2725

KEY_dintegral = 16785964

KEY_division = 247

KEY_dollar = 36

KEY_doubbaselinedot = 2735

KEY_doubleacute = 445

KEY_doubledagger = 2802

KEY_doublelowquotemark = 2814

KEY_downarrow = 2302

KEY_downcaret = 2984

KEY_downshoe = 3030

KEY_downstile = 3012

KEY_downtack = 3010

KEY_dstroke = 496

KEY_e = 101

KEY_eabovedot = 1004

KEY_eacute = 233

KEY_ebelowdot = 16785081

KEY_ecaron = 492

KEY_ecircumflex = 234

KEY_ecircumflexacute = 16785087

KEY_ecircumflexbelowdot = 16785095

KEY_ecircumflexgrave = 16785089

KEY_ecircumflexhook = 16785091

KEY_ecircumflextilde = 16785093

KEY_ediaeresis = 235

KEY_egrave = 232

KEY_ehook = 16785083

KEY_eightsubscript = 16785544

KEY_eightsuperior = 16785528

KEY_elementof = 16785928

KEY_ellipsis = 2734

KEY_em3space = 2723

KEY_em4space = 2724

KEY_emacron = 954

KEY_emdash = 2729

KEY_emfilledcircle = 2782

KEY_emfilledrect = 2783

KEY_emopencircle = 2766

KEY_emopenrectangle = 2767

KEY_emptyset = 16785925

KEY_emspace = 2721

KEY_endash = 2730

KEY_enfilledcircbullet = 2790

KEY_enfilledsqbullet = 2791

KEY_eng = 959

KEY_enopencircbullet = 2784

KEY_enopensquarebullet = 2785

KEY_enspace = 2722

KEY_eogonek = 490

KEY_equal = 61

KEY_eth = 240

KEY_etilde = 16785085

KEY_exclam = 33

KEY_exclamdown = 161

KEY_ezh = 16777874

KEY_f = 102

KEY_fabovedot = 16784927

KEY_femalesymbol = 2808

KEY_ff = 2531

KEY_figdash = 2747

KEY_filledlefttribullet = 2780

KEY_filledrectbullet = 2779

KEY_filledrighttribullet = 2781

KEY_filledtribulletdown = 2793

KEY_filledtribulletup = 2792

KEY_fiveeighths = 2757

KEY_fivesixths = 2743

KEY_fivesubscript = 16785541

KEY_fivesuperior = 16785525

KEY_fourfifths = 2741

KEY_foursubscript = 16785540

KEY_foursuperior = 16785524

KEY_fourthroot = 16785948

KEY_function = 2294

KEY_g = 103

KEY_gabovedot = 757

KEY_gbreve = 699

KEY_gcaron = 16777703

KEY_gcedilla = 955

KEY_gcircumflex = 760

KEY_grave = 96

KEY_greater = 62

KEY_greaterthanequal = 2238

KEY_guillemotleft = 171

KEY_guillemotright = 187

KEY_h = 104

KEY_hairspace = 2728

KEY_hcircumflex = 694

KEY_heart = 2798

KEY_hebrew_aleph = 3296

KEY_hebrew_ayin = 3314

KEY_hebrew_bet = 3297

KEY_hebrew_beth = 3297

KEY_hebrew_chet = 3303

KEY_hebrew_dalet = 3299

KEY_hebrew_daleth = 3299

KEY_hebrew_doublelowline = 3295

KEY_hebrew_finalkaph = 3306

KEY_hebrew_finalmem = 3309

KEY_hebrew_finalnun = 3311

KEY_hebrew_finalpe = 3315

KEY_hebrew_finalzade = 3317

KEY_hebrew_finalzadi = 3317

KEY_hebrew_gimel = 3298

KEY_hebrew_gimmel = 3298

KEY_hebrew_he = 3300

KEY_hebrew_het = 3303

KEY_hebrew_kaph = 3307

KEY_hebrew_kuf = 3319

KEY_hebrew_lamed = 3308

KEY_hebrew_mem = 3310

KEY_hebrew_nun = 3312

KEY_hebrew_pe = 3316

KEY_hebrew_qoph = 3319

KEY_hebrew_resh = 3320

KEY_hebrew_samech = 3313

KEY_hebrew_samekh = 3313

KEY_hebrew_shin = 3321

KEY_hebrew_taf = 3322

KEY_hebrew_taw = 3322

KEY_hebrew_tet = 3304

KEY_hebrew_teth = 3304

KEY_hebrew_waw = 3301

KEY_hebrew_yod = 3305

KEY_hebrew_zade = 3318

KEY_hebrew_zadi = 3318

KEY_hebrew_zain = 3302

KEY_hebrew_zayin = 3302

KEY_hexagram = 2778

KEY_horizconnector = 2211

KEY_horizlinescan1 = 2543

KEY_horizlinescan3 = 2544

KEY_horizlinescan5 = 2545

KEY_horizlinescan7 = 2546

KEY_horizlinescan9 = 2547

KEY_hstroke = 689

KEY_ht = 2530

KEY_hyphen = 173

KEY_i = 105

KEY_iTouch = 269025120

KEY_iacute = 237

KEY_ibelowdot = 16785099

KEY_ibreve = 16777517

KEY_icircumflex = 238

KEY_identical = 2255

KEY_idiaeresis = 239

KEY_idotless = 697

KEY_ifonlyif = 2253

KEY_igrave = 236

KEY_ihook = 16785097

KEY_imacron = 1007

KEY_implies = 2254

KEY_includedin = 2266

KEY_includes = 2267

KEY_infinity = 2242

KEY_integral = 2239

KEY_intersection = 2268

KEY_iogonek = 999

KEY_itilde = 949

KEY_j = 106

KEY_jcircumflex = 700

KEY_jot = 3018

KEY_k = 107

KEY_kana_A = 1201

KEY_kana_CHI = 1217

KEY_kana_E = 1204

KEY_kana_FU = 1228

KEY_kana_HA = 1226

KEY_kana_HE = 1229

KEY_kana_HI = 1227

KEY_kana_HO = 1230

KEY_kana_HU = 1228

KEY_kana_I = 1202

KEY_kana_KA = 1206

KEY_kana_KE = 1209

KEY_kana_KI = 1207

KEY_kana_KO = 1210

KEY_kana_KU = 1208

KEY_kana_MA = 1231

KEY_kana_ME = 1234

KEY_kana_MI = 1232

KEY_kana_MO = 1235

KEY_kana_MU = 1233

KEY_kana_N = 1245

KEY_kana_NA = 1221

KEY_kana_NE = 1224

KEY_kana_NI = 1222

KEY_kana_NO = 1225

KEY_kana_NU = 1223

KEY_kana_O = 1205

KEY_kana_RA = 1239

KEY_kana_RE = 1242

KEY_kana_RI = 1240

KEY_kana_RO = 1243

KEY_kana_RU = 1241

KEY_kana_SA = 1211

KEY_kana_SE = 1214

KEY_kana_SHI = 1212

KEY_kana_SO = 1215

KEY_kana_SU = 1213

KEY_kana_TA = 1216

KEY_kana_TE = 1219

KEY_kana_TI = 1217

KEY_kana_TO = 1220

KEY_kana_TSU = 1218

KEY_kana_TU = 1218

KEY_kana_U = 1203

KEY_kana_WA = 1244

KEY_kana_WO = 1190

KEY_kana_YA = 1236

KEY_kana_YO = 1238

KEY_kana_YU = 1237

KEY_kana_a = 1191

KEY_kana_closingbracket = 1187

KEY_kana_comma = 1188

KEY_kana_conjunctive = 1189

KEY_kana_e = 1194

KEY_kana_fullstop = 1185

KEY_kana_i = 1192

KEY_kana_middledot = 1189

KEY_kana_o = 1195

KEY_kana_openingbracket = 1186

KEY_kana_switch = 65406

KEY_kana_tsu = 1199

KEY_kana_tu = 1199

KEY_kana_u = 1193

KEY_kana_ya = 1196

KEY_kana_yo = 1198

KEY_kana_yu = 1197

KEY_kappa = 930

KEY_kcedilla = 1011

KEY_kra = 930

KEY_l = 108

KEY_lacute = 485

KEY_latincross = 2777

KEY_lbelowdot = 16784951

KEY_lcaron = 437

KEY_lcedilla = 950

KEY_leftanglebracket = 2748

KEY_leftarrow = 2299

KEY_leftcaret = 2979

KEY_leftdoublequotemark = 2770

KEY_leftmiddlecurlybrace = 2223

KEY_leftopentriangle = 2764

KEY_leftpointer = 2794

KEY_leftradical = 2209

KEY_leftshoe = 3034

KEY_leftsinglequotemark = 2768

KEY_leftt = 2548

KEY_lefttack = 3036

KEY_less = 60

KEY_lessthanequal = 2236

KEY_lf = 2533

KEY_logicaland = 2270

KEY_logicalor = 2271

KEY_lowleftcorner = 2541

KEY_lowrightcorner = 2538

KEY_lstroke = 435

KEY_m = 109

KEY_mabovedot = 16784961

KEY_macron = 175

KEY_malesymbol = 2807

KEY_maltesecross = 2800

KEY_marker = 2751

KEY_masculine = 186

KEY_minus = 45

KEY_minutes = 2774

KEY_mu = 181

KEY_multiply = 215

KEY_musicalflat = 2806

KEY_musicalsharp = 2805

KEY_n = 110

KEY_nabla = 2245

KEY_nacute = 497

KEY_ncaron = 498

KEY_ncedilla = 1009

KEY_ninesubscript = 16785545

KEY_ninesuperior = 16785529

KEY_nl = 2536

KEY_nobreakspace = 160

KEY_notapproxeq = 16785991

KEY_notelementof = 16785929

KEY_notequal = 2237

KEY_notidentical = 16786018

KEY_notsign = 172

KEY_ntilde = 241

KEY_numbersign = 35

KEY_numerosign = 1712

KEY_o = 111

KEY_oacute = 243

KEY_obarred = 16777845

KEY_obelowdot = 16785101

KEY_ocaron = 16777682

KEY_ocircumflex = 244

KEY_ocircumflexacute = 16785105

KEY_ocircumflexbelowdot = 16785113

KEY_ocircumflexgrave = 16785107

KEY_ocircumflexhook = 16785109

KEY_ocircumflextilde = 16785111

KEY_odiaeresis = 246

KEY_odoubleacute = 501

KEY_oe = 5053

KEY_ogonek = 434

KEY_ograve = 242

KEY_ohook = 16785103

KEY_ohorn = 16777633

KEY_ohornacute = 16785115

KEY_ohornbelowdot = 16785123

KEY_ohorngrave = 16785117

KEY_ohornhook = 16785119

KEY_ohorntilde = 16785121

KEY_omacron = 1010

KEY_oneeighth = 2755

KEY_onefifth = 2738

KEY_onehalf = 189

KEY_onequarter = 188

KEY_onesixth = 2742

KEY_onesubscript = 16785537

KEY_onesuperior = 185

KEY_onethird = 2736

KEY_ooblique = 248

KEY_openrectbullet = 2786

KEY_openstar = 2789

KEY_opentribulletdown = 2788

KEY_opentribulletup = 2787

KEY_ordfeminine = 170

KEY_oslash = 248

KEY_otilde = 245

KEY_overbar = 3008

KEY_overline = 1150

KEY_p = 112

KEY_pabovedot = 16784983

KEY_paragraph = 182

KEY_parenleft = 40

KEY_parenright = 41

KEY_partdifferential = 16785922

KEY_partialderivative = 2287

KEY_percent = 37

KEY_period = 46

KEY_periodcentered = 183

KEY_permille = 2773

KEY_phonographcopyright = 2811

KEY_plus = 43

KEY_plusminus = 177

KEY_prescription = 2772

KEY_prolongedsound = 1200

KEY_punctspace = 2726

KEY_q = 113

KEY_quad = 3020

KEY_question = 63

KEY_questiondown = 191

KEY_quotedbl = 34

KEY_quoteleft = 96

KEY_quoteright = 39

KEY_r = 114

KEY_racute = 480

KEY_radical = 2262

KEY_rcaron = 504

KEY_rcedilla = 947

KEY_registered = 174

KEY_rightanglebracket = 2750

KEY_rightarrow = 2301

KEY_rightcaret = 2982

KEY_rightdoublequotemark = 2771

KEY_rightmiddlecurlybrace = 2224

KEY_rightmiddlesummation = 2231

KEY_rightopentriangle = 2765

KEY_rightpointer = 2795

KEY_rightshoe = 3032

KEY_rightsinglequotemark = 2769

KEY_rightt = 2549

KEY_righttack = 3068

KEY_s = 115

KEY_sabovedot = 16784993

KEY_sacute = 438

KEY_scaron = 441

KEY_scedilla = 442

KEY_schwa = 16777817

KEY_scircumflex = 766

KEY_script_switch = 65406

KEY_seconds = 2775

KEY_section = 167

KEY_semicolon = 59

KEY_semivoicedsound = 1247

KEY_seveneighths = 2758

KEY_sevensubscript = 16785543

KEY_sevensuperior = 16785527

KEY_signaturemark = 2762

KEY_signifblank = 2732

KEY_similarequal = 2249

KEY_singlelowquotemark = 2813

KEY_sixsubscript = 16785542

KEY_sixsuperior = 16785526

KEY_slash = 47

KEY_soliddiamond = 2528

KEY_space = 32

KEY_squareroot = 16785946

KEY_ssharp = 223

KEY_sterling = 163

KEY_stricteq = 16786019

KEY_t = 116

KEY_tabovedot = 16785003

KEY_tcaron = 443

KEY_tcedilla = 510

KEY_telephone = 2809

KEY_telephonerecorder = 2810

KEY_therefore = 2240

KEY_thinspace = 2727

KEY_thorn = 254

KEY_threeeighths = 2756

KEY_threefifths = 2740

KEY_threequarters = 190

KEY_threesubscript = 16785539

KEY_threesuperior = 179

KEY_tintegral = 16785965

KEY_topintegral = 2212

KEY_topleftparens = 2219

KEY_topleftradical = 2210

KEY_topleftsqbracket = 2215

KEY_topleftsummation = 2225

KEY_toprightparens = 2221

KEY_toprightsqbracket = 2217

KEY_toprightsummation = 2229

KEY_topt = 2551

KEY_topvertsummationconnector = 2227

KEY_trademark = 2761

KEY_trademarkincircle = 2763

KEY_tslash = 956

KEY_twofifths = 2739

KEY_twosubscript = 16785538

KEY_twosuperior = 178

KEY_twothirds = 2737

KEY_u = 117

KEY_uacute = 250

KEY_ubelowdot = 16785125

KEY_ubreve = 765

KEY_ucircumflex = 251

KEY_udiaeresis = 252

KEY_udoubleacute = 507

KEY_ugrave = 249

KEY_uhook = 16785127

KEY_uhorn = 16777648

KEY_uhornacute = 16785129

KEY_uhornbelowdot = 16785137

KEY_uhorngrave = 16785131

KEY_uhornhook = 16785133

KEY_uhorntilde = 16785135

KEY_umacron = 1022

KEY_underbar = 3014

KEY_underscore = 95

KEY_union = 2269

KEY_uogonek = 1017

KEY_uparrow = 2300

KEY_upcaret = 2985

KEY_upleftcorner = 2540

KEY_uprightcorner = 2539

KEY_upshoe = 3011

KEY_upstile = 3027

KEY_uptack = 3022

KEY_uring = 505

KEY_utilde = 1021

KEY_v = 118

KEY_variation = 2241

KEY_vertbar = 2552

KEY_vertconnector = 2214

KEY_voicedsound = 1246

KEY_vt = 2537

KEY_w = 119

KEY_wacute = 16785027

KEY_wcircumflex = 16777589

KEY_wdiaeresis = 16785029

KEY_wgrave = 16785025

KEY_x = 120

KEY_xabovedot = 16785035

KEY_y = 121

KEY_yacute = 253

KEY_ybelowdot = 16785141

KEY_ycircumflex = 16777591

KEY_ydiaeresis = 255

KEY_yen = 165

KEY_ygrave = 16785139

KEY_yhook = 16785143

KEY_ytilde = 16785145

KEY_z = 122

KEY_zabovedot = 447

KEY_zacute = 444

KEY_zcaron = 446

KEY_zerosubscript = 16785536

KEY_zerosuperior = 16785520

KEY_zstroke = 16777654

MAJOR_VERSION = 3

MAX_TIMECOORD_AXES = 128

MICRO_VERSION = 33

MINOR_VERSION = 24

PARENT_RELATIVE = 1
"""
A special value, indicating that the background
for a window should be inherited from the parent window.
"""

PRIORITY_REDRAW = 120
"""
This is the priority that the idle handler processing window updates
is given in the
[GLib Main Loop][glib-The-Main-Event-Loop].
"""


class AxisUse(Enum):
    """
    An enumeration describing the way in which a device
    axis (valuator) maps onto the predefined valuator
    types that GTK+ understands.

    Note that the X and Y axes are not really needed; pointer devices
    report their location via the x/y members of events regardless. Whether
    X and Y are present as axes depends on the GDK backend.
    """
    IGNORE = 0
    X = 1
    Y = 2
    PRESSURE = 3
    XTILT = 4
    YTILT = 5
    WHEEL = 6
    DISTANCE = 7
    ROTATION = 8
    SLIDER = 9
    LAST = 10

class ByteOrder(Enum):
    """
    A set of values describing the possible byte-orders
    for storing pixel values in memory.
    """
    LSB_FIRST = 0
    MSB_FIRST = 1

class CrossingMode(Enum):
    """
    Specifies the crossing mode for #GdkEventCrossing.
    """
    NORMAL = 0
    GRAB = 1
    UNGRAB = 2
    GTK_GRAB = 3
    GTK_UNGRAB = 4
    STATE_CHANGED = 5
    TOUCH_BEGIN = 6
    TOUCH_END = 7
    DEVICE_SWITCH = 8

class CursorType(Enum):
    """
    Predefined cursors.

    Note that these IDs are directly taken from the X cursor font, and many
    of these cursors are either not useful, or are not available on other platforms.

    The recommended way to create cursors is to use gdk_cursor_new_from_name().
    """
    X_CURSOR = 0
    ARROW = 2
    BASED_ARROW_DOWN = 4
    BASED_ARROW_UP = 6
    BOAT = 8
    BOGOSITY = 10
    BOTTOM_LEFT_CORNER = 12
    BOTTOM_RIGHT_CORNER = 14
    BOTTOM_SIDE = 16
    BOTTOM_TEE = 18
    BOX_SPIRAL = 20
    CENTER_PTR = 22
    CIRCLE = 24
    CLOCK = 26
    COFFEE_MUG = 28
    CROSS = 30
    CROSS_REVERSE = 32
    CROSSHAIR = 34
    DIAMOND_CROSS = 36
    DOT = 38
    DOTBOX = 40
    DOUBLE_ARROW = 42
    DRAFT_LARGE = 44
    DRAFT_SMALL = 46
    DRAPED_BOX = 48
    EXCHANGE = 50
    FLEUR = 52
    GOBBLER = 54
    GUMBY = 56
    HAND1 = 58
    HAND2 = 60
    HEART = 62
    ICON = 64
    IRON_CROSS = 66
    LEFT_PTR = 68
    LEFT_SIDE = 70
    LEFT_TEE = 72
    LEFTBUTTON = 74
    LL_ANGLE = 76
    LR_ANGLE = 78
    MAN = 80
    MIDDLEBUTTON = 82
    MOUSE = 84
    PENCIL = 86
    PIRATE = 88
    PLUS = 90
    QUESTION_ARROW = 92
    RIGHT_PTR = 94
    RIGHT_SIDE = 96
    RIGHT_TEE = 98
    RIGHTBUTTON = 100
    RTL_LOGO = 102
    SAILBOAT = 104
    SB_DOWN_ARROW = 106
    SB_H_DOUBLE_ARROW = 108
    SB_LEFT_ARROW = 110
    SB_RIGHT_ARROW = 112
    SB_UP_ARROW = 114
    SB_V_DOUBLE_ARROW = 116
    SHUTTLE = 118
    SIZING = 120
    SPIDER = 122
    SPRAYCAN = 124
    STAR = 126
    TARGET = 128
    TCROSS = 130
    TOP_LEFT_ARROW = 132
    TOP_LEFT_CORNER = 134
    TOP_RIGHT_CORNER = 136
    TOP_SIDE = 138
    TOP_TEE = 140
    TREK = 142
    UL_ANGLE = 144
    UMBRELLA = 146
    UR_ANGLE = 148
    WATCH = 150
    XTERM = 152
    LAST_CURSOR = 153
    BLANK_CURSOR = -2
    CURSOR_IS_PIXMAP = -1

class DevicePadFeature(Enum):
    """
    A pad feature.
    """
    BUTTON = 0
    RING = 1
    STRIP = 2

class DeviceToolType(Enum):
    """
    Indicates the specific type of tool being used being a tablet. Such as an
    airbrush, pencil, etc.
    """
    UNKNOWN = 0
    PEN = 1
    ERASER = 2
    BRUSH = 3
    PENCIL = 4
    AIRBRUSH = 5
    MOUSE = 6
    LENS = 7

class DeviceType(Enum):
    """
    Indicates the device type. See [above][GdkDeviceManager.description]
    for more information about the meaning of these device types.
    """
    MASTER = 0
    SLAVE = 1
    FLOATING = 2

class DragCancelReason(Enum):
    """
    Used in #GdkDragContext to the reason of a cancelled DND operation.
    """
    NO_TARGET = 0
    USER_CANCELLED = 1
    ERROR = 2

class DragProtocol(Enum):
    """
    Used in #GdkDragContext to indicate the protocol according to
    which DND is done.
    """
    NONE = 0
    MOTIF = 1
    XDND = 2
    ROOTWIN = 3
    WIN32_DROPFILES = 4
    OLE2 = 5
    LOCAL = 6
    WAYLAND = 7

class EventType(Enum):
    """
    Specifies the type of the event.

    Do not confuse these events with the signals that GTK+ widgets emit.
    Although many of these events result in corresponding signals being emitted,
    the events are often transformed or filtered along the way.

    In some language bindings, the values %GDK_2BUTTON_PRESS and
    %GDK_3BUTTON_PRESS would translate into something syntactically
    invalid (eg `Gdk.EventType.2ButtonPress`, where a
    symbol is not allowed to start with a number). In that case, the
    aliases %GDK_DOUBLE_BUTTON_PRESS and %GDK_TRIPLE_BUTTON_PRESS can
    be used instead.
    """
    NOTHING = -1
    DELETE = 0
    DESTROY = 1
    EXPOSE = 2
    MOTION_NOTIFY = 3
    BUTTON_PRESS = 4
    2BUTTON_PRESS = 5
    DOUBLE_BUTTON_PRESS = 5
    3BUTTON_PRESS = 6
    TRIPLE_BUTTON_PRESS = 6
    BUTTON_RELEASE = 7
    KEY_PRESS = 8
    KEY_RELEASE = 9
    ENTER_NOTIFY = 10
    LEAVE_NOTIFY = 11
    FOCUS_CHANGE = 12
    CONFIGURE = 13
    MAP = 14
    UNMAP = 15
    PROPERTY_NOTIFY = 16
    SELECTION_CLEAR = 17
    SELECTION_REQUEST = 18
    SELECTION_NOTIFY = 19
    PROXIMITY_IN = 20
    PROXIMITY_OUT = 21
    DRAG_ENTER = 22
    DRAG_LEAVE = 23
    DRAG_MOTION = 24
    DRAG_STATUS = 25
    DROP_START = 26
    DROP_FINISHED = 27
    CLIENT_EVENT = 28
    VISIBILITY_NOTIFY = 29
    SCROLL = 31
    WINDOW_STATE = 32
    SETTING = 33
    OWNER_CHANGE = 34
    GRAB_BROKEN = 35
    DAMAGE = 36
    TOUCH_BEGIN = 37
    TOUCH_UPDATE = 38
    TOUCH_END = 39
    TOUCH_CANCEL = 40
    TOUCHPAD_SWIPE = 41
    TOUCHPAD_PINCH = 42
    PAD_BUTTON_PRESS = 43
    PAD_BUTTON_RELEASE = 44
    PAD_RING = 45
    PAD_STRIP = 46
    PAD_GROUP_MODE = 47
    EVENT_LAST = 48

class FilterReturn(Enum):
    """
    Specifies the result of applying a #GdkFilterFunc to a native event.
    """
    CONTINUE = 0
    TRANSLATE = 1
    REMOVE = 2

class FullscreenMode(Enum):
    """
    Indicates which monitor (in a multi-head setup) a window should span over
    when in fullscreen mode.
    """
    CURRENT_MONITOR = 0
    ALL_MONITORS = 1

class GrabOwnership(Enum):
    """
    Defines how device grabs interact with other devices.
    """
    NONE = 0
    WINDOW = 1
    APPLICATION = 2

class GrabStatus(Enum):
    """
    Returned by gdk_device_grab(), gdk_pointer_grab() and gdk_keyboard_grab() to
    indicate success or the reason for the failure of the grab attempt.
    """
    SUCCESS = 0
    ALREADY_GRABBED = 1
    INVALID_TIME = 2
    NOT_VIEWABLE = 3
    FROZEN = 4
    FAILED = 5

class Gravity(Enum):
    """
    Defines the reference point of a window and the meaning of coordinates
    passed to gtk_window_move(). See gtk_window_move() and the "implementation
    notes" section of the
    [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
    specification for more details.
    """
    NORTH_WEST = 1
    NORTH = 2
    NORTH_EAST = 3
    WEST = 4
    CENTER = 5
    EAST = 6
    SOUTH_WEST = 7
    SOUTH = 8
    SOUTH_EAST = 9
    STATIC = 10

class InputMode(Enum):
    """
    An enumeration that describes the mode of an input device.
    """
    DISABLED = 0
    SCREEN = 1
    WINDOW = 2

class InputSource(Enum):
    """
    An enumeration describing the type of an input device in general terms.
    """
    MOUSE = 0
    PEN = 1
    ERASER = 2
    CURSOR = 3
    KEYBOARD = 4
    TOUCHSCREEN = 5
    TOUCHPAD = 6
    TRACKPOINT = 7
    TABLET_PAD = 8

class ModifierIntent(Enum):
    """
    This enum is used with gdk_keymap_get_modifier_mask()
    in order to determine what modifiers the
    currently used windowing system backend uses for particular
    purposes. For example, on X11/Windows, the Control key is used for
    invoking menu shortcuts (accelerators), whereas on Apple computers
    it’s the Command key (which correspond to %GDK_CONTROL_MASK and
    %GDK_MOD2_MASK, respectively).
    """
    PRIMARY_ACCELERATOR = 0
    CONTEXT_MENU = 1
    EXTEND_SELECTION = 2
    MODIFY_SELECTION = 3
    NO_TEXT_INPUT = 4
    SHIFT_GROUP = 5
    DEFAULT_MOD_MASK = 6

class NotifyType(Enum):
    """
    Specifies the kind of crossing for #GdkEventCrossing.

    See the X11 protocol specification of LeaveNotify for
    full details of crossing event generation.
    """
    ANCESTOR = 0
    VIRTUAL = 1
    INFERIOR = 2
    NONLINEAR = 3
    NONLINEAR_VIRTUAL = 4
    UNKNOWN = 5

class OwnerChange(Enum):
    """
    Specifies why a selection ownership was changed.
    """
    NEW_OWNER = 0
    DESTROY = 1
    CLOSE = 2

class PropMode(Enum):
    """
    Describes how existing data is combined with new data when
    using gdk_property_change().
    """
    REPLACE = 0
    PREPEND = 1
    APPEND = 2

class PropertyState(Enum):
    """
    Specifies the type of a property change for a #GdkEventProperty.
    """
    NEW_VALUE = 0
    DELETE = 1

class ScrollDirection(Enum):
    """
    Specifies the direction for #GdkEventScroll.
    """
    UP = 0
    DOWN = 1
    LEFT = 2
    RIGHT = 3
    SMOOTH = 4

class SettingAction(Enum):
    """
    Specifies the kind of modification applied to a setting in a
    #GdkEventSetting.
    """
    NEW = 0
    CHANGED = 1
    DELETED = 2

class Status(Enum):
    OK = 0
    ERROR = -1
    ERROR_PARAM = -2
    ERROR_FILE = -3
    ERROR_MEM = -4

class SubpixelLayout(Enum):
    """
    This enumeration describes how the red, green and blue components
    of physical pixels on an output device are laid out.
    """
    UNKNOWN = 0
    NONE = 1
    HORIZONTAL_RGB = 2
    HORIZONTAL_BGR = 3
    VERTICAL_RGB = 4
    VERTICAL_BGR = 5

class TouchpadGesturePhase(Enum):
    """
    Specifies the current state of a touchpad gesture. All gestures are
    guaranteed to begin with an event with phase %GDK_TOUCHPAD_GESTURE_PHASE_BEGIN,
    followed by 0 or several events with phase %GDK_TOUCHPAD_GESTURE_PHASE_UPDATE.

    A finished gesture may have 2 possible outcomes, an event with phase
    %GDK_TOUCHPAD_GESTURE_PHASE_END will be emitted when the gesture is
    considered successful, this should be used as the hint to perform any
    permanent changes.

    Cancelled gestures may be so for a variety of reasons, due to hardware
    or the compositor, or due to the gesture recognition layers hinting the
    gesture did not finish resolutely (eg. a 3rd finger being added during
    a pinch gesture). In these cases, the last event will report the phase
    %GDK_TOUCHPAD_GESTURE_PHASE_CANCEL, this should be used as a hint
    to undo any visible/permanent changes that were done throughout the
    progress of the gesture.

    See also #GdkEventTouchpadSwipe and #GdkEventTouchpadPinch.
    """
    BEGIN = 0
    UPDATE = 1
    END = 2
    CANCEL = 3

class VisibilityState(Enum):
    """
    Specifies the visiblity status of a window for a #GdkEventVisibility.
    """
    UNOBSCURED = 0
    PARTIAL = 1
    FULLY_OBSCURED = 2

class VisualType(Enum):
    """
    A set of values that describe the manner in which the pixel values
    for a visual are converted into RGB values for display.
    """
    STATIC_GRAY = 0
    GRAYSCALE = 1
    STATIC_COLOR = 2
    PSEUDO_COLOR = 3
    TRUE_COLOR = 4
    DIRECT_COLOR = 5

class WindowEdge(Enum):
    """
    Determines a window edge or corner.
    """
    NORTH_WEST = 0
    NORTH = 1
    NORTH_EAST = 2
    WEST = 3
    EAST = 4
    SOUTH_WEST = 5
    SOUTH = 6
    SOUTH_EAST = 7

class WindowType(Enum):
    """
    Describes the kind of window.
    """
    ROOT = 0
    TOPLEVEL = 1
    CHILD = 2
    TEMP = 3
    FOREIGN = 4
    OFFSCREEN = 5
    SUBSURFACE = 6

class WindowTypeHint(Enum):
    """
    These are hints for the window manager that indicate what type of function
    the window has. The window manager can use this when determining decoration
    and behaviour of the window. The hint must be set before mapping the window.

    See the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
    specification for more details about window types.
    """
    NORMAL = 0
    DIALOG = 1
    MENU = 2
    TOOLBAR = 3
    SPLASHSCREEN = 4
    UTILITY = 5
    DOCK = 6
    DESKTOP = 7
    DROPDOWN_MENU = 8
    POPUP_MENU = 9
    TOOLTIP = 10
    NOTIFICATION = 11
    COMBO = 12
    DND = 13

class WindowWindowClass(Enum):
    """
    @GDK_INPUT_OUTPUT windows are the standard kind of window you might expect.
    Such windows receive events and are also displayed on screen.
    @GDK_INPUT_ONLY windows are invisible; they are usually placed above other
    windows in order to trap or filter the events. You can’t draw on
    @GDK_INPUT_ONLY windows.
    """
    INPUT_OUTPUT = 0
    INPUT_ONLY = 1

class AnchorHints(Enum):
    """
    Positioning hints for aligning a window relative to a rectangle.

    These hints determine how the window should be positioned in the case that
    the window would fall off-screen if placed in its ideal position.

    For example, %GDK_ANCHOR_FLIP_X will replace %GDK_GRAVITY_NORTH_WEST with
    %GDK_GRAVITY_NORTH_EAST and vice versa if the window extends beyond the left
    or right edges of the monitor.

    If %GDK_ANCHOR_SLIDE_X is set, the window can be shifted horizontally to fit
    on-screen. If %GDK_ANCHOR_RESIZE_X is set, the window can be shrunken
    horizontally to fit.

    In general, when multiple flags are set, flipping should take precedence over
    sliding, which should take precedence over resizing.
    """
    FLIP_X = 1
    FLIP_Y = 2
    SLIDE_X = 4
    SLIDE_Y = 8
    RESIZE_X = 16
    RESIZE_Y = 32
    FLIP = 3
    SLIDE = 12
    RESIZE = 48

class AxisFlags(Enum):
    """
    Flags describing the current capabilities of a device/tool.
    """
    X = 2
    Y = 4
    PRESSURE = 8
    XTILT = 16
    YTILT = 32
    WHEEL = 64
    DISTANCE = 128
    ROTATION = 256
    SLIDER = 512

class DragAction(Enum):
    """
    Used in #GdkDragContext to indicate what the destination
    should do with the dropped data.
    """
    DEFAULT = 1
    COPY = 2
    MOVE = 4
    LINK = 8
    PRIVATE = 16
    ASK = 32

class EventMask(Enum):
    """
    A set of bit-flags to indicate which events a window is to receive.
    Most of these masks map onto one or more of the #GdkEventType event types
    above.

    See the [input handling overview][chap-input-handling] for details of
    [event masks][event-masks] and [event propagation][event-propagation].

    %GDK_POINTER_MOTION_HINT_MASK is deprecated. It is a special mask
    to reduce the number of %GDK_MOTION_NOTIFY events received. When using
    %GDK_POINTER_MOTION_HINT_MASK, fewer %GDK_MOTION_NOTIFY events will
    be sent, some of which are marked as a hint (the is_hint member is
    %TRUE). To receive more motion events after a motion hint event,
    the application needs to asks for more, by calling
    gdk_event_request_motions().

    Since GTK 3.8, motion events are already compressed by default, independent
    of this mechanism. This compression can be disabled with
    gdk_window_set_event_compression(). See the documentation of that function
    for details.

    If %GDK_TOUCH_MASK is enabled, the window will receive touch events
    from touch-enabled devices. Those will come as sequences of #GdkEventTouch
    with type %GDK_TOUCH_UPDATE, enclosed by two events with
    type %GDK_TOUCH_BEGIN and %GDK_TOUCH_END (or %GDK_TOUCH_CANCEL).
    gdk_event_get_event_sequence() returns the event sequence for these
    events, so different sequences may be distinguished.
    """
    EXPOSURE_MASK = 2
    POINTER_MOTION_MASK = 4
    POINTER_MOTION_HINT_MASK = 8
    BUTTON_MOTION_MASK = 16
    BUTTON1_MOTION_MASK = 32
    BUTTON2_MOTION_MASK = 64
    BUTTON3_MOTION_MASK = 128
    BUTTON_PRESS_MASK = 256
    BUTTON_RELEASE_MASK = 512
    KEY_PRESS_MASK = 1024
    KEY_RELEASE_MASK = 2048
    ENTER_NOTIFY_MASK = 4096
    LEAVE_NOTIFY_MASK = 8192
    FOCUS_CHANGE_MASK = 16384
    STRUCTURE_MASK = 32768
    PROPERTY_CHANGE_MASK = 65536
    VISIBILITY_NOTIFY_MASK = 131072
    PROXIMITY_IN_MASK = 262144
    PROXIMITY_OUT_MASK = 524288
    SUBSTRUCTURE_MASK = 1048576
    SCROLL_MASK = 2097152
    TOUCH_MASK = 4194304
    SMOOTH_SCROLL_MASK = 8388608
    TOUCHPAD_GESTURE_MASK = 16777216
    TABLET_PAD_MASK = 33554432
    ALL_EVENTS_MASK = 67108862

class FrameClockPhase(Enum):
    """
    #GdkFrameClockPhase is used to represent the different paint clock
    phases that can be requested. The elements of the enumeration
    correspond to the signals of #GdkFrameClock.
    """
    NONE = 0
    FLUSH_EVENTS = 1
    BEFORE_PAINT = 2
    UPDATE = 4
    LAYOUT = 8
    PAINT = 16
    RESUME_EVENTS = 32
    AFTER_PAINT = 64

class ModifierType(Enum):
    """
    A set of bit-flags to indicate the state of modifier keys and mouse buttons
    in various event types. Typical modifier keys are Shift, Control, Meta,
    Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.

    Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.

    Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
    to Mod2 - Mod5, and indicates this by setting %GDK_SUPER_MASK,
    %GDK_HYPER_MASK or %GDK_META_MASK in the state field of key events.

    Note that GDK may add internal values to events which include
    reserved values such as %GDK_MODIFIER_RESERVED_13_MASK.  Your code
    should preserve and ignore them.  You can use %GDK_MODIFIER_MASK to
    remove all reserved values.

    Also note that the GDK X backend interprets button press events for button
    4-7 as scroll events, so %GDK_BUTTON4_MASK and %GDK_BUTTON5_MASK will never
    be set.
    """
    SHIFT_MASK = 1
    LOCK_MASK = 2
    CONTROL_MASK = 4
    MOD1_MASK = 8
    MOD2_MASK = 16
    MOD3_MASK = 32
    MOD4_MASK = 64
    MOD5_MASK = 128
    BUTTON1_MASK = 256
    BUTTON2_MASK = 512
    BUTTON3_MASK = 1024
    BUTTON4_MASK = 2048
    BUTTON5_MASK = 4096
    MODIFIER_RESERVED_13_MASK = 8192
    MODIFIER_RESERVED_14_MASK = 16384
    MODIFIER_RESERVED_15_MASK = 32768
    MODIFIER_RESERVED_16_MASK = 65536
    MODIFIER_RESERVED_17_MASK = 131072
    MODIFIER_RESERVED_18_MASK = 262144
    MODIFIER_RESERVED_19_MASK = 524288
    MODIFIER_RESERVED_20_MASK = 1048576
    MODIFIER_RESERVED_21_MASK = 2097152
    MODIFIER_RESERVED_22_MASK = 4194304
    MODIFIER_RESERVED_23_MASK = 8388608
    MODIFIER_RESERVED_24_MASK = 16777216
    MODIFIER_RESERVED_25_MASK = 33554432
    SUPER_MASK = 67108864
    HYPER_MASK = 134217728
    META_MASK = 268435456
    MODIFIER_RESERVED_29_MASK = 536870912
    RELEASE_MASK = 1073741824
    MODIFIER_MASK = 1543512063

class SeatCapabilities(Enum):
    """
    Flags describing the seat capabilities.
    """
    NONE = 0
    POINTER = 1
    TOUCH = 2
    TABLET_STYLUS = 4
    KEYBOARD = 8
    ALL_POINTING = 7
    ALL = 15

class WMDecoration(Enum):
    """
    These are hints originally defined by the Motif toolkit.
    The window manager can use them when determining how to decorate
    the window. The hint must be set before mapping the window.
    """
    ALL = 1
    BORDER = 2
    RESIZEH = 4
    TITLE = 8
    MENU = 16
    MINIMIZE = 32
    MAXIMIZE = 64

class WMFunction(Enum):
    """
    These are hints originally defined by the Motif toolkit. The window manager
    can use them when determining the functions to offer for the window. The
    hint must be set before mapping the window.
    """
    ALL = 1
    RESIZE = 2
    MOVE = 4
    MINIMIZE = 8
    MAXIMIZE = 16
    CLOSE = 32

class WindowAttributesType(Enum):
    """
    Used to indicate which fields in the #GdkWindowAttr struct should be honored.
    For example, if you filled in the “cursor” and “x” fields of #GdkWindowAttr,
    pass “@GDK_WA_X | @GDK_WA_CURSOR” to gdk_window_new(). Fields in
    #GdkWindowAttr not covered by a bit in this enum are required; for example,
    the @width/@height, @wclass, and @window_type fields are required, they have
    no corresponding flag in #GdkWindowAttributesType.
    """
    TITLE = 2
    X = 4
    Y = 8
    CURSOR = 16
    VISUAL = 32
    WMCLASS = 64
    NOREDIR = 128
    TYPE_HINT = 256

class WindowHints(Enum):
    """
    Used to indicate which fields of a #GdkGeometry struct should be paid
    attention to. Also, the presence/absence of @GDK_HINT_POS,
    @GDK_HINT_USER_POS, and @GDK_HINT_USER_SIZE is significant, though they don't
    directly refer to #GdkGeometry fields. @GDK_HINT_USER_POS will be set
    automatically by #GtkWindow if you call gtk_window_move().
    @GDK_HINT_USER_POS and @GDK_HINT_USER_SIZE should be set if the user
    specified a size/position using a --geometry command-line argument;
    gtk_window_parse_geometry() automatically sets these flags.
    """
    POS = 1
    MIN_SIZE = 2
    MAX_SIZE = 4
    BASE_SIZE = 8
    ASPECT = 16
    RESIZE_INC = 32
    WIN_GRAVITY = 64
    USER_POS = 128
    USER_SIZE = 256

class WindowState(Enum):
    """
    Specifies the state of a toplevel window.
    """
    WITHDRAWN = 1
    ICONIFIED = 2
    MAXIMIZED = 4
    STICKY = 8
    FULLSCREEN = 16
    ABOVE = 32
    BELOW = 64
    FOCUSED = 128
    TILED = 256
    TOP_TILED = 512
    TOP_RESIZABLE = 1024
    RIGHT_TILED = 2048
    RIGHT_RESIZABLE = 4096
    BOTTOM_TILED = 8192
    BOTTOM_RESIZABLE = 16384
    LEFT_TILED = 32768
    LEFT_RESIZABLE = 65536


def add_option_entries_libgtk_only(group: GLib.OptionGroup) -> object:
    """
    Appends gdk option entries to the passed in option group. This is
    not public API and must not be used by applications.
    """
    ...

def beep() -> object:
    """
    Emits a short beep on the default display.
    """
    ...

def cairo_create(window: Window) -> cairo.Context:
    """
    Creates a Cairo context for drawing to @window.

    Note that calling cairo_reset_clip() on the resulting #cairo_t will
    produce undefined results, so avoid it at all costs.

    Typically, this function is used to draw on a #GdkWindow out of the paint
    cycle of the toolkit; this should be avoided, as it breaks various assumptions
    and optimizations.

    If you are drawing on a native #GdkWindow in response to a %GDK_EXPOSE event
    you should use gdk_window_begin_draw_frame() and gdk_drawing_context_get_cairo_context()
    instead. GTK will automatically do this for you when drawing a widget.
    """
    ...

def cairo_draw_from_gl(cr: cairo.Context, window: Window, source: int, source_type: int, buffer_scale: int, x: int, y: int, width: int, height: int) -> object:
    """
    This is the main way to draw GL content in GTK+. It takes a render buffer ID
    (@source_type == #GL_RENDERBUFFER) or a texture id (@source_type == #GL_TEXTURE)
    and draws it onto @cr with an OVER operation, respecting the current clip.
    The top left corner of the rectangle specified by @x, @y, @width and @height
    will be drawn at the current (0,0) position of the cairo_t.

    This will work for *all* cairo_t, as long as @window is realized, but the
    fallback implementation that reads back the pixels from the buffer may be
    used in the general case. In the case of direct drawing to a window with
    no special effects applied to @cr it will however use a more efficient
    approach.

    For #GL_RENDERBUFFER the code will always fall back to software for buffers
    with alpha components, so make sure you use #GL_TEXTURE if using alpha.

    Calling this may change the current GL context.
    """
    ...

def cairo_get_clip_rectangle(cr: cairo.Context, rect: Rectangle) -> bool:
    """
    This is a convenience function around cairo_clip_extents().
    It rounds the clip extents to integer coordinates and returns
    a boolean indicating if a clip area exists.
    """
    ...

def cairo_get_drawing_context(cr: cairo.Context) -> DrawingContext:
    """
    Retrieves the #GdkDrawingContext that created the Cairo
    context @cr.
    """
    ...

def cairo_rectangle(cr: cairo.Context, rectangle: Rectangle) -> object:
    """
    Adds the given rectangle to the current path of @cr.
    """
    ...

def cairo_region(cr: cairo.Context, region: cairo.Region) -> object:
    """
    Adds the given region to the current path of @cr.
    """
    ...

def cairo_region_create_from_surface(surface: cairo.Surface) -> cairo.Region:
    """
    Creates region that describes covers the area where the given
    @surface is more than 50% opaque.

    This function takes into account device offsets that might be
    set with cairo_surface_set_device_offset().
    """
    ...

def cairo_set_source_color(cr: cairo.Context, color: Color) -> object:
    """
    Sets the specified #GdkColor as the source color of @cr.
    """
    ...

def cairo_set_source_pixbuf(cr: cairo.Context, pixbuf: GdkPixbuf.Pixbuf, pixbuf_x: float, pixbuf_y: float) -> object:
    """
    Sets the given pixbuf as the source pattern for @cr.

    The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
    so that the origin of @pixbuf is @pixbuf_x, @pixbuf_y.
    """
    ...

def cairo_set_source_rgba(cr: cairo.Context, rgba: RGBA) -> object:
    """
    Sets the specified #GdkRGBA as the source color of @cr.
    """
    ...

def cairo_set_source_window(cr: cairo.Context, window: Window, x: float, y: float) -> object:
    """
    Sets the given window as the source pattern for @cr.

    The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
    so that the origin of @window is @x, @y. The window contains all its
    subwindows when rendering.

    Note that the contents of @window are undefined outside of the
    visible part of @window, so use this function with care.
    """
    ...

def cairo_surface_create_from_pixbuf(pixbuf: GdkPixbuf.Pixbuf, scale: int, for_window: _T.Optional[Window]) -> cairo.Surface:
    """
    Creates an image surface with the same contents as
    the pixbuf.
    """
    ...

def disable_multidevice() -> object:
    """
    Disables multidevice support in GDK. This call must happen prior
    to gdk_display_open(), gtk_init(), gtk_init_with_args() or
    gtk_init_check() in order to take effect.

    Most common GTK+ applications won’t ever need to call this. Only
    applications that do mixed GDK/Xlib calls could want to disable
    multidevice support if such Xlib code deals with input devices in
    any way and doesn’t observe the presence of XInput 2.
    """
    ...

def drag_abort(context: DragContext, time_: int) -> object:
    """
    Aborts a drag without dropping.

    This function is called by the drag source.

    This function does not need to be called in managed drag and drop
    operations. See gdk_drag_context_manage_dnd() for more information.
    """
    ...

def drag_begin(window: Window, targets: GLib.List) -> DragContext:
    """
    Starts a drag and creates a new drag context for it.
    This function assumes that the drag is controlled by the
    client pointer device, use gdk_drag_begin_for_device() to
    begin a drag with a different device.

    This function is called by the drag source.
    """
    ...

def drag_begin_for_device(window: Window, device: Device, targets: GLib.List) -> DragContext:
    """
    Starts a drag and creates a new drag context for it.

    This function is called by the drag source.
    """
    ...

def drag_begin_from_point(window: Window, device: Device, targets: GLib.List, x_root: int, y_root: int) -> DragContext:
    """
    Starts a drag and creates a new drag context for it.

    This function is called by the drag source.
    """
    ...

def drag_drop(context: DragContext, time_: int) -> object:
    """
    Drops on the current destination.

    This function is called by the drag source.

    This function does not need to be called in managed drag and drop
    operations. See gdk_drag_context_manage_dnd() for more information.
    """
    ...

def drag_drop_done(context: DragContext, success: bool) -> object:
    """
    Inform GDK if the drop ended successfully. Passing %FALSE
    for @success may trigger a drag cancellation animation.

    This function is called by the drag source, and should
    be the last call before dropping the reference to the
    @context.

    The #GdkDragContext will only take the first gdk_drag_drop_done()
    call as effective, if this function is called multiple times,
    all subsequent calls will be ignored.
    """
    ...

def drag_drop_succeeded(context: DragContext) -> bool:
    """
    Returns whether the dropped data has been successfully
    transferred. This function is intended to be used while
    handling a %GDK_DROP_FINISHED event, its return value is
    meaningless at other times.
    """
    ...

def drag_find_window_for_screen(context: DragContext, drag_window: Window, screen: Screen, x_root: int, y_root: int, dest_window: Window, protocol: DragProtocol) -> object:
    """
    Finds the destination window and DND protocol to use at the
    given pointer position.

    This function is called by the drag source to obtain the
    @dest_window and @protocol parameters for gdk_drag_motion().
    """
    ...

def drag_get_selection(context: DragContext) -> Atom:
    """
    Returns the selection atom for the current source window.
    """
    ...

def drag_motion(context: DragContext, dest_window: Window, protocol: DragProtocol, x_root: int, y_root: int, suggested_action: DragAction, possible_actions: DragAction, time_: int) -> bool:
    """
    Updates the drag context when the pointer moves or the
    set of actions changes.

    This function is called by the drag source.

    This function does not need to be called in managed drag and drop
    operations. See gdk_drag_context_manage_dnd() for more information.
    """
    ...

def drag_status(context: DragContext, action: DragAction, time_: int) -> object:
    """
    Selects one of the actions offered by the drag source.

    This function is called by the drag destination in response to
    gdk_drag_motion() called by the drag source.
    """
    ...

def drop_finish(context: DragContext, success: bool, time_: int) -> object:
    """
    Ends the drag operation after a drop.

    This function is called by the drag destination.
    """
    ...

def drop_reply(context: DragContext, accepted: bool, time_: int) -> object:
    """
    Accepts or rejects a drop.

    This function is called by the drag destination in response
    to a drop initiated by the drag source.
    """
    ...

def error_trap_pop() -> int:
    """
    Removes an error trap pushed with gdk_error_trap_push().
    May block until an error has been definitively received
    or not received from the X server. gdk_error_trap_pop_ignored()
    is preferred if you don’t need to know whether an error
    occurred, because it never has to block. If you don't
    need the return value of gdk_error_trap_pop(), use
    gdk_error_trap_pop_ignored().

    Prior to GDK 3.0, this function would not automatically
    sync for you, so you had to gdk_flush() if your last
    call to Xlib was not a blocking round trip.
    """
    ...

def error_trap_pop_ignored() -> object:
    """
    Removes an error trap pushed with gdk_error_trap_push(), but
    without bothering to wait and see whether an error occurred.  If an
    error arrives later asynchronously that was triggered while the
    trap was pushed, that error will be ignored.
    """
    ...

def error_trap_push() -> object:
    """
    This function allows X errors to be trapped instead of the normal
    behavior of exiting the application. It should only be used if it
    is not possible to avoid the X error in any other way. Errors are
    ignored on all #GdkDisplay currently known to the
    #GdkDisplayManager. If you don’t care which error happens and just
    want to ignore everything, pop with gdk_error_trap_pop_ignored().
    If you need the error code, use gdk_error_trap_pop() which may have
    to block and wait for the error to arrive from the X server.

    This API exists on all platforms but only does anything on X.

    You can use gdk_x11_display_error_trap_push() to ignore errors
    on only a single display.

    ## Trapping an X error

    |[<!-- language="C" -->
    gdk_error_trap_push ();

     // ... Call the X function which may cause an error here ...


    if (gdk_error_trap_pop ())
     {
       // ... Handle the error here ...
     }
    ]|
    """
    ...

def events_get_angle(event1: Event, event2: Event, angle: float) -> bool:
    """
    If both events contain X/Y information, this function will return %TRUE
    and return in @angle the relative angle from @event1 to @event2. The rotation
    direction for positive angles is from the positive X axis towards the positive
    Y axis.
    """
    ...

def events_get_center(event1: Event, event2: Event, x: float, y: float) -> bool:
    """
    If both events contain X/Y information, the center of both coordinates
    will be returned in @x and @y.
    """
    ...

def events_get_distance(event1: Event, event2: Event, distance: float) -> bool:
    """
    If both events have X/Y information, the distance between both coordinates
    (as in a straight line going from @event1 to @event2) will be returned.
    """
    ...

def events_pending() -> bool:
    """
    Checks if any events are ready to be processed for any display.
    """
    ...

def flush() -> object:
    """
    Flushes the output buffers of all display connections and waits
    until all requests have been processed.
    This is rarely needed by applications.
    """
    ...

def get_default_root_window() -> Window:
    """
    Obtains the root window (parent all other windows are inside)
    for the default display and screen.
    """
    ...

def get_display() -> str:
    """
    Gets the name of the display, which usually comes from the
    `DISPLAY` environment variable or the
    `--display` command line option.
    """
    ...

def get_display_arg_name() -> str:
    """
    Gets the display name specified in the command line arguments passed
    to gdk_init() or gdk_parse_args(), if any.
    """
    ...

def get_program_class() -> str:
    """
    Gets the program class. Unless the program class has explicitly
    been set with gdk_set_program_class() or with the `--class`
    commandline option, the default value is the program name (determined
    with g_get_prgname()) with the first character converted to uppercase.
    """
    ...

def get_show_events() -> bool:
    """
    Gets whether event debugging output is enabled.
    """
    ...

def init(argc: int, argv: object) -> object:
    """
    Initializes the GDK library and connects to the windowing system.
    If initialization fails, a warning message is output and the application
    terminates with a call to `exit(1)`.

    Any arguments used by GDK are removed from the array and @argc and @argv
    are updated accordingly.

    GTK+ initializes GDK in gtk_init() and so this function is not usually
    needed by GTK+ applications.
    """
    ...

def init_check(argc: int, argv: object) -> bool:
    """
    Initializes the GDK library and connects to the windowing system,
    returning %TRUE on success.

    Any arguments used by GDK are removed from the array and @argc and @argv
    are updated accordingly.

    GTK+ initializes GDK in gtk_init() and so this function is not usually
    needed by GTK+ applications.
    """
    ...

def keyboard_grab(window: Window, owner_events: bool, time_: int) -> GrabStatus:
    """
    Grabs the keyboard so that all events are passed to this
    application until the keyboard is ungrabbed with gdk_keyboard_ungrab().
    This overrides any previous keyboard grab by this client.

    If you set up anything at the time you take the grab that needs to be cleaned
    up when the grab ends, you should handle the #GdkEventGrabBroken events that
    are emitted when the grab ends unvoluntarily.
    """
    ...

def keyboard_ungrab(time_: int) -> object:
    """
    Ungrabs the keyboard on the default display, if it is grabbed by this
    application.
    """
    ...

def keyval_convert_case(symbol: int, lower: int, upper: int) -> object:
    """
    Obtains the upper- and lower-case versions of the keyval @symbol.
    Examples of keyvals are #GDK_KEY_a, #GDK_KEY_Enter, #GDK_KEY_F1, etc.
    """
    ...

def keyval_from_name(keyval_name: str) -> int:
    """
    Converts a key name to a key value.

    The names are the same as those in the
    `gdk/gdkkeysyms.h` header file
    but without the leading “GDK_KEY_”.
    """
    ...

def keyval_is_lower(keyval: int) -> bool:
    """
    Returns %TRUE if the given key value is in lower case.
    """
    ...

def keyval_is_upper(keyval: int) -> bool:
    """
    Returns %TRUE if the given key value is in upper case.
    """
    ...

def keyval_name(keyval: int) -> str:
    """
    Converts a key value into a symbolic name.

    The names are the same as those in the
    `gdk/gdkkeysyms.h` header file
    but without the leading “GDK_KEY_”.
    """
    ...

def keyval_to_lower(keyval: int) -> int:
    """
    Converts a key value to lower case, if applicable.
    """
    ...

def keyval_to_unicode(keyval: int) -> int:
    """
    Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
    character.
    """
    ...

def keyval_to_upper(keyval: int) -> int:
    """
    Converts a key value to upper case, if applicable.
    """
    ...

def list_visuals() -> GLib.List:
    """
    Lists the available visuals for the default screen.
    (See gdk_screen_list_visuals())
    A visual describes a hardware image data format.
    For example, a visual might support 24-bit color, or 8-bit color,
    and might expect pixels to be in a certain format.

    Call g_list_free() on the return value when you’re finished with it.
    """
    ...

def notify_startup_complete() -> object:
    """
    Indicates to the GUI environment that the application has finished
    loading. If the applications opens windows, this function is
    normally called after opening the application’s initial set of
    windows.

    GTK+ will call this function automatically after opening the first
    #GtkWindow unless gtk_window_set_auto_startup_notification() is called
    to disable that feature.
    """
    ...

def notify_startup_complete_with_id(startup_id: str) -> object:
    """
    Indicates to the GUI environment that the application has
    finished loading, using a given identifier.

    GTK+ will call this function automatically for #GtkWindow
    with custom startup-notification identifier unless
    gtk_window_set_auto_startup_notification() is called to
    disable that feature.
    """
    ...

def offscreen_window_get_embedder(window: Window) -> Window:
    """
    Gets the window that @window is embedded in.
    """
    ...

def offscreen_window_get_surface(window: Window) -> cairo.Surface:
    """
    Gets the offscreen surface that an offscreen window renders into.
    If you need to keep this around over window resizes, you need to
    add a reference to it.
    """
    ...

def offscreen_window_set_embedder(window: Window, embedder: Window) -> object:
    """
    Sets @window to be embedded in @embedder.

    To fully embed an offscreen window, in addition to calling this
    function, it is also necessary to handle the #GdkWindow::pick-embedded-child
    signal on the @embedder and the #GdkWindow::to-embedder and
    #GdkWindow::from-embedder signals on @window.
    """
    ...

def pango_context_get() -> Pango.Context:
    """
    Creates a #PangoContext for the default GDK screen.

    The context must be freed when you’re finished with it.

    When using GTK+, normally you should use gtk_widget_get_pango_context()
    instead of this function, to get the appropriate context for
    the widget you intend to render text onto.

    The newly created context will have the default font options (see
    #cairo_font_options_t) for the default screen; if these options
    change it will not be updated. Using gtk_widget_get_pango_context()
    is more convenient if you want to keep a context around and track
    changes to the screen’s font rendering settings.
    """
    ...

def pango_context_get_for_display(display: Display) -> Pango.Context:
    """
    Creates a #PangoContext for @display.

    The context must be freed when you’re finished with it.

    When using GTK+, normally you should use gtk_widget_get_pango_context()
    instead of this function, to get the appropriate context for
    the widget you intend to render text onto.

    The newly created context will have the default font options
    (see #cairo_font_options_t) for the display; if these options
    change it will not be updated. Using gtk_widget_get_pango_context()
    is more convenient if you want to keep a context around and track
    changes to the font rendering settings.
    """
    ...

def pango_context_get_for_screen(screen: Screen) -> Pango.Context:
    """
    Creates a #PangoContext for @screen.

    The context must be freed when you’re finished with it.

    When using GTK+, normally you should use gtk_widget_get_pango_context()
    instead of this function, to get the appropriate context for
    the widget you intend to render text onto.

    The newly created context will have the default font options
    (see #cairo_font_options_t) for the screen; if these options
    change it will not be updated. Using gtk_widget_get_pango_context()
    is more convenient if you want to keep a context around and track
    changes to the screen’s font rendering settings.
    """
    ...

def pango_layout_get_clip_region(layout: Pango.Layout, x_origin: int, y_origin: int, index_ranges: int, n_ranges: int) -> cairo.Region:
    """
    Obtains a clip region which contains the areas where the given ranges
    of text would be drawn. @x_origin and @y_origin are the top left point
    to center the layout. @index_ranges should contain
    ranges of bytes in the layout’s text.

    Note that the regions returned correspond to logical extents of the text
    ranges, not ink extents. So the drawn layout may in fact touch areas out of
    the clip region.  The clip region is mainly useful for highlightling parts
    of text, such as when text is selected.
    """
    ...

def pango_layout_line_get_clip_region(line: Pango.LayoutLine, x_origin: int, y_origin: int, index_ranges: object, n_ranges: int) -> cairo.Region:
    """
    Obtains a clip region which contains the areas where the given
    ranges of text would be drawn. @x_origin and @y_origin are the top left
    position of the layout. @index_ranges
    should contain ranges of bytes in the layout’s text. The clip
    region will include space to the left or right of the line (to the
    layout bounding box) if you have indexes above or below the indexes
    contained inside the line. This is to draw the selection all the way
    to the side of the layout. However, the clip region is in line coordinates,
    not layout coordinates.

    Note that the regions returned correspond to logical extents of the text
    ranges, not ink extents. So the drawn line may in fact touch areas out of
    the clip region.  The clip region is mainly useful for highlightling parts
    of text, such as when text is selected.
    """
    ...

def parse_args(argc: int, argv: object) -> object:
    """
    Parse command line arguments, and store for future
    use by calls to gdk_display_open().

    Any arguments used by GDK are removed from the array and @argc and @argv are
    updated accordingly.

    You shouldn’t call this function explicitly if you are using
    gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().
    """
    ...

def pixbuf_get_from_surface(surface: cairo.Surface, src_x: int, src_y: int, width: int, height: int) -> GdkPixbuf.Pixbuf:
    """
    Transfers image data from a #cairo_surface_t and converts it to an RGB(A)
    representation inside a #GdkPixbuf. This allows you to efficiently read
    individual pixels from cairo surfaces. For #GdkWindows, use
    gdk_pixbuf_get_from_window() instead.

    This function will create an RGB pixbuf with 8 bits per channel.
    The pixbuf will contain an alpha channel if the @surface contains one.
    """
    ...

def pixbuf_get_from_window(window: Window, src_x: int, src_y: int, width: int, height: int) -> GdkPixbuf.Pixbuf:
    """
    Transfers image data from a #GdkWindow and converts it to an RGB(A)
    representation inside a #GdkPixbuf. In other words, copies
    image data from a server-side drawable to a client-side RGB(A) buffer.
    This allows you to efficiently read individual pixels on the client side.

    This function will create an RGB pixbuf with 8 bits per channel with
    the size specified by the @width and @height arguments scaled by the
    scale factor of @window. The pixbuf will contain an alpha channel if
    the @window contains one.

    If the window is off the screen, then there is no image data in the
    obscured/offscreen regions to be placed in the pixbuf. The contents of
    portions of the pixbuf corresponding to the offscreen region are undefined.

    If the window you’re obtaining data from is partially obscured by
    other windows, then the contents of the pixbuf areas corresponding
    to the obscured regions are undefined.

    If the window is not mapped (typically because it’s iconified/minimized
    or not on the current workspace), then %NULL will be returned.

    If memory can’t be allocated for the return value, %NULL will be returned
    instead.

    (In short, there are several ways this function can fail, and if it fails
     it returns %NULL; so check the return value.)
    """
    ...

def pointer_grab(window: Window, owner_events: bool, event_mask: EventMask, confine_to: _T.Optional[Window], cursor: _T.Optional[Cursor], time_: int) -> GrabStatus:
    """
    Grabs the pointer (usually a mouse) so that all events are passed to this
    application until the pointer is ungrabbed with gdk_pointer_ungrab(), or
    the grab window becomes unviewable.
    This overrides any previous pointer grab by this client.

    Pointer grabs are used for operations which need complete control over mouse
    events, even if the mouse leaves the application.
    For example in GTK+ it is used for Drag and Drop, for dragging the handle in
    the #GtkHPaned and #GtkVPaned widgets.

    Note that if the event mask of an X window has selected both button press and
    button release events, then a button press event will cause an automatic
    pointer grab until the button is released.
    X does this automatically since most applications expect to receive button
    press and release events in pairs.
    It is equivalent to a pointer grab on the window with @owner_events set to
    %TRUE.

    If you set up anything at the time you take the grab that needs to be cleaned
    up when the grab ends, you should handle the #GdkEventGrabBroken events that
    are emitted when the grab ends unvoluntarily.
    """
    ...

def pointer_is_grabbed() -> bool:
    """
    Returns %TRUE if the pointer on the default display is currently
    grabbed by this application.

    Note that this does not take the inmplicit pointer grab on button
    presses into account.
    """
    ...

def pointer_ungrab(time_: int) -> object:
    """
    Ungrabs the pointer on the default display, if it is grabbed by this
    application.
    """
    ...

def pre_parse_libgtk_only() -> object:
    """
    Prepare for parsing command line arguments for GDK. This is not
    public API and should not be used in application code.
    """
    ...

def property_change(window: Window, property: Atom, type: Atom, format: int, mode: PropMode, data: int, nelements: int) -> object:
    """
    Changes the contents of a property on a window.
    """
    ...

def property_delete(window: Window, property: Atom) -> object:
    """
    Deletes a property from a window.
    """
    ...

def property_get(window: Window, property: Atom, type: Atom, offset: int, length: int, pdelete: int, actual_property_type: Atom, actual_format: int, actual_length: int, data: object) -> bool:
    """
    Retrieves a portion of the contents of a property. If the
    property does not exist, then the function returns %FALSE,
    and %GDK_NONE will be stored in @actual_property_type.

    The XGetWindowProperty() function that gdk_property_get()
    uses has a very confusing and complicated set of semantics.
    Unfortunately, gdk_property_get() makes the situation
    worse instead of better (the semantics should be considered
    undefined), and also prints warnings to stderr in cases where it
    should return a useful error to the program. You are advised to use
    XGetWindowProperty() directly until a replacement function for
    gdk_property_get() is provided.
    """
    ...

def query_depths(depths: object, count: int) -> object:
    """
    This function returns the available bit depths for the default
    screen. It’s equivalent to listing the visuals
    (gdk_list_visuals()) and then looking at the depth field in each
    visual, removing duplicates.

    The array returned by this function should not be freed.
    """
    ...

def query_visual_types(visual_types: object, count: int) -> object:
    """
    This function returns the available visual types for the default
    screen. It’s equivalent to listing the visuals
    (gdk_list_visuals()) and then looking at the type field in each
    visual, removing duplicates.

    The array returned by this function should not be freed.
    """
    ...

def selection_convert(requestor: Window, selection: Atom, target: Atom, time_: int) -> object:
    """
    Retrieves the contents of a selection in a given
    form.
    """
    ...

def selection_owner_get(selection: Atom) -> Window:
    """
    Determines the owner of the given selection.
    """
    ...

def selection_owner_get_for_display(display: Display, selection: Atom) -> Window:
    """
    Determine the owner of the given selection.

    Note that the return value may be owned by a different
    process if a foreign window was previously created for that
    window, but a new foreign window will never be created by this call.
    """
    ...

def selection_owner_set(owner: _T.Optional[Window], selection: Atom, time_: int, send_event: bool) -> bool:
    """
    Sets the owner of the given selection.
    """
    ...

def selection_owner_set_for_display(display: Display, owner: _T.Optional[Window], selection: Atom, time_: int, send_event: bool) -> bool:
    """
    Sets the #GdkWindow @owner as the current owner of the selection @selection.
    """
    ...

def selection_property_get(requestor: Window, data: int, prop_type: Atom, prop_format: int) -> int:
    """
    Retrieves selection data that was stored by the selection
    data in response to a call to gdk_selection_convert(). This function
    will not be used by applications, who should use the #GtkClipboard
    API instead.
    """
    ...

def selection_send_notify(requestor: Window, selection: Atom, target: Atom, property: Atom, time_: int) -> object:
    """
    Sends a response to SelectionRequest event.
    """
    ...

def selection_send_notify_for_display(display: Display, requestor: Window, selection: Atom, target: Atom, property: Atom, time_: int) -> object:
    """
    Send a response to SelectionRequest event.
    """
    ...

def set_allowed_backends(backends: str) -> object:
    """
    Sets a list of backends that GDK should try to use.

    This can be be useful if your application does not
    work with certain GDK backends.

    By default, GDK tries all included backends.

    For example,
    |[<!-- language="C" -->
    gdk_set_allowed_backends ("wayland,quartz,*");
    ]|
    instructs GDK to try the Wayland backend first,
    followed by the Quartz backend, and then all
    others.

    If the `GDK_BACKEND` environment variable
    is set, it determines what backends are tried in what
    order, while still respecting the set of allowed backends
    that are specified by this function.

    The possible backend names are x11, win32, quartz,
    broadway, wayland. You can also include a * in the
    list to try all remaining backends.

    This call must happen prior to gdk_display_open(),
    gtk_init(), gtk_init_with_args() or gtk_init_check()
    in order to take effect.
    """
    ...

def set_double_click_time(msec: int) -> object:
    """
    Set the double click time for the default display. See
    gdk_display_set_double_click_time().
    See also gdk_display_set_double_click_distance().
    Applications should not set this, it is a
    global user-configured setting.
    """
    ...

def set_program_class(program_class: str) -> object:
    """
    Sets the program class. The X11 backend uses the program class to set
    the class name part of the `WM_CLASS` property on
    toplevel windows; see the ICCCM.

    The program class can still be overridden with the --class command
    line option.
    """
    ...

def set_show_events(show_events: bool) -> object:
    """
    Sets whether a trace of received events is output.
    Note that GTK+ must be compiled with debugging (that is,
    configured using the `--enable-debug` option)
    to use this option.
    """
    ...

def setting_get(name: str, value: GObject.Value) -> bool:
    """
    Obtains a desktop-wide setting, such as the double-click time,
    for the default screen. See gdk_screen_get_setting().
    """
    ...

def synthesize_window_state(window: Window, unset_flags: WindowState, set_flags: WindowState) -> object:
    ...

def test_render_sync(window: Window) -> object:
    """
    Retrieves a pixel from @window to force the windowing
    system to carry out any pending rendering commands.

    This function is intended to be used to synchronize with rendering
    pipelines, to benchmark windowing system rendering operations.
    """
    ...

def test_simulate_button(window: Window, x: int, y: int, button: int, modifiers: ModifierType, button_pressrelease: EventType) -> bool:
    """
    This function is intended to be used in GTK+ test programs.
    It will warp the mouse pointer to the given (@x,@y) coordinates
    within @window and simulate a button press or release event.
    Because the mouse pointer needs to be warped to the target
    location, use of this function outside of test programs that
    run in their own virtual windowing system (e.g. Xvfb) is not
    recommended.

    Also, gdk_test_simulate_button() is a fairly low level function,
    for most testing purposes, gtk_test_widget_click() is the right
    function to call which will generate a button press event followed
    by its accompanying button release event.
    """
    ...

def test_simulate_key(window: Window, x: int, y: int, keyval: int, modifiers: ModifierType, key_pressrelease: EventType) -> bool:
    """
    This function is intended to be used in GTK+ test programs.
    If (@x,@y) are > (-1,-1), it will warp the mouse pointer to
    the given (@x,@y) coordinates within @window and simulate a
    key press or release event.

    When the mouse pointer is warped to the target location, use
    of this function outside of test programs that run in their
    own virtual windowing system (e.g. Xvfb) is not recommended.
    If (@x,@y) are passed as (-1,-1), the mouse pointer will not
    be warped and @window origin will be used as mouse pointer
    location for the event.

    Also, gdk_test_simulate_key() is a fairly low level function,
    for most testing purposes, gtk_test_widget_send_key() is the
    right function to call which will generate a key press event
    followed by its accompanying key release event.
    """
    ...

def text_property_to_utf8_list_for_display(display: Display, encoding: Atom, format: int, text: object, length: int, list: object) -> int:
    """
    Converts a text property in the given encoding to
    a list of UTF-8 strings.
    """
    ...

def threads_add_idle(function: GLib.SourceFunc, data: _T.Optional[object]) -> int:
    """
    A wrapper for the common usage of gdk_threads_add_idle_full()
    assigning the default priority, #G_PRIORITY_DEFAULT_IDLE.

    See gdk_threads_add_idle_full().
    """
    ...

def threads_add_idle_full(priority: int, function: GLib.SourceFunc, data: _T.Optional[object], notify: _T.Optional[GLib.DestroyNotify]) -> int:
    """
    Adds a function to be called whenever there are no higher priority
    events pending.  If the function returns %FALSE it is automatically
    removed from the list of event sources and will not be called again.

    This variant of g_idle_add_full() calls @function with the GDK lock
    held. It can be thought of a MT-safe version for GTK+ widgets for the
    following use case, where you have to worry about idle_callback()
    running in thread A and accessing @self after it has been finalized
    in thread B:

    |[<!-- language="C" -->
    static gboolean
    idle_callback (gpointer data)
    {
       // gdk_threads_enter(); would be needed for g_idle_add()

       SomeWidget *self = data;
       // do stuff with self

       self->idle_id = 0;

       // gdk_threads_leave(); would be needed for g_idle_add()
       return FALSE;
    }

    static void
    some_widget_do_stuff_later (SomeWidget *self)
    {
       self->idle_id = gdk_threads_add_idle (idle_callback, self)
       // using g_idle_add() here would require thread protection in the callback
    }

    static void
    some_widget_finalize (GObject *object)
    {
       SomeWidget *self = SOME_WIDGET (object);
       if (self->idle_id)
         g_source_remove (self->idle_id);
       G_OBJECT_CLASS (parent_class)->finalize (object);
    }
    ]|
    """
    ...

def threads_add_timeout(interval: int, function: GLib.SourceFunc, data: _T.Optional[object]) -> int:
    """
    A wrapper for the common usage of gdk_threads_add_timeout_full()
    assigning the default priority, #G_PRIORITY_DEFAULT.

    See gdk_threads_add_timeout_full().
    """
    ...

def threads_add_timeout_full(priority: int, interval: int, function: GLib.SourceFunc, data: _T.Optional[object], notify: _T.Optional[GLib.DestroyNotify]) -> int:
    """
    Sets a function to be called at regular intervals holding the GDK lock,
    with the given priority.  The function is called repeatedly until it
    returns %FALSE, at which point the timeout is automatically destroyed
    and the function will not be called again.  The @notify function is
    called when the timeout is destroyed.  The first call to the
    function will be at the end of the first @interval.

    Note that timeout functions may be delayed, due to the processing of other
    event sources. Thus they should not be relied on for precise timing.
    After each call to the timeout function, the time of the next
    timeout is recalculated based on the current time and the given interval
    (it does not try to “catch up” time lost in delays).

    This variant of g_timeout_add_full() can be thought of a MT-safe version
    for GTK+ widgets for the following use case:

    |[<!-- language="C" -->
    static gboolean timeout_callback (gpointer data)
    {
       SomeWidget *self = data;
       
       // do stuff with self
       
       self->timeout_id = 0;
       
       return G_SOURCE_REMOVE;
    }
     
    static void some_widget_do_stuff_later (SomeWidget *self)
    {
       self->timeout_id = g_timeout_add (timeout_callback, self)
    }
     
    static void some_widget_finalize (GObject *object)
    {
       SomeWidget *self = SOME_WIDGET (object);
       
       if (self->timeout_id)
         g_source_remove (self->timeout_id);
       
       G_OBJECT_CLASS (parent_class)->finalize (object);
    }
    ]|
    """
    ...

def threads_add_timeout_seconds(interval: int, function: GLib.SourceFunc, data: _T.Optional[object]) -> int:
    """
    A wrapper for the common usage of gdk_threads_add_timeout_seconds_full()
    assigning the default priority, #G_PRIORITY_DEFAULT.

    For details, see gdk_threads_add_timeout_full().
    """
    ...

def threads_add_timeout_seconds_full(priority: int, interval: int, function: GLib.SourceFunc, data: _T.Optional[object], notify: _T.Optional[GLib.DestroyNotify]) -> int:
    """
    A variant of gdk_threads_add_timeout_full() with second-granularity.
    See g_timeout_add_seconds_full() for a discussion of why it is
    a good idea to use this function if you don’t need finer granularity.
    """
    ...

def threads_enter() -> object:
    """
    This function marks the beginning of a critical section in which
    GDK and GTK+ functions can be called safely and without causing race
    conditions. Only one thread at a time can be in such a critial
    section.
    """
    ...

def threads_init() -> object:
    """
    Initializes GDK so that it can be used from multiple threads
    in conjunction with gdk_threads_enter() and gdk_threads_leave().

    This call must be made before any use of the main loop from
    GTK+; to be safe, call it before gtk_init().
    """
    ...

def threads_leave() -> object:
    """
    Leaves a critical region begun with gdk_threads_enter().
    """
    ...

def threads_set_lock_functions(enter_fn: GObject.Callback, leave_fn: GObject.Callback) -> object:
    """
    Allows the application to replace the standard method that
    GDK uses to protect its data structures. Normally, GDK
    creates a single #GMutex that is locked by gdk_threads_enter(),
    and released by gdk_threads_leave(); using this function an
    application provides, instead, a function @enter_fn that is
    called by gdk_threads_enter() and a function @leave_fn that is
    called by gdk_threads_leave().

    The functions must provide at least same locking functionality
    as the default implementation, but can also do extra application
    specific processing.

    As an example, consider an application that has its own recursive
    lock that when held, holds the GTK+ lock as well. When GTK+ unlocks
    the GTK+ lock when entering a recursive main loop, the application
    must temporarily release its lock as well.

    Most threaded GTK+ apps won’t need to use this method.

    This method must be called before gdk_threads_init(), and cannot
    be called multiple times.
    """
    ...

def unicode_to_keyval(wc: int) -> int:
    """
    Convert from a ISO10646 character to a key symbol.
    """
    ...

def utf8_to_string_target(str: str) -> str:
    """
    Converts an UTF-8 string into the best possible representation
    as a STRING. The representation of characters not in STRING
    is not specified; it may be as pseudo-escape sequences
    \x{ABCD}, or it may be in some other form of approximation.
    """
    ...

class AppLaunchContext(Gio.AppLaunchContext):
    """
    GdkAppLaunchContext is an implementation of #GAppLaunchContext that
    handles launching an application in a graphical context. It provides
    startup notification and allows to launch applications on a specific
    screen or workspace.

    ## Launching an application

    |[<!-- language="C" -->
    GdkAppLaunchContext *context;

    context = gdk_display_get_app_launch_context (display);

    gdk_app_launch_context_set_screen (screen);
    gdk_app_launch_context_set_timestamp (event->time);

    if (!g_app_info_launch_default_for_uri ("http://www.gtk.org", context, &error))
      g_warning ("Launching failed: %s\n", error->message);

    g_object_unref (context);
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls) -> AppLaunchContext:
        """
        Creates a new #GdkAppLaunchContext.
        """
        ...

    def set_desktop(self, desktop: int) -> object:
        """
        Sets the workspace on which applications will be launched when
        using this context when running under a window manager that
        supports multiple workspaces, as described in the
        [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).

        When the workspace is not specified or @desktop is set to -1,
        it is up to the window manager to pick one, typically it will
        be the current workspace.
        """
        ...

    def set_display(self, display: Display) -> object:
        """
        Sets the display on which applications will be launched when
        using this context. See also gdk_app_launch_context_set_screen().
        """
        ...

    def set_icon(self, icon: _T.Optional[Gio.Icon]) -> object:
        """
        Sets the icon for applications that are launched with this
        context.

        Window Managers can use this information when displaying startup
        notification.

        See also gdk_app_launch_context_set_icon_name().
        """
        ...

    def set_icon_name(self, icon_name: _T.Optional[str]) -> object:
        """
        Sets the icon for applications that are launched with this context.
        The @icon_name will be interpreted in the same way as the Icon field
        in desktop files. See also gdk_app_launch_context_set_icon().

        If both @icon and @icon_name are set, the @icon_name takes priority.
        If neither @icon or @icon_name is set, the icon is taken from either
        the file that is passed to launched application or from the #GAppInfo
        for the launched application itself.
        """
        ...

    def set_screen(self, screen: Screen) -> object:
        """
        Sets the screen on which applications will be launched when
        using this context. See also gdk_app_launch_context_set_display().

        Note that, typically, a #GdkScreen represents a logical screen,
        not a physical monitor.

        If both @screen and @display are set, the @screen takes priority.
        If neither @screen or @display are set, the default screen and
        display are used.
        """
        ...

    def set_timestamp(self, timestamp: int) -> object:
        """
        Sets the timestamp of @context. The timestamp should ideally
        be taken from the event that triggered the launch.

        Window managers can use this information to avoid moving the
        focus to the newly launched application when the user is busy
        typing in another window. This is also known as 'focus stealing
        prevention'.
        """
        ...


    ...

class Cursor(GObject.Object):
    """
    A #GdkCursor represents a cursor. Its contents are private.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, cursor_type: CursorType) -> Cursor:
        """
        Creates a new cursor from the set of builtin cursors for the default display.
        See gdk_cursor_new_for_display().

        To make the cursor invisible, use %GDK_BLANK_CURSOR.
        """
        ...


    @classmethod
    def new_for_display(cls, display: Display, cursor_type: CursorType) -> Cursor:
        """
        Creates a new cursor from the set of builtin cursors.
        """
        ...


    @classmethod
    def new_from_name(cls, display: Display, name: str) -> Cursor:
        """
        Creates a new cursor by looking up @name in the current cursor
        theme.

        A recommended set of cursor names that will work across different
        platforms can be found in the CSS specification:
        - "none"
        - ![](default_cursor.png) "default"
        - ![](help_cursor.png) "help"
        - ![](pointer_cursor.png) "pointer"
        - ![](context_menu_cursor.png) "context-menu"
        - ![](progress_cursor.png) "progress"
        - ![](wait_cursor.png) "wait"
        - ![](cell_cursor.png) "cell"
        - ![](crosshair_cursor.png) "crosshair"
        - ![](text_cursor.png) "text"
        - ![](vertical_text_cursor.png) "vertical-text"
        - ![](alias_cursor.png) "alias"
        - ![](copy_cursor.png) "copy"
        - ![](no_drop_cursor.png) "no-drop"
        - ![](move_cursor.png) "move"
        - ![](not_allowed_cursor.png) "not-allowed"
        - ![](grab_cursor.png) "grab"
        - ![](grabbing_cursor.png) "grabbing"
        - ![](all_scroll_cursor.png) "all-scroll"
        - ![](col_resize_cursor.png) "col-resize"
        - ![](row_resize_cursor.png) "row-resize"
        - ![](n_resize_cursor.png) "n-resize"
        - ![](e_resize_cursor.png) "e-resize"
        - ![](s_resize_cursor.png) "s-resize"
        - ![](w_resize_cursor.png) "w-resize"
        - ![](ne_resize_cursor.png) "ne-resize"
        - ![](nw_resize_cursor.png) "nw-resize"
        - ![](sw_resize_cursor.png) "sw-resize"
        - ![](se_resize_cursor.png) "se-resize"
        - ![](ew_resize_cursor.png) "ew-resize"
        - ![](ns_resize_cursor.png) "ns-resize"
        - ![](nesw_resize_cursor.png) "nesw-resize"
        - ![](nwse_resize_cursor.png) "nwse-resize"
        - ![](zoom_in_cursor.png) "zoom-in"
        - ![](zoom_out_cursor.png) "zoom-out"
        """
        ...


    @classmethod
    def new_from_pixbuf(cls, display: Display, pixbuf: GdkPixbuf.Pixbuf, x: int, y: int) -> Cursor:
        """
        Creates a new cursor from a pixbuf.

        Not all GDK backends support RGBA cursors. If they are not
        supported, a monochrome approximation will be displayed.
        The functions gdk_display_supports_cursor_alpha() and
        gdk_display_supports_cursor_color() can be used to determine
        whether RGBA cursors are supported;
        gdk_display_get_default_cursor_size() and
        gdk_display_get_maximal_cursor_size() give information about
        cursor sizes.

        If @x or @y are `-1`, the pixbuf must have
        options named “x_hot” and “y_hot”, resp., containing
        integer values between `0` and the width resp. height of
        the pixbuf. (Since: 3.0)

        On the X backend, support for RGBA cursors requires a
        sufficently new version of the X Render extension.
        """
        ...


    @classmethod
    def new_from_surface(cls, display: Display, surface: cairo.Surface, x: float, y: float) -> Cursor:
        """
        Creates a new cursor from a cairo image surface.

        Not all GDK backends support RGBA cursors. If they are not
        supported, a monochrome approximation will be displayed.
        The functions gdk_display_supports_cursor_alpha() and
        gdk_display_supports_cursor_color() can be used to determine
        whether RGBA cursors are supported;
        gdk_display_get_default_cursor_size() and
        gdk_display_get_maximal_cursor_size() give information about
        cursor sizes.

        On the X backend, support for RGBA cursors requires a
        sufficently new version of the X Render extension.
        """
        ...

    def get_cursor_type(self) -> CursorType:
        """
        Returns the cursor type for this cursor.
        """
        ...

    def get_display(self) -> Display:
        """
        Returns the display on which the #GdkCursor is defined.
        """
        ...

    def get_image(self) -> GdkPixbuf.Pixbuf:
        """
        Returns a #GdkPixbuf with the image used to display the cursor.

        Note that depending on the capabilities of the windowing system and
        on the cursor, GDK may not be able to obtain the image data. In this
        case, %NULL is returned.
        """
        ...

    def get_surface(self, x_hot: float, y_hot: float) -> cairo.Surface:
        """
        Returns a cairo image surface with the image used to display the cursor.

        Note that depending on the capabilities of the windowing system and
        on the cursor, GDK may not be able to obtain the image data. In this
        case, %NULL is returned.
        """
        ...

    def ref(self) -> Cursor:
        """
        Adds a reference to @cursor.
        """
        ...

    def unref(self) -> object:
        """
        Removes a reference from @cursor, deallocating the cursor
        if no references remain.
        """
        ...


    ...

class Device(GObject.Object):
    """
    The #GdkDevice object represents a single input device, such
    as a keyboard, a mouse, a touchpad, etc.

    See the #GdkDeviceManager documentation for more information
    about the various kinds of master and slave devices, and their
    relationships.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_associated_device(self) -> Device:
        """
        Returns the associated device to @device, if @device is of type
        %GDK_DEVICE_TYPE_MASTER, it will return the paired pointer or
        keyboard.

        If @device is of type %GDK_DEVICE_TYPE_SLAVE, it will return
        the master device to which @device is attached to.

        If @device is of type %GDK_DEVICE_TYPE_FLOATING, %NULL will be
        returned, as there is no associated device.
        """
        ...

    def get_axes(self) -> AxisFlags:
        """
        Returns the axes currently available on the device.
        """
        ...

    def get_axis(self, axes: object, use: AxisUse, value: float) -> bool:
        """
        Interprets an array of double as axis values for a given device,
        and locates the value in the array for a given axis use.
        """
        ...

    def get_axis_use(self, index_: int) -> AxisUse:
        """
        Returns the axis use for @index_.
        """
        ...

    def get_axis_value(self, axes: object, axis_label: Atom, value: float) -> bool:
        """
        Interprets an array of double as axis values for a given device,
        and locates the value in the array for a given axis label, as returned
        by gdk_device_list_axes()
        """
        ...

    def get_device_type(self) -> DeviceType:
        """
        Returns the device type for @device.
        """
        ...

    def get_display(self) -> Display:
        """
        Returns the #GdkDisplay to which @device pertains.
        """
        ...

    def get_has_cursor(self) -> bool:
        """
        Determines whether the pointer follows device motion.
        This is not meaningful for keyboard devices, which don't have a pointer.
        """
        ...

    def get_history(self, window: Window, start: int, stop: int, events: object, n_events: int) -> bool:
        """
        Obtains the motion history for a pointer device; given a starting and
        ending timestamp, return all events in the motion history for
        the device in the given range of time. Some windowing systems
        do not support motion history, in which case, %FALSE will
        be returned. (This is not distinguishable from the case where
        motion history is supported and no events were found.)

        Note that there is also gdk_window_set_event_compression() to get
        more motion events delivered directly, independent of the windowing
        system.
        """
        ...

    def get_key(self, index_: int, keyval: int, modifiers: ModifierType) -> bool:
        """
        If @index_ has a valid keyval, this function will return %TRUE
        and fill in @keyval and @modifiers with the keyval settings.
        """
        ...

    def get_last_event_window(self) -> Window:
        """
        Gets information about which window the given pointer device is in, based on events
        that have been received so far from the display server. If another application
        has a pointer grab, or this application has a grab with owner_events = %FALSE,
        %NULL may be returned even if the pointer is physically over one of this
        application's windows.
        """
        ...

    def get_mode(self) -> InputMode:
        """
        Determines the mode of the device.
        """
        ...

    def get_n_axes(self) -> int:
        """
        Returns the number of axes the device currently has.
        """
        ...

    def get_n_keys(self) -> int:
        """
        Returns the number of keys the device currently has.
        """
        ...

    def get_name(self) -> str:
        """
        Determines the name of the device.
        """
        ...

    def get_position(self, screen: Screen, x: int, y: int) -> object:
        """
        Gets the current location of @device. As a slave device
        coordinates are those of its master pointer, This function
        may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
        unless there is an ongoing grab on them, see gdk_device_grab().
        """
        ...

    def get_position_double(self, screen: Screen, x: float, y: float) -> object:
        """
        Gets the current location of @device in double precision. As a slave device's
        coordinates are those of its master pointer, this function
        may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
        unless there is an ongoing grab on them. See gdk_device_grab().
        """
        ...

    def get_product_id(self) -> str:
        """
        Returns the product ID of this device, or %NULL if this information couldn't
        be obtained. This ID is retrieved from the device, and is thus constant for
        it. See gdk_device_get_vendor_id() for more information.
        """
        ...

    def get_seat(self) -> Seat:
        """
        Returns the #GdkSeat the device belongs to.
        """
        ...

    def get_source(self) -> InputSource:
        """
        Determines the type of the device.
        """
        ...

    def get_state(self, window: Window, axes: _T.Optional[object], mask: ModifierType) -> object:
        """
        Gets the current state of a pointer device relative to @window. As a slave
        device’s coordinates are those of its master pointer, this
        function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
        unless there is an ongoing grab on them. See gdk_device_grab().
        """
        ...

    def get_vendor_id(self) -> str:
        """
        Returns the vendor ID of this device, or %NULL if this information couldn't
        be obtained. This ID is retrieved from the device, and is thus constant for
        it.

        This function, together with gdk_device_get_product_id(), can be used to eg.
        compose #GSettings paths to store settings for this device.

        |[<!-- language="C" -->
         static GSettings *
         get_device_settings (GdkDevice *device)
         {
           const gchar *vendor, *product;
           GSettings *settings;
           GdkDevice *device;
           gchar *path;

           vendor = gdk_device_get_vendor_id (device);
           product = gdk_device_get_product_id (device);

           path = g_strdup_printf ("/org/example/app/devices/%s:%s/", vendor, product);
           settings = g_settings_new_with_path (DEVICE_SCHEMA, path);
           g_free (path);

           return settings;
         }
        ]|
        """
        ...

    def get_window_at_position(self, win_x: int, win_y: int) -> Window:
        """
        Obtains the window underneath @device, returning the location of the device in @win_x and @win_y. Returns
        %NULL if the window tree under @device is not known to GDK (for example, belongs to another application).

        As a slave device coordinates are those of its master pointer, This
        function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
        unless there is an ongoing grab on them, see gdk_device_grab().
        """
        ...

    def get_window_at_position_double(self, win_x: float, win_y: float) -> Window:
        """
        Obtains the window underneath @device, returning the location of the device in @win_x and @win_y in
        double precision. Returns %NULL if the window tree under @device is not known to GDK (for example,
        belongs to another application).

        As a slave device coordinates are those of its master pointer, This
        function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
        unless there is an ongoing grab on them, see gdk_device_grab().
        """
        ...

    def grab(self, window: Window, grab_ownership: GrabOwnership, owner_events: bool, event_mask: EventMask, cursor: _T.Optional[Cursor], time_: int) -> GrabStatus:
        """
        Grabs the device so that all events coming from this device are passed to
        this application until the device is ungrabbed with gdk_device_ungrab(),
        or the window becomes unviewable. This overrides any previous grab on the device
        by this client.

        Note that @device and @window need to be on the same display.

        Device grabs are used for operations which need complete control over the
        given device events (either pointer or keyboard). For example in GTK+ this
        is used for Drag and Drop operations, popup menus and such.

        Note that if the event mask of an X window has selected both button press
        and button release events, then a button press event will cause an automatic
        pointer grab until the button is released. X does this automatically since
        most applications expect to receive button press and release events in pairs.
        It is equivalent to a pointer grab on the window with @owner_events set to
        %TRUE.

        If you set up anything at the time you take the grab that needs to be
        cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
        events that are emitted when the grab ends unvoluntarily.
        """
        ...

    def list_axes(self) -> GLib.List:
        """
        Returns a #GList of #GdkAtoms, containing the labels for
        the axes that @device currently has.
        """
        ...

    def list_slave_devices(self) -> GLib.List:
        """
        If the device if of type %GDK_DEVICE_TYPE_MASTER, it will return
        the list of slave devices attached to it, otherwise it will return
        %NULL
        """
        ...

    def set_axis_use(self, index_: int, use: AxisUse) -> object:
        """
        Specifies how an axis of a device is used.
        """
        ...

    def set_key(self, index_: int, keyval: int, modifiers: ModifierType) -> object:
        """
        Specifies the X key event to generate when a macro button of a device
        is pressed.
        """
        ...

    def set_mode(self, mode: InputMode) -> bool:
        """
        Sets a the mode of an input device. The mode controls if the
        device is active and whether the device’s range is mapped to the
        entire screen or to a single window.

        Note: This is only meaningful for floating devices, master devices (and
        slaves connected to these) drive the pointer cursor, which is not limited
        by the input mode.
        """
        ...

    def ungrab(self, time_: int) -> object:
        """
        Release any grab on @device.
        """
        ...

    def warp(self, screen: Screen, x: int, y: int) -> object:
        """
        Warps @device in @display to the point @x,@y on
        the screen @screen, unless the device is confined
        to a window by a grab, in which case it will be moved
        as far as allowed by the grab. Warping the pointer
        creates events as if the user had moved the mouse
        instantaneously to the destination.

        Note that the pointer should normally be under the
        control of the user. This function was added to cover
        some rare use cases like keyboard navigation support
        for the color picker in the #GtkColorSelectionDialog.
        """
        ...


    ...

class DeviceManager(GObject.Object):
    """
    In addition to a single pointer and keyboard for user interface input,
    GDK contains support for a variety of input devices, including graphics
    tablets, touchscreens and multiple pointers/keyboards interacting
    simultaneously with the user interface. Such input devices often have
    additional features, such as sub-pixel positioning information and
    additional device-dependent information.

    In order to query the device hierarchy and be aware of changes in the
    device hierarchy (such as virtual devices being created or removed, or
    physical devices being plugged or unplugged), GDK provides
    #GdkDeviceManager.

    By default, and if the platform supports it, GDK is aware of multiple
    keyboard/pointer pairs and multitouch devices. This behavior can be
    changed by calling gdk_disable_multidevice() before gdk_display_open().
    There should rarely be a need to do that though, since GDK defaults
    to a compatibility mode in which it will emit just one enter/leave
    event pair for all devices on a window. To enable per-device
    enter/leave events and other multi-pointer interaction features,
    gdk_window_set_support_multidevice() must be called on
    #GdkWindows (or gtk_widget_set_support_multidevice() on widgets).
    window. See the gdk_window_set_support_multidevice() documentation
    for more information.

    On X11, multi-device support is implemented through XInput 2.
    Unless gdk_disable_multidevice() is called, the XInput 2
    #GdkDeviceManager implementation will be used as the input source.
    Otherwise either the core or XInput 1 implementations will be used.

    For simple applications that don’t have any special interest in
    input devices, the so-called “client pointer”
    provides a reasonable approximation to a simple setup with a single
    pointer and keyboard. The device that has been set as the client
    pointer can be accessed via gdk_device_manager_get_client_pointer().

    Conceptually, in multidevice mode there are 2 device types. Virtual
    devices (or master devices) are represented by the pointer cursors
    and keyboard foci that are seen on the screen. Physical devices (or
    slave devices) represent the hardware that is controlling the virtual
    devices, and thus have no visible cursor on the screen.

    Virtual devices are always paired, so there is a keyboard device for every
    pointer device. Associations between devices may be inspected through
    gdk_device_get_associated_device().

    There may be several virtual devices, and several physical devices could
    be controlling each of these virtual devices. Physical devices may also
    be “floating”, which means they are not attached to any virtual device.

    # Master and slave devices

    |[
    carlos@sacarino:~$ xinput list
    ⎡ Virtual core pointer                          id=2    [master pointer  (3)]
    ⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]
    ⎜   ↳ Wacom ISDv4 E6 Pen stylus                 id=10   [slave  pointer  (2)]
    ⎜   ↳ Wacom ISDv4 E6 Finger touch               id=11   [slave  pointer  (2)]
    ⎜   ↳ SynPS/2 Synaptics TouchPad                id=13   [slave  pointer  (2)]
    ⎜   ↳ TPPS/2 IBM TrackPoint                     id=14   [slave  pointer  (2)]
    ⎜   ↳ Wacom ISDv4 E6 Pen eraser                 id=16   [slave  pointer  (2)]
    ⎣ Virtual core keyboard                         id=3    [master keyboard (2)]
        ↳ Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]
        ↳ Power Button                              id=6    [slave  keyboard (3)]
        ↳ Video Bus                                 id=7    [slave  keyboard (3)]
        ↳ Sleep Button                              id=8    [slave  keyboard (3)]
        ↳ Integrated Camera                         id=9    [slave  keyboard (3)]
        ↳ AT Translated Set 2 keyboard              id=12   [slave  keyboard (3)]
        ↳ ThinkPad Extra Buttons                    id=15   [slave  keyboard (3)]
    ]|

    By default, GDK will automatically listen for events coming from all
    master devices, setting the #GdkDevice for all events coming from input
    devices. Events containing device information are #GDK_MOTION_NOTIFY,
    #GDK_BUTTON_PRESS, #GDK_2BUTTON_PRESS, #GDK_3BUTTON_PRESS,
    #GDK_BUTTON_RELEASE, #GDK_SCROLL, #GDK_KEY_PRESS, #GDK_KEY_RELEASE,
    #GDK_ENTER_NOTIFY, #GDK_LEAVE_NOTIFY, #GDK_FOCUS_CHANGE,
    #GDK_PROXIMITY_IN, #GDK_PROXIMITY_OUT, #GDK_DRAG_ENTER, #GDK_DRAG_LEAVE,
    #GDK_DRAG_MOTION, #GDK_DRAG_STATUS, #GDK_DROP_START, #GDK_DROP_FINISHED
    and #GDK_GRAB_BROKEN. When dealing with an event on a master device,
    it is possible to get the source (slave) device that the event originated
    from via gdk_event_get_source_device().

    On a standard session, all physical devices are connected by default to
    the "Virtual Core Pointer/Keyboard" master devices, hence routing all events
    through these. This behavior is only modified by device grabs, where the
    slave device is temporarily detached for as long as the grab is held, and
    more permanently by user modifications to the device hierarchy.

    On certain application specific setups, it may make sense
    to detach a physical device from its master pointer, and mapping it to
    an specific window. This can be achieved by the combination of
    gdk_device_grab() and gdk_device_set_mode().

    In order to listen for events coming from devices
    other than a virtual device, gdk_window_set_device_events() must be
    called. Generally, this function can be used to modify the event mask
    for any given device.

    Input devices may also provide additional information besides X/Y.
    For example, graphics tablets may also provide pressure and X/Y tilt
    information. This information is device-dependent, and may be
    queried through gdk_device_get_axis(). In multidevice mode, virtual
    devices will change axes in order to always represent the physical
    device that is routing events through it. Whenever the physical device
    changes, the #GdkDevice:n-axes property will be notified, and
    gdk_device_list_axes() will return the new device axes.

    Devices may also have associated “keys” or
    macro buttons. Such keys can be globally set to map into normal X
    keyboard events. The mapping is set using gdk_device_set_key().

    In GTK+ 3.20, a new #GdkSeat object has been introduced that
    supersedes #GdkDeviceManager and should be preferred in newly
    written code.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_client_pointer(self) -> Device:
        """
        Returns the client pointer, that is, the master pointer that acts as the core pointer
        for this application. In X11, window managers may change this depending on the interaction
        pattern under the presence of several pointers.

        You should use this function seldomly, only in code that isn’t triggered by a #GdkEvent
        and there aren’t other means to get a meaningful #GdkDevice to operate on.
        """
        ...

    def get_display(self) -> Display:
        """
        Gets the #GdkDisplay associated to @device_manager.
        """
        ...

    def list_devices(self, type: DeviceType) -> GLib.List:
        """
        Returns the list of devices of type @type currently attached to
        @device_manager.
        """
        ...


    ...

class DeviceTool(GObject.Object):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_hardware_id(self) -> guint64:
        """
        Gets the hardware ID of this tool, or 0 if it's not known. When
        non-zero, the identificator is unique for the given tool model,
        meaning that two identical tools will share the same @hardware_id,
        but will have different serial numbers (see gdk_device_tool_get_serial()).

        This is a more concrete (and device specific) method to identify
        a #GdkDeviceTool than gdk_device_tool_get_tool_type(), as a tablet
        may support multiple devices with the same #GdkDeviceToolType,
        but having different hardware identificators.
        """
        ...

    def get_serial(self) -> guint64:
        """
        Gets the serial of this tool, this value can be used to identify a
        physical tool (eg. a tablet pen) across program executions.
        """
        ...

    def get_tool_type(self) -> DeviceToolType:
        """
        Gets the #GdkDeviceToolType of the tool.
        """
        ...


    ...

class Display(GObject.Object):
    """
    #GdkDisplay objects purpose are two fold:

    - To manage and provide information about input devices (pointers and keyboards)

    - To manage and provide information about the available #GdkScreens

    GdkDisplay objects are the GDK representation of an X Display,
    which can be described as a workstation consisting of
    a keyboard, a pointing device (such as a mouse) and one or more
    screens.
    It is used to open and keep track of various GdkScreen objects
    currently instantiated by the application. It is also used to
    access the keyboard(s) and mouse pointer(s) of the display.

    Most of the input device handling has been factored out into
    the separate #GdkDeviceManager object. Every display has a
    device manager, which you can obtain using
    gdk_display_get_device_manager().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def beep(self) -> object:
        """
        Emits a short beep on @display
        """
        ...

    def close(self) -> object:
        """
        Closes the connection to the windowing system for the given display,
        and cleans up associated resources.
        """
        ...

    def device_is_grabbed(self, device: Device) -> bool:
        """
        Returns %TRUE if there is an ongoing grab on @device for @display.
        """
        ...

    def flush(self) -> object:
        """
        Flushes any requests queued for the windowing system; this happens automatically
        when the main loop blocks waiting for new events, but if your application
        is drawing without returning control to the main loop, you may need
        to call this function explicitly. A common case where this function
        needs to be called is when an application is executing drawing commands
        from a thread other than the thread where the main loop is running.

        This is most useful for X11. On windowing systems where requests are
        handled synchronously, this function will do nothing.
        """
        ...

    def get_app_launch_context(self) -> AppLaunchContext:
        """
        Returns a #GdkAppLaunchContext suitable for launching
        applications on the given display.
        """
        ...

    def get_default_cursor_size(self) -> int:
        """
        Returns the default size to use for cursors on @display.
        """
        ...

    def get_default_group(self) -> Window:
        """
        Returns the default group leader window for all toplevel windows
        on @display. This window is implicitly created by GDK.
        See gdk_window_set_group().
        """
        ...

    def get_default_screen(self) -> Screen:
        """
        Get the default #GdkScreen for @display.
        """
        ...

    def get_default_seat(self) -> Seat:
        """
        Returns the default #GdkSeat for this display.
        """
        ...

    def get_device_manager(self) -> DeviceManager:
        """
        Returns the #GdkDeviceManager associated to @display.
        """
        ...

    def get_event(self) -> Event:
        """
        Gets the next #GdkEvent to be processed for @display, fetching events from the
        windowing system if necessary.
        """
        ...

    def get_maximal_cursor_size(self, width: int, height: int) -> object:
        """
        Gets the maximal size to use for cursors on @display.
        """
        ...

    def get_monitor(self, monitor_num: int) -> Monitor:
        """
        Gets a monitor associated with this display.
        """
        ...

    def get_monitor_at_point(self, x: int, y: int) -> Monitor:
        """
        Gets the monitor in which the point (@x, @y) is located,
        or a nearby monitor if the point is not in any monitor.
        """
        ...

    def get_monitor_at_window(self, window: Window) -> Monitor:
        """
        Gets the monitor in which the largest area of @window
        resides, or a monitor close to @window if it is outside
        of all monitors.
        """
        ...

    def get_n_monitors(self) -> int:
        """
        Gets the number of monitors that belong to @display.

        The returned number is valid until the next emission of the
        #GdkDisplay::monitor-added or #GdkDisplay::monitor-removed signal.
        """
        ...

    def get_n_screens(self) -> int:
        """
        Gets the number of screen managed by the @display.
        """
        ...

    def get_name(self) -> str:
        """
        Gets the name of the display.
        """
        ...

    def get_pointer(self, screen: Screen, x: int, y: int, mask: ModifierType) -> object:
        """
        Gets the current location of the pointer and the current modifier
        mask for a given display.
        """
        ...

    def get_primary_monitor(self) -> Monitor:
        """
        Gets the primary monitor for the display.

        The primary monitor is considered the monitor where the “main desktop”
        lives. While normal application windows typically allow the window
        manager to place the windows, specialized desktop applications
        such as panels should place themselves on the primary monitor.
        """
        ...

    def get_screen(self, screen_num: int) -> Screen:
        """
        Returns a screen object for one of the screens of the display.
        """
        ...

    def get_window_at_pointer(self, win_x: int, win_y: int) -> Window:
        """
        Obtains the window underneath the mouse pointer, returning the location
        of the pointer in that window in @win_x, @win_y for @screen. Returns %NULL
        if the window under the mouse pointer is not known to GDK (for example,
        belongs to another application).
        """
        ...

    def has_pending(self) -> bool:
        """
        Returns whether the display has events that are waiting
        to be processed.
        """
        ...

    def is_closed(self) -> bool:
        """
        Finds out if the display has been closed.
        """
        ...

    def keyboard_ungrab(self, time_: int) -> object:
        """
        Release any keyboard grab
        """
        ...

    def list_devices(self) -> GLib.List:
        """
        Returns the list of available input devices attached to @display.
        The list is statically allocated and should not be freed.
        """
        ...

    def list_seats(self) -> GLib.List:
        """
        Returns the list of seats known to @display.
        """
        ...

    def notify_startup_complete(self, startup_id: str) -> object:
        """
        Indicates to the GUI environment that the application has
        finished loading, using a given identifier.

        GTK+ will call this function automatically for #GtkWindow
        with custom startup-notification identifier unless
        gtk_window_set_auto_startup_notification() is called to
        disable that feature.
        """
        ...

    def peek_event(self) -> Event:
        """
        Gets a copy of the first #GdkEvent in the @display’s event queue, without
        removing the event from the queue.  (Note that this function will
        not get more events from the windowing system.  It only checks the events
        that have already been moved to the GDK event queue.)
        """
        ...

    def pointer_is_grabbed(self) -> bool:
        """
        Test if the pointer is grabbed.
        """
        ...

    def pointer_ungrab(self, time_: int) -> object:
        """
        Release any pointer grab.
        """
        ...

    def put_event(self, event: Event) -> object:
        """
        Appends a copy of the given event onto the front of the event
        queue for @display.
        """
        ...

    def request_selection_notification(self, selection: Atom) -> bool:
        """
        Request #GdkEventOwnerChange events for ownership changes
        of the selection named by the given atom.
        """
        ...

    def set_double_click_distance(self, distance: int) -> object:
        """
        Sets the double click distance (two clicks within this distance
        count as a double click and result in a #GDK_2BUTTON_PRESS event).
        See also gdk_display_set_double_click_time().
        Applications should not set this, it is a global
        user-configured setting.
        """
        ...

    def set_double_click_time(self, msec: int) -> object:
        """
        Sets the double click time (two clicks within this time interval
        count as a double click and result in a #GDK_2BUTTON_PRESS event).
        Applications should not set this, it is a global
        user-configured setting.
        """
        ...

    def store_clipboard(self, clipboard_window: Window, time_: int, targets: _T.Optional[object], n_targets: int) -> object:
        """
        Issues a request to the clipboard manager to store the
        clipboard data. On X11, this is a special program that works
        according to the
        [FreeDesktop Clipboard Specification](http://www.freedesktop.org/Standards/clipboard-manager-spec).
        """
        ...

    def supports_clipboard_persistence(self) -> bool:
        """
        Returns whether the speicifed display supports clipboard
        persistance; i.e. if it’s possible to store the clipboard data after an
        application has quit. On X11 this checks if a clipboard daemon is
        running.
        """
        ...

    def supports_composite(self) -> bool:
        """
        Returns %TRUE if gdk_window_set_composited() can be used
        to redirect drawing on the window using compositing.

        Currently this only works on X11 with XComposite and
        XDamage extensions available.
        """
        ...

    def supports_cursor_alpha(self) -> bool:
        """
        Returns %TRUE if cursors can use an 8bit alpha channel
        on @display. Otherwise, cursors are restricted to bilevel
        alpha (i.e. a mask).
        """
        ...

    def supports_cursor_color(self) -> bool:
        """
        Returns %TRUE if multicolored cursors are supported
        on @display. Otherwise, cursors have only a forground
        and a background color.
        """
        ...

    def supports_input_shapes(self) -> bool:
        """
        Returns %TRUE if gdk_window_input_shape_combine_mask() can
        be used to modify the input shape of windows on @display.
        """
        ...

    def supports_selection_notification(self) -> bool:
        """
        Returns whether #GdkEventOwnerChange events will be
        sent when the owner of a selection changes.
        """
        ...

    def supports_shapes(self) -> bool:
        """
        Returns %TRUE if gdk_window_shape_combine_mask() can
        be used to create shaped windows on @display.
        """
        ...

    def sync(self) -> object:
        """
        Flushes any requests queued for the windowing system and waits until all
        requests have been handled. This is often used for making sure that the
        display is synchronized with the current state of the program. Calling
        gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
        generated from earlier requests are handled before the error trap is
        removed.

        This is most useful for X11. On windowing systems where requests are
        handled synchronously, this function will do nothing.
        """
        ...

    def warp_pointer(self, screen: Screen, x: int, y: int) -> object:
        """
        Warps the pointer of @display to the point @x,@y on
        the screen @screen, unless the pointer is confined
        to a window by a grab, in which case it will be moved
        as far as allowed by the grab. Warping the pointer
        creates events as if the user had moved the mouse
        instantaneously to the destination.

        Note that the pointer should normally be under the
        control of the user. This function was added to cover
        some rare use cases like keyboard navigation support
        for the color picker in the #GtkColorSelectionDialog.
        """
        ...


    ...

class DisplayManager(GObject.Object):
    """
    The purpose of the #GdkDisplayManager singleton object is to offer
    notification when displays appear or disappear or the default display
    changes.

    You can use gdk_display_manager_get() to obtain the #GdkDisplayManager
    singleton, but that should be rarely necessary. Typically, initializing
    GTK+ opens a display that you can work with without ever accessing the
    #GdkDisplayManager.

    The GDK library can be built with support for multiple backends.
    The #GdkDisplayManager object determines which backend is used
    at runtime.

    When writing backend-specific code that is supposed to work with
    multiple GDK backends, you have to consider both compile time and
    runtime. At compile time, use the #GDK_WINDOWING_X11, #GDK_WINDOWING_WIN32
    macros, etc. to find out which backends are present in the GDK library
    you are building your application against. At runtime, use type-check
    macros like GDK_IS_X11_DISPLAY() to find out which backend is in use:

    ## Backend-specific code ## {#backend-specific}

    |[<!-- language="C" -->
    #ifdef GDK_WINDOWING_X11
      if (GDK_IS_X11_DISPLAY (display))
        {
          // make X11-specific calls here
        }
      else
    #endif
    #ifdef GDK_WINDOWING_QUARTZ
      if (GDK_IS_QUARTZ_DISPLAY (display))
        {
          // make Quartz-specific calls here
        }
      else
    #endif
      g_error ("Unsupported GDK backend");
    ]|
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_default_display(self) -> Display:
        """
        Gets the default #GdkDisplay.
        """
        ...

    def list_displays(self) -> GLib.SList:
        """
        List all currently open displays.
        """
        ...

    def open_display(self, name: str) -> Display:
        """
        Opens a display.
        """
        ...

    def set_default_display(self, display: Display) -> object:
        """
        Sets @display as the default display.
        """
        ...


    ...

class DragContext(GObject.Object):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_actions(self) -> DragAction:
        """
        Determines the bitmask of actions proposed by the source if
        gdk_drag_context_get_suggested_action() returns %GDK_ACTION_ASK.
        """
        ...

    def get_dest_window(self) -> Window:
        """
        Returns the destination window for the DND operation.
        """
        ...

    def get_device(self) -> Device:
        """
        Returns the #GdkDevice associated to the drag context.
        """
        ...

    def get_drag_window(self) -> Window:
        """
        Returns the window on which the drag icon should be rendered
        during the drag operation. Note that the window may not be
        available until the drag operation has begun. GDK will move
        the window in accordance with the ongoing drag operation.
        The window is owned by @context and will be destroyed when
        the drag operation is over.
        """
        ...

    def get_protocol(self) -> DragProtocol:
        """
        Returns the drag protocol that is used by this context.
        """
        ...

    def get_selected_action(self) -> DragAction:
        """
        Determines the action chosen by the drag destination.
        """
        ...

    def get_source_window(self) -> Window:
        """
        Returns the #GdkWindow where the DND operation started.
        """
        ...

    def get_suggested_action(self) -> DragAction:
        """
        Determines the suggested drag action of the context.
        """
        ...

    def list_targets(self) -> GLib.List:
        """
        Retrieves the list of targets of the context.
        """
        ...

    def manage_dnd(self, ipc_window: Window, actions: DragAction) -> bool:
        """
        Requests the drag and drop operation to be managed by @context.
        When a drag and drop operation becomes managed, the #GdkDragContext
        will internally handle all input and source-side #GdkEventDND events
        as required by the windowing system.

        Once the drag and drop operation is managed, the drag context will
        emit the following signals:
        - The #GdkDragContext::action-changed signal whenever the final action
          to be performed by the drag and drop operation changes.
        - The #GdkDragContext::drop-performed signal after the user performs
          the drag and drop gesture (typically by releasing the mouse button).
        - The #GdkDragContext::dnd-finished signal after the drag and drop
          operation concludes (after all #GdkSelection transfers happen).
        - The #GdkDragContext::cancel signal if the drag and drop operation is
          finished but doesn't happen over an accepting destination, or is
          cancelled through other means.
        """
        ...

    def set_device(self, device: Device) -> object:
        """
        Associates a #GdkDevice to @context, so all Drag and Drop events
        for @context are emitted as if they came from this device.
        """
        ...

    def set_hotspot(self, hot_x: int, hot_y: int) -> object:
        """
        Sets the position of the drag window that will be kept
        under the cursor hotspot. Initially, the hotspot is at the
        top left corner of the drag window.
        """
        ...


    ...

class DrawingContext(GObject.Object):
    """
    #GdkDrawingContext is an object that represents the current drawing
    state of a #GdkWindow.

    It's possible to use a #GdkDrawingContext to draw on a #GdkWindow
    via rendering API like Cairo or OpenGL.

    A #GdkDrawingContext can only be created by calling gdk_window_begin_draw_frame()
    and will be valid until a call to gdk_window_end_draw_frame().

    #GdkDrawingContext is available since GDK 3.22
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_cairo_context(self) -> cairo.Context:
        """
        Retrieves a Cairo context to be used to draw on the #GdkWindow
        that created the #GdkDrawingContext.

        The returned context is guaranteed to be valid as long as the
        #GdkDrawingContext is valid, that is between a call to
        gdk_window_begin_draw_frame() and gdk_window_end_draw_frame().
        """
        ...

    def get_clip(self) -> cairo.Region:
        """
        Retrieves a copy of the clip region used when creating the @context.
        """
        ...

    def get_window(self) -> Window:
        """
        Retrieves the window that created the drawing @context.
        """
        ...

    def is_valid(self) -> bool:
        """
        Checks whether the given #GdkDrawingContext is valid.
        """
        ...


    ...

class FrameClock(GObject.Object):
    """
    A #GdkFrameClock tells the application when to update and repaint a
    window. This may be synced to the vertical refresh rate of the
    monitor, for example. Even when the frame clock uses a simple timer
    rather than a hardware-based vertical sync, the frame clock helps
    because it ensures everything paints at the same time (reducing the
    total number of frames). The frame clock can also automatically
    stop painting when it knows the frames will not be visible, or
    scale back animation framerates.

    #GdkFrameClock is designed to be compatible with an OpenGL-based
    implementation or with mozRequestAnimationFrame in Firefox,
    for example.

    A frame clock is idle until someone requests a frame with
    gdk_frame_clock_request_phase(). At some later point that makes
    sense for the synchronization being implemented, the clock will
    process a frame and emit signals for each phase that has been
    requested. (See the signals of the #GdkFrameClock class for
    documentation of the phases. %GDK_FRAME_CLOCK_PHASE_UPDATE and the
    #GdkFrameClock::update signal are most interesting for application
    writers, and are used to update the animations, using the frame time
    given by gdk_frame_clock_get_frame_time().

    The frame time is reported in microseconds and generally in the same
    timescale as g_get_monotonic_time(), however, it is not the same
    as g_get_monotonic_time(). The frame time does not advance during
    the time a frame is being painted, and outside of a frame, an attempt
    is made so that all calls to gdk_frame_clock_get_frame_time() that
    are called at a “similar” time get the same value. This means that
    if different animations are timed by looking at the difference in
    time between an initial value from gdk_frame_clock_get_frame_time()
    and the value inside the #GdkFrameClock::update signal of the clock,
    they will stay exactly synchronized.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def begin_updating(self) -> object:
        """
        Starts updates for an animation. Until a matching call to
        gdk_frame_clock_end_updating() is made, the frame clock will continually
        request a new frame with the %GDK_FRAME_CLOCK_PHASE_UPDATE phase.
        This function may be called multiple times and frames will be
        requested until gdk_frame_clock_end_updating() is called the same
        number of times.
        """
        ...

    def end_updating(self) -> object:
        """
        Stops updates for an animation. See the documentation for
        gdk_frame_clock_begin_updating().
        """
        ...

    def get_current_timings(self) -> FrameTimings:
        """
        Gets the frame timings for the current frame.
        """
        ...

    def get_frame_counter(self) -> gint64:
        """
        A #GdkFrameClock maintains a 64-bit counter that increments for
        each frame drawn.
        """
        ...

    def get_frame_time(self) -> gint64:
        """
        Gets the time that should currently be used for animations.  Inside
        the processing of a frame, it’s the time used to compute the
        animation position of everything in a frame. Outside of a frame, it's
        the time of the conceptual “previous frame,” which may be either
        the actual previous frame time, or if that’s too old, an updated
        time.
        """
        ...

    def get_history_start(self) -> gint64:
        """
        #GdkFrameClock internally keeps a history of #GdkFrameTimings
        objects for recent frames that can be retrieved with
        gdk_frame_clock_get_timings(). The set of stored frames
        is the set from the counter values given by
        gdk_frame_clock_get_history_start() and
        gdk_frame_clock_get_frame_counter(), inclusive.
        """
        ...

    def get_refresh_info(self, base_time: gint64, refresh_interval_return: gint64, presentation_time_return: gint64) -> object:
        """
        Using the frame history stored in the frame clock, finds the last
        known presentation time and refresh interval, and assuming that
        presentation times are separated by the refresh interval,
        predicts a presentation time that is a multiple of the refresh
        interval after the last presentation time, and later than @base_time.
        """
        ...

    def get_timings(self, frame_counter: gint64) -> FrameTimings:
        """
        Retrieves a #GdkFrameTimings object holding timing information
        for the current frame or a recent frame. The #GdkFrameTimings
        object may not yet be complete: see gdk_frame_timings_get_complete().
        """
        ...

    def request_phase(self, phase: FrameClockPhase) -> object:
        """
        Asks the frame clock to run a particular phase. The signal
        corresponding the requested phase will be emitted the next
        time the frame clock processes. Multiple calls to
        gdk_frame_clock_request_phase() will be combined together
        and only one frame processed. If you are displaying animated
        content and want to continually request the
        %GDK_FRAME_CLOCK_PHASE_UPDATE phase for a period of time,
        you should use gdk_frame_clock_begin_updating() instead, since
        this allows GTK+ to adjust system parameters to get maximally
        smooth animations.
        """
        ...


    ...

class GLContext(GObject.Object):
    """
    #GdkGLContext is an object representing the platform-specific
    OpenGL drawing context.

    #GdkGLContexts are created for a #GdkWindow using
    gdk_window_create_gl_context(), and the context will match
    the #GdkVisual of the window.

    A #GdkGLContext is not tied to any particular normal framebuffer.
    For instance, it cannot draw to the #GdkWindow back buffer. The GDK
    repaint system is in full control of the painting to that. Instead,
    you can create render buffers or textures and use gdk_cairo_draw_from_gl()
    in the draw function of your widget to draw them. Then GDK will handle
    the integration of your rendering with that of other widgets.

    Support for #GdkGLContext is platform-specific, context creation
    can fail, returning %NULL context.

    A #GdkGLContext has to be made "current" in order to start using
    it, otherwise any OpenGL call will be ignored.

    ## Creating a new OpenGL context ##

    In order to create a new #GdkGLContext instance you need a
    #GdkWindow, which you typically get during the realize call
    of a widget.

    A #GdkGLContext is not realized until either gdk_gl_context_make_current(),
    or until it is realized using gdk_gl_context_realize(). It is possible to
    specify details of the GL context like the OpenGL version to be used, or
    whether the GL context should have extra state validation enabled after
    calling gdk_window_create_gl_context() by calling gdk_gl_context_realize().
    If the realization fails you have the option to change the settings of the
    #GdkGLContext and try again.

    ## Using a GdkGLContext ##

    You will need to make the #GdkGLContext the current context
    before issuing OpenGL calls; the system sends OpenGL commands to
    whichever context is current. It is possible to have multiple
    contexts, so you always need to ensure that the one which you
    want to draw with is the current one before issuing commands:

    |[<!-- language="C" -->
      gdk_gl_context_make_current (context);
    ]|

    You can now perform your drawing using OpenGL commands.

    You can check which #GdkGLContext is the current one by using
    gdk_gl_context_get_current(); you can also unset any #GdkGLContext
    that is currently set by calling gdk_gl_context_clear_current().
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_debug_enabled(self) -> bool:
        """
        Retrieves the value set using gdk_gl_context_set_debug_enabled().
        """
        ...

    def get_display(self) -> Display:
        """
        Retrieves the #GdkDisplay the @context is created for
        """
        ...

    def get_forward_compatible(self) -> bool:
        """
        Retrieves the value set using gdk_gl_context_set_forward_compatible().
        """
        ...

    def get_required_version(self, major: _T.Optional[int], minor: _T.Optional[int]) -> object:
        """
        Retrieves the major and minor version requested by calling
        gdk_gl_context_set_required_version().
        """
        ...

    def get_shared_context(self) -> GLContext:
        """
        Retrieves the #GdkGLContext that this @context share data with.
        """
        ...

    def get_use_es(self) -> bool:
        """
        Checks whether the @context is using an OpenGL or OpenGL ES profile.
        """
        ...

    def get_version(self, major: int, minor: int) -> object:
        """
        Retrieves the OpenGL version of the @context.

        The @context must be realized prior to calling this function.
        """
        ...

    def get_window(self) -> Window:
        """
        Retrieves the #GdkWindow used by the @context.
        """
        ...

    def is_legacy(self) -> bool:
        """
        Whether the #GdkGLContext is in legacy mode or not.

        The #GdkGLContext must be realized before calling this function.

        When realizing a GL context, GDK will try to use the OpenGL 3.2 core
        profile; this profile removes all the OpenGL API that was deprecated
        prior to the 3.2 version of the specification. If the realization is
        successful, this function will return %FALSE.

        If the underlying OpenGL implementation does not support core profiles,
        GDK will fall back to a pre-3.2 compatibility profile, and this function
        will return %TRUE.

        You can use the value returned by this function to decide which kind
        of OpenGL API to use, or whether to do extension discovery, or what
        kind of shader programs to load.
        """
        ...

    def make_current(self) -> object:
        """
        Makes the @context the current one.
        """
        ...

    def realize(self) -> bool:
        """
        Realizes the given #GdkGLContext.

        It is safe to call this function on a realized #GdkGLContext.
        """
        ...

    def set_debug_enabled(self, enabled: bool) -> object:
        """
        Sets whether the #GdkGLContext should perform extra validations and
        run time checking. This is useful during development, but has
        additional overhead.

        The #GdkGLContext must not be realized or made current prior to
        calling this function.
        """
        ...

    def set_forward_compatible(self, compatible: bool) -> object:
        """
        Sets whether the #GdkGLContext should be forward compatible.

        Forward compatibile contexts must not support OpenGL functionality that
        has been marked as deprecated in the requested version; non-forward
        compatible contexts, on the other hand, must support both deprecated and
        non deprecated functionality.

        The #GdkGLContext must not be realized or made current prior to calling
        this function.
        """
        ...

    def set_required_version(self, major: int, minor: int) -> object:
        """
        Sets the major and minor version of OpenGL to request.

        Setting @major and @minor to zero will use the default values.

        The #GdkGLContext must not be realized or made current prior to calling
        this function.
        """
        ...

    def set_use_es(self, use_es: int) -> object:
        """
        Requests that GDK create a OpenGL ES context instead of an OpenGL one,
        if the platform and windowing system allows it.

        The @context must not have been realized.

        By default, GDK will attempt to automatically detect whether the
        underlying GL implementation is OpenGL or OpenGL ES once the @context
        is realized.

        You should check the return value of gdk_gl_context_get_use_es() after
        calling gdk_gl_context_realize() to decide whether to use the OpenGL or
        OpenGL ES API, extensions, or shaders.
        """
        ...


    ...

class Keymap(GObject.Object):
    """
    A #GdkKeymap defines the translation from keyboard state
    (including a hardware key, a modifier mask, and active keyboard group)
    to a keyval. This translation has two phases. The first phase is
    to determine the effective keyboard group and level for the keyboard
    state; the second phase is to look up the keycode/group/level triplet
    in the keymap and see what keyval it corresponds to.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def add_virtual_modifiers(self, state: ModifierType) -> object:
        """
        Maps the non-virtual modifiers (i.e Mod2, Mod3, ...) which are set
        in @state to the virtual modifiers (i.e. Super, Hyper and Meta) and
        set the corresponding bits in @state.

        GDK already does this before delivering key events, but for
        compatibility reasons, it only sets the first virtual modifier
        it finds, whereas this function sets all matching virtual modifiers.

        This function is useful when matching key events against
        accelerators.
        """
        ...

    def get_caps_lock_state(self) -> bool:
        """
        Returns whether the Caps Lock modifer is locked.
        """
        ...

    def get_direction(self) -> Pango.Direction:
        """
        Returns the direction of effective layout of the keymap.
        """
        ...

    def get_entries_for_keycode(self, hardware_keycode: int, keys: object, keyvals: object, n_entries: int) -> bool:
        """
        Returns the keyvals bound to @hardware_keycode.
        The Nth #GdkKeymapKey in @keys is bound to the Nth
        keyval in @keyvals. Free the returned arrays with g_free().
        When a keycode is pressed by the user, the keyval from
        this list of entries is selected by considering the effective
        keyboard group and level. See gdk_keymap_translate_keyboard_state().
        """
        ...

    def get_entries_for_keyval(self, keyval: int, keys: object, n_keys: int) -> bool:
        """
        Obtains a list of keycode/group/level combinations that will
        generate @keyval. Groups and levels are two kinds of keyboard mode;
        in general, the level determines whether the top or bottom symbol
        on a key is used, and the group determines whether the left or
        right symbol is used. On US keyboards, the shift key changes the
        keyboard level, and there are no groups. A group switch key might
        convert a keyboard between Hebrew to English modes, for example.
        #GdkEventKey contains a %group field that indicates the active
        keyboard group. The level is computed from the modifier mask.
        The returned array should be freed
        with g_free().
        """
        ...

    def get_modifier_mask(self, intent: ModifierIntent) -> ModifierType:
        """
        Returns the modifier mask the @keymap’s windowing system backend
        uses for a particular purpose.

        Note that this function always returns real hardware modifiers, not
        virtual ones (e.g. it will return #GDK_MOD1_MASK rather than
        #GDK_META_MASK if the backend maps MOD1 to META), so there are use
        cases where the return value of this function has to be transformed
        by gdk_keymap_add_virtual_modifiers() in order to contain the
        expected result.
        """
        ...

    def get_modifier_state(self) -> int:
        """
        Returns the current modifier state.
        """
        ...

    def get_num_lock_state(self) -> bool:
        """
        Returns whether the Num Lock modifer is locked.
        """
        ...

    def get_scroll_lock_state(self) -> bool:
        """
        Returns whether the Scroll Lock modifer is locked.
        """
        ...

    def have_bidi_layouts(self) -> bool:
        """
        Determines if keyboard layouts for both right-to-left and left-to-right
        languages are in use.
        """
        ...

    def lookup_key(self, key: KeymapKey) -> int:
        """
        Looks up the keyval mapped to a keycode/group/level triplet.
        If no keyval is bound to @key, returns 0. For normal user input,
        you want to use gdk_keymap_translate_keyboard_state() instead of
        this function, since the effective group/level may not be
        the same as the current keyboard state.
        """
        ...

    def map_virtual_modifiers(self, state: ModifierType) -> bool:
        """
        Maps the virtual modifiers (i.e. Super, Hyper and Meta) which
        are set in @state to their non-virtual counterparts (i.e. Mod2,
        Mod3,...) and set the corresponding bits in @state.

        This function is useful when matching key events against
        accelerators.
        """
        ...

    def translate_keyboard_state(self, hardware_keycode: int, state: ModifierType, group: int, keyval: int, effective_group: int, level: int, consumed_modifiers: ModifierType) -> bool:
        """
        Translates the contents of a #GdkEventKey into a keyval, effective
        group, and level. Modifiers that affected the translation and
        are thus unavailable for application use are returned in
        @consumed_modifiers.
        See [Groups][key-group-explanation] for an explanation of
        groups and levels. The @effective_group is the group that was
        actually used for the translation; some keys such as Enter are not
        affected by the active keyboard group. The @level is derived from
        @state. For convenience, #GdkEventKey already contains the translated
        keyval, so this function isn’t as useful as you might think.

        @consumed_modifiers gives modifiers that should be masked outfrom @state
        when comparing this key press to a hot key. For instance, on a US keyboard,
        the `plus` symbol is shifted, so when comparing a key press to a
        `<Control>plus` accelerator `<Shift>` should be masked out.

        |[<!-- language="C" -->
        // We want to ignore irrelevant modifiers like ScrollLock
        #define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_MOD1_MASK)
        gdk_keymap_translate_keyboard_state (keymap, event->hardware_keycode,
                                             event->state, event->group,
                                             &keyval, NULL, NULL, &consumed);
        if (keyval == GDK_PLUS &&
            (event->state & ~consumed & ALL_ACCELS_MASK) == GDK_CONTROL_MASK)
          // Control was pressed
        ]|

        An older interpretation @consumed_modifiers was that it contained
        all modifiers that might affect the translation of the key;
        this allowed accelerators to be stored with irrelevant consumed
        modifiers, by doing:
        |[<!-- language="C" -->
        // XXX Don’t do this XXX
        if (keyval == accel_keyval &&
            (event->state & ~consumed & ALL_ACCELS_MASK) == (accel_mods & ~consumed))
          // Accelerator was pressed
        ]|

        However, this did not work if multi-modifier combinations were
        used in the keymap, since, for instance, `<Control>` would be
        masked out even if only `<Control><Alt>` was used in the keymap.
        To support this usage as well as well as possible, all single
        modifier combinations that could affect the key for any combination
        of modifiers will be returned in @consumed_modifiers; multi-modifier
        combinations are returned only when actually found in @state. When
        you store accelerators, you should always store them with consumed
        modifiers removed. Store `<Control>plus`, not `<Control><Shift>plus`,
        """
        ...


    ...

class Monitor(GObject.Object):
    """
    GdkMonitor objects represent the individual outputs that are
    associated with a #GdkDisplay. GdkDisplay has APIs to enumerate
    monitors with gdk_display_get_n_monitors() and gdk_display_get_monitor(), and
    to find particular monitors with gdk_display_get_primary_monitor() or
    gdk_display_get_monitor_at_window().

    GdkMonitor was introduced in GTK+ 3.22 and supersedes earlier
    APIs in GdkScreen to obtain monitor-related information.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_display(self) -> Display:
        """
        Gets the display that this monitor belongs to.
        """
        ...

    def get_geometry(self, geometry: Rectangle) -> object:
        """
        Retrieves the size and position of an individual monitor within the
        display coordinate space. The returned geometry is in  ”application pixels”,
        not in ”device pixels” (see gdk_monitor_get_scale_factor()).
        """
        ...

    def get_height_mm(self) -> int:
        """
        Gets the height in millimeters of the monitor.
        """
        ...

    def get_manufacturer(self) -> str:
        """
        Gets the name or PNP ID of the monitor's manufacturer, if available.

        Note that this value might also vary depending on actual
        display backend.

        PNP ID registry is located at https://uefi.org/pnp_id_list
        """
        ...

    def get_model(self) -> str:
        """
        Gets the a string identifying the monitor model, if available.
        """
        ...

    def get_refresh_rate(self) -> int:
        """
        Gets the refresh rate of the monitor, if available.

        The value is in milli-Hertz, so a refresh rate of 60Hz
        is returned as 60000.
        """
        ...

    def get_scale_factor(self) -> int:
        """
        Gets the internal scale factor that maps from monitor coordinates
        to the actual device pixels. On traditional systems this is 1, but
        on very high density outputs this can be a higher value (often 2).

        This can be used if you want to create pixel based data for a
        particular monitor, but most of the time you’re drawing to a window
        where it is better to use gdk_window_get_scale_factor() instead.
        """
        ...

    def get_subpixel_layout(self) -> SubpixelLayout:
        """
        Gets information about the layout of red, green and blue
        primaries for each pixel in this monitor, if available.
        """
        ...

    def get_width_mm(self) -> int:
        """
        Gets the width in millimeters of the monitor.
        """
        ...

    def get_workarea(self, workarea: Rectangle) -> object:
        """
        Retrieves the size and position of the “work area” on a monitor
        within the display coordinate space. The returned geometry is in
        ”application pixels”, not in ”device pixels” (see
        gdk_monitor_get_scale_factor()).

        The work area should be considered when positioning menus and
        similar popups, to avoid placing them below panels, docks or other
        desktop components.

        Note that not all backends may have a concept of workarea. This
        function will return the monitor geometry if a workarea is not
        available, or does not apply.
        """
        ...

    def is_primary(self) -> bool:
        """
        Gets whether this monitor should be considered primary
        (see gdk_display_get_primary_monitor()).
        """
        ...


    ...

class Screen(GObject.Object):
    """
    #GdkScreen objects are the GDK representation of the screen on
    which windows can be displayed and on which the pointer moves.
    X originally identified screens with physical screens, but
    nowadays it is more common to have a single #GdkScreen which
    combines several physical monitors (see gdk_screen_get_n_monitors()).

    GdkScreen is used throughout GDK and GTK+ to specify which screen
    the top level windows are to be displayed on. it is also used to
    query the screen specification and default settings such as
    the default visual (gdk_screen_get_system_visual()), the dimensions
    of the physical monitors (gdk_screen_get_monitor_geometry()), etc.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_active_window(self) -> Window:
        """
        Returns the screen’s currently active window.

        On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property
        on the root window, as described in the
        [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
        If there is no currently currently active
        window, or the window manager does not support the
        _NET_ACTIVE_WINDOW hint, this function returns %NULL.

        On other platforms, this function may return %NULL, depending on whether
        it is implementable on that platform.

        The returned window should be unrefed using g_object_unref() when
        no longer needed.
        """
        ...

    def get_display(self) -> Display:
        """
        Gets the display to which the @screen belongs.
        """
        ...

    def get_font_options(self) -> cairo.FontOptions:
        """
        Gets any options previously set with gdk_screen_set_font_options().
        """
        ...

    def get_height(self) -> int:
        """
        Gets the height of @screen in pixels. The returned size is in
        ”application pixels”, not in ”device pixels” (see
        gdk_screen_get_monitor_scale_factor()).
        """
        ...

    def get_height_mm(self) -> int:
        """
        Returns the height of @screen in millimeters.

        Note that this value is somewhat ill-defined when the screen
        has multiple monitors of different resolution. It is recommended
        to use the monitor dimensions instead.
        """
        ...

    def get_monitor_at_point(self, x: int, y: int) -> int:
        """
        Returns the monitor number in which the point (@x,@y) is located.
        """
        ...

    def get_monitor_at_window(self, window: Window) -> int:
        """
        Returns the number of the monitor in which the largest area of the
        bounding rectangle of @window resides.
        """
        ...

    def get_monitor_geometry(self, monitor_num: int, dest: Rectangle) -> object:
        """
        Retrieves the #GdkRectangle representing the size and position of
        the individual monitor within the entire screen area. The returned
        geometry is in ”application pixels”, not in ”device pixels” (see
        gdk_screen_get_monitor_scale_factor()).

        Monitor numbers start at 0. To obtain the number of monitors of
        @screen, use gdk_screen_get_n_monitors().

        Note that the size of the entire screen area can be retrieved via
        gdk_screen_get_width() and gdk_screen_get_height().
        """
        ...

    def get_monitor_height_mm(self, monitor_num: int) -> int:
        """
        Gets the height in millimeters of the specified monitor.
        """
        ...

    def get_monitor_plug_name(self, monitor_num: int) -> str:
        """
        Returns the output name of the specified monitor.
        Usually something like VGA, DVI, or TV, not the actual
        product name of the display device.
        """
        ...

    def get_monitor_scale_factor(self, monitor_num: int) -> int:
        """
        Returns the internal scale factor that maps from monitor coordinates
        to the actual device pixels. On traditional systems this is 1, but
        on very high density outputs this can be a higher value (often 2).

        This can be used if you want to create pixel based data for a
        particular monitor, but most of the time you’re drawing to a window
        where it is better to use gdk_window_get_scale_factor() instead.
        """
        ...

    def get_monitor_width_mm(self, monitor_num: int) -> int:
        """
        Gets the width in millimeters of the specified monitor, if available.
        """
        ...

    def get_monitor_workarea(self, monitor_num: int, dest: Rectangle) -> object:
        """
        Retrieves the #GdkRectangle representing the size and position of
        the “work area” on a monitor within the entire screen area. The returned
        geometry is in ”application pixels”, not in ”device pixels” (see
        gdk_screen_get_monitor_scale_factor()).

        The work area should be considered when positioning menus and
        similar popups, to avoid placing them below panels, docks or other
        desktop components.

        Note that not all backends may have a concept of workarea. This
        function will return the monitor geometry if a workarea is not
        available, or does not apply.

        Monitor numbers start at 0. To obtain the number of monitors of
        @screen, use gdk_screen_get_n_monitors().
        """
        ...

    def get_n_monitors(self) -> int:
        """
        Returns the number of monitors which @screen consists of.
        """
        ...

    def get_number(self) -> int:
        """
        Gets the index of @screen among the screens in the display
        to which it belongs. (See gdk_screen_get_display())
        """
        ...

    def get_primary_monitor(self) -> int:
        """
        Gets the primary monitor for @screen.  The primary monitor
        is considered the monitor where the “main desktop” lives.
        While normal application windows typically allow the window
        manager to place the windows, specialized desktop applications
        such as panels should place themselves on the primary monitor.

        If no primary monitor is configured by the user, the return value
        will be 0, defaulting to the first monitor.
        """
        ...

    def get_resolution(self) -> float:
        """
        Gets the resolution for font handling on the screen; see
        gdk_screen_set_resolution() for full details.
        """
        ...

    def get_rgba_visual(self) -> Visual:
        """
        Gets a visual to use for creating windows with an alpha channel.
        The windowing system on which GTK+ is running
        may not support this capability, in which case %NULL will
        be returned. Even if a non-%NULL value is returned, its
        possible that the window’s alpha channel won’t be honored
        when displaying the window on the screen: in particular, for
        X an appropriate windowing manager and compositing manager
        must be running to provide appropriate display.

        This functionality is not implemented in the Windows backend.

        For setting an overall opacity for a top-level window, see
        gdk_window_set_opacity().
        """
        ...

    def get_root_window(self) -> Window:
        """
        Gets the root window of @screen.
        """
        ...

    def get_setting(self, name: str, value: GObject.Value) -> bool:
        """
        Retrieves a desktop-wide setting such as double-click time
        for the #GdkScreen @screen.

        FIXME needs a list of valid settings here, or a link to
        more information.
        """
        ...

    def get_system_visual(self) -> Visual:
        """
        Get the system’s default visual for @screen.
        This is the visual for the root window of the display.
        The return value should not be freed.
        """
        ...

    def get_toplevel_windows(self) -> GLib.List:
        """
        Obtains a list of all toplevel windows known to GDK on the screen @screen.
        A toplevel window is a child of the root window (see
        gdk_get_default_root_window()).

        The returned list should be freed with g_list_free(), but
        its elements need not be freed.
        """
        ...

    def get_width(self) -> int:
        """
        Gets the width of @screen in pixels. The returned size is in
        ”application pixels”, not in ”device pixels” (see
        gdk_screen_get_monitor_scale_factor()).
        """
        ...

    def get_width_mm(self) -> int:
        """
        Gets the width of @screen in millimeters.

        Note that this value is somewhat ill-defined when the screen
        has multiple monitors of different resolution. It is recommended
        to use the monitor dimensions instead.
        """
        ...

    def get_window_stack(self) -> GLib.List:
        """
        Returns a #GList of #GdkWindows representing the current
        window stack.

        On X11, this is done by inspecting the _NET_CLIENT_LIST_STACKING
        property on the root window, as described in the
        [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
        If the window manager does not support the
        _NET_CLIENT_LIST_STACKING hint, this function returns %NULL.

        On other platforms, this function may return %NULL, depending on whether
        it is implementable on that platform.

        The returned list is newly allocated and owns references to the
        windows it contains, so it should be freed using g_list_free() and
        its windows unrefed using g_object_unref() when no longer needed.
        """
        ...

    def is_composited(self) -> bool:
        """
        Returns whether windows with an RGBA visual can reasonably
        be expected to have their alpha channel drawn correctly on
        the screen.

        On X11 this function returns whether a compositing manager is
        compositing @screen.
        """
        ...

    def list_visuals(self) -> GLib.List:
        """
        Lists the available visuals for the specified @screen.
        A visual describes a hardware image data format.
        For example, a visual might support 24-bit color, or 8-bit color,
        and might expect pixels to be in a certain format.

        Call g_list_free() on the return value when you’re finished with it.
        """
        ...

    def make_display_name(self) -> str:
        """
        Determines the name to pass to gdk_display_open() to get
        a #GdkDisplay with this screen as the default screen.
        """
        ...

    def set_font_options(self, options: _T.Optional[cairo.FontOptions]) -> object:
        """
        Sets the default font options for the screen. These
        options will be set on any #PangoContext’s newly created
        with gdk_pango_context_get_for_screen(). Changing the
        default set of font options does not affect contexts that
        have already been created.
        """
        ...

    def set_resolution(self, dpi: float) -> object:
        """
        Sets the resolution for font handling on the screen. This is a
        scale factor between points specified in a #PangoFontDescription
        and cairo units. The default value is 96, meaning that a 10 point
        font will be 13 units high. (10 * 96. / 72. = 13.3).
        """
        ...


    ...

class Seat(GObject.Object):
    """
    The #GdkSeat object represents a collection of input devices
    that belong to a user.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_capabilities(self) -> SeatCapabilities:
        """
        Returns the capabilities this #GdkSeat currently has.
        """
        ...

    def get_display(self) -> Display:
        """
        Returns the #GdkDisplay this seat belongs to.
        """
        ...

    def get_keyboard(self) -> Device:
        """
        Returns the master device that routes keyboard events.
        """
        ...

    def get_pointer(self) -> Device:
        """
        Returns the master device that routes pointer events.
        """
        ...

    def get_slaves(self, capabilities: SeatCapabilities) -> GLib.List:
        """
        Returns the slave devices that match the given capabilities.
        """
        ...

    def grab(self, window: Window, capabilities: SeatCapabilities, owner_events: bool, cursor: _T.Optional[Cursor], event: _T.Optional[Event], prepare_func: _T.Optional[SeatGrabPrepareFunc], prepare_func_data: _T.Optional[object]) -> GrabStatus:
        """
        Grabs the seat so that all events corresponding to the given @capabilities
        are passed to this application until the seat is ungrabbed with gdk_seat_ungrab(),
        or the window becomes hidden. This overrides any previous grab on the
        seat by this client.

        As a rule of thumb, if a grab is desired over %GDK_SEAT_CAPABILITY_POINTER,
        all other "pointing" capabilities (eg. %GDK_SEAT_CAPABILITY_TOUCH) should
        be grabbed too, so the user is able to interact with all of those while
        the grab holds, you should thus use %GDK_SEAT_CAPABILITY_ALL_POINTING most
        commonly.

        Grabs are used for operations which need complete control over the
        events corresponding to the given capabilities. For example in GTK+ this
        is used for Drag and Drop operations, popup menus and such.

        Note that if the event mask of a #GdkWindow has selected both button press
        and button release events, or touch begin and touch end, then a press event
        will cause an automatic grab until the button is released, equivalent to a
        grab on the window with @owner_events set to %TRUE. This is done because most
        applications expect to receive paired press and release events.

        If you set up anything at the time you take the grab that needs to be
        cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
        events that are emitted when the grab ends unvoluntarily.
        """
        ...

    def ungrab(self) -> object:
        """
        Releases a grab added through gdk_seat_grab().
        """
        ...


    ...

class Visual(GObject.Object):
    """
    A #GdkVisual contains information about
    a particular visual.
    """

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...

    def get_bits_per_rgb(self) -> int:
        """
        Returns the number of significant bits per red, green and blue value.

        Not all GDK backend provide a meaningful value for this function.
        """
        ...

    def get_blue_pixel_details(self, mask: int, shift: int, precision: int) -> object:
        """
        Obtains values that are needed to calculate blue pixel values in TrueColor
        and DirectColor. The “mask” is the significant bits within the pixel.
        The “shift” is the number of bits left we must shift a primary for it
        to be in position (according to the "mask"). Finally, "precision" refers
        to how much precision the pixel value contains for a particular primary.
        """
        ...

    def get_byte_order(self) -> ByteOrder:
        """
        Returns the byte order of this visual.

        The information returned by this function is only relevant
        when working with XImages, and not all backends return
        meaningful information for this.
        """
        ...

    def get_colormap_size(self) -> int:
        """
        Returns the size of a colormap for this visual.

        You have to use platform-specific APIs to manipulate colormaps.
        """
        ...

    def get_depth(self) -> int:
        """
        Returns the bit depth of this visual.
        """
        ...

    def get_green_pixel_details(self, mask: int, shift: int, precision: int) -> object:
        """
        Obtains values that are needed to calculate green pixel values in TrueColor
        and DirectColor. The “mask” is the significant bits within the pixel.
        The “shift” is the number of bits left we must shift a primary for it
        to be in position (according to the "mask"). Finally, "precision" refers
        to how much precision the pixel value contains for a particular primary.
        """
        ...

    def get_red_pixel_details(self, mask: int, shift: int, precision: int) -> object:
        """
        Obtains values that are needed to calculate red pixel values in TrueColor
        and DirectColor. The “mask” is the significant bits within the pixel.
        The “shift” is the number of bits left we must shift a primary for it
        to be in position (according to the "mask"). Finally, "precision" refers
        to how much precision the pixel value contains for a particular primary.
        """
        ...

    def get_screen(self) -> Screen:
        """
        Gets the screen to which this visual belongs
        """
        ...

    def get_visual_type(self) -> VisualType:
        """
        Returns the type of visual this is (PseudoColor, TrueColor, etc).
        """
        ...


    ...

class Window(GObject.Object):

    def __init__(self, *args: object, **kwargs: object) -> None:
        ...


    @classmethod
    def new(cls, parent: _T.Optional[Window], attributes: WindowAttr, attributes_mask: WindowAttributesType) -> Window:
        """
        Creates a new #GdkWindow using the attributes from
        @attributes. See #GdkWindowAttr and #GdkWindowAttributesType for
        more details.  Note: to use this on displays other than the default
        display, @parent must be specified.
        """
        ...

    def add_filter(self, function: FilterFunc, data: _T.Optional[object]) -> object:
        """
        Adds an event filter to @window, allowing you to intercept events
        before they reach GDK. This is a low-level operation and makes it
        easy to break GDK and/or GTK+, so you have to know what you're
        doing. Pass %NULL for @window to get all events for all windows,
        instead of events for a specific window.

        If you are interested in X GenericEvents, bear in mind that
        XGetEventData() has been already called on the event, and
        XFreeEventData() must not be called within @function.
        """
        ...

    def beep(self) -> object:
        """
        Emits a short beep associated to @window in the appropriate
        display, if supported. Otherwise, emits a short beep on
        the display just as gdk_display_beep().
        """
        ...

    def begin_draw_frame(self, region: cairo.Region) -> DrawingContext:
        """
        Indicates that you are beginning the process of redrawing @region
        on @window, and provides you with a #GdkDrawingContext.

        If @window is a top level #GdkWindow, backed by a native window
        implementation, a backing store (offscreen buffer) large enough to
        contain @region will be created. The backing store will be initialized
        with the background color or background surface for @window. Then, all
        drawing operations performed on @window will be diverted to the
        backing store. When you call gdk_window_end_frame(), the contents of
        the backing store will be copied to @window, making it visible
        on screen. Only the part of @window contained in @region will be
        modified; that is, drawing operations are clipped to @region.

        The net result of all this is to remove flicker, because the user
        sees the finished product appear all at once when you call
        gdk_window_end_draw_frame(). If you draw to @window directly without
        calling gdk_window_begin_draw_frame(), the user may see flicker
        as individual drawing operations are performed in sequence.

        When using GTK+, the widget system automatically places calls to
        gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() around
        emissions of the `GtkWidget::draw` signal. That is, if you’re
        drawing the contents of the widget yourself, you can assume that the
        widget has a cleared background, is already set as the clip region,
        and already has a backing store. Therefore in most cases, application
        code in GTK does not need to call gdk_window_begin_draw_frame()
        explicitly.
        """
        ...

    def begin_move_drag(self, button: int, root_x: int, root_y: int, timestamp: int) -> object:
        """
        Begins a window move operation (for a toplevel window).

        This function assumes that the drag is controlled by the
        client pointer device, use gdk_window_begin_move_drag_for_device()
        to begin a drag with a different device.
        """
        ...

    def begin_move_drag_for_device(self, device: Device, button: int, root_x: int, root_y: int, timestamp: int) -> object:
        """
        Begins a window move operation (for a toplevel window).
        You might use this function to implement a “window move grip,” for
        example. The function works best with window managers that support the
        [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
        but has a fallback implementation for other window managers.
        """
        ...

    def begin_paint_rect(self, rectangle: Rectangle) -> object:
        """
        A convenience wrapper around gdk_window_begin_paint_region() which
        creates a rectangular region for you. See
        gdk_window_begin_paint_region() for details.
        """
        ...

    def begin_paint_region(self, region: cairo.Region) -> object:
        """
        Indicates that you are beginning the process of redrawing @region.
        A backing store (offscreen buffer) large enough to contain @region
        will be created. The backing store will be initialized with the
        background color or background surface for @window. Then, all
        drawing operations performed on @window will be diverted to the
        backing store.  When you call gdk_window_end_paint(), the backing
        store will be copied to @window, making it visible onscreen. Only
        the part of @window contained in @region will be modified; that is,
        drawing operations are clipped to @region.

        The net result of all this is to remove flicker, because the user
        sees the finished product appear all at once when you call
        gdk_window_end_paint(). If you draw to @window directly without
        calling gdk_window_begin_paint_region(), the user may see flicker
        as individual drawing operations are performed in sequence.  The
        clipping and background-initializing features of
        gdk_window_begin_paint_region() are conveniences for the
        programmer, so you can avoid doing that work yourself.

        When using GTK+, the widget system automatically places calls to
        gdk_window_begin_paint_region() and gdk_window_end_paint() around
        emissions of the expose_event signal. That is, if you’re writing an
        expose event handler, you can assume that the exposed area in
        #GdkEventExpose has already been cleared to the window background,
        is already set as the clip region, and already has a backing store.
        Therefore in most cases, application code need not call
        gdk_window_begin_paint_region(). (You can disable the automatic
        calls around expose events on a widget-by-widget basis by calling
        gtk_widget_set_double_buffered().)

        If you call this function multiple times before calling the
        matching gdk_window_end_paint(), the backing stores are pushed onto
        a stack. gdk_window_end_paint() copies the topmost backing store
        onscreen, subtracts the topmost region from all other regions in
        the stack, and pops the stack. All drawing operations affect only
        the topmost backing store in the stack. One matching call to
        gdk_window_end_paint() is required for each call to
        gdk_window_begin_paint_region().
        """
        ...

    def begin_resize_drag(self, edge: WindowEdge, button: int, root_x: int, root_y: int, timestamp: int) -> object:
        """
        Begins a window resize operation (for a toplevel window).

        This function assumes that the drag is controlled by the
        client pointer device, use gdk_window_begin_resize_drag_for_device()
        to begin a drag with a different device.
        """
        ...

    def begin_resize_drag_for_device(self, edge: WindowEdge, device: Device, button: int, root_x: int, root_y: int, timestamp: int) -> object:
        """
        Begins a window resize operation (for a toplevel window).
        You might use this function to implement a “window resize grip,” for
        example; in fact #GtkStatusbar uses it. The function works best
        with window managers that support the
        [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
        but has a fallback implementation for other window managers.
        """
        ...

    def configure_finished(self) -> object:
        """
        Does nothing, present only for compatiblity.
        """
        ...

    def coords_from_parent(self, parent_x: float, parent_y: float, x: float, y: float) -> object:
        """
        Transforms window coordinates from a parent window to a child
        window, where the parent window is the normal parent as returned by
        gdk_window_get_parent() for normal windows, and the window's
        embedder as returned by gdk_offscreen_window_get_embedder() for
        offscreen windows.

        For normal windows, calling this function is equivalent to subtracting
        the return values of gdk_window_get_position() from the parent coordinates.
        For offscreen windows however (which can be arbitrarily transformed),
        this function calls the GdkWindow::from-embedder: signal to translate
        the coordinates.

        You should always use this function when writing generic code that
        walks down a window hierarchy.

        See also: gdk_window_coords_to_parent()
        """
        ...

    def coords_to_parent(self, x: float, y: float, parent_x: float, parent_y: float) -> object:
        """
        Transforms window coordinates from a child window to its parent
        window, where the parent window is the normal parent as returned by
        gdk_window_get_parent() for normal windows, and the window's
        embedder as returned by gdk_offscreen_window_get_embedder() for
        offscreen windows.

        For normal windows, calling this function is equivalent to adding
        the return values of gdk_window_get_position() to the child coordinates.
        For offscreen windows however (which can be arbitrarily transformed),
        this function calls the GdkWindow::to-embedder: signal to translate
        the coordinates.

        You should always use this function when writing generic code that
        walks up a window hierarchy.

        See also: gdk_window_coords_from_parent()
        """
        ...

    def create_gl_context(self) -> GLContext:
        """
        Creates a new #GdkGLContext matching the
        framebuffer format to the visual of the #GdkWindow. The context
        is disconnected from any particular window or surface.

        If the creation of the #GdkGLContext failed, @error will be set.

        Before using the returned #GdkGLContext, you will need to
        call gdk_gl_context_make_current() or gdk_gl_context_realize().
        """
        ...

    def create_similar_image_surface(self, format: cairo.Format, width: int, height: int, scale: int) -> cairo.Surface:
        """
        Create a new image surface that is efficient to draw on the
        given @window.

        Initially the surface contents are all 0 (transparent if contents
        have transparency, black otherwise.)

        The @width and @height of the new surface are not affected by
        the scaling factor of the @window, or by the @scale argument; they
        are the size of the surface in device pixels. If you wish to create
        an image surface capable of holding the contents of @window you can
        use:

        |[<!-- language="C" -->
          int scale = gdk_window_get_scale_factor (window);
          int width = gdk_window_get_width (window) * scale;
          int height = gdk_window_get_height (window) * scale;

          // format is set elsewhere
          cairo_surface_t *surface =
            gdk_window_create_similar_image_surface (window,
                                                     format,
                                                     width, height,
                                                     scale);
        ]|

        Note that unlike cairo_surface_create_similar_image(), the new
        surface's device scale is set to @scale, or to the scale factor of
        @window if @scale is 0.
        """
        ...

    def create_similar_surface(self, content: cairo.Content, width: int, height: int) -> cairo.Surface:
        """
        Create a new surface that is as compatible as possible with the
        given @window. For example the new surface will have the same
        fallback resolution and font options as @window. Generally, the new
        surface will also use the same backend as @window, unless that is
        not possible for some reason. The type of the returned surface may
        be examined with cairo_surface_get_type().

        Initially the surface contents are all 0 (transparent if contents
        have transparency, black otherwise.)
        """
        ...

    def deiconify(self) -> object:
        """
        Attempt to deiconify (unminimize) @window. On X11 the window manager may
        choose to ignore the request to deiconify. When using GTK+,
        use gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet,
        you probably want to use gtk_window_present_with_time(), which raises the window, focuses it,
        unminimizes it, and puts it on the current desktop.
        """
        ...

    def destroy(self) -> object:
        """
        Destroys the window system resources associated with @window and decrements @window's
        reference count. The window system resources for all children of @window are also
        destroyed, but the children’s reference counts are not decremented.

        Note that a window will not be destroyed automatically when its reference count
        reaches zero. You must call this function yourself before that happens.
        """
        ...

    def destroy_notify(self) -> object:
        ...

    def enable_synchronized_configure(self) -> object:
        """
        Does nothing, present only for compatiblity.
        """
        ...

    def end_draw_frame(self, context: DrawingContext) -> object:
        """
        Indicates that the drawing of the contents of @window started with
        gdk_window_begin_frame() has been completed.

        This function will take care of destroying the #GdkDrawingContext.

        It is an error to call this function without a matching
        gdk_window_begin_frame() first.
        """
        ...

    def end_paint(self) -> object:
        """
        Indicates that the backing store created by the most recent call
        to gdk_window_begin_paint_region() should be copied onscreen and
        deleted, leaving the next-most-recent backing store or no backing
        store at all as the active paint region. See
        gdk_window_begin_paint_region() for full details.

        It is an error to call this function without a matching
        gdk_window_begin_paint_region() first.
        """
        ...

    def ensure_native(self) -> bool:
        """
        Tries to ensure that there is a window-system native window for this
        GdkWindow. This may fail in some situations, returning %FALSE.

        Offscreen window and children of them can never have native windows.

        Some backends may not support native child windows.
        """
        ...

    def flush(self) -> object:
        """
        This function does nothing.
        """
        ...

    def focus(self, timestamp: int) -> object:
        """
        Sets keyboard focus to @window. In most cases, gtk_window_present_with_time()
        should be used on a #GtkWindow, rather than calling this function.
        """
        ...

    def freeze_toplevel_updates_libgtk_only(self) -> object:
        """
        Temporarily freezes a window and all its descendants such that it won't
        receive expose events.  The window will begin receiving expose events
        again when gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
        gdk_window_freeze_toplevel_updates_libgtk_only()
        has been called more than once,
        gdk_window_thaw_toplevel_updates_libgtk_only() must be called
        an equal number of times to begin processing exposes.

        This function is not part of the GDK public API and is only
        for use by GTK+.
        """
        ...

    def freeze_updates(self) -> object:
        """
        Temporarily freezes a window such that it won’t receive expose
        events.  The window will begin receiving expose events again when
        gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()
        has been called more than once, gdk_window_thaw_updates() must be called
        an equal number of times to begin processing exposes.
        """
        ...

    def fullscreen(self) -> object:
        """
        Moves the window into fullscreen mode. This means the
        window covers the entire screen and is above any panels
        or task bars.

        If the window was already fullscreen, then this function does nothing.

        On X11, asks the window manager to put @window in a fullscreen
        state, if the window manager supports this operation. Not all
        window managers support this, and some deliberately ignore it or
        don’t have a concept of “fullscreen”; so you can’t rely on the
        fullscreenification actually happening. But it will happen with
        most standard window managers, and GDK makes a best effort to get
        it to happen.
        """
        ...

    def fullscreen_on_monitor(self, monitor: int) -> object:
        """
        Moves the window into fullscreen mode on the given monitor. This means
        the window covers the entire screen and is above any panels or task bars.

        If the window was already fullscreen, then this function does nothing.
        """
        ...

    def geometry_changed(self) -> object:
        """
        This function informs GDK that the geometry of an embedded
        offscreen window has changed. This is necessary for GDK to keep
        track of which offscreen window the pointer is in.
        """
        ...

    def get_accept_focus(self) -> bool:
        """
        Determines whether or not the desktop environment shuld be hinted that
        the window does not want to receive input focus.
        """
        ...

    def get_background_pattern(self) -> cairo.Pattern:
        """
        Gets the pattern used to clear the background on @window.
        """
        ...

    def get_children(self) -> GLib.List:
        """
        Gets the list of children of @window known to GDK.
        This function only returns children created via GDK,
        so for example it’s useless when used with the root window;
        it only returns windows an application created itself.

        The returned list must be freed, but the elements in the
        list need not be.
        """
        ...

    def get_children_with_user_data(self, user_data: _T.Optional[object]) -> GLib.List:
        """
        Gets the list of children of @window known to GDK with a
        particular @user_data set on it.

        The returned list must be freed, but the elements in the
        list need not be.

        The list is returned in (relative) stacking order, i.e. the
        lowest window is first.
        """
        ...

    def get_clip_region(self) -> cairo.Region:
        """
        Computes the region of a window that potentially can be written
        to by drawing primitives. This region may not take into account
        other factors such as if the window is obscured by other windows,
        but no area outside of this region will be affected by drawing
        primitives.
        """
        ...

    def get_composited(self) -> bool:
        """
        Determines whether @window is composited.

        See gdk_window_set_composited().
        """
        ...

    def get_cursor(self) -> Cursor:
        """
        Retrieves a #GdkCursor pointer for the cursor currently set on the
        specified #GdkWindow, or %NULL.  If the return value is %NULL then
        there is no custom cursor set on the specified window, and it is
        using the cursor for its parent window.
        """
        ...

    def get_decorations(self, decorations: WMDecoration) -> bool:
        """
        Returns the decorations set on the GdkWindow with
        gdk_window_set_decorations().
        """
        ...

    def get_device_cursor(self, device: Device) -> Cursor:
        """
        Retrieves a #GdkCursor pointer for the @device currently set on the
        specified #GdkWindow, or %NULL.  If the return value is %NULL then
        there is no custom cursor set on the specified window, and it is
        using the cursor for its parent window.
        """
        ...

    def get_device_events(self, device: Device) -> EventMask:
        """
        Returns the event mask for @window corresponding to an specific device.
        """
        ...

    def get_device_position(self, device: Device, x: int, y: int, mask: ModifierType) -> Window:
        """
        Obtains the current device position and modifier state.
        The position is given in coordinates relative to the upper left
        corner of @window.

        Use gdk_window_get_device_position_double() if you need subpixel precision.
        """
        ...

    def get_device_position_double(self, device: Device, x: float, y: float, mask: ModifierType) -> Window:
        """
        Obtains the current device position in doubles and modifier state.
        The position is given in coordinates relative to the upper left
        corner of @window.
        """
        ...

    def get_display(self) -> Display:
        """
        Gets the #GdkDisplay associated with a #GdkWindow.
        """
        ...

    def get_drag_protocol(self, target: Window) -> DragProtocol:
        """
        Finds out the DND protocol supported by a window.
        """
        ...

    def get_effective_parent(self) -> Window:
        """
        Obtains the parent of @window, as known to GDK. Works like
        gdk_window_get_parent() for normal windows, but returns the
        window’s embedder for offscreen windows.

        See also: gdk_offscreen_window_get_embedder()
        """
        ...

    def get_effective_toplevel(self) -> Window:
        """
        Gets the toplevel window that’s an ancestor of @window.

        Works like gdk_window_get_toplevel(), but treats an offscreen window's
        embedder as its parent, using gdk_window_get_effective_parent().

        See also: gdk_offscreen_window_get_embedder()
        """
        ...

    def get_event_compression(self) -> bool:
        """
        Get the current event compression setting for this window.
        """
        ...

    def get_events(self) -> EventMask:
        """
        Gets the event mask for @window for all master input devices. See
        gdk_window_set_events().
        """
        ...

    def get_focus_on_map(self) -> bool:
        """
        Determines whether or not the desktop environment should be hinted that the
        window does not want to receive input focus when it is mapped.
        """
        ...

    def get_frame_clock(self) -> FrameClock:
        """
        Gets the frame clock for the window. The frame clock for a window
        never changes unless the window is reparented to a new toplevel
        window.
        """
        ...

    def get_frame_extents(self, rect: Rectangle) -> object:
        """
        Obtains the bounding box of the window, including window manager
        titlebar/borders if any. The frame position is given in root window
        coordinates. To get the position of the window itself (rather than
        the frame) in root window coordinates, use gdk_window_get_origin().
        """
        ...

    def get_fullscreen_mode(self) -> FullscreenMode:
        """
        Obtains the #GdkFullscreenMode of the @window.
        """
        ...

    def get_geometry(self, x: int, y: int, width: int, height: int) -> object:
        """
        Any of the return location arguments to this function may be %NULL,
        if you aren’t interested in getting the value of that field.

        The X and Y coordinates returned are relative to the parent window
        of @window, which for toplevels usually means relative to the
        window decorations (titlebar, etc.) rather than relative to the
        root window (screen-size background window).

        On the X11 platform, the geometry is obtained from the X server,
        so reflects the latest position of @window; this may be out-of-sync
        with the position of @window delivered in the most-recently-processed
        #GdkEventConfigure. gdk_window_get_position() in contrast gets the
        position from the most recent configure event.

        Note: If @window is not a toplevel, it is much better
        to call gdk_window_get_position(), gdk_window_get_width() and
        gdk_window_get_height() instead, because it avoids the roundtrip to
        the X server and because these functions support the full 32-bit
        coordinate space, whereas gdk_window_get_geometry() is restricted to
        the 16-bit coordinates of X11.
        """
        ...

    def get_group(self) -> Window:
        """
        Returns the group leader window for @window. See gdk_window_set_group().
        """
        ...

    def get_height(self) -> int:
        """
        Returns the height of the given @window.

        On the X11 platform the returned size is the size reported in the
        most-recently-processed configure event, rather than the current
        size on the X server.
        """
        ...

    def get_modal_hint(self) -> bool:
        """
        Determines whether or not the window manager is hinted that @window
        has modal behaviour.
        """
        ...

    def get_origin(self, x: int, y: int) -> int:
        """
        Obtains the position of a window in root window coordinates.
        (Compare with gdk_window_get_position() and
        gdk_window_get_geometry() which return the position of a window
        relative to its parent window.)
        """
        ...

    def get_parent(self) -> Window:
        """
        Obtains the parent of @window, as known to GDK. Does not query the
        X server; thus this returns the parent as passed to gdk_window_new(),
        not the actual parent. This should never matter unless you’re using
        Xlib calls mixed with GDK calls on the X11 platform. It may also
        matter for toplevel windows, because the window manager may choose
        to reparent them.

        Note that you should use gdk_window_get_effective_parent() when
        writing generic code that walks up a window hierarchy, because
        gdk_window_get_parent() will most likely not do what you expect if
        there are offscreen windows in the hierarchy.
        """
        ...

    def get_pass_through(self) -> bool:
        """
        Returns whether input to the window is passed through to the window
        below.

        See gdk_window_set_pass_through() for details
        """
        ...

    def get_pointer(self, x: int, y: int, mask: ModifierType) -> Window:
        """
        Obtains the current pointer position and modifier state.
        The position is given in coordinates relative to the upper left
        corner of @window.
        """
        ...

    def get_position(self, x: int, y: int) -> object:
        """
        Obtains the position of the window as reported in the
        most-recently-processed #GdkEventConfigure. Contrast with
        gdk_window_get_geometry() which queries the X server for the
        current window position, regardless of which events have been
        received or processed.

        The position coordinates are relative to the window’s parent window.
        """
        ...

    def get_root_coords(self, x: int, y: int, root_x: int, root_y: int) -> object:
        """
        Obtains the position of a window position in root
        window coordinates. This is similar to
        gdk_window_get_origin() but allows you to pass
        in any position in the window, not just the origin.
        """
        ...

    def get_root_origin(self, x: int, y: int) -> object:
        """
        Obtains the top-left corner of the window manager frame in root
        window coordinates.
        """
        ...

    def get_scale_factor(self) -> int:
        """
        Returns the internal scale factor that maps from window coordiantes
        to the actual device pixels. On traditional systems this is 1, but
        on very high density outputs this can be a higher value (often 2).

        A higher value means that drawing is automatically scaled up to
        a higher resolution, so any code doing drawing will automatically look
        nicer. However, if you are supplying pixel-based data the scale
        value can be used to determine whether to use a pixel resource
        with higher resolution data.

        The scale of a window may change during runtime, if this happens
        a configure event will be sent to the toplevel window.
        """
        ...

    def get_screen(self) -> Screen:
        """
        Gets the #GdkScreen associated with a #GdkWindow.
        """
        ...

    def get_source_events(self, source: InputSource) -> EventMask:
        """
        Returns the event mask for @window corresponding to the device class specified
        by @source.
        """
        ...

    def get_state(self) -> WindowState:
        """
        Gets the bitwise OR of the currently active window state flags,
        from the #GdkWindowState enumeration.
        """
        ...

    def get_support_multidevice(self) -> bool:
        """
        Returns %TRUE if the window is aware of the existence of multiple
        devices.
        """
        ...

    def get_toplevel(self) -> Window:
        """
        Gets the toplevel window that’s an ancestor of @window.

        Any window type but %GDK_WINDOW_CHILD is considered a
        toplevel window, as is a %GDK_WINDOW_CHILD window that
        has a root window as parent.

        Note that you should use gdk_window_get_effective_toplevel() when
        you want to get to a window’s toplevel as seen on screen, because
        gdk_window_get_toplevel() will most likely not do what you expect
        if there are offscreen windows in the hierarchy.
        """
        ...

    def get_type_hint(self) -> WindowTypeHint:
        """
        This function returns the type hint set for a window.
        """
        ...

    def get_update_area(self) -> cairo.Region:
        """
        Transfers ownership of the update area from @window to the caller
        of the function. That is, after calling this function, @window will
        no longer have an invalid/dirty region; the update area is removed
        from @window and handed to you. If a window has no update area,
        gdk_window_get_update_area() returns %NULL. You are responsible for
        calling cairo_region_destroy() on the returned region if it’s non-%NULL.
        """
        ...

    def get_user_data(self, data: _T.Optional[object]) -> object:
        """
        Retrieves the user data for @window, which is normally the widget
        that @window belongs to. See gdk_window_set_user_data().
        """
        ...

    def get_visible_region(self) -> cairo.Region:
        """
        Computes the region of the @window that is potentially visible.
        This does not necessarily take into account if the window is
        obscured by other windows, but no area outside of this region
        is visible.
        """
        ...

    def get_visual(self) -> Visual:
        """
        Gets the #GdkVisual describing the pixel format of @window.
        """
        ...

    def get_width(self) -> int:
        """
        Returns the width of the given @window.

        On the X11 platform the returned size is the size reported in the
        most-recently-processed configure event, rather than the current
        size on the X server.
        """
        ...

    def get_window_type(self) -> WindowType:
        """
        Gets the type of the window. See #GdkWindowType.
        """
        ...

    def has_native(self) -> bool:
        """
        Checks whether the window has a native window or not. Note that
        you can use gdk_window_ensure_native() if a native window is needed.
        """
        ...

    def hide(self) -> object:
        """
        For toplevel windows, withdraws them, so they will no longer be
        known to the window manager; for all windows, unmaps them, so
        they won’t be displayed. Normally done automatically as
        part of gtk_widget_hide().
        """
        ...

    def iconify(self) -> object:
        """
        Asks to iconify (minimize) @window. The window manager may choose
        to ignore the request, but normally will honor it. Using
        gtk_window_iconify() is preferred, if you have a #GtkWindow widget.

        This function only makes sense when @window is a toplevel window.
        """
        ...

    def input_shape_combine_region(self, shape_region: cairo.Region, offset_x: int, offset_y: int) -> object:
        """
        Like gdk_window_shape_combine_region(), but the shape applies
        only to event handling. Mouse events which happen while
        the pointer position corresponds to an unset bit in the
        mask will be passed on the window below @window.

        An input shape is typically used with RGBA windows.
        The alpha channel of the window defines which pixels are
        invisible and allows for nicely antialiased borders,
        and the input shape controls where the window is
        “clickable”.

        On the X11 platform, this requires version 1.1 of the
        shape extension.

        On the Win32 platform, this functionality is not present and the
        function does nothing.
        """
        ...

    def invalidate_maybe_recurse(self, region: cairo.Region, child_func: _T.Optional[WindowChildFunc], user_data: _T.Optional[object]) -> object:
        """
        Adds @region to the update area for @window. The update area is the
        region that needs to be redrawn, or “dirty region.” The call
        gdk_window_process_updates() sends one or more expose events to the
        window, which together cover the entire update area. An
        application would normally redraw the contents of @window in
        response to those expose events.

        GDK will call gdk_window_process_all_updates() on your behalf
        whenever your program returns to the main loop and becomes idle, so
        normally there’s no need to do that manually, you just need to
        invalidate regions that you know should be redrawn.

        The @child_func parameter controls whether the region of
        each child window that intersects @region will also be invalidated.
        Only children for which @child_func returns #TRUE will have the area
        invalidated.
        """
        ...

    def invalidate_rect(self, rect: _T.Optional[Rectangle], invalidate_children: bool) -> object:
        """
        A convenience wrapper around gdk_window_invalidate_region() which
        invalidates a rectangular region. See
        gdk_window_invalidate_region() for details.
        """
        ...

    def invalidate_region(self, region: cairo.Region, invalidate_children: bool) -> object:
        """
        Adds @region to the update area for @window. The update area is the
        region that needs to be redrawn, or “dirty region.” The call
        gdk_window_process_updates() sends one or more expose events to the
        window, which together cover the entire update area. An
        application would normally redraw the contents of @window in
        response to those expose events.

        GDK will call gdk_window_process_all_updates() on your behalf
        whenever your program returns to the main loop and becomes idle, so
        normally there’s no need to do that manually, you just need to
        invalidate regions that you know should be redrawn.

        The @invalidate_children parameter controls whether the region of
        each child window that intersects @region will also be invalidated.
        If %FALSE, then the update area for child windows will remain
        unaffected. See gdk_window_invalidate_maybe_recurse if you need
        fine grained control over which children are invalidated.
        """
        ...

    def is_destroyed(self) -> bool:
        """
        Check to see if a window is destroyed..
        """
        ...

    def is_input_only(self) -> bool:
        """
        Determines whether or not the window is an input only window.
        """
        ...

    def is_shaped(self) -> bool:
        """
        Determines whether or not the window is shaped.
        """
        ...

    def is_viewable(self) -> bool:
        """
        Check if the window and all ancestors of the window are
        mapped. (This is not necessarily "viewable" in the X sense, since
        we only check as far as we have GDK window parents, not to the root
        window.)
        """
        ...

    def is_visible(self) -> bool:
        """
        Checks whether the window has been mapped (with gdk_window_show() or
        gdk_window_show_unraised()).
        """
        ...

    def lower(self) -> object:
        """
        Lowers @window to the bottom of the Z-order (stacking order), so that
        other windows with the same parent window appear above @window.
        This is true whether or not the other windows are visible.

        If @window is a toplevel, the window manager may choose to deny the
        request to move the window in the Z-order, gdk_window_lower() only
        requests the restack, does not guarantee it.

        Note that gdk_window_show() raises the window again, so don’t call this
        function before gdk_window_show(). (Try gdk_window_show_unraised().)
        """
        ...

    def mark_paint_from_clip(self, cr: cairo.Context) -> object:
        """
        If you call this during a paint (e.g. between gdk_window_begin_paint_region()
        and gdk_window_end_paint() then GDK will mark the current clip region of the
        window as being drawn. This is required when mixing GL rendering via
        gdk_cairo_draw_from_gl() and cairo rendering, as otherwise GDK has no way
        of knowing when something paints over the GL-drawn regions.

        This is typically called automatically by GTK+ and you don't need
        to care about this.
        """
        ...

    def maximize(self) -> object:
        """
        Maximizes the window. If the window was already maximized, then
        this function does nothing.

        On X11, asks the window manager to maximize @window, if the window
        manager supports this operation. Not all window managers support
        this, and some deliberately ignore it or don’t have a concept of
        “maximized”; so you can’t rely on the maximization actually
        happening. But it will happen with most standard window managers,
        and GDK makes a best effort to get it to happen.

        On Windows, reliably maximizes the window.
        """
        ...

    def merge_child_input_shapes(self) -> object:
        """
        Merges the input shape masks for any child windows into the
        input shape mask for @window. i.e. the union of all input masks
        for @window and its children will become the new input mask
        for @window. See gdk_window_input_shape_combine_region().

        This function is distinct from gdk_window_set_child_input_shapes()
        because it includes @window’s input shape mask in the set of
        shapes to be merged.
        """
        ...

    def merge_child_shapes(self) -> object:
        """
        Merges the shape masks for any child windows into the
        shape mask for @window. i.e. the union of all masks
        for @window and its children will become the new mask
        for @window. See gdk_window_shape_combine_region().

        This function is distinct from gdk_window_set_child_shapes()
        because it includes @window’s shape mask in the set of shapes to
        be merged.
        """
        ...

    def move(self, x: int, y: int) -> object:
        """
        Repositions a window relative to its parent window.
        For toplevel windows, window managers may ignore or modify the move;
        you should probably use gtk_window_move() on a #GtkWindow widget
        anyway, instead of using GDK functions. For child windows,
        the move will reliably succeed.

        If you’re also planning to resize the window, use gdk_window_move_resize()
        to both move and resize simultaneously, for a nicer visual effect.
        """
        ...

    def move_region(self, region: cairo.Region, dx: int, dy: int) -> object:
        """
        Move the part of @window indicated by @region by @dy pixels in the Y
        direction and @dx pixels in the X direction. The portions of @region
        that not covered by the new position of @region are invalidated.

        Child windows are not moved.
        """
        ...

    def move_resize(self, x: int, y: int, width: int, height: int) -> object:
        """
        Equivalent to calling gdk_window_move() and gdk_window_resize(),
        except that both operations are performed at once, avoiding strange
        visual effects. (i.e. the user may be able to see the window first
        move, then resize, if you don’t use gdk_window_move_resize().)
        """
        ...

    def move_to_rect(self, rect: Rectangle, rect_anchor: Gravity, window_anchor: Gravity, anchor_hints: AnchorHints, rect_anchor_dx: int, rect_anchor_dy: int) -> object:
        """
        Moves @window to @rect, aligning their anchor points.

        @rect is relative to the top-left corner of the window that @window is
        transient for. @rect_anchor and @window_anchor determine anchor points on
        @rect and @window to pin together. @rect's anchor point can optionally be
        offset by @rect_anchor_dx and @rect_anchor_dy, which is equivalent to
        offsetting the position of @window.

        @anchor_hints determines how @window will be moved if the anchor points cause
        it to move off-screen. For example, %GDK_ANCHOR_FLIP_X will replace
        %GDK_GRAVITY_NORTH_WEST with %GDK_GRAVITY_NORTH_EAST and vice versa if
        @window extends beyond the left or right edges of the monitor.

        Connect to the #GdkWindow::moved-to-rect signal to find out how it was
        actually positioned.
        """
        ...

    def peek_children(self) -> GLib.List:
        """
        Like gdk_window_get_children(), but does not copy the list of
        children, so the list does not need to be freed.
        """
        ...

    def process_updates(self, update_children: bool) -> object:
        """
        Sends one or more expose events to @window. The areas in each
        expose event will cover the entire update area for the window (see
        gdk_window_invalidate_region() for details). Normally GDK calls
        gdk_window_process_all_updates() on your behalf, so there’s no
        need to call this function unless you want to force expose events
        to be delivered immediately and synchronously (vs. the usual
        case, where GDK delivers them in an idle handler). Occasionally
        this is useful to produce nicer scrolling behavior, for example.
        """
        ...

    def raise(self) -> object:
        """
        Raises @window to the top of the Z-order (stacking order), so that
        other windows with the same parent window appear below @window.
        This is true whether or not the windows are visible.

        If @window is a toplevel, the window manager may choose to deny the
        request to move the window in the Z-order, gdk_window_raise() only
        requests the restack, does not guarantee it.
        """
        ...

    def register_dnd(self) -> object:
        """
        Registers a window as a potential drop destination.
        """
        ...

    def remove_filter(self, function: FilterFunc, data: _T.Optional[object]) -> object:
        """
        Remove a filter previously added with gdk_window_add_filter().
        """
        ...

    def reparent(self, new_parent: Window, x: int, y: int) -> object:
        """
        Reparents @window into the given @new_parent. The window being
        reparented will be unmapped as a side effect.
        """
        ...

    def resize(self, width: int, height: int) -> object:
        """
        Resizes @window; for toplevel windows, asks the window manager to resize
        the window. The window manager may not allow the resize. When using GTK+,
        use gtk_window_resize() instead of this low-level GDK function.

        Windows may not be resized below 1x1.

        If you’re also planning to move the window, use gdk_window_move_resize()
        to both move and resize simultaneously, for a nicer visual effect.
        """
        ...

    def restack(self, sibling: _T.Optional[Window], above: bool) -> object:
        """
        Changes the position of  @window in the Z-order (stacking order), so that
        it is above @sibling (if @above is %TRUE) or below @sibling (if @above is
        %FALSE).

        If @sibling is %NULL, then this either raises (if @above is %TRUE) or
        lowers the window.

        If @window is a toplevel, the window manager may choose to deny the
        request to move the window in the Z-order, gdk_window_restack() only
        requests the restack, does not guarantee it.
        """
        ...

    def scroll(self, dx: int, dy: int) -> object:
        """
        Scroll the contents of @window, both pixels and children, by the
        given amount. @window itself does not move. Portions of the window
        that the scroll operation brings in from offscreen areas are
        invalidated. The invalidated region may be bigger than what would
        strictly be necessary.

        For X11, a minimum area will be invalidated if the window has no
        subwindows, or if the edges of the window’s parent do not extend
        beyond the edges of the window. In other cases, a multi-step process
        is used to scroll the window which may produce temporary visual
        artifacts and unnecessary invalidations.
        """
        ...

    def set_accept_focus(self, accept_focus: bool) -> object:
        """
        Setting @accept_focus to %FALSE hints the desktop environment that the
        window doesn’t want to receive input focus.

        On X, it is the responsibility of the window manager to interpret this
        hint. ICCCM-compliant window manager usually respect it.
        """
        ...

    def set_background(self, color: Color) -> object:
        """
        Sets the background color of @window.

        However, when using GTK+, influence the background of a widget
        using a style class or CSS — if you’re an application — or with
        gtk_style_context_set_background() — if you're implementing a
        custom widget.
        """
        ...

    def set_background_pattern(self, pattern: _T.Optional[cairo.Pattern]) -> object:
        """
        Sets the background of @window.

        A background of %NULL means that the window won't have any background. On the
        X11 backend it's also possible to inherit the background from the parent
        window using gdk_x11_get_parent_relative_pattern().

        The windowing system will normally fill a window with its background
        when the window is obscured then exposed.
        """
        ...

    def set_background_rgba(self, rgba: RGBA) -> object:
        """
        Sets the background color of @window.

        See also gdk_window_set_background_pattern().
        """
        ...

    def set_child_input_shapes(self) -> object:
        """
        Sets the input shape mask of @window to the union of input shape masks
        for all children of @window, ignoring the input shape mask of @window
        itself. Contrast with gdk_window_merge_child_input_shapes() which includes
        the input shape mask of @window in the masks to be merged.
        """
        ...

    def set_child_shapes(self) -> object:
        """
        Sets the shape mask of @window to the union of shape masks
        for all children of @window, ignoring the shape mask of @window
        itself. Contrast with gdk_window_merge_child_shapes() which includes
        the shape mask of @window in the masks to be merged.
        """
        ...

    def set_composited(self, composited: bool) -> object:
        """
        Sets a #GdkWindow as composited, or unsets it. Composited
        windows do not automatically have their contents drawn to
        the screen. Drawing is redirected to an offscreen buffer
        and an expose event is emitted on the parent of the composited
        window. It is the responsibility of the parent’s expose handler
        to manually merge the off-screen content onto the screen in
        whatever way it sees fit.

        It only makes sense for child windows to be composited; see
        gdk_window_set_opacity() if you need translucent toplevel
        windows.

        An additional effect of this call is that the area of this
        window is no longer clipped from regions marked for
        invalidation on its parent. Draws done on the parent
        window are also no longer clipped by the child.

        This call is only supported on some systems (currently,
        only X11 with new enough Xcomposite and Xdamage extensions).
        You must call gdk_display_supports_composite() to check if
        setting a window as composited is supported before
        attempting to do so.
        """
        ...

    def set_cursor(self, cursor: _T.Optional[Cursor]) -> object:
        """
        Sets the default mouse pointer for a #GdkWindow.

        Note that @cursor must be for the same display as @window.

        Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to
        create the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR.
        Passing %NULL for the @cursor argument to gdk_window_set_cursor() means
        that @window will use the cursor of its parent window. Most windows
        should use this default.
        """
        ...

    def set_decorations(self, decorations: WMDecoration) -> object:
        """
        “Decorations” are the features the window manager adds to a toplevel #GdkWindow.
        This function sets the traditional Motif window manager hints that tell the
        window manager which decorations you would like your window to have.
        Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
        using the GDK function directly.

        The @decorations argument is the logical OR of the fields in
        the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
        mask, the other bits indicate which decorations should be turned off.
        If #GDK_DECOR_ALL is not included, then the other bits indicate
        which decorations should be turned on.

        Most window managers honor a decorations hint of 0 to disable all decorations,
        but very few honor all possible combinations of bits.
        """
        ...

    def set_device_cursor(self, device: Device, cursor: Cursor) -> object:
        """
        Sets a specific #GdkCursor for a given device when it gets inside @window.
        Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to create
        the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing
        %NULL for the @cursor argument to gdk_window_set_cursor() means that
        @window will use the cursor of its parent window. Most windows should
        use this default.
        """
        ...

    def set_device_events(self, device: Device, event_mask: EventMask) -> object:
        """
        Sets the event mask for a given device (Normally a floating device, not
        attached to any visible pointer) to @window. For example, an event mask
        including #GDK_BUTTON_PRESS_MASK means the window should report button
        press events. The event mask is the bitwise OR of values from the
        #GdkEventMask enumeration.

        See the [input handling overview][event-masks] for details.
        """
        ...

    def set_event_compression(self, event_compression: bool) -> object:
        """
        Determines whether or not extra unprocessed motion events in
        the event queue can be discarded. If %TRUE only the most recent
        event will be delivered.

        Some types of applications, e.g. paint programs, need to see all
        motion events and will benefit from turning off event compression.

        By default, event compression is enabled.
        """
        ...

    def set_events(self, event_mask: EventMask) -> object:
        """
        The event mask for a window determines which events will be reported
        for that window from all master input devices. For example, an event mask
        including #GDK_BUTTON_PRESS_MASK means the window should report button
        press events. The event mask is the bitwise OR of values from the
        #GdkEventMask enumeration.

        See the [input handling overview][event-masks] for details.
        """
        ...

    def set_focus_on_map(self, focus_on_map: bool) -> object:
        """
        Setting @focus_on_map to %FALSE hints the desktop environment that the
        window doesn’t want to receive input focus when it is mapped.
        focus_on_map should be turned off for windows that aren’t triggered
        interactively (such as popups from network activity).

        On X, it is the responsibility of the window manager to interpret
        this hint. Window managers following the freedesktop.org window
        manager extension specification should respect it.
        """
        ...

    def set_fullscreen_mode(self, mode: FullscreenMode) -> object:
        """
        Specifies whether the @window should span over all monitors (in a multi-head
        setup) or only the current monitor when in fullscreen mode.

        The @mode argument is from the #GdkFullscreenMode enumeration.
        If #GDK_FULLSCREEN_ON_ALL_MONITORS is specified, the fullscreen @window will
        span over all monitors from the #GdkScreen.

        On X11, searches through the list of monitors from the #GdkScreen the ones
        which delimit the 4 edges of the entire #GdkScreen and will ask the window
        manager to span the @window over these monitors.

        If the XINERAMA extension is not available or not usable, this function
        has no effect.

        Not all window managers support this, so you can’t rely on the fullscreen
        window to span over the multiple monitors when #GDK_FULLSCREEN_ON_ALL_MONITORS
        is specified.
        """
        ...

    def set_functions(self, functions: WMFunction) -> object:
        """
        Sets hints about the window management functions to make available
        via buttons on the window frame.

        On the X backend, this function sets the traditional Motif window
        manager hint for this purpose. However, few window managers do
        anything reliable or interesting with this hint. Many ignore it
        entirely.

        The @functions argument is the logical OR of values from the
        #GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
        then the other bits indicate which functions to disable; if
        it doesn’t include #GDK_FUNC_ALL, it indicates which functions to
        enable.
        """
        ...

    def set_geometry_hints(self, geometry: Geometry, geom_mask: WindowHints) -> object:
        """
        Sets the geometry hints for @window. Hints flagged in @geom_mask
        are set, hints not flagged in @geom_mask are unset.
        To unset all hints, use a @geom_mask of 0 and a @geometry of %NULL.

        This function provides hints to the windowing system about
        acceptable sizes for a toplevel window. The purpose of
        this is to constrain user resizing, but the windowing system
        will typically  (but is not required to) also constrain the
        current size of the window to the provided values and
        constrain programatic resizing via gdk_window_resize() or
        gdk_window_move_resize().

        Note that on X11, this effect has no effect on windows
        of type %GDK_WINDOW_TEMP or windows where override redirect
        has been turned on via gdk_window_set_override_redirect()
        since these windows are not resizable by the user.

        Since you can’t count on the windowing system doing the
        constraints for programmatic resizes, you should generally
        call gdk_window_constrain_size() yourself to determine
        appropriate sizes.
        """
        ...

    def set_group(self, leader: _T.Optional[Window]) -> object:
        """
        Sets the group leader window for @window. By default,
        GDK sets the group leader for all toplevel windows
        to a global window implicitly created by GDK. With this function
        you can override this default.

        The group leader window allows the window manager to distinguish
        all windows that belong to a single application. It may for example
        allow users to minimize/unminimize all windows belonging to an
        application at once. You should only set a non-default group window
        if your application pretends to be multiple applications.
        """
        ...

    def set_icon_list(self, pixbufs: GLib.List) -> object:
        """
        Sets a list of icons for the window. One of these will be used
        to represent the window when it has been iconified. The icon is
        usually shown in an icon box or some sort of task bar. Which icon
        size is shown depends on the window manager. The window manager
        can scale the icon  but setting several size icons can give better
        image quality since the window manager may only need to scale the
        icon by a small amount or not at all.

        Note that some platforms don't support window icons.
        """
        ...

    def set_icon_name(self, name: _T.Optional[str]) -> object:
        """
        Windows may have a name used while minimized, distinct from the
        name they display in their titlebar. Most of the time this is a bad
        idea from a user interface standpoint. But you can set such a name
        with this function, if you like.

        After calling this with a non-%NULL @name, calls to gdk_window_set_title()
        will not update the icon title.

        Using %NULL for @name unsets the icon title; further calls to
        gdk_window_set_title() will again update the icon title as well.

        Note that some platforms don't support window icons.
        """
        ...

    def set_invalidate_handler(self, handler: WindowInvalidateHandlerFunc) -> object:
        """
        Registers an invalidate handler for a specific window. This
        will get called whenever a region in the window or its children
        is invalidated.

        This can be used to record the invalidated region, which is
        useful if you are keeping an offscreen copy of some region
        and want to keep it up to date. You can also modify the
        invalidated region in case you’re doing some effect where
        e.g. a child widget appears in multiple places.
        """
        ...

    def set_keep_above(self, setting: bool) -> object:
        """
        Set if @window must be kept above other windows. If the
        window was already above, then this function does nothing.

        On X11, asks the window manager to keep @window above, if the window
        manager supports this operation. Not all window managers support
        this, and some deliberately ignore it or don’t have a concept of
        “keep above”; so you can’t rely on the window being kept above.
        But it will happen with most standard window managers,
        and GDK makes a best effort to get it to happen.
        """
        ...

    def set_keep_below(self, setting: bool) -> object:
        """
        Set if @window must be kept below other windows. If the
        window was already below, then this function does nothing.

        On X11, asks the window manager to keep @window below, if the window
        manager supports this operation. Not all window managers support
        this, and some deliberately ignore it or don’t have a concept of
        “keep below”; so you can’t rely on the window being kept below.
        But it will happen with most standard window managers,
        and GDK makes a best effort to get it to happen.
        """
        ...

    def set_modal_hint(self, modal: bool) -> object:
        """
        The application can use this hint to tell the window manager
        that a certain window has modal behaviour. The window manager
        can use this information to handle modal windows in a special
        way.

        You should only use this on windows for which you have
        previously called gdk_window_set_transient_for()
        """
        ...

    def set_opacity(self, opacity: float) -> object:
        """
        Set @window to render as partially transparent,
        with opacity 0 being fully transparent and 1 fully opaque. (Values
        of the opacity parameter are clamped to the [0,1] range.)

        For toplevel windows this depends on support from the windowing system
        that may not always be there. For instance, On X11, this works only on
        X screens with a compositing manager running. On Wayland, there is no
        per-window opacity value that the compositor would apply. Instead, use
        `gdk_window_set_opaque_region (window, NULL)` to tell the compositor
        that the entire window is (potentially) non-opaque, and draw your content
        with alpha, or use gtk_widget_set_opacity() to set an overall opacity
        for your widgets.

        For child windows this function only works for non-native windows.

        For setting up per-pixel alpha topelevels, see gdk_screen_get_rgba_visual(),
        and for non-toplevels, see gdk_window_set_composited().

        Support for non-toplevel windows was added in 3.8.
        """
        ...

    def set_opaque_region(self, region: _T.Optional[cairo.Region]) -> object:
        """
        For optimisation purposes, compositing window managers may
        like to not draw obscured regions of windows, or turn off blending
        during for these regions. With RGB windows with no transparency,
        this is just the shape of the window, but with ARGB32 windows, the
        compositor does not know what regions of the window are transparent
        or not.

        This function only works for toplevel windows.

        GTK+ will update this property automatically if
        the @window background is opaque, as we know where the opaque regions
        are. If your window background is not opaque, please update this
        property in your #GtkWidget::style-updated handler.
        """
        ...

    def set_override_redirect(self, override_redirect: bool) -> object:
        """
        An override redirect window is not under the control of the window manager.
        This means it won’t have a titlebar, won’t be minimizable, etc. - it will
        be entirely under the control of the application. The window manager
        can’t see the override redirect window at all.

        Override redirect should only be used for short-lived temporary
        windows, such as popup menus. #GtkMenu uses an override redirect
        window in its implementation, for example.
        """
        ...

    def set_pass_through(self, pass_through: bool) -> object:
        """
        Sets whether input to the window is passed through to the window
        below.

        The default value of this is %FALSE, which means that pointer
        events that happen inside the window are send first to the window,
        but if the event is not selected by the event mask then the event
        is sent to the parent window, and so on up the hierarchy.

        If @pass_through is %TRUE then such pointer events happen as if the
        window wasn't there at all, and thus will be sent first to any
        windows below @window. This is useful if the window is used in a
        transparent fashion. In the terminology of the web this would be called
        "pointer-events: none".

        Note that a window with @pass_through %TRUE can still have a subwindow
        without pass through, so you can get events on a subset of a window. And in
        that cases you would get the in-between related events such as the pointer
        enter/leave events on its way to the destination window.
        """
        ...

    def set_role(self, role: str) -> object:
        """
        When using GTK+, typically you should use gtk_window_set_role() instead
        of this low-level function.

        The window manager and session manager use a window’s role to
        distinguish it from other kinds of window in the same application.
        When an application is restarted after being saved in a previous
        session, all windows with the same title and role are treated as
        interchangeable.  So if you have two windows with the same title
        that should be distinguished for session management purposes, you
        should set the role on those windows. It doesn’t matter what string
        you use for the role, as long as you have a different role for each
        non-interchangeable kind of window.
        """
        ...

    def set_shadow_width(self, left: int, right: int, top: int, bottom: int) -> object:
        """
        Newer GTK+ windows using client-side decorations use extra geometry
        around their frames for effects like shadows and invisible borders.
        Window managers that want to maximize windows or snap to edges need
        to know where the extents of the actual frame lie, so that users
        don’t feel like windows are snapping against random invisible edges.

        Note that this property is automatically updated by GTK+, so this
        function should only be used by applications which do not use GTK+
        to create toplevel windows.
        """
        ...

    def set_skip_pager_hint(self, skips_pager: bool) -> object:
        """
        Toggles whether a window should appear in a pager (workspace
        switcher, or other desktop utility program that displays a small
        thumbnail representation of the windows on the desktop). If a
        window’s semantic type as specified with gdk_window_set_type_hint()
        already fully describes the window, this function should
        not be called in addition, instead you should
        allow the window to be treated according to standard policy for
        its semantic type.
        """
        ...

    def set_skip_taskbar_hint(self, skips_taskbar: bool) -> object:
        """
        Toggles whether a window should appear in a task list or window
        list. If a window’s semantic type as specified with
        gdk_window_set_type_hint() already fully describes the window, this
        function should not be called in addition,
        instead you should allow the window to be treated according to
        standard policy for its semantic type.
        """
        ...

    def set_source_events(self, source: InputSource, event_mask: EventMask) -> object:
        """
        Sets the event mask for any floating device (i.e. not attached to any
        visible pointer) that has the source defined as @source. This event
        mask will be applied both to currently existing, newly added devices
        after this call, and devices being attached/detached.
        """
        ...

    def set_startup_id(self, startup_id: str) -> object:
        """
        When using GTK+, typically you should use gtk_window_set_startup_id()
        instead of this low-level function.
        """
        ...

    def set_static_gravities(self, use_static: bool) -> bool:
        """
        Used to set the bit gravity of the given window to static, and flag
        it so all children get static subwindow gravity. This is used if you
        are implementing scary features that involve deep knowledge of the
        windowing system. Don’t worry about it.
        """
        ...

    def set_support_multidevice(self, support_multidevice: bool) -> object:
        """
        This function will enable multidevice features in @window.

        Multidevice aware windows will need to handle properly multiple,
        per device enter/leave events, device grabs and grab ownerships.
        """
        ...

    def set_title(self, title: str) -> object:
        """
        Sets the title of a toplevel window, to be displayed in the titlebar.
        If you haven’t explicitly set the icon name for the window
        (using gdk_window_set_icon_name()), the icon name will be set to
        @title as well. @title must be in UTF-8 encoding (as with all
        user-readable strings in GDK/GTK+). @title may not be %NULL.
        """
        ...

    def set_transient_for(self, parent: Window) -> object:
        """
        Indicates to the window manager that @window is a transient dialog
        associated with the application window @parent. This allows the
        window manager to do things like center @window on @parent and
        keep @window above @parent.

        See gtk_window_set_transient_for() if you’re using #GtkWindow or
        #GtkDialog.
        """
        ...

    def set_type_hint(self, hint: WindowTypeHint) -> object:
        """
        The application can use this call to provide a hint to the window
        manager about the functionality of a window. The window manager
        can use this information when determining the decoration and behaviour
        of the window.

        The hint must be set before the window is mapped.
        """
        ...

    def set_urgency_hint(self, urgent: bool) -> object:
        """
        Toggles whether a window needs the user's
        urgent attention.
        """
        ...

    def set_user_data(self, user_data: _T.Optional[GObject.Object]) -> object:
        """
        For most purposes this function is deprecated in favor of
        g_object_set_data(). However, for historical reasons GTK+ stores
        the #GtkWidget that owns a #GdkWindow as user data on the
        #GdkWindow. So, custom widget implementations should use
        this function for that. If GTK+ receives an event for a #GdkWindow,
        and the user data for the window is non-%NULL, GTK+ will assume the
        user data is a #GtkWidget, and forward the event to that widget.
        """
        ...

    def shape_combine_region(self, shape_region: _T.Optional[cairo.Region], offset_x: int, offset_y: int) -> object:
        """
        Makes pixels in @window outside @shape_region be transparent,
        so that the window may be nonrectangular.

        If @shape_region is %NULL, the shape will be unset, so the whole
        window will be opaque again. @offset_x and @offset_y are ignored
        if @shape_region is %NULL.

        On the X11 platform, this uses an X server extension which is
        widely available on most common platforms, but not available on
        very old X servers, and occasionally the implementation will be
        buggy. On servers without the shape extension, this function
        will do nothing.

        This function works on both toplevel and child windows.
        """
        ...

    def show(self) -> object:
        """
        Like gdk_window_show_unraised(), but also raises the window to the
        top of the window stack (moves the window to the front of the
        Z-order).

        This function maps a window so it’s visible onscreen. Its opposite
        is gdk_window_hide().

        When implementing a #GtkWidget, you should call this function on the widget's
        #GdkWindow as part of the “map” method.
        """
        ...

    def show_unraised(self) -> object:
        """
        Shows a #GdkWindow onscreen, but does not modify its stacking
        order. In contrast, gdk_window_show() will raise the window
        to the top of the window stack.

        On the X11 platform, in Xlib terms, this function calls
        XMapWindow() (it also updates some internal GDK state, which means
        that you can’t really use XMapWindow() directly on a GDK window).
        """
        ...

    def show_window_menu(self, event: Event) -> bool:
        """
        Asks the windowing system to show the window menu. The window menu
        is the menu shown when right-clicking the titlebar on traditional
        windows managed by the window manager. This is useful for windows
        using client-side decorations, activating it with a right-click
        on the window decorations.
        """
        ...

    def stick(self) -> object:
        """
        “Pins” a window such that it’s on all workspaces and does not scroll
        with viewports, for window managers that have scrollable viewports.
        (When using #GtkWindow, gtk_window_stick() may be more useful.)

        On the X11 platform, this function depends on window manager
        support, so may have no effect with many window managers. However,
        GDK will do the best it can to convince the window manager to stick
        the window. For window managers that don’t support this operation,
        there’s nothing you can do to force it to happen.
        """
        ...

    def thaw_toplevel_updates_libgtk_only(self) -> object:
        """
        Thaws a window frozen with
        gdk_window_freeze_toplevel_updates_libgtk_only().

        This function is not part of the GDK public API and is only
        for use by GTK+.
        """
        ...

    def thaw_updates(self) -> object:
        """
        Thaws a window frozen with gdk_window_freeze_updates().
        """
        ...

    def unfullscreen(self) -> object:
        """
        Moves the window out of fullscreen mode. If the window was not
        fullscreen, does nothing.

        On X11, asks the window manager to move @window out of the fullscreen
        state, if the window manager supports this operation. Not all
        window managers support this, and some deliberately ignore it or
        don’t have a concept of “fullscreen”; so you can’t rely on the
        unfullscreenification actually happening. But it will happen with
        most standard window managers, and GDK makes a best effort to get
        it to happen.
        """
        ...

    def unmaximize(self) -> object:
        """
        Unmaximizes the window. If the window wasn’t maximized, then this
        function does nothing.

        On X11, asks the window manager to unmaximize @window, if the
        window manager supports this operation. Not all window managers
        support this, and some deliberately ignore it or don’t have a
        concept of “maximized”; so you can’t rely on the unmaximization
        actually happening. But it will happen with most standard window
        managers, and GDK makes a best effort to get it to happen.

        On Windows, reliably unmaximizes the window.
        """
        ...

    def unstick(self) -> object:
        """
        Reverse operation for gdk_window_stick(); see gdk_window_stick(),
        and gtk_window_unstick().
        """
        ...

    def withdraw(self) -> object:
        """
        Withdraws a window (unmaps it and asks the window manager to forget about it).
        This function is not really useful as gdk_window_hide() automatically
        withdraws toplevel windows before hiding them.
        """
        ...


    ...


